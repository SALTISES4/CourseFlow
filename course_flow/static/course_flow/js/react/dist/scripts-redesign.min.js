(function () {
	'use strict';

	function _mergeNamespaces(n, m) {
		m.forEach(function (e) {
			e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
				if (k !== 'default' && !(k in n)) {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		});
		return Object.freeze(n);
	}

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function getAugmentedNamespace(n) {
	  if (n.__esModule) return n;
	  var f = n.default;
		if (typeof f == "function") {
			var a = function a () {
				if (this instanceof a) {
	        return Reflect.construct(f, arguments, this.constructor);
				}
				return f.apply(this, arguments);
			};
			a.prototype = f.prototype;
	  } else a = {};
	  Object.defineProperty(a, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	var react = {exports: {}};

	var react_production_min = {};

	/**
	 * @license React
	 * react.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReact_production_min;

	function requireReact_production_min () {
		if (hasRequiredReact_production_min) return react_production_min;
		hasRequiredReact_production_min = 1;
	var l=Symbol.for("react.element"),n=Symbol.for("react.portal"),p=Symbol.for("react.fragment"),q=Symbol.for("react.strict_mode"),r=Symbol.for("react.profiler"),t=Symbol.for("react.provider"),u=Symbol.for("react.context"),v=Symbol.for("react.forward_ref"),w=Symbol.for("react.suspense"),x=Symbol.for("react.memo"),y=Symbol.for("react.lazy"),z=Symbol.iterator;function A(a){if(null===a||"object"!==typeof a)return null;a=z&&a[z]||a["@@iterator"];return "function"===typeof a?a:null}
		var B={isMounted:function(){return !1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C=Object.assign,D={};function E(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B;}E.prototype.isReactComponent={};
		E.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,a,b,"setState");};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate");};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B;}var H=G.prototype=new F;
		H.constructor=G;C(H,E.prototype);H.isPureReactComponent=!0;var I=Array.isArray,J=Object.prototype.hasOwnProperty,K={current:null},L={key:!0,ref:!0,__self:!0,__source:!0};
		function M(a,b,e){var d,c={},k=null,h=null;if(null!=b)for(d in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=""+b.key),b)J.call(b,d)&&!L.hasOwnProperty(d)&&(c[d]=b[d]);var g=arguments.length-2;if(1===g)c.children=e;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];c.children=f;}if(a&&a.defaultProps)for(d in g=a.defaultProps,g)void 0===c[d]&&(c[d]=g[d]);return {$$typeof:l,type:a,key:k,ref:h,props:c,_owner:K.current}}
		function N(a,b){return {$$typeof:l,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return "object"===typeof a&&null!==a&&a.$$typeof===l}function escape(a){var b={"=":"=0",":":"=2"};return "$"+a.replace(/[=:]/g,function(a){return b[a]})}var P=/\/+/g;function Q(a,b){return "object"===typeof a&&null!==a&&null!=a.key?escape(""+a.key):b.toString(36)}
		function R(a,b,e,d,c){var k=typeof a;if("undefined"===k||"boolean"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case "string":case "number":h=!0;break;case "object":switch(a.$$typeof){case l:case n:h=!0;}}if(h)return h=a,c=c(h),a=""===d?"."+Q(h,0):d,I(c)?(e="",null!=a&&(e=a.replace(P,"$&/")+"/"),R(c,b,e,"",function(a){return a})):null!=c&&(O(c)&&(c=N(c,e+(!c.key||h&&h.key===c.key?"":(""+c.key).replace(P,"$&/")+"/")+a)),b.push(c)),1;h=0;d=""===d?".":d+":";if(I(a))for(var g=0;g<a.length;g++){k=
		a[g];var f=d+Q(k,g);h+=R(k,b,e,f,c);}else if(f=A(a),"function"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=d+Q(k,g++),h+=R(k,b,e,f,c);else if("object"===k)throw b=String(a),Error("Objects are not valid as a React child (found: "+("[object Object]"===b?"object with keys {"+Object.keys(a).join(", ")+"}":b)+"). If you meant to render a collection of children, use an array instead.");return h}
		function S(a,b,e){if(null==a)return a;var d=[],c=0;R(a,d,"","",function(a){return b.call(e,a,c++)});return d}function T(a){if(-1===a._status){var b=a._result;b=b();b.then(function(b){if(0===a._status||-1===a._status)a._status=1,a._result=b;},function(b){if(0===a._status||-1===a._status)a._status=2,a._result=b;});-1===a._status&&(a._status=0,a._result=b);}if(1===a._status)return a._result.default;throw a._result;}
		var U={current:null},V={transition:null},W={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:V,ReactCurrentOwner:K};react_production_min.Children={map:S,forEach:function(a,b,e){S(a,function(){b.apply(this,arguments);},e);},count:function(a){var b=0;S(a,function(){b++;});return b},toArray:function(a){return S(a,function(a){return a})||[]},only:function(a){if(!O(a))throw Error("React.Children.only expected to receive a single React element child.");return a}};react_production_min.Component=E;react_production_min.Fragment=p;
		react_production_min.Profiler=r;react_production_min.PureComponent=G;react_production_min.StrictMode=q;react_production_min.Suspense=w;react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W;
		react_production_min.cloneElement=function(a,b,e){if(null===a||void 0===a)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+a+".");var d=C({},a.props),c=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=K.current);void 0!==b.key&&(c=""+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)J.call(b,f)&&!L.hasOwnProperty(f)&&(d[f]=void 0===b[f]&&void 0!==g?g[f]:b[f]);}var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){g=Array(f);
		for(var m=0;m<f;m++)g[m]=arguments[m+2];d.children=g;}return {$$typeof:l,type:a.type,key:c,ref:k,props:d,_owner:h}};react_production_min.createContext=function(a){a={$$typeof:u,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};a.Provider={$$typeof:t,_context:a};return a.Consumer=a};react_production_min.createElement=M;react_production_min.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};react_production_min.createRef=function(){return {current:null}};
		react_production_min.forwardRef=function(a){return {$$typeof:v,render:a}};react_production_min.isValidElement=O;react_production_min.lazy=function(a){return {$$typeof:y,_payload:{_status:-1,_result:a},_init:T}};react_production_min.memo=function(a,b){return {$$typeof:x,type:a,compare:void 0===b?null:b}};react_production_min.startTransition=function(a){var b=V.transition;V.transition={};try{a();}finally{V.transition=b;}};react_production_min.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.");};
		react_production_min.useCallback=function(a,b){return U.current.useCallback(a,b)};react_production_min.useContext=function(a){return U.current.useContext(a)};react_production_min.useDebugValue=function(){};react_production_min.useDeferredValue=function(a){return U.current.useDeferredValue(a)};react_production_min.useEffect=function(a,b){return U.current.useEffect(a,b)};react_production_min.useId=function(){return U.current.useId()};react_production_min.useImperativeHandle=function(a,b,e){return U.current.useImperativeHandle(a,b,e)};
		react_production_min.useInsertionEffect=function(a,b){return U.current.useInsertionEffect(a,b)};react_production_min.useLayoutEffect=function(a,b){return U.current.useLayoutEffect(a,b)};react_production_min.useMemo=function(a,b){return U.current.useMemo(a,b)};react_production_min.useReducer=function(a,b,e){return U.current.useReducer(a,b,e)};react_production_min.useRef=function(a){return U.current.useRef(a)};react_production_min.useState=function(a){return U.current.useState(a)};react_production_min.useSyncExternalStore=function(a,b,e){return U.current.useSyncExternalStore(a,b,e)};
		react_production_min.useTransition=function(){return U.current.useTransition()};react_production_min.version="18.2.0";
		return react_production_min;
	}

	var react_development = {exports: {}};

	/**
	 * @license React
	 * react.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	react_development.exports;

	var hasRequiredReact_development;

	function requireReact_development () {
		if (hasRequiredReact_development) return react_development.exports;
		hasRequiredReact_development = 1;
		(function (module, exports) {

			if (process.env.NODE_ENV !== "production") {
			  (function() {

			/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
			if (
			  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
			  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
			    'function'
			) {
			  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
			}
			          var ReactVersion = '18.2.0';

			// ATTENTION
			// When adding new symbols to this file,
			// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
			// The Symbol used to tag the ReactElement-like types.
			var REACT_ELEMENT_TYPE = Symbol.for('react.element');
			var REACT_PORTAL_TYPE = Symbol.for('react.portal');
			var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
			var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
			var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
			var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
			var REACT_CONTEXT_TYPE = Symbol.for('react.context');
			var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
			var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
			var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
			var REACT_MEMO_TYPE = Symbol.for('react.memo');
			var REACT_LAZY_TYPE = Symbol.for('react.lazy');
			var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
			var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
			var FAUX_ITERATOR_SYMBOL = '@@iterator';
			function getIteratorFn(maybeIterable) {
			  if (maybeIterable === null || typeof maybeIterable !== 'object') {
			    return null;
			  }

			  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

			  if (typeof maybeIterator === 'function') {
			    return maybeIterator;
			  }

			  return null;
			}

			/**
			 * Keeps track of the current dispatcher.
			 */
			var ReactCurrentDispatcher = {
			  /**
			   * @internal
			   * @type {ReactComponent}
			   */
			  current: null
			};

			/**
			 * Keeps track of the current batch's configuration such as how long an update
			 * should suspend for if it needs to.
			 */
			var ReactCurrentBatchConfig = {
			  transition: null
			};

			var ReactCurrentActQueue = {
			  current: null,
			  // Used to reproduce behavior of `batchedUpdates` in legacy mode.
			  isBatchingLegacy: false,
			  didScheduleLegacyUpdate: false
			};

			/**
			 * Keeps track of the current owner.
			 *
			 * The current owner is the component who should own any components that are
			 * currently being constructed.
			 */
			var ReactCurrentOwner = {
			  /**
			   * @internal
			   * @type {ReactComponent}
			   */
			  current: null
			};

			var ReactDebugCurrentFrame = {};
			var currentExtraStackFrame = null;
			function setExtraStackFrame(stack) {
			  {
			    currentExtraStackFrame = stack;
			  }
			}

			{
			  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
			    {
			      currentExtraStackFrame = stack;
			    }
			  }; // Stack implementation injected by the current renderer.


			  ReactDebugCurrentFrame.getCurrentStack = null;

			  ReactDebugCurrentFrame.getStackAddendum = function () {
			    var stack = ''; // Add an extra top frame while an element is being validated

			    if (currentExtraStackFrame) {
			      stack += currentExtraStackFrame;
			    } // Delegate to the injected renderer-specific implementation


			    var impl = ReactDebugCurrentFrame.getCurrentStack;

			    if (impl) {
			      stack += impl() || '';
			    }

			    return stack;
			  };
			}

			// -----------------------------------------------------------------------------

			var enableScopeAPI = false; // Experimental Create Event Handle API.
			var enableCacheElement = false;
			var enableTransitionTracing = false; // No known bugs, but needs performance testing

			var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
			// stuff. Intended to enable React core members to more easily debug scheduling
			// issues in DEV builds.

			var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

			var ReactSharedInternals = {
			  ReactCurrentDispatcher: ReactCurrentDispatcher,
			  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
			  ReactCurrentOwner: ReactCurrentOwner
			};

			{
			  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
			  ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
			}

			// by calls to these methods by a Babel plugin.
			//
			// In PROD (or in packages without access to React internals),
			// they are left as they are instead.

			function warn(format) {
			  {
			    {
			      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
			        args[_key - 1] = arguments[_key];
			      }

			      printWarning('warn', format, args);
			    }
			  }
			}
			function error(format) {
			  {
			    {
			      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
			        args[_key2 - 1] = arguments[_key2];
			      }

			      printWarning('error', format, args);
			    }
			  }
			}

			function printWarning(level, format, args) {
			  // When changing this logic, you might want to also
			  // update consoleWithStackDev.www.js as well.
			  {
			    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
			    var stack = ReactDebugCurrentFrame.getStackAddendum();

			    if (stack !== '') {
			      format += '%s';
			      args = args.concat([stack]);
			    } // eslint-disable-next-line react-internal/safe-string-coercion


			    var argsWithFormat = args.map(function (item) {
			      return String(item);
			    }); // Careful: RN currently depends on this prefix

			    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
			    // breaks IE9: https://github.com/facebook/react/issues/13610
			    // eslint-disable-next-line react-internal/no-production-logging

			    Function.prototype.apply.call(console[level], console, argsWithFormat);
			  }
			}

			var didWarnStateUpdateForUnmountedComponent = {};

			function warnNoop(publicInstance, callerName) {
			  {
			    var _constructor = publicInstance.constructor;
			    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
			    var warningKey = componentName + "." + callerName;

			    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
			      return;
			    }

			    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

			    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
			  }
			}
			/**
			 * This is the abstract API for an update queue.
			 */


			var ReactNoopUpdateQueue = {
			  /**
			   * Checks whether or not this composite component is mounted.
			   * @param {ReactClass} publicInstance The instance we want to test.
			   * @return {boolean} True if mounted, false otherwise.
			   * @protected
			   * @final
			   */
			  isMounted: function (publicInstance) {
			    return false;
			  },

			  /**
			   * Forces an update. This should only be invoked when it is known with
			   * certainty that we are **not** in a DOM transaction.
			   *
			   * You may want to call this when you know that some deeper aspect of the
			   * component's state has changed but `setState` was not called.
			   *
			   * This will not invoke `shouldComponentUpdate`, but it will invoke
			   * `componentWillUpdate` and `componentDidUpdate`.
			   *
			   * @param {ReactClass} publicInstance The instance that should rerender.
			   * @param {?function} callback Called after component is updated.
			   * @param {?string} callerName name of the calling function in the public API.
			   * @internal
			   */
			  enqueueForceUpdate: function (publicInstance, callback, callerName) {
			    warnNoop(publicInstance, 'forceUpdate');
			  },

			  /**
			   * Replaces all of the state. Always use this or `setState` to mutate state.
			   * You should treat `this.state` as immutable.
			   *
			   * There is no guarantee that `this.state` will be immediately updated, so
			   * accessing `this.state` after calling this method may return the old value.
			   *
			   * @param {ReactClass} publicInstance The instance that should rerender.
			   * @param {object} completeState Next state.
			   * @param {?function} callback Called after component is updated.
			   * @param {?string} callerName name of the calling function in the public API.
			   * @internal
			   */
			  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
			    warnNoop(publicInstance, 'replaceState');
			  },

			  /**
			   * Sets a subset of the state. This only exists because _pendingState is
			   * internal. This provides a merging strategy that is not available to deep
			   * properties which is confusing. TODO: Expose pendingState or don't use it
			   * during the merge.
			   *
			   * @param {ReactClass} publicInstance The instance that should rerender.
			   * @param {object} partialState Next partial state to be merged with state.
			   * @param {?function} callback Called after component is updated.
			   * @param {?string} Name of the calling function in the public API.
			   * @internal
			   */
			  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
			    warnNoop(publicInstance, 'setState');
			  }
			};

			var assign = Object.assign;

			var emptyObject = {};

			{
			  Object.freeze(emptyObject);
			}
			/**
			 * Base class helpers for the updating state of a component.
			 */


			function Component(props, context, updater) {
			  this.props = props;
			  this.context = context; // If a component has string refs, we will assign a different object later.

			  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
			  // renderer.

			  this.updater = updater || ReactNoopUpdateQueue;
			}

			Component.prototype.isReactComponent = {};
			/**
			 * Sets a subset of the state. Always use this to mutate
			 * state. You should treat `this.state` as immutable.
			 *
			 * There is no guarantee that `this.state` will be immediately updated, so
			 * accessing `this.state` after calling this method may return the old value.
			 *
			 * There is no guarantee that calls to `setState` will run synchronously,
			 * as they may eventually be batched together.  You can provide an optional
			 * callback that will be executed when the call to setState is actually
			 * completed.
			 *
			 * When a function is provided to setState, it will be called at some point in
			 * the future (not synchronously). It will be called with the up to date
			 * component arguments (state, props, context). These values can be different
			 * from this.* because your function may be called after receiveProps but before
			 * shouldComponentUpdate, and this new state, props, and context will not yet be
			 * assigned to this.
			 *
			 * @param {object|function} partialState Next partial state or function to
			 *        produce next partial state to be merged with current state.
			 * @param {?function} callback Called after state is updated.
			 * @final
			 * @protected
			 */

			Component.prototype.setState = function (partialState, callback) {
			  if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {
			    throw new Error('setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');
			  }

			  this.updater.enqueueSetState(this, partialState, callback, 'setState');
			};
			/**
			 * Forces an update. This should only be invoked when it is known with
			 * certainty that we are **not** in a DOM transaction.
			 *
			 * You may want to call this when you know that some deeper aspect of the
			 * component's state has changed but `setState` was not called.
			 *
			 * This will not invoke `shouldComponentUpdate`, but it will invoke
			 * `componentWillUpdate` and `componentDidUpdate`.
			 *
			 * @param {?function} callback Called after update is complete.
			 * @final
			 * @protected
			 */


			Component.prototype.forceUpdate = function (callback) {
			  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
			};
			/**
			 * Deprecated APIs. These APIs used to exist on classic React classes but since
			 * we would like to deprecate them, we're not going to move them over to this
			 * modern base class. Instead, we define a getter that warns if it's accessed.
			 */


			{
			  var deprecatedAPIs = {
			    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
			    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
			  };

			  var defineDeprecationWarning = function (methodName, info) {
			    Object.defineProperty(Component.prototype, methodName, {
			      get: function () {
			        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

			        return undefined;
			      }
			    });
			  };

			  for (var fnName in deprecatedAPIs) {
			    if (deprecatedAPIs.hasOwnProperty(fnName)) {
			      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
			    }
			  }
			}

			function ComponentDummy() {}

			ComponentDummy.prototype = Component.prototype;
			/**
			 * Convenience component with default shallow equality check for sCU.
			 */

			function PureComponent(props, context, updater) {
			  this.props = props;
			  this.context = context; // If a component has string refs, we will assign a different object later.

			  this.refs = emptyObject;
			  this.updater = updater || ReactNoopUpdateQueue;
			}

			var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
			pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

			assign(pureComponentPrototype, Component.prototype);
			pureComponentPrototype.isPureReactComponent = true;

			// an immutable object with a single mutable value
			function createRef() {
			  var refObject = {
			    current: null
			  };

			  {
			    Object.seal(refObject);
			  }

			  return refObject;
			}

			var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

			function isArray(a) {
			  return isArrayImpl(a);
			}

			/*
			 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
			 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
			 *
			 * The functions in this module will throw an easier-to-understand,
			 * easier-to-debug exception with a clear errors message message explaining the
			 * problem. (Instead of a confusing exception thrown inside the implementation
			 * of the `value` object).
			 */
			// $FlowFixMe only called in DEV, so void return is not possible.
			function typeName(value) {
			  {
			    // toStringTag is needed for namespaced types like Temporal.Instant
			    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
			    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
			    return type;
			  }
			} // $FlowFixMe only called in DEV, so void return is not possible.


			function willCoercionThrow(value) {
			  {
			    try {
			      testStringCoercion(value);
			      return false;
			    } catch (e) {
			      return true;
			    }
			  }
			}

			function testStringCoercion(value) {
			  // If you ended up here by following an exception call stack, here's what's
			  // happened: you supplied an object or symbol value to React (as a prop, key,
			  // DOM attribute, CSS property, string ref, etc.) and when React tried to
			  // coerce it to a string using `'' + value`, an exception was thrown.
			  //
			  // The most common types that will cause this exception are `Symbol` instances
			  // and Temporal objects like `Temporal.Instant`. But any object that has a
			  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
			  // exception. (Library authors do this to prevent users from using built-in
			  // numeric operators like `+` or comparison operators like `>=` because custom
			  // methods are needed to perform accurate arithmetic or comparison.)
			  //
			  // To fix the problem, coerce this object or symbol value to a string before
			  // passing it to React. The most reliable way is usually `String(value)`.
			  //
			  // To find which value is throwing, check the browser or debugger console.
			  // Before this exception was thrown, there should be `console.error` output
			  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
			  // problem and how that type was used: key, atrribute, input value prop, etc.
			  // In most cases, this console output also shows the component and its
			  // ancestor components where the exception happened.
			  //
			  // eslint-disable-next-line react-internal/safe-string-coercion
			  return '' + value;
			}
			function checkKeyStringCoercion(value) {
			  {
			    if (willCoercionThrow(value)) {
			      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

			      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
			    }
			  }
			}

			function getWrappedName(outerType, innerType, wrapperName) {
			  var displayName = outerType.displayName;

			  if (displayName) {
			    return displayName;
			  }

			  var functionName = innerType.displayName || innerType.name || '';
			  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
			} // Keep in sync with react-reconciler/getComponentNameFromFiber


			function getContextName(type) {
			  return type.displayName || 'Context';
			} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


			function getComponentNameFromType(type) {
			  if (type == null) {
			    // Host root, text node or just invalid type.
			    return null;
			  }

			  {
			    if (typeof type.tag === 'number') {
			      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
			    }
			  }

			  if (typeof type === 'function') {
			    return type.displayName || type.name || null;
			  }

			  if (typeof type === 'string') {
			    return type;
			  }

			  switch (type) {
			    case REACT_FRAGMENT_TYPE:
			      return 'Fragment';

			    case REACT_PORTAL_TYPE:
			      return 'Portal';

			    case REACT_PROFILER_TYPE:
			      return 'Profiler';

			    case REACT_STRICT_MODE_TYPE:
			      return 'StrictMode';

			    case REACT_SUSPENSE_TYPE:
			      return 'Suspense';

			    case REACT_SUSPENSE_LIST_TYPE:
			      return 'SuspenseList';

			  }

			  if (typeof type === 'object') {
			    switch (type.$$typeof) {
			      case REACT_CONTEXT_TYPE:
			        var context = type;
			        return getContextName(context) + '.Consumer';

			      case REACT_PROVIDER_TYPE:
			        var provider = type;
			        return getContextName(provider._context) + '.Provider';

			      case REACT_FORWARD_REF_TYPE:
			        return getWrappedName(type, type.render, 'ForwardRef');

			      case REACT_MEMO_TYPE:
			        var outerName = type.displayName || null;

			        if (outerName !== null) {
			          return outerName;
			        }

			        return getComponentNameFromType(type.type) || 'Memo';

			      case REACT_LAZY_TYPE:
			        {
			          var lazyComponent = type;
			          var payload = lazyComponent._payload;
			          var init = lazyComponent._init;

			          try {
			            return getComponentNameFromType(init(payload));
			          } catch (x) {
			            return null;
			          }
			        }

			      // eslint-disable-next-line no-fallthrough
			    }
			  }

			  return null;
			}

			var hasOwnProperty = Object.prototype.hasOwnProperty;

			var RESERVED_PROPS = {
			  key: true,
			  ref: true,
			  __self: true,
			  __source: true
			};
			var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

			{
			  didWarnAboutStringRefs = {};
			}

			function hasValidRef(config) {
			  {
			    if (hasOwnProperty.call(config, 'ref')) {
			      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

			      if (getter && getter.isReactWarning) {
			        return false;
			      }
			    }
			  }

			  return config.ref !== undefined;
			}

			function hasValidKey(config) {
			  {
			    if (hasOwnProperty.call(config, 'key')) {
			      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

			      if (getter && getter.isReactWarning) {
			        return false;
			      }
			    }
			  }

			  return config.key !== undefined;
			}

			function defineKeyPropWarningGetter(props, displayName) {
			  var warnAboutAccessingKey = function () {
			    {
			      if (!specialPropKeyWarningShown) {
			        specialPropKeyWarningShown = true;

			        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
			      }
			    }
			  };

			  warnAboutAccessingKey.isReactWarning = true;
			  Object.defineProperty(props, 'key', {
			    get: warnAboutAccessingKey,
			    configurable: true
			  });
			}

			function defineRefPropWarningGetter(props, displayName) {
			  var warnAboutAccessingRef = function () {
			    {
			      if (!specialPropRefWarningShown) {
			        specialPropRefWarningShown = true;

			        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
			      }
			    }
			  };

			  warnAboutAccessingRef.isReactWarning = true;
			  Object.defineProperty(props, 'ref', {
			    get: warnAboutAccessingRef,
			    configurable: true
			  });
			}

			function warnIfStringRefCannotBeAutoConverted(config) {
			  {
			    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
			      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);

			      if (!didWarnAboutStringRefs[componentName]) {
			        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);

			        didWarnAboutStringRefs[componentName] = true;
			      }
			    }
			  }
			}
			/**
			 * Factory method to create a new React element. This no longer adheres to
			 * the class pattern, so do not use new to call it. Also, instanceof check
			 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
			 * if something is a React Element.
			 *
			 * @param {*} type
			 * @param {*} props
			 * @param {*} key
			 * @param {string|object} ref
			 * @param {*} owner
			 * @param {*} self A *temporary* helper to detect places where `this` is
			 * different from the `owner` when React.createElement is called, so that we
			 * can warn. We want to get rid of owner and replace string `ref`s with arrow
			 * functions, and as long as `this` and owner are the same, there will be no
			 * change in behavior.
			 * @param {*} source An annotation object (added by a transpiler or otherwise)
			 * indicating filename, line number, and/or other information.
			 * @internal
			 */


			var ReactElement = function (type, key, ref, self, source, owner, props) {
			  var element = {
			    // This tag allows us to uniquely identify this as a React Element
			    $$typeof: REACT_ELEMENT_TYPE,
			    // Built-in properties that belong on the element
			    type: type,
			    key: key,
			    ref: ref,
			    props: props,
			    // Record the component responsible for creating this element.
			    _owner: owner
			  };

			  {
			    // The validation flag is currently mutative. We put it on
			    // an external backing store so that we can freeze the whole object.
			    // This can be replaced with a WeakMap once they are implemented in
			    // commonly used development environments.
			    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
			    // the validation flag non-enumerable (where possible, which should
			    // include every environment we run tests in), so the test framework
			    // ignores it.

			    Object.defineProperty(element._store, 'validated', {
			      configurable: false,
			      enumerable: false,
			      writable: true,
			      value: false
			    }); // self and source are DEV only properties.

			    Object.defineProperty(element, '_self', {
			      configurable: false,
			      enumerable: false,
			      writable: false,
			      value: self
			    }); // Two elements created in two different places should be considered
			    // equal for testing purposes and therefore we hide it from enumeration.

			    Object.defineProperty(element, '_source', {
			      configurable: false,
			      enumerable: false,
			      writable: false,
			      value: source
			    });

			    if (Object.freeze) {
			      Object.freeze(element.props);
			      Object.freeze(element);
			    }
			  }

			  return element;
			};
			/**
			 * Create and return a new ReactElement of the given type.
			 * See https://reactjs.org/docs/react-api.html#createelement
			 */

			function createElement(type, config, children) {
			  var propName; // Reserved names are extracted

			  var props = {};
			  var key = null;
			  var ref = null;
			  var self = null;
			  var source = null;

			  if (config != null) {
			    if (hasValidRef(config)) {
			      ref = config.ref;

			      {
			        warnIfStringRefCannotBeAutoConverted(config);
			      }
			    }

			    if (hasValidKey(config)) {
			      {
			        checkKeyStringCoercion(config.key);
			      }

			      key = '' + config.key;
			    }

			    self = config.__self === undefined ? null : config.__self;
			    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

			    for (propName in config) {
			      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
			        props[propName] = config[propName];
			      }
			    }
			  } // Children can be more than one argument, and those are transferred onto
			  // the newly allocated props object.


			  var childrenLength = arguments.length - 2;

			  if (childrenLength === 1) {
			    props.children = children;
			  } else if (childrenLength > 1) {
			    var childArray = Array(childrenLength);

			    for (var i = 0; i < childrenLength; i++) {
			      childArray[i] = arguments[i + 2];
			    }

			    {
			      if (Object.freeze) {
			        Object.freeze(childArray);
			      }
			    }

			    props.children = childArray;
			  } // Resolve default props


			  if (type && type.defaultProps) {
			    var defaultProps = type.defaultProps;

			    for (propName in defaultProps) {
			      if (props[propName] === undefined) {
			        props[propName] = defaultProps[propName];
			      }
			    }
			  }

			  {
			    if (key || ref) {
			      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

			      if (key) {
			        defineKeyPropWarningGetter(props, displayName);
			      }

			      if (ref) {
			        defineRefPropWarningGetter(props, displayName);
			      }
			    }
			  }

			  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
			}
			function cloneAndReplaceKey(oldElement, newKey) {
			  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
			  return newElement;
			}
			/**
			 * Clone and return a new ReactElement using element as the starting point.
			 * See https://reactjs.org/docs/react-api.html#cloneelement
			 */

			function cloneElement(element, config, children) {
			  if (element === null || element === undefined) {
			    throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
			  }

			  var propName; // Original props are copied

			  var props = assign({}, element.props); // Reserved names are extracted

			  var key = element.key;
			  var ref = element.ref; // Self is preserved since the owner is preserved.

			  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
			  // transpiler, and the original source is probably a better indicator of the
			  // true owner.

			  var source = element._source; // Owner will be preserved, unless ref is overridden

			  var owner = element._owner;

			  if (config != null) {
			    if (hasValidRef(config)) {
			      // Silently steal the ref from the parent.
			      ref = config.ref;
			      owner = ReactCurrentOwner.current;
			    }

			    if (hasValidKey(config)) {
			      {
			        checkKeyStringCoercion(config.key);
			      }

			      key = '' + config.key;
			    } // Remaining properties override existing props


			    var defaultProps;

			    if (element.type && element.type.defaultProps) {
			      defaultProps = element.type.defaultProps;
			    }

			    for (propName in config) {
			      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
			        if (config[propName] === undefined && defaultProps !== undefined) {
			          // Resolve default props
			          props[propName] = defaultProps[propName];
			        } else {
			          props[propName] = config[propName];
			        }
			      }
			    }
			  } // Children can be more than one argument, and those are transferred onto
			  // the newly allocated props object.


			  var childrenLength = arguments.length - 2;

			  if (childrenLength === 1) {
			    props.children = children;
			  } else if (childrenLength > 1) {
			    var childArray = Array(childrenLength);

			    for (var i = 0; i < childrenLength; i++) {
			      childArray[i] = arguments[i + 2];
			    }

			    props.children = childArray;
			  }

			  return ReactElement(element.type, key, ref, self, source, owner, props);
			}
			/**
			 * Verifies the object is a ReactElement.
			 * See https://reactjs.org/docs/react-api.html#isvalidelement
			 * @param {?object} object
			 * @return {boolean} True if `object` is a ReactElement.
			 * @final
			 */

			function isValidElement(object) {
			  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
			}

			var SEPARATOR = '.';
			var SUBSEPARATOR = ':';
			/**
			 * Escape and wrap key so it is safe to use as a reactid
			 *
			 * @param {string} key to be escaped.
			 * @return {string} the escaped key.
			 */

			function escape(key) {
			  var escapeRegex = /[=:]/g;
			  var escaperLookup = {
			    '=': '=0',
			    ':': '=2'
			  };
			  var escapedString = key.replace(escapeRegex, function (match) {
			    return escaperLookup[match];
			  });
			  return '$' + escapedString;
			}
			/**
			 * TODO: Test that a single child and an array with one item have the same key
			 * pattern.
			 */


			var didWarnAboutMaps = false;
			var userProvidedKeyEscapeRegex = /\/+/g;

			function escapeUserProvidedKey(text) {
			  return text.replace(userProvidedKeyEscapeRegex, '$&/');
			}
			/**
			 * Generate a key string that identifies a element within a set.
			 *
			 * @param {*} element A element that could contain a manual key.
			 * @param {number} index Index that is used if a manual key is not provided.
			 * @return {string}
			 */


			function getElementKey(element, index) {
			  // Do some typechecking here since we call this blindly. We want to ensure
			  // that we don't block potential future ES APIs.
			  if (typeof element === 'object' && element !== null && element.key != null) {
			    // Explicit key
			    {
			      checkKeyStringCoercion(element.key);
			    }

			    return escape('' + element.key);
			  } // Implicit key determined by the index in the set


			  return index.toString(36);
			}

			function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
			  var type = typeof children;

			  if (type === 'undefined' || type === 'boolean') {
			    // All of the above are perceived as null.
			    children = null;
			  }

			  var invokeCallback = false;

			  if (children === null) {
			    invokeCallback = true;
			  } else {
			    switch (type) {
			      case 'string':
			      case 'number':
			        invokeCallback = true;
			        break;

			      case 'object':
			        switch (children.$$typeof) {
			          case REACT_ELEMENT_TYPE:
			          case REACT_PORTAL_TYPE:
			            invokeCallback = true;
			        }

			    }
			  }

			  if (invokeCallback) {
			    var _child = children;
			    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
			    // so that it's consistent if the number of children grows:

			    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;

			    if (isArray(mappedChild)) {
			      var escapedChildKey = '';

			      if (childKey != null) {
			        escapedChildKey = escapeUserProvidedKey(childKey) + '/';
			      }

			      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
			        return c;
			      });
			    } else if (mappedChild != null) {
			      if (isValidElement(mappedChild)) {
			        {
			          // The `if` statement here prevents auto-disabling of the safe
			          // coercion ESLint rule, so we must manually disable it below.
			          // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
			          if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
			            checkKeyStringCoercion(mappedChild.key);
			          }
			        }

			        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
			        // traverseAllChildren used to do for objects as children
			        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
			        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
			        // eslint-disable-next-line react-internal/safe-string-coercion
			        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
			      }

			      array.push(mappedChild);
			    }

			    return 1;
			  }

			  var child;
			  var nextName;
			  var subtreeCount = 0; // Count of children found in the current subtree.

			  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

			  if (isArray(children)) {
			    for (var i = 0; i < children.length; i++) {
			      child = children[i];
			      nextName = nextNamePrefix + getElementKey(child, i);
			      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
			    }
			  } else {
			    var iteratorFn = getIteratorFn(children);

			    if (typeof iteratorFn === 'function') {
			      var iterableChildren = children;

			      {
			        // Warn about using Maps as children
			        if (iteratorFn === iterableChildren.entries) {
			          if (!didWarnAboutMaps) {
			            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
			          }

			          didWarnAboutMaps = true;
			        }
			      }

			      var iterator = iteratorFn.call(iterableChildren);
			      var step;
			      var ii = 0;

			      while (!(step = iterator.next()).done) {
			        child = step.value;
			        nextName = nextNamePrefix + getElementKey(child, ii++);
			        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
			      }
			    } else if (type === 'object') {
			      // eslint-disable-next-line react-internal/safe-string-coercion
			      var childrenString = String(children);
			      throw new Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
			    }
			  }

			  return subtreeCount;
			}

			/**
			 * Maps children that are typically specified as `props.children`.
			 *
			 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
			 *
			 * The provided mapFunction(child, index) will be called for each
			 * leaf child.
			 *
			 * @param {?*} children Children tree container.
			 * @param {function(*, int)} func The map function.
			 * @param {*} context Context for mapFunction.
			 * @return {object} Object containing the ordered map of results.
			 */
			function mapChildren(children, func, context) {
			  if (children == null) {
			    return children;
			  }

			  var result = [];
			  var count = 0;
			  mapIntoArray(children, result, '', '', function (child) {
			    return func.call(context, child, count++);
			  });
			  return result;
			}
			/**
			 * Count the number of children that are typically specified as
			 * `props.children`.
			 *
			 * See https://reactjs.org/docs/react-api.html#reactchildrencount
			 *
			 * @param {?*} children Children tree container.
			 * @return {number} The number of children.
			 */


			function countChildren(children) {
			  var n = 0;
			  mapChildren(children, function () {
			    n++; // Don't return anything
			  });
			  return n;
			}

			/**
			 * Iterates through children that are typically specified as `props.children`.
			 *
			 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
			 *
			 * The provided forEachFunc(child, index) will be called for each
			 * leaf child.
			 *
			 * @param {?*} children Children tree container.
			 * @param {function(*, int)} forEachFunc
			 * @param {*} forEachContext Context for forEachContext.
			 */
			function forEachChildren(children, forEachFunc, forEachContext) {
			  mapChildren(children, function () {
			    forEachFunc.apply(this, arguments); // Don't return anything.
			  }, forEachContext);
			}
			/**
			 * Flatten a children object (typically specified as `props.children`) and
			 * return an array with appropriately re-keyed children.
			 *
			 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
			 */


			function toArray(children) {
			  return mapChildren(children, function (child) {
			    return child;
			  }) || [];
			}
			/**
			 * Returns the first child in a collection of children and verifies that there
			 * is only one child in the collection.
			 *
			 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
			 *
			 * The current implementation of this function assumes that a single child gets
			 * passed without a wrapper, but the purpose of this helper function is to
			 * abstract away the particular structure of children.
			 *
			 * @param {?object} children Child collection structure.
			 * @return {ReactElement} The first and only `ReactElement` contained in the
			 * structure.
			 */


			function onlyChild(children) {
			  if (!isValidElement(children)) {
			    throw new Error('React.Children.only expected to receive a single React element child.');
			  }

			  return children;
			}

			function createContext(defaultValue) {
			  // TODO: Second argument used to be an optional `calculateChangedBits`
			  // function. Warn to reserve for future use?
			  var context = {
			    $$typeof: REACT_CONTEXT_TYPE,
			    // As a workaround to support multiple concurrent renderers, we categorize
			    // some renderers as primary and others as secondary. We only expect
			    // there to be two concurrent renderers at most: React Native (primary) and
			    // Fabric (secondary); React DOM (primary) and React ART (secondary).
			    // Secondary renderers store their context values on separate fields.
			    _currentValue: defaultValue,
			    _currentValue2: defaultValue,
			    // Used to track how many concurrent renderers this context currently
			    // supports within in a single renderer. Such as parallel server rendering.
			    _threadCount: 0,
			    // These are circular
			    Provider: null,
			    Consumer: null,
			    // Add these to use same hidden class in VM as ServerContext
			    _defaultValue: null,
			    _globalName: null
			  };
			  context.Provider = {
			    $$typeof: REACT_PROVIDER_TYPE,
			    _context: context
			  };
			  var hasWarnedAboutUsingNestedContextConsumers = false;
			  var hasWarnedAboutUsingConsumerProvider = false;
			  var hasWarnedAboutDisplayNameOnConsumer = false;

			  {
			    // A separate object, but proxies back to the original context object for
			    // backwards compatibility. It has a different $$typeof, so we can properly
			    // warn for the incorrect usage of Context as a Consumer.
			    var Consumer = {
			      $$typeof: REACT_CONTEXT_TYPE,
			      _context: context
			    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

			    Object.defineProperties(Consumer, {
			      Provider: {
			        get: function () {
			          if (!hasWarnedAboutUsingConsumerProvider) {
			            hasWarnedAboutUsingConsumerProvider = true;

			            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
			          }

			          return context.Provider;
			        },
			        set: function (_Provider) {
			          context.Provider = _Provider;
			        }
			      },
			      _currentValue: {
			        get: function () {
			          return context._currentValue;
			        },
			        set: function (_currentValue) {
			          context._currentValue = _currentValue;
			        }
			      },
			      _currentValue2: {
			        get: function () {
			          return context._currentValue2;
			        },
			        set: function (_currentValue2) {
			          context._currentValue2 = _currentValue2;
			        }
			      },
			      _threadCount: {
			        get: function () {
			          return context._threadCount;
			        },
			        set: function (_threadCount) {
			          context._threadCount = _threadCount;
			        }
			      },
			      Consumer: {
			        get: function () {
			          if (!hasWarnedAboutUsingNestedContextConsumers) {
			            hasWarnedAboutUsingNestedContextConsumers = true;

			            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
			          }

			          return context.Consumer;
			        }
			      },
			      displayName: {
			        get: function () {
			          return context.displayName;
			        },
			        set: function (displayName) {
			          if (!hasWarnedAboutDisplayNameOnConsumer) {
			            warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);

			            hasWarnedAboutDisplayNameOnConsumer = true;
			          }
			        }
			      }
			    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

			    context.Consumer = Consumer;
			  }

			  {
			    context._currentRenderer = null;
			    context._currentRenderer2 = null;
			  }

			  return context;
			}

			var Uninitialized = -1;
			var Pending = 0;
			var Resolved = 1;
			var Rejected = 2;

			function lazyInitializer(payload) {
			  if (payload._status === Uninitialized) {
			    var ctor = payload._result;
			    var thenable = ctor(); // Transition to the next state.
			    // This might throw either because it's missing or throws. If so, we treat it
			    // as still uninitialized and try again next time. Which is the same as what
			    // happens if the ctor or any wrappers processing the ctor throws. This might
			    // end up fixing it if the resolution was a concurrency bug.

			    thenable.then(function (moduleObject) {
			      if (payload._status === Pending || payload._status === Uninitialized) {
			        // Transition to the next state.
			        var resolved = payload;
			        resolved._status = Resolved;
			        resolved._result = moduleObject;
			      }
			    }, function (error) {
			      if (payload._status === Pending || payload._status === Uninitialized) {
			        // Transition to the next state.
			        var rejected = payload;
			        rejected._status = Rejected;
			        rejected._result = error;
			      }
			    });

			    if (payload._status === Uninitialized) {
			      // In case, we're still uninitialized, then we're waiting for the thenable
			      // to resolve. Set it as pending in the meantime.
			      var pending = payload;
			      pending._status = Pending;
			      pending._result = thenable;
			    }
			  }

			  if (payload._status === Resolved) {
			    var moduleObject = payload._result;

			    {
			      if (moduleObject === undefined) {
			        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
			        'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))\n\n" + 'Did you accidentally put curly braces around the import?', moduleObject);
			      }
			    }

			    {
			      if (!('default' in moduleObject)) {
			        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
			        'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
			      }
			    }

			    return moduleObject.default;
			  } else {
			    throw payload._result;
			  }
			}

			function lazy(ctor) {
			  var payload = {
			    // We use these fields to store the result.
			    _status: Uninitialized,
			    _result: ctor
			  };
			  var lazyType = {
			    $$typeof: REACT_LAZY_TYPE,
			    _payload: payload,
			    _init: lazyInitializer
			  };

			  {
			    // In production, this would just set it on the object.
			    var defaultProps;
			    var propTypes; // $FlowFixMe

			    Object.defineProperties(lazyType, {
			      defaultProps: {
			        configurable: true,
			        get: function () {
			          return defaultProps;
			        },
			        set: function (newDefaultProps) {
			          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

			          defaultProps = newDefaultProps; // Match production behavior more closely:
			          // $FlowFixMe

			          Object.defineProperty(lazyType, 'defaultProps', {
			            enumerable: true
			          });
			        }
			      },
			      propTypes: {
			        configurable: true,
			        get: function () {
			          return propTypes;
			        },
			        set: function (newPropTypes) {
			          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

			          propTypes = newPropTypes; // Match production behavior more closely:
			          // $FlowFixMe

			          Object.defineProperty(lazyType, 'propTypes', {
			            enumerable: true
			          });
			        }
			      }
			    });
			  }

			  return lazyType;
			}

			function forwardRef(render) {
			  {
			    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
			      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
			    } else if (typeof render !== 'function') {
			      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
			    } else {
			      if (render.length !== 0 && render.length !== 2) {
			        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
			      }
			    }

			    if (render != null) {
			      if (render.defaultProps != null || render.propTypes != null) {
			        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
			      }
			    }
			  }

			  var elementType = {
			    $$typeof: REACT_FORWARD_REF_TYPE,
			    render: render
			  };

			  {
			    var ownName;
			    Object.defineProperty(elementType, 'displayName', {
			      enumerable: false,
			      configurable: true,
			      get: function () {
			        return ownName;
			      },
			      set: function (name) {
			        ownName = name; // The inner component shouldn't inherit this display name in most cases,
			        // because the component may be used elsewhere.
			        // But it's nice for anonymous functions to inherit the name,
			        // so that our component-stack generation logic will display their frames.
			        // An anonymous function generally suggests a pattern like:
			        //   React.forwardRef((props, ref) => {...});
			        // This kind of inner function is not used elsewhere so the side effect is okay.

			        if (!render.name && !render.displayName) {
			          render.displayName = name;
			        }
			      }
			    });
			  }

			  return elementType;
			}

			var REACT_MODULE_REFERENCE;

			{
			  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
			}

			function isValidElementType(type) {
			  if (typeof type === 'string' || typeof type === 'function') {
			    return true;
			  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


			  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
			    return true;
			  }

			  if (typeof type === 'object' && type !== null) {
			    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
			    // types supported by any Flight configuration anywhere since
			    // we don't know which Flight build this will end up being used
			    // with.
			    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
			      return true;
			    }
			  }

			  return false;
			}

			function memo(type, compare) {
			  {
			    if (!isValidElementType(type)) {
			      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
			    }
			  }

			  var elementType = {
			    $$typeof: REACT_MEMO_TYPE,
			    type: type,
			    compare: compare === undefined ? null : compare
			  };

			  {
			    var ownName;
			    Object.defineProperty(elementType, 'displayName', {
			      enumerable: false,
			      configurable: true,
			      get: function () {
			        return ownName;
			      },
			      set: function (name) {
			        ownName = name; // The inner component shouldn't inherit this display name in most cases,
			        // because the component may be used elsewhere.
			        // But it's nice for anonymous functions to inherit the name,
			        // so that our component-stack generation logic will display their frames.
			        // An anonymous function generally suggests a pattern like:
			        //   React.memo((props) => {...});
			        // This kind of inner function is not used elsewhere so the side effect is okay.

			        if (!type.name && !type.displayName) {
			          type.displayName = name;
			        }
			      }
			    });
			  }

			  return elementType;
			}

			function resolveDispatcher() {
			  var dispatcher = ReactCurrentDispatcher.current;

			  {
			    if (dispatcher === null) {
			      error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' + '2. You might be breaking the Rules of Hooks\n' + '3. You might have more than one copy of React in the same app\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
			    }
			  } // Will result in a null access error if accessed outside render phase. We
			  // intentionally don't throw our own error because this is in a hot path.
			  // Also helps ensure this is inlined.


			  return dispatcher;
			}
			function useContext(Context) {
			  var dispatcher = resolveDispatcher();

			  {
			    // TODO: add a more generic warning for invalid values.
			    if (Context._context !== undefined) {
			      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
			      // and nobody should be using this in existing code.

			      if (realContext.Consumer === Context) {
			        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
			      } else if (realContext.Provider === Context) {
			        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
			      }
			    }
			  }

			  return dispatcher.useContext(Context);
			}
			function useState(initialState) {
			  var dispatcher = resolveDispatcher();
			  return dispatcher.useState(initialState);
			}
			function useReducer(reducer, initialArg, init) {
			  var dispatcher = resolveDispatcher();
			  return dispatcher.useReducer(reducer, initialArg, init);
			}
			function useRef(initialValue) {
			  var dispatcher = resolveDispatcher();
			  return dispatcher.useRef(initialValue);
			}
			function useEffect(create, deps) {
			  var dispatcher = resolveDispatcher();
			  return dispatcher.useEffect(create, deps);
			}
			function useInsertionEffect(create, deps) {
			  var dispatcher = resolveDispatcher();
			  return dispatcher.useInsertionEffect(create, deps);
			}
			function useLayoutEffect(create, deps) {
			  var dispatcher = resolveDispatcher();
			  return dispatcher.useLayoutEffect(create, deps);
			}
			function useCallback(callback, deps) {
			  var dispatcher = resolveDispatcher();
			  return dispatcher.useCallback(callback, deps);
			}
			function useMemo(create, deps) {
			  var dispatcher = resolveDispatcher();
			  return dispatcher.useMemo(create, deps);
			}
			function useImperativeHandle(ref, create, deps) {
			  var dispatcher = resolveDispatcher();
			  return dispatcher.useImperativeHandle(ref, create, deps);
			}
			function useDebugValue(value, formatterFn) {
			  {
			    var dispatcher = resolveDispatcher();
			    return dispatcher.useDebugValue(value, formatterFn);
			  }
			}
			function useTransition() {
			  var dispatcher = resolveDispatcher();
			  return dispatcher.useTransition();
			}
			function useDeferredValue(value) {
			  var dispatcher = resolveDispatcher();
			  return dispatcher.useDeferredValue(value);
			}
			function useId() {
			  var dispatcher = resolveDispatcher();
			  return dispatcher.useId();
			}
			function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
			  var dispatcher = resolveDispatcher();
			  return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
			}

			// Helpers to patch console.logs to avoid logging during side-effect free
			// replaying on render function. This currently only patches the object
			// lazily which won't cover if the log function was extracted eagerly.
			// We could also eagerly patch the method.
			var disabledDepth = 0;
			var prevLog;
			var prevInfo;
			var prevWarn;
			var prevError;
			var prevGroup;
			var prevGroupCollapsed;
			var prevGroupEnd;

			function disabledLog() {}

			disabledLog.__reactDisabledLog = true;
			function disableLogs() {
			  {
			    if (disabledDepth === 0) {
			      /* eslint-disable react-internal/no-production-logging */
			      prevLog = console.log;
			      prevInfo = console.info;
			      prevWarn = console.warn;
			      prevError = console.error;
			      prevGroup = console.group;
			      prevGroupCollapsed = console.groupCollapsed;
			      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

			      var props = {
			        configurable: true,
			        enumerable: true,
			        value: disabledLog,
			        writable: true
			      }; // $FlowFixMe Flow thinks console is immutable.

			      Object.defineProperties(console, {
			        info: props,
			        log: props,
			        warn: props,
			        error: props,
			        group: props,
			        groupCollapsed: props,
			        groupEnd: props
			      });
			      /* eslint-enable react-internal/no-production-logging */
			    }

			    disabledDepth++;
			  }
			}
			function reenableLogs() {
			  {
			    disabledDepth--;

			    if (disabledDepth === 0) {
			      /* eslint-disable react-internal/no-production-logging */
			      var props = {
			        configurable: true,
			        enumerable: true,
			        writable: true
			      }; // $FlowFixMe Flow thinks console is immutable.

			      Object.defineProperties(console, {
			        log: assign({}, props, {
			          value: prevLog
			        }),
			        info: assign({}, props, {
			          value: prevInfo
			        }),
			        warn: assign({}, props, {
			          value: prevWarn
			        }),
			        error: assign({}, props, {
			          value: prevError
			        }),
			        group: assign({}, props, {
			          value: prevGroup
			        }),
			        groupCollapsed: assign({}, props, {
			          value: prevGroupCollapsed
			        }),
			        groupEnd: assign({}, props, {
			          value: prevGroupEnd
			        })
			      });
			      /* eslint-enable react-internal/no-production-logging */
			    }

			    if (disabledDepth < 0) {
			      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
			    }
			  }
			}

			var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
			var prefix;
			function describeBuiltInComponentFrame(name, source, ownerFn) {
			  {
			    if (prefix === undefined) {
			      // Extract the VM specific prefix used by each line.
			      try {
			        throw Error();
			      } catch (x) {
			        var match = x.stack.trim().match(/\n( *(at )?)/);
			        prefix = match && match[1] || '';
			      }
			    } // We use the prefix to ensure our stacks line up with native stack frames.


			    return '\n' + prefix + name;
			  }
			}
			var reentry = false;
			var componentFrameCache;

			{
			  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
			  componentFrameCache = new PossiblyWeakMap();
			}

			function describeNativeComponentFrame(fn, construct) {
			  // If something asked for a stack inside a fake render, it should get ignored.
			  if ( !fn || reentry) {
			    return '';
			  }

			  {
			    var frame = componentFrameCache.get(fn);

			    if (frame !== undefined) {
			      return frame;
			    }
			  }

			  var control;
			  reentry = true;
			  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

			  Error.prepareStackTrace = undefined;
			  var previousDispatcher;

			  {
			    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
			    // for warnings.

			    ReactCurrentDispatcher$1.current = null;
			    disableLogs();
			  }

			  try {
			    // This should throw.
			    if (construct) {
			      // Something should be setting the props in the constructor.
			      var Fake = function () {
			        throw Error();
			      }; // $FlowFixMe


			      Object.defineProperty(Fake.prototype, 'props', {
			        set: function () {
			          // We use a throwing setter instead of frozen or non-writable props
			          // because that won't throw in a non-strict mode function.
			          throw Error();
			        }
			      });

			      if (typeof Reflect === 'object' && Reflect.construct) {
			        // We construct a different control for this case to include any extra
			        // frames added by the construct call.
			        try {
			          Reflect.construct(Fake, []);
			        } catch (x) {
			          control = x;
			        }

			        Reflect.construct(fn, [], Fake);
			      } else {
			        try {
			          Fake.call();
			        } catch (x) {
			          control = x;
			        }

			        fn.call(Fake.prototype);
			      }
			    } else {
			      try {
			        throw Error();
			      } catch (x) {
			        control = x;
			      }

			      fn();
			    }
			  } catch (sample) {
			    // This is inlined manually because closure doesn't do it for us.
			    if (sample && control && typeof sample.stack === 'string') {
			      // This extracts the first frame from the sample that isn't also in the control.
			      // Skipping one frame that we assume is the frame that calls the two.
			      var sampleLines = sample.stack.split('\n');
			      var controlLines = control.stack.split('\n');
			      var s = sampleLines.length - 1;
			      var c = controlLines.length - 1;

			      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
			        // We expect at least one stack frame to be shared.
			        // Typically this will be the root most one. However, stack frames may be
			        // cut off due to maximum stack limits. In this case, one maybe cut off
			        // earlier than the other. We assume that the sample is longer or the same
			        // and there for cut off earlier. So we should find the root most frame in
			        // the sample somewhere in the control.
			        c--;
			      }

			      for (; s >= 1 && c >= 0; s--, c--) {
			        // Next we find the first one that isn't the same which should be the
			        // frame that called our sample function and the control.
			        if (sampleLines[s] !== controlLines[c]) {
			          // In V8, the first line is describing the message but other VMs don't.
			          // If we're about to return the first line, and the control is also on the same
			          // line, that's a pretty good indicator that our sample threw at same line as
			          // the control. I.e. before we entered the sample frame. So we ignore this result.
			          // This can happen if you passed a class to function component, or non-function.
			          if (s !== 1 || c !== 1) {
			            do {
			              s--;
			              c--; // We may still have similar intermediate frames from the construct call.
			              // The next one that isn't the same should be our match though.

			              if (c < 0 || sampleLines[s] !== controlLines[c]) {
			                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
			                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
			                // but we have a user-provided "displayName"
			                // splice it in to make the stack more readable.


			                if (fn.displayName && _frame.includes('<anonymous>')) {
			                  _frame = _frame.replace('<anonymous>', fn.displayName);
			                }

			                {
			                  if (typeof fn === 'function') {
			                    componentFrameCache.set(fn, _frame);
			                  }
			                } // Return the line we found.


			                return _frame;
			              }
			            } while (s >= 1 && c >= 0);
			          }

			          break;
			        }
			      }
			    }
			  } finally {
			    reentry = false;

			    {
			      ReactCurrentDispatcher$1.current = previousDispatcher;
			      reenableLogs();
			    }

			    Error.prepareStackTrace = previousPrepareStackTrace;
			  } // Fallback to just using the name if we couldn't make it throw.


			  var name = fn ? fn.displayName || fn.name : '';
			  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

			  {
			    if (typeof fn === 'function') {
			      componentFrameCache.set(fn, syntheticFrame);
			    }
			  }

			  return syntheticFrame;
			}
			function describeFunctionComponentFrame(fn, source, ownerFn) {
			  {
			    return describeNativeComponentFrame(fn, false);
			  }
			}

			function shouldConstruct(Component) {
			  var prototype = Component.prototype;
			  return !!(prototype && prototype.isReactComponent);
			}

			function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

			  if (type == null) {
			    return '';
			  }

			  if (typeof type === 'function') {
			    {
			      return describeNativeComponentFrame(type, shouldConstruct(type));
			    }
			  }

			  if (typeof type === 'string') {
			    return describeBuiltInComponentFrame(type);
			  }

			  switch (type) {
			    case REACT_SUSPENSE_TYPE:
			      return describeBuiltInComponentFrame('Suspense');

			    case REACT_SUSPENSE_LIST_TYPE:
			      return describeBuiltInComponentFrame('SuspenseList');
			  }

			  if (typeof type === 'object') {
			    switch (type.$$typeof) {
			      case REACT_FORWARD_REF_TYPE:
			        return describeFunctionComponentFrame(type.render);

			      case REACT_MEMO_TYPE:
			        // Memo may contain any component type so we recursively resolve it.
			        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

			      case REACT_LAZY_TYPE:
			        {
			          var lazyComponent = type;
			          var payload = lazyComponent._payload;
			          var init = lazyComponent._init;

			          try {
			            // Lazy may contain any component type so we recursively resolve it.
			            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
			          } catch (x) {}
			        }
			    }
			  }

			  return '';
			}

			var loggedTypeFailures = {};
			var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

			function setCurrentlyValidatingElement(element) {
			  {
			    if (element) {
			      var owner = element._owner;
			      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
			      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
			    } else {
			      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
			    }
			  }
			}

			function checkPropTypes(typeSpecs, values, location, componentName, element) {
			  {
			    // $FlowFixMe This is okay but Flow doesn't know it.
			    var has = Function.call.bind(hasOwnProperty);

			    for (var typeSpecName in typeSpecs) {
			      if (has(typeSpecs, typeSpecName)) {
			        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
			        // fail the render phase where it didn't fail before. So we log it.
			        // After these have been cleaned up, we'll let them throw.

			        try {
			          // This is intentionally an invariant that gets caught. It's the same
			          // behavior as without this statement except with a better message.
			          if (typeof typeSpecs[typeSpecName] !== 'function') {
			            // eslint-disable-next-line react-internal/prod-error-codes
			            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
			            err.name = 'Invariant Violation';
			            throw err;
			          }

			          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
			        } catch (ex) {
			          error$1 = ex;
			        }

			        if (error$1 && !(error$1 instanceof Error)) {
			          setCurrentlyValidatingElement(element);

			          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

			          setCurrentlyValidatingElement(null);
			        }

			        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
			          // Only monitor this failure once because there tends to be a lot of the
			          // same error.
			          loggedTypeFailures[error$1.message] = true;
			          setCurrentlyValidatingElement(element);

			          error('Failed %s type: %s', location, error$1.message);

			          setCurrentlyValidatingElement(null);
			        }
			      }
			    }
			  }
			}

			function setCurrentlyValidatingElement$1(element) {
			  {
			    if (element) {
			      var owner = element._owner;
			      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
			      setExtraStackFrame(stack);
			    } else {
			      setExtraStackFrame(null);
			    }
			  }
			}

			var propTypesMisspellWarningShown;

			{
			  propTypesMisspellWarningShown = false;
			}

			function getDeclarationErrorAddendum() {
			  if (ReactCurrentOwner.current) {
			    var name = getComponentNameFromType(ReactCurrentOwner.current.type);

			    if (name) {
			      return '\n\nCheck the render method of `' + name + '`.';
			    }
			  }

			  return '';
			}

			function getSourceInfoErrorAddendum(source) {
			  if (source !== undefined) {
			    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
			    var lineNumber = source.lineNumber;
			    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
			  }

			  return '';
			}

			function getSourceInfoErrorAddendumForProps(elementProps) {
			  if (elementProps !== null && elementProps !== undefined) {
			    return getSourceInfoErrorAddendum(elementProps.__source);
			  }

			  return '';
			}
			/**
			 * Warn if there's no key explicitly set on dynamic arrays of children or
			 * object keys are not valid. This allows us to keep track of children between
			 * updates.
			 */


			var ownerHasKeyUseWarning = {};

			function getCurrentComponentErrorInfo(parentType) {
			  var info = getDeclarationErrorAddendum();

			  if (!info) {
			    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

			    if (parentName) {
			      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
			    }
			  }

			  return info;
			}
			/**
			 * Warn if the element doesn't have an explicit key assigned to it.
			 * This element is in an array. The array could grow and shrink or be
			 * reordered. All children that haven't already been validated are required to
			 * have a "key" property assigned to it. Error statuses are cached so a warning
			 * will only be shown once.
			 *
			 * @internal
			 * @param {ReactElement} element Element that requires a key.
			 * @param {*} parentType element's parent's type.
			 */


			function validateExplicitKey(element, parentType) {
			  if (!element._store || element._store.validated || element.key != null) {
			    return;
			  }

			  element._store.validated = true;
			  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

			  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
			    return;
			  }

			  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
			  // property, it may be the creator of the child that's responsible for
			  // assigning it a key.

			  var childOwner = '';

			  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
			    // Give the component that originally created this child.
			    childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
			  }

			  {
			    setCurrentlyValidatingElement$1(element);

			    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

			    setCurrentlyValidatingElement$1(null);
			  }
			}
			/**
			 * Ensure that every element either is passed in a static location, in an
			 * array with an explicit keys property defined, or in an object literal
			 * with valid key property.
			 *
			 * @internal
			 * @param {ReactNode} node Statically passed child of any type.
			 * @param {*} parentType node's parent's type.
			 */


			function validateChildKeys(node, parentType) {
			  if (typeof node !== 'object') {
			    return;
			  }

			  if (isArray(node)) {
			    for (var i = 0; i < node.length; i++) {
			      var child = node[i];

			      if (isValidElement(child)) {
			        validateExplicitKey(child, parentType);
			      }
			    }
			  } else if (isValidElement(node)) {
			    // This element was passed in a valid location.
			    if (node._store) {
			      node._store.validated = true;
			    }
			  } else if (node) {
			    var iteratorFn = getIteratorFn(node);

			    if (typeof iteratorFn === 'function') {
			      // Entry iterators used to provide implicit keys,
			      // but now we print a separate warning for them later.
			      if (iteratorFn !== node.entries) {
			        var iterator = iteratorFn.call(node);
			        var step;

			        while (!(step = iterator.next()).done) {
			          if (isValidElement(step.value)) {
			            validateExplicitKey(step.value, parentType);
			          }
			        }
			      }
			    }
			  }
			}
			/**
			 * Given an element, validate that its props follow the propTypes definition,
			 * provided by the type.
			 *
			 * @param {ReactElement} element
			 */


			function validatePropTypes(element) {
			  {
			    var type = element.type;

			    if (type === null || type === undefined || typeof type === 'string') {
			      return;
			    }

			    var propTypes;

			    if (typeof type === 'function') {
			      propTypes = type.propTypes;
			    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
			    // Inner props are checked in the reconciler.
			    type.$$typeof === REACT_MEMO_TYPE)) {
			      propTypes = type.propTypes;
			    } else {
			      return;
			    }

			    if (propTypes) {
			      // Intentionally inside to avoid triggering lazy initializers:
			      var name = getComponentNameFromType(type);
			      checkPropTypes(propTypes, element.props, 'prop', name, element);
			    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
			      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

			      var _name = getComponentNameFromType(type);

			      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
			    }

			    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
			      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
			    }
			  }
			}
			/**
			 * Given a fragment, validate that it can only be provided with fragment props
			 * @param {ReactElement} fragment
			 */


			function validateFragmentProps(fragment) {
			  {
			    var keys = Object.keys(fragment.props);

			    for (var i = 0; i < keys.length; i++) {
			      var key = keys[i];

			      if (key !== 'children' && key !== 'key') {
			        setCurrentlyValidatingElement$1(fragment);

			        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

			        setCurrentlyValidatingElement$1(null);
			        break;
			      }
			    }

			    if (fragment.ref !== null) {
			      setCurrentlyValidatingElement$1(fragment);

			      error('Invalid attribute `ref` supplied to `React.Fragment`.');

			      setCurrentlyValidatingElement$1(null);
			    }
			  }
			}
			function createElementWithValidation(type, props, children) {
			  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
			  // succeed and there will likely be errors in render.

			  if (!validType) {
			    var info = '';

			    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
			      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
			    }

			    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

			    if (sourceInfo) {
			      info += sourceInfo;
			    } else {
			      info += getDeclarationErrorAddendum();
			    }

			    var typeString;

			    if (type === null) {
			      typeString = 'null';
			    } else if (isArray(type)) {
			      typeString = 'array';
			    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
			      typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
			      info = ' Did you accidentally export a JSX literal instead of a component?';
			    } else {
			      typeString = typeof type;
			    }

			    {
			      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
			    }
			  }

			  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
			  // TODO: Drop this when these are no longer allowed as the type argument.

			  if (element == null) {
			    return element;
			  } // Skip key warning if the type isn't valid since our key validation logic
			  // doesn't expect a non-string/function type and can throw confusing errors.
			  // We don't want exception behavior to differ between dev and prod.
			  // (Rendering will throw with a helpful message and as soon as the type is
			  // fixed, the key warnings will appear.)


			  if (validType) {
			    for (var i = 2; i < arguments.length; i++) {
			      validateChildKeys(arguments[i], type);
			    }
			  }

			  if (type === REACT_FRAGMENT_TYPE) {
			    validateFragmentProps(element);
			  } else {
			    validatePropTypes(element);
			  }

			  return element;
			}
			var didWarnAboutDeprecatedCreateFactory = false;
			function createFactoryWithValidation(type) {
			  var validatedFactory = createElementWithValidation.bind(null, type);
			  validatedFactory.type = type;

			  {
			    if (!didWarnAboutDeprecatedCreateFactory) {
			      didWarnAboutDeprecatedCreateFactory = true;

			      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
			    } // Legacy hook: remove it


			    Object.defineProperty(validatedFactory, 'type', {
			      enumerable: false,
			      get: function () {
			        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

			        Object.defineProperty(this, 'type', {
			          value: type
			        });
			        return type;
			      }
			    });
			  }

			  return validatedFactory;
			}
			function cloneElementWithValidation(element, props, children) {
			  var newElement = cloneElement.apply(this, arguments);

			  for (var i = 2; i < arguments.length; i++) {
			    validateChildKeys(arguments[i], newElement.type);
			  }

			  validatePropTypes(newElement);
			  return newElement;
			}

			function startTransition(scope, options) {
			  var prevTransition = ReactCurrentBatchConfig.transition;
			  ReactCurrentBatchConfig.transition = {};
			  var currentTransition = ReactCurrentBatchConfig.transition;

			  {
			    ReactCurrentBatchConfig.transition._updatedFibers = new Set();
			  }

			  try {
			    scope();
			  } finally {
			    ReactCurrentBatchConfig.transition = prevTransition;

			    {
			      if (prevTransition === null && currentTransition._updatedFibers) {
			        var updatedFibersCount = currentTransition._updatedFibers.size;

			        if (updatedFibersCount > 10) {
			          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');
			        }

			        currentTransition._updatedFibers.clear();
			      }
			    }
			  }
			}

			var didWarnAboutMessageChannel = false;
			var enqueueTaskImpl = null;
			function enqueueTask(task) {
			  if (enqueueTaskImpl === null) {
			    try {
			      // read require off the module object to get around the bundlers.
			      // we don't want them to detect a require and bundle a Node polyfill.
			      var requireString = ('require' + Math.random()).slice(0, 7);
			      var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's
			      // version of setImmediate, bypassing fake timers if any.

			      enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;
			    } catch (_err) {
			      // we're in a browser
			      // we can't use regular timers because they may still be faked
			      // so we try MessageChannel+postMessage instead
			      enqueueTaskImpl = function (callback) {
			        {
			          if (didWarnAboutMessageChannel === false) {
			            didWarnAboutMessageChannel = true;

			            if (typeof MessageChannel === 'undefined') {
			              error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');
			            }
			          }
			        }

			        var channel = new MessageChannel();
			        channel.port1.onmessage = callback;
			        channel.port2.postMessage(undefined);
			      };
			    }
			  }

			  return enqueueTaskImpl(task);
			}

			var actScopeDepth = 0;
			var didWarnNoAwaitAct = false;
			function act(callback) {
			  {
			    // `act` calls can be nested, so we track the depth. This represents the
			    // number of `act` scopes on the stack.
			    var prevActScopeDepth = actScopeDepth;
			    actScopeDepth++;

			    if (ReactCurrentActQueue.current === null) {
			      // This is the outermost `act` scope. Initialize the queue. The reconciler
			      // will detect the queue and use it instead of Scheduler.
			      ReactCurrentActQueue.current = [];
			    }

			    var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
			    var result;

			    try {
			      // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only
			      // set to `true` while the given callback is executed, not for updates
			      // triggered during an async event, because this is how the legacy
			      // implementation of `act` behaved.
			      ReactCurrentActQueue.isBatchingLegacy = true;
			      result = callback(); // Replicate behavior of original `act` implementation in legacy mode,
			      // which flushed updates immediately after the scope function exits, even
			      // if it's an async function.

			      if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
			        var queue = ReactCurrentActQueue.current;

			        if (queue !== null) {
			          ReactCurrentActQueue.didScheduleLegacyUpdate = false;
			          flushActQueue(queue);
			        }
			      }
			    } catch (error) {
			      popActScope(prevActScopeDepth);
			      throw error;
			    } finally {
			      ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
			    }

			    if (result !== null && typeof result === 'object' && typeof result.then === 'function') {
			      var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait
			      // for it to resolve before exiting the current scope.

			      var wasAwaited = false;
			      var thenable = {
			        then: function (resolve, reject) {
			          wasAwaited = true;
			          thenableResult.then(function (returnValue) {
			            popActScope(prevActScopeDepth);

			            if (actScopeDepth === 0) {
			              // We've exited the outermost act scope. Recursively flush the
			              // queue until there's no remaining work.
			              recursivelyFlushAsyncActWork(returnValue, resolve, reject);
			            } else {
			              resolve(returnValue);
			            }
			          }, function (error) {
			            // The callback threw an error.
			            popActScope(prevActScopeDepth);
			            reject(error);
			          });
			        }
			      };

			      {
			        if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') {
			          // eslint-disable-next-line no-undef
			          Promise.resolve().then(function () {}).then(function () {
			            if (!wasAwaited) {
			              didWarnNoAwaitAct = true;

			              error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, ' + 'interleaving multiple act calls and mixing their ' + 'scopes. ' + 'You should - await act(async () => ...);');
			            }
			          });
			        }
			      }

			      return thenable;
			    } else {
			      var returnValue = result; // The callback is not an async function. Exit the current scope
			      // immediately, without awaiting.

			      popActScope(prevActScopeDepth);

			      if (actScopeDepth === 0) {
			        // Exiting the outermost act scope. Flush the queue.
			        var _queue = ReactCurrentActQueue.current;

			        if (_queue !== null) {
			          flushActQueue(_queue);
			          ReactCurrentActQueue.current = null;
			        } // Return a thenable. If the user awaits it, we'll flush again in
			        // case additional work was scheduled by a microtask.


			        var _thenable = {
			          then: function (resolve, reject) {
			            // Confirm we haven't re-entered another `act` scope, in case
			            // the user does something weird like await the thenable
			            // multiple times.
			            if (ReactCurrentActQueue.current === null) {
			              // Recursively flush the queue until there's no remaining work.
			              ReactCurrentActQueue.current = [];
			              recursivelyFlushAsyncActWork(returnValue, resolve, reject);
			            } else {
			              resolve(returnValue);
			            }
			          }
			        };
			        return _thenable;
			      } else {
			        // Since we're inside a nested `act` scope, the returned thenable
			        // immediately resolves. The outer scope will flush the queue.
			        var _thenable2 = {
			          then: function (resolve, reject) {
			            resolve(returnValue);
			          }
			        };
			        return _thenable2;
			      }
			    }
			  }
			}

			function popActScope(prevActScopeDepth) {
			  {
			    if (prevActScopeDepth !== actScopeDepth - 1) {
			      error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');
			    }

			    actScopeDepth = prevActScopeDepth;
			  }
			}

			function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
			  {
			    var queue = ReactCurrentActQueue.current;

			    if (queue !== null) {
			      try {
			        flushActQueue(queue);
			        enqueueTask(function () {
			          if (queue.length === 0) {
			            // No additional work was scheduled. Finish.
			            ReactCurrentActQueue.current = null;
			            resolve(returnValue);
			          } else {
			            // Keep flushing work until there's none left.
			            recursivelyFlushAsyncActWork(returnValue, resolve, reject);
			          }
			        });
			      } catch (error) {
			        reject(error);
			      }
			    } else {
			      resolve(returnValue);
			    }
			  }
			}

			var isFlushing = false;

			function flushActQueue(queue) {
			  {
			    if (!isFlushing) {
			      // Prevent re-entrance.
			      isFlushing = true;
			      var i = 0;

			      try {
			        for (; i < queue.length; i++) {
			          var callback = queue[i];

			          do {
			            callback = callback(true);
			          } while (callback !== null);
			        }

			        queue.length = 0;
			      } catch (error) {
			        // If something throws, leave the remaining callbacks on the queue.
			        queue = queue.slice(i + 1);
			        throw error;
			      } finally {
			        isFlushing = false;
			      }
			    }
			  }
			}

			var createElement$1 =  createElementWithValidation ;
			var cloneElement$1 =  cloneElementWithValidation ;
			var createFactory =  createFactoryWithValidation ;
			var Children = {
			  map: mapChildren,
			  forEach: forEachChildren,
			  count: countChildren,
			  toArray: toArray,
			  only: onlyChild
			};

			exports.Children = Children;
			exports.Component = Component;
			exports.Fragment = REACT_FRAGMENT_TYPE;
			exports.Profiler = REACT_PROFILER_TYPE;
			exports.PureComponent = PureComponent;
			exports.StrictMode = REACT_STRICT_MODE_TYPE;
			exports.Suspense = REACT_SUSPENSE_TYPE;
			exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
			exports.cloneElement = cloneElement$1;
			exports.createContext = createContext;
			exports.createElement = createElement$1;
			exports.createFactory = createFactory;
			exports.createRef = createRef;
			exports.forwardRef = forwardRef;
			exports.isValidElement = isValidElement;
			exports.lazy = lazy;
			exports.memo = memo;
			exports.startTransition = startTransition;
			exports.unstable_act = act;
			exports.useCallback = useCallback;
			exports.useContext = useContext;
			exports.useDebugValue = useDebugValue;
			exports.useDeferredValue = useDeferredValue;
			exports.useEffect = useEffect;
			exports.useId = useId;
			exports.useImperativeHandle = useImperativeHandle;
			exports.useInsertionEffect = useInsertionEffect;
			exports.useLayoutEffect = useLayoutEffect;
			exports.useMemo = useMemo;
			exports.useReducer = useReducer;
			exports.useRef = useRef;
			exports.useState = useState;
			exports.useSyncExternalStore = useSyncExternalStore;
			exports.useTransition = useTransition;
			exports.version = ReactVersion;
			          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
			if (
			  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
			  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
			    'function'
			) {
			  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
			}
			        
			  })();
			} 
		} (react_development, react_development.exports));
		return react_development.exports;
	}

	if (process.env.NODE_ENV === 'production') {
	  react.exports = requireReact_production_min();
	} else {
	  react.exports = requireReact_development();
	}

	var reactExports = react.exports;
	var React = /*@__PURE__*/getDefaultExportFromCjs(reactExports);

	var React$1 = /*#__PURE__*/_mergeNamespaces({
		__proto__: null,
		default: React
	}, [reactExports]);

	function _objectWithoutPropertiesLoose$1(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;
	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }
	  return target;
	}

	function _extends$2() {
	  _extends$2 = Object.assign ? Object.assign.bind() : function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];
	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }
	    return target;
	  };
	  return _extends$2.apply(this, arguments);
	}

	var propTypes = {exports: {}};

	var reactIs$3 = {exports: {}};

	var reactIs_production_min$2 = {};

	/** @license React v16.13.1
	 * react-is.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactIs_production_min$2;

	function requireReactIs_production_min$2 () {
		if (hasRequiredReactIs_production_min$2) return reactIs_production_min$2;
		hasRequiredReactIs_production_min$2 = 1;
	var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
		Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
		function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min$2.AsyncMode=l;reactIs_production_min$2.ConcurrentMode=m;reactIs_production_min$2.ContextConsumer=k;reactIs_production_min$2.ContextProvider=h;reactIs_production_min$2.Element=c;reactIs_production_min$2.ForwardRef=n;reactIs_production_min$2.Fragment=e;reactIs_production_min$2.Lazy=t;reactIs_production_min$2.Memo=r;reactIs_production_min$2.Portal=d;
		reactIs_production_min$2.Profiler=g;reactIs_production_min$2.StrictMode=f;reactIs_production_min$2.Suspense=p;reactIs_production_min$2.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min$2.isConcurrentMode=A;reactIs_production_min$2.isContextConsumer=function(a){return z(a)===k};reactIs_production_min$2.isContextProvider=function(a){return z(a)===h};reactIs_production_min$2.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min$2.isForwardRef=function(a){return z(a)===n};reactIs_production_min$2.isFragment=function(a){return z(a)===e};reactIs_production_min$2.isLazy=function(a){return z(a)===t};
		reactIs_production_min$2.isMemo=function(a){return z(a)===r};reactIs_production_min$2.isPortal=function(a){return z(a)===d};reactIs_production_min$2.isProfiler=function(a){return z(a)===g};reactIs_production_min$2.isStrictMode=function(a){return z(a)===f};reactIs_production_min$2.isSuspense=function(a){return z(a)===p};
		reactIs_production_min$2.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min$2.typeOf=z;
		return reactIs_production_min$2;
	}

	var reactIs_development$2 = {};

	/** @license React v16.13.1
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactIs_development$2;

	function requireReactIs_development$2 () {
		if (hasRequiredReactIs_development$2) return reactIs_development$2;
		hasRequiredReactIs_development$2 = 1;



		if (process.env.NODE_ENV !== "production") {
		  (function() {

		// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
		// nor polyfill, then a plain number is used for performance.
		var hasSymbol = typeof Symbol === 'function' && Symbol.for;
		var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
		var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
		var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
		var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
		var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
		var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
		var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
		// (unstable) APIs that have been removed. Can we remove the symbols?

		var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
		var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
		var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
		var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
		var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
		var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
		var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
		var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
		var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
		var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
		var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

		function isValidElementType(type) {
		  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
		  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
		}

		function typeOf(object) {
		  if (typeof object === 'object' && object !== null) {
		    var $$typeof = object.$$typeof;

		    switch ($$typeof) {
		      case REACT_ELEMENT_TYPE:
		        var type = object.type;

		        switch (type) {
		          case REACT_ASYNC_MODE_TYPE:
		          case REACT_CONCURRENT_MODE_TYPE:
		          case REACT_FRAGMENT_TYPE:
		          case REACT_PROFILER_TYPE:
		          case REACT_STRICT_MODE_TYPE:
		          case REACT_SUSPENSE_TYPE:
		            return type;

		          default:
		            var $$typeofType = type && type.$$typeof;

		            switch ($$typeofType) {
		              case REACT_CONTEXT_TYPE:
		              case REACT_FORWARD_REF_TYPE:
		              case REACT_LAZY_TYPE:
		              case REACT_MEMO_TYPE:
		              case REACT_PROVIDER_TYPE:
		                return $$typeofType;

		              default:
		                return $$typeof;
		            }

		        }

		      case REACT_PORTAL_TYPE:
		        return $$typeof;
		    }
		  }

		  return undefined;
		} // AsyncMode is deprecated along with isAsyncMode

		var AsyncMode = REACT_ASYNC_MODE_TYPE;
		var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
		var ContextConsumer = REACT_CONTEXT_TYPE;
		var ContextProvider = REACT_PROVIDER_TYPE;
		var Element = REACT_ELEMENT_TYPE;
		var ForwardRef = REACT_FORWARD_REF_TYPE;
		var Fragment = REACT_FRAGMENT_TYPE;
		var Lazy = REACT_LAZY_TYPE;
		var Memo = REACT_MEMO_TYPE;
		var Portal = REACT_PORTAL_TYPE;
		var Profiler = REACT_PROFILER_TYPE;
		var StrictMode = REACT_STRICT_MODE_TYPE;
		var Suspense = REACT_SUSPENSE_TYPE;
		var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

		function isAsyncMode(object) {
		  {
		    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
		      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

		      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
		    }
		  }

		  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
		}
		function isConcurrentMode(object) {
		  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
		}
		function isContextConsumer(object) {
		  return typeOf(object) === REACT_CONTEXT_TYPE;
		}
		function isContextProvider(object) {
		  return typeOf(object) === REACT_PROVIDER_TYPE;
		}
		function isElement(object) {
		  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
		}
		function isForwardRef(object) {
		  return typeOf(object) === REACT_FORWARD_REF_TYPE;
		}
		function isFragment(object) {
		  return typeOf(object) === REACT_FRAGMENT_TYPE;
		}
		function isLazy(object) {
		  return typeOf(object) === REACT_LAZY_TYPE;
		}
		function isMemo(object) {
		  return typeOf(object) === REACT_MEMO_TYPE;
		}
		function isPortal(object) {
		  return typeOf(object) === REACT_PORTAL_TYPE;
		}
		function isProfiler(object) {
		  return typeOf(object) === REACT_PROFILER_TYPE;
		}
		function isStrictMode(object) {
		  return typeOf(object) === REACT_STRICT_MODE_TYPE;
		}
		function isSuspense(object) {
		  return typeOf(object) === REACT_SUSPENSE_TYPE;
		}

		reactIs_development$2.AsyncMode = AsyncMode;
		reactIs_development$2.ConcurrentMode = ConcurrentMode;
		reactIs_development$2.ContextConsumer = ContextConsumer;
		reactIs_development$2.ContextProvider = ContextProvider;
		reactIs_development$2.Element = Element;
		reactIs_development$2.ForwardRef = ForwardRef;
		reactIs_development$2.Fragment = Fragment;
		reactIs_development$2.Lazy = Lazy;
		reactIs_development$2.Memo = Memo;
		reactIs_development$2.Portal = Portal;
		reactIs_development$2.Profiler = Profiler;
		reactIs_development$2.StrictMode = StrictMode;
		reactIs_development$2.Suspense = Suspense;
		reactIs_development$2.isAsyncMode = isAsyncMode;
		reactIs_development$2.isConcurrentMode = isConcurrentMode;
		reactIs_development$2.isContextConsumer = isContextConsumer;
		reactIs_development$2.isContextProvider = isContextProvider;
		reactIs_development$2.isElement = isElement;
		reactIs_development$2.isForwardRef = isForwardRef;
		reactIs_development$2.isFragment = isFragment;
		reactIs_development$2.isLazy = isLazy;
		reactIs_development$2.isMemo = isMemo;
		reactIs_development$2.isPortal = isPortal;
		reactIs_development$2.isProfiler = isProfiler;
		reactIs_development$2.isStrictMode = isStrictMode;
		reactIs_development$2.isSuspense = isSuspense;
		reactIs_development$2.isValidElementType = isValidElementType;
		reactIs_development$2.typeOf = typeOf;
		  })();
		}
		return reactIs_development$2;
	}

	var hasRequiredReactIs;

	function requireReactIs () {
		if (hasRequiredReactIs) return reactIs$3.exports;
		hasRequiredReactIs = 1;

		if (process.env.NODE_ENV === 'production') {
		  reactIs$3.exports = requireReactIs_production_min$2();
		} else {
		  reactIs$3.exports = requireReactIs_development$2();
		}
		return reactIs$3.exports;
	}

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	var objectAssign;
	var hasRequiredObjectAssign;

	function requireObjectAssign () {
		if (hasRequiredObjectAssign) return objectAssign;
		hasRequiredObjectAssign = 1;
		/* eslint-disable no-unused-vars */
		var getOwnPropertySymbols = Object.getOwnPropertySymbols;
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		var propIsEnumerable = Object.prototype.propertyIsEnumerable;

		function toObject(val) {
			if (val === null || val === undefined) {
				throw new TypeError('Object.assign cannot be called with null or undefined');
			}

			return Object(val);
		}

		function shouldUseNative() {
			try {
				if (!Object.assign) {
					return false;
				}

				// Detect buggy property enumeration order in older V8 versions.

				// https://bugs.chromium.org/p/v8/issues/detail?id=4118
				var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
				test1[5] = 'de';
				if (Object.getOwnPropertyNames(test1)[0] === '5') {
					return false;
				}

				// https://bugs.chromium.org/p/v8/issues/detail?id=3056
				var test2 = {};
				for (var i = 0; i < 10; i++) {
					test2['_' + String.fromCharCode(i)] = i;
				}
				var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
					return test2[n];
				});
				if (order2.join('') !== '0123456789') {
					return false;
				}

				// https://bugs.chromium.org/p/v8/issues/detail?id=3056
				var test3 = {};
				'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
					test3[letter] = letter;
				});
				if (Object.keys(Object.assign({}, test3)).join('') !==
						'abcdefghijklmnopqrst') {
					return false;
				}

				return true;
			} catch (err) {
				// We don't expect any of the above to throw, but better to be safe.
				return false;
			}
		}

		objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
			var from;
			var to = toObject(target);
			var symbols;

			for (var s = 1; s < arguments.length; s++) {
				from = Object(arguments[s]);

				for (var key in from) {
					if (hasOwnProperty.call(from, key)) {
						to[key] = from[key];
					}
				}

				if (getOwnPropertySymbols) {
					symbols = getOwnPropertySymbols(from);
					for (var i = 0; i < symbols.length; i++) {
						if (propIsEnumerable.call(from, symbols[i])) {
							to[symbols[i]] = from[symbols[i]];
						}
					}
				}
			}

			return to;
		};
		return objectAssign;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret_1;
	var hasRequiredReactPropTypesSecret;

	function requireReactPropTypesSecret () {
		if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
		hasRequiredReactPropTypesSecret = 1;

		var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

		ReactPropTypesSecret_1 = ReactPropTypesSecret;
		return ReactPropTypesSecret_1;
	}

	var has;
	var hasRequiredHas;

	function requireHas () {
		if (hasRequiredHas) return has;
		hasRequiredHas = 1;
		has = Function.call.bind(Object.prototype.hasOwnProperty);
		return has;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var checkPropTypes_1;
	var hasRequiredCheckPropTypes;

	function requireCheckPropTypes () {
		if (hasRequiredCheckPropTypes) return checkPropTypes_1;
		hasRequiredCheckPropTypes = 1;

		var printWarning = function() {};

		if (process.env.NODE_ENV !== 'production') {
		  var ReactPropTypesSecret = requireReactPropTypesSecret();
		  var loggedTypeFailures = {};
		  var has = requireHas();

		  printWarning = function(text) {
		    var message = 'Warning: ' + text;
		    if (typeof console !== 'undefined') {
		      console.error(message);
		    }
		    try {
		      // --- Welcome to debugging React ---
		      // This error was thrown as a convenience so that you can use this stack
		      // to find the callsite that caused this warning to fire.
		      throw new Error(message);
		    } catch (x) { /**/ }
		  };
		}

		/**
		 * Assert that the values match with the type specs.
		 * Error messages are memorized and will only be shown once.
		 *
		 * @param {object} typeSpecs Map of name to a ReactPropType
		 * @param {object} values Runtime values that need to be type-checked
		 * @param {string} location e.g. "prop", "context", "child context"
		 * @param {string} componentName Name of the component for error messages.
		 * @param {?Function} getStack Returns the component stack.
		 * @private
		 */
		function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
		  if (process.env.NODE_ENV !== 'production') {
		    for (var typeSpecName in typeSpecs) {
		      if (has(typeSpecs, typeSpecName)) {
		        var error;
		        // Prop type validation may throw. In case they do, we don't want to
		        // fail the render phase where it didn't fail before. So we log it.
		        // After these have been cleaned up, we'll let them throw.
		        try {
		          // This is intentionally an invariant that gets caught. It's the same
		          // behavior as without this statement except with a better message.
		          if (typeof typeSpecs[typeSpecName] !== 'function') {
		            var err = Error(
		              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
		              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' +
		              'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
		            );
		            err.name = 'Invariant Violation';
		            throw err;
		          }
		          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
		        } catch (ex) {
		          error = ex;
		        }
		        if (error && !(error instanceof Error)) {
		          printWarning(
		            (componentName || 'React class') + ': type specification of ' +
		            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
		            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
		            'You may have forgotten to pass an argument to the type checker ' +
		            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
		            'shape all require an argument).'
		          );
		        }
		        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
		          // Only monitor this failure once because there tends to be a lot of the
		          // same error.
		          loggedTypeFailures[error.message] = true;

		          var stack = getStack ? getStack() : '';

		          printWarning(
		            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
		          );
		        }
		      }
		    }
		  }
		}

		/**
		 * Resets warning cache when testing.
		 *
		 * @private
		 */
		checkPropTypes.resetWarningCache = function() {
		  if (process.env.NODE_ENV !== 'production') {
		    loggedTypeFailures = {};
		  }
		};

		checkPropTypes_1 = checkPropTypes;
		return checkPropTypes_1;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var factoryWithTypeCheckers;
	var hasRequiredFactoryWithTypeCheckers;

	function requireFactoryWithTypeCheckers () {
		if (hasRequiredFactoryWithTypeCheckers) return factoryWithTypeCheckers;
		hasRequiredFactoryWithTypeCheckers = 1;

		var ReactIs = requireReactIs();
		var assign = requireObjectAssign();

		var ReactPropTypesSecret = requireReactPropTypesSecret();
		var has = requireHas();
		var checkPropTypes = requireCheckPropTypes();

		var printWarning = function() {};

		if (process.env.NODE_ENV !== 'production') {
		  printWarning = function(text) {
		    var message = 'Warning: ' + text;
		    if (typeof console !== 'undefined') {
		      console.error(message);
		    }
		    try {
		      // --- Welcome to debugging React ---
		      // This error was thrown as a convenience so that you can use this stack
		      // to find the callsite that caused this warning to fire.
		      throw new Error(message);
		    } catch (x) {}
		  };
		}

		function emptyFunctionThatReturnsNull() {
		  return null;
		}

		factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
		  /* global Symbol */
		  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
		  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

		  /**
		   * Returns the iterator method function contained on the iterable object.
		   *
		   * Be sure to invoke the function with the iterable as context:
		   *
		   *     var iteratorFn = getIteratorFn(myIterable);
		   *     if (iteratorFn) {
		   *       var iterator = iteratorFn.call(myIterable);
		   *       ...
		   *     }
		   *
		   * @param {?object} maybeIterable
		   * @return {?function}
		   */
		  function getIteratorFn(maybeIterable) {
		    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
		    if (typeof iteratorFn === 'function') {
		      return iteratorFn;
		    }
		  }

		  /**
		   * Collection of methods that allow declaration and validation of props that are
		   * supplied to React components. Example usage:
		   *
		   *   var Props = require('ReactPropTypes');
		   *   var MyArticle = React.createClass({
		   *     propTypes: {
		   *       // An optional string prop named "description".
		   *       description: Props.string,
		   *
		   *       // A required enum prop named "category".
		   *       category: Props.oneOf(['News','Photos']).isRequired,
		   *
		   *       // A prop named "dialog" that requires an instance of Dialog.
		   *       dialog: Props.instanceOf(Dialog).isRequired
		   *     },
		   *     render: function() { ... }
		   *   });
		   *
		   * A more formal specification of how these methods are used:
		   *
		   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
		   *   decl := ReactPropTypes.{type}(.isRequired)?
		   *
		   * Each and every declaration produces a function with the same signature. This
		   * allows the creation of custom validation functions. For example:
		   *
		   *  var MyLink = React.createClass({
		   *    propTypes: {
		   *      // An optional string or URI prop named "href".
		   *      href: function(props, propName, componentName) {
		   *        var propValue = props[propName];
		   *        if (propValue != null && typeof propValue !== 'string' &&
		   *            !(propValue instanceof URI)) {
		   *          return new Error(
		   *            'Expected a string or an URI for ' + propName + ' in ' +
		   *            componentName
		   *          );
		   *        }
		   *      }
		   *    },
		   *    render: function() {...}
		   *  });
		   *
		   * @internal
		   */

		  var ANONYMOUS = '<<anonymous>>';

		  // Important!
		  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
		  var ReactPropTypes = {
		    array: createPrimitiveTypeChecker('array'),
		    bigint: createPrimitiveTypeChecker('bigint'),
		    bool: createPrimitiveTypeChecker('boolean'),
		    func: createPrimitiveTypeChecker('function'),
		    number: createPrimitiveTypeChecker('number'),
		    object: createPrimitiveTypeChecker('object'),
		    string: createPrimitiveTypeChecker('string'),
		    symbol: createPrimitiveTypeChecker('symbol'),

		    any: createAnyTypeChecker(),
		    arrayOf: createArrayOfTypeChecker,
		    element: createElementTypeChecker(),
		    elementType: createElementTypeTypeChecker(),
		    instanceOf: createInstanceTypeChecker,
		    node: createNodeChecker(),
		    objectOf: createObjectOfTypeChecker,
		    oneOf: createEnumTypeChecker,
		    oneOfType: createUnionTypeChecker,
		    shape: createShapeTypeChecker,
		    exact: createStrictShapeTypeChecker,
		  };

		  /**
		   * inlined Object.is polyfill to avoid requiring consumers ship their own
		   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
		   */
		  /*eslint-disable no-self-compare*/
		  function is(x, y) {
		    // SameValue algorithm
		    if (x === y) {
		      // Steps 1-5, 7-10
		      // Steps 6.b-6.e: +0 != -0
		      return x !== 0 || 1 / x === 1 / y;
		    } else {
		      // Step 6.a: NaN == NaN
		      return x !== x && y !== y;
		    }
		  }
		  /*eslint-enable no-self-compare*/

		  /**
		   * We use an Error-like object for backward compatibility as people may call
		   * PropTypes directly and inspect their output. However, we don't use real
		   * Errors anymore. We don't inspect their stack anyway, and creating them
		   * is prohibitively expensive if they are created too often, such as what
		   * happens in oneOfType() for any type before the one that matched.
		   */
		  function PropTypeError(message, data) {
		    this.message = message;
		    this.data = data && typeof data === 'object' ? data: {};
		    this.stack = '';
		  }
		  // Make `instanceof Error` still work for returned errors.
		  PropTypeError.prototype = Error.prototype;

		  function createChainableTypeChecker(validate) {
		    if (process.env.NODE_ENV !== 'production') {
		      var manualPropTypeCallCache = {};
		      var manualPropTypeWarningCount = 0;
		    }
		    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
		      componentName = componentName || ANONYMOUS;
		      propFullName = propFullName || propName;

		      if (secret !== ReactPropTypesSecret) {
		        if (throwOnDirectAccess) {
		          // New behavior only for users of `prop-types` package
		          var err = new Error(
		            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
		            'Use `PropTypes.checkPropTypes()` to call them. ' +
		            'Read more at http://fb.me/use-check-prop-types'
		          );
		          err.name = 'Invariant Violation';
		          throw err;
		        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
		          // Old behavior for people using React.PropTypes
		          var cacheKey = componentName + ':' + propName;
		          if (
		            !manualPropTypeCallCache[cacheKey] &&
		            // Avoid spamming the console because they are often not actionable except for lib authors
		            manualPropTypeWarningCount < 3
		          ) {
		            printWarning(
		              'You are manually calling a React.PropTypes validation ' +
		              'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' +
		              'and will throw in the standalone `prop-types` package. ' +
		              'You may be seeing this warning due to a third-party PropTypes ' +
		              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
		            );
		            manualPropTypeCallCache[cacheKey] = true;
		            manualPropTypeWarningCount++;
		          }
		        }
		      }
		      if (props[propName] == null) {
		        if (isRequired) {
		          if (props[propName] === null) {
		            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
		          }
		          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
		        }
		        return null;
		      } else {
		        return validate(props, propName, componentName, location, propFullName);
		      }
		    }

		    var chainedCheckType = checkType.bind(null, false);
		    chainedCheckType.isRequired = checkType.bind(null, true);

		    return chainedCheckType;
		  }

		  function createPrimitiveTypeChecker(expectedType) {
		    function validate(props, propName, componentName, location, propFullName, secret) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== expectedType) {
		        // `propValue` being instance of, say, date/regexp, pass the 'object'
		        // check, but we can offer a more precise error message here rather than
		        // 'of type `object`'.
		        var preciseType = getPreciseType(propValue);

		        return new PropTypeError(
		          'Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'),
		          {expectedType: expectedType}
		        );
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createAnyTypeChecker() {
		    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
		  }

		  function createArrayOfTypeChecker(typeChecker) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (typeof typeChecker !== 'function') {
		        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
		      }
		      var propValue = props[propName];
		      if (!Array.isArray(propValue)) {
		        var propType = getPropType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
		      }
		      for (var i = 0; i < propValue.length; i++) {
		        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
		        if (error instanceof Error) {
		          return error;
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createElementTypeChecker() {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      if (!isValidElement(propValue)) {
		        var propType = getPropType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createElementTypeTypeChecker() {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      if (!ReactIs.isValidElementType(propValue)) {
		        var propType = getPropType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createInstanceTypeChecker(expectedClass) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (!(props[propName] instanceof expectedClass)) {
		        var expectedClassName = expectedClass.name || ANONYMOUS;
		        var actualClassName = getClassName(props[propName]);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createEnumTypeChecker(expectedValues) {
		    if (!Array.isArray(expectedValues)) {
		      if (process.env.NODE_ENV !== 'production') {
		        if (arguments.length > 1) {
		          printWarning(
		            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
		            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
		          );
		        } else {
		          printWarning('Invalid argument supplied to oneOf, expected an array.');
		        }
		      }
		      return emptyFunctionThatReturnsNull;
		    }

		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      for (var i = 0; i < expectedValues.length; i++) {
		        if (is(propValue, expectedValues[i])) {
		          return null;
		        }
		      }

		      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
		        var type = getPreciseType(value);
		        if (type === 'symbol') {
		          return String(value);
		        }
		        return value;
		      });
		      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createObjectOfTypeChecker(typeChecker) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (typeof typeChecker !== 'function') {
		        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
		      }
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
		      }
		      for (var key in propValue) {
		        if (has(propValue, key)) {
		          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
		          if (error instanceof Error) {
		            return error;
		          }
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createUnionTypeChecker(arrayOfTypeCheckers) {
		    if (!Array.isArray(arrayOfTypeCheckers)) {
		      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
		      return emptyFunctionThatReturnsNull;
		    }

		    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
		      var checker = arrayOfTypeCheckers[i];
		      if (typeof checker !== 'function') {
		        printWarning(
		          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
		          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
		        );
		        return emptyFunctionThatReturnsNull;
		      }
		    }

		    function validate(props, propName, componentName, location, propFullName) {
		      var expectedTypes = [];
		      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
		        var checker = arrayOfTypeCheckers[i];
		        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
		        if (checkerResult == null) {
		          return null;
		        }
		        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
		          expectedTypes.push(checkerResult.data.expectedType);
		        }
		      }
		      var expectedTypesMessage = (expectedTypes.length > 0) ? ', expected one of type [' + expectedTypes.join(', ') + ']': '';
		      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createNodeChecker() {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (!isNode(props[propName])) {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function invalidValidatorError(componentName, location, propFullName, key, type) {
		    return new PropTypeError(
		      (componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' +
		      'it must be a function, usually from the `prop-types` package, but received `' + type + '`.'
		    );
		  }

		  function createShapeTypeChecker(shapeTypes) {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
		      }
		      for (var key in shapeTypes) {
		        var checker = shapeTypes[key];
		        if (typeof checker !== 'function') {
		          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
		        }
		        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
		        if (error) {
		          return error;
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createStrictShapeTypeChecker(shapeTypes) {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
		      }
		      // We need to check all keys in case some are required but missing from props.
		      var allKeys = assign({}, props[propName], shapeTypes);
		      for (var key in allKeys) {
		        var checker = shapeTypes[key];
		        if (has(shapeTypes, key) && typeof checker !== 'function') {
		          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
		        }
		        if (!checker) {
		          return new PropTypeError(
		            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
		            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
		            '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  ')
		          );
		        }
		        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
		        if (error) {
		          return error;
		        }
		      }
		      return null;
		    }

		    return createChainableTypeChecker(validate);
		  }

		  function isNode(propValue) {
		    switch (typeof propValue) {
		      case 'number':
		      case 'string':
		      case 'undefined':
		        return true;
		      case 'boolean':
		        return !propValue;
		      case 'object':
		        if (Array.isArray(propValue)) {
		          return propValue.every(isNode);
		        }
		        if (propValue === null || isValidElement(propValue)) {
		          return true;
		        }

		        var iteratorFn = getIteratorFn(propValue);
		        if (iteratorFn) {
		          var iterator = iteratorFn.call(propValue);
		          var step;
		          if (iteratorFn !== propValue.entries) {
		            while (!(step = iterator.next()).done) {
		              if (!isNode(step.value)) {
		                return false;
		              }
		            }
		          } else {
		            // Iterator will provide entry [k,v] tuples rather than values.
		            while (!(step = iterator.next()).done) {
		              var entry = step.value;
		              if (entry) {
		                if (!isNode(entry[1])) {
		                  return false;
		                }
		              }
		            }
		          }
		        } else {
		          return false;
		        }

		        return true;
		      default:
		        return false;
		    }
		  }

		  function isSymbol(propType, propValue) {
		    // Native Symbol.
		    if (propType === 'symbol') {
		      return true;
		    }

		    // falsy value can't be a Symbol
		    if (!propValue) {
		      return false;
		    }

		    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
		    if (propValue['@@toStringTag'] === 'Symbol') {
		      return true;
		    }

		    // Fallback for non-spec compliant Symbols which are polyfilled.
		    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
		      return true;
		    }

		    return false;
		  }

		  // Equivalent of `typeof` but with special handling for array and regexp.
		  function getPropType(propValue) {
		    var propType = typeof propValue;
		    if (Array.isArray(propValue)) {
		      return 'array';
		    }
		    if (propValue instanceof RegExp) {
		      // Old webkits (at least until Android 4.0) return 'function' rather than
		      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
		      // passes PropTypes.object.
		      return 'object';
		    }
		    if (isSymbol(propType, propValue)) {
		      return 'symbol';
		    }
		    return propType;
		  }

		  // This handles more types than `getPropType`. Only used for error messages.
		  // See `createPrimitiveTypeChecker`.
		  function getPreciseType(propValue) {
		    if (typeof propValue === 'undefined' || propValue === null) {
		      return '' + propValue;
		    }
		    var propType = getPropType(propValue);
		    if (propType === 'object') {
		      if (propValue instanceof Date) {
		        return 'date';
		      } else if (propValue instanceof RegExp) {
		        return 'regexp';
		      }
		    }
		    return propType;
		  }

		  // Returns a string that is postfixed to a warning about an invalid type.
		  // For example, "undefined" or "of type array"
		  function getPostfixForTypeWarning(value) {
		    var type = getPreciseType(value);
		    switch (type) {
		      case 'array':
		      case 'object':
		        return 'an ' + type;
		      case 'boolean':
		      case 'date':
		      case 'regexp':
		        return 'a ' + type;
		      default:
		        return type;
		    }
		  }

		  // Returns class name of the object, if any.
		  function getClassName(propValue) {
		    if (!propValue.constructor || !propValue.constructor.name) {
		      return ANONYMOUS;
		    }
		    return propValue.constructor.name;
		  }

		  ReactPropTypes.checkPropTypes = checkPropTypes;
		  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
		  ReactPropTypes.PropTypes = ReactPropTypes;

		  return ReactPropTypes;
		};
		return factoryWithTypeCheckers;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var factoryWithThrowingShims;
	var hasRequiredFactoryWithThrowingShims;

	function requireFactoryWithThrowingShims () {
		if (hasRequiredFactoryWithThrowingShims) return factoryWithThrowingShims;
		hasRequiredFactoryWithThrowingShims = 1;

		var ReactPropTypesSecret = requireReactPropTypesSecret();

		function emptyFunction() {}
		function emptyFunctionWithReset() {}
		emptyFunctionWithReset.resetWarningCache = emptyFunction;

		factoryWithThrowingShims = function() {
		  function shim(props, propName, componentName, location, propFullName, secret) {
		    if (secret === ReactPropTypesSecret) {
		      // It is still safe when called from React.
		      return;
		    }
		    var err = new Error(
		      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
		      'Use PropTypes.checkPropTypes() to call them. ' +
		      'Read more at http://fb.me/use-check-prop-types'
		    );
		    err.name = 'Invariant Violation';
		    throw err;
		  }	  shim.isRequired = shim;
		  function getShim() {
		    return shim;
		  }	  // Important!
		  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
		  var ReactPropTypes = {
		    array: shim,
		    bigint: shim,
		    bool: shim,
		    func: shim,
		    number: shim,
		    object: shim,
		    string: shim,
		    symbol: shim,

		    any: shim,
		    arrayOf: getShim,
		    element: shim,
		    elementType: shim,
		    instanceOf: getShim,
		    node: shim,
		    objectOf: getShim,
		    oneOf: getShim,
		    oneOfType: getShim,
		    shape: getShim,
		    exact: getShim,

		    checkPropTypes: emptyFunctionWithReset,
		    resetWarningCache: emptyFunction
		  };

		  ReactPropTypes.PropTypes = ReactPropTypes;

		  return ReactPropTypes;
		};
		return factoryWithThrowingShims;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	if (process.env.NODE_ENV !== 'production') {
	  var ReactIs = requireReactIs();

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  propTypes.exports = requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  propTypes.exports = requireFactoryWithThrowingShims()();
	}

	var propTypesExports = propTypes.exports;
	var PropTypes = /*@__PURE__*/getDefaultExportFromCjs(propTypesExports);

	function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);else for(t in e)e[t]&&(n&&(n+=" "),n+=t);return n}function clsx(){for(var e,t,f=0,n="";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}

	function chainPropTypes(propType1, propType2) {
	  if (process.env.NODE_ENV === 'production') {
	    return () => null;
	  }
	  return function validate(...args) {
	    return propType1(...args) || propType2(...args);
	  };
	}

	function isPlainObject$3(item) {
	  return item !== null && typeof item === 'object' && item.constructor === Object;
	}
	function deepClone(source) {
	  if (!isPlainObject$3(source)) {
	    return source;
	  }
	  const output = {};
	  Object.keys(source).forEach(key => {
	    output[key] = deepClone(source[key]);
	  });
	  return output;
	}
	function deepmerge(target, source, options = {
	  clone: true
	}) {
	  const output = options.clone ? _extends$2({}, target) : target;
	  if (isPlainObject$3(target) && isPlainObject$3(source)) {
	    Object.keys(source).forEach(key => {
	      // Avoid prototype pollution
	      if (key === '__proto__') {
	        return;
	      }
	      if (isPlainObject$3(source[key]) && key in target && isPlainObject$3(target[key])) {
	        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.
	        output[key] = deepmerge(target[key], source[key], options);
	      } else if (options.clone) {
	        output[key] = isPlainObject$3(source[key]) ? deepClone(source[key]) : source[key];
	      } else {
	        output[key] = source[key];
	      }
	    });
	  }
	  return output;
	}

	function isClassComponent$1(elementType) {
	  // elementType.prototype?.isReactComponent
	  const {
	    prototype = {}
	  } = elementType;
	  return Boolean(prototype.isReactComponent);
	}
	function acceptingRef(props, propName, componentName, location, propFullName) {
	  const element = props[propName];
	  const safePropName = propFullName || propName;
	  if (element == null ||
	  // When server-side rendering React doesn't warn either.
	  // This is not an accurate check for SSR.
	  // This is only in place for Emotion compat.
	  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
	  typeof window === 'undefined') {
	    return null;
	  }
	  let warningHint;
	  const elementType = element.type;
	  /**
	   * Blacklisting instead of whitelisting
	   *
	   * Blacklisting will miss some components, such as React.Fragment. Those will at least
	   * trigger a warning in React.
	   * We can't whitelist because there is no safe way to detect React.forwardRef
	   * or class components. "Safe" means there's no public API.
	   *
	   */
	  if (typeof elementType === 'function' && !isClassComponent$1(elementType)) {
	    warningHint = 'Did you accidentally use a plain function component for an element instead?';
	  }
	  if (warningHint !== undefined) {
	    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an element that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');
	  }
	  return null;
	}
	const elementAcceptingRef = chainPropTypes(PropTypes.element, acceptingRef);
	elementAcceptingRef.isRequired = chainPropTypes(PropTypes.element.isRequired, acceptingRef);
	var elementAcceptingRef$1 = elementAcceptingRef;

	function isClassComponent(elementType) {
	  // elementType.prototype?.isReactComponent
	  const {
	    prototype = {}
	  } = elementType;
	  return Boolean(prototype.isReactComponent);
	}
	function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
	  const propValue = props[propName];
	  const safePropName = propFullName || propName;
	  if (propValue == null ||
	  // When server-side rendering React doesn't warn either.
	  // This is not an accurate check for SSR.
	  // This is only in place for emotion compat.
	  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
	  typeof window === 'undefined') {
	    return null;
	  }
	  let warningHint;

	  /**
	   * Blacklisting instead of whitelisting
	   *
	   * Blacklisting will miss some components, such as React.Fragment. Those will at least
	   * trigger a warning in React.
	   * We can't whitelist because there is no safe way to detect React.forwardRef
	   * or class components. "Safe" means there's no public API.
	   *
	   */
	  if (typeof propValue === 'function' && !isClassComponent(propValue)) {
	    warningHint = 'Did you accidentally provide a plain function component instead?';
	  }
	  if (warningHint !== undefined) {
	    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an element type that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');
	  }
	  return null;
	}
	var elementTypeAcceptingRef$1 = chainPropTypes(PropTypes.elementType, elementTypeAcceptingRef);

	// This module is based on https://github.com/airbnb/prop-types-exact repository.
	// However, in order to reduce the number of dependencies and to remove some extra safe checks
	// the module was forked.
	const specialProperty = 'exact-prop: \u200b';
	function exactProp(propTypes) {
	  if (process.env.NODE_ENV === 'production') {
	    return propTypes;
	  }
	  return _extends$2({}, propTypes, {
	    [specialProperty]: props => {
	      const unsupportedProps = Object.keys(props).filter(prop => !propTypes.hasOwnProperty(prop));
	      if (unsupportedProps.length > 0) {
	        return new Error(`The following props are not supported: ${unsupportedProps.map(prop => `\`${prop}\``).join(', ')}. Please remove them.`);
	      }
	      return null;
	    }
	  });
	}

	/**
	 * WARNING: Don't import this directly.
	 * Use `MuiError` from `@mui/utils/macros/MuiError.macro` instead.
	 * @param {number} code
	 */
	function formatMuiErrorMessage(code) {
	  // Apply babel-plugin-transform-template-literals in loose mode
	  // loose mode is safe iff we're concatenating primitives
	  // see https://babeljs.io/docs/en/babel-plugin-transform-template-literals#loose
	  /* eslint-disable prefer-template */
	  let url = 'https://mui.com/production-error/?code=' + code;
	  for (let i = 1; i < arguments.length; i += 1) {
	    // rest params over-transpile for this case
	    // eslint-disable-next-line prefer-rest-params
	    url += '&args[]=' + encodeURIComponent(arguments[i]);
	  }
	  return 'Minified MUI error #' + code + '; visit ' + url + ' for the full message.';
	  /* eslint-enable prefer-template */
	}

	var reactIs$2 = {exports: {}};

	var reactIs_production_min$1 = {};

	/**
	 * @license React
	 * react-is.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactIs_production_min$1;

	function requireReactIs_production_min$1 () {
		if (hasRequiredReactIs_production_min$1) return reactIs_production_min$1;
		hasRequiredReactIs_production_min$1 = 1;
	var b=Symbol.for("react.element"),c=Symbol.for("react.portal"),d=Symbol.for("react.fragment"),e=Symbol.for("react.strict_mode"),f=Symbol.for("react.profiler"),g=Symbol.for("react.provider"),h=Symbol.for("react.context"),k=Symbol.for("react.server_context"),l=Symbol.for("react.forward_ref"),m=Symbol.for("react.suspense"),n=Symbol.for("react.suspense_list"),p=Symbol.for("react.memo"),q=Symbol.for("react.lazy"),t=Symbol.for("react.offscreen"),u;u=Symbol.for("react.module.reference");
		function v(a){if("object"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}reactIs_production_min$1.ContextConsumer=h;reactIs_production_min$1.ContextProvider=g;reactIs_production_min$1.Element=b;reactIs_production_min$1.ForwardRef=l;reactIs_production_min$1.Fragment=d;reactIs_production_min$1.Lazy=q;reactIs_production_min$1.Memo=p;reactIs_production_min$1.Portal=c;reactIs_production_min$1.Profiler=f;reactIs_production_min$1.StrictMode=e;reactIs_production_min$1.Suspense=m;
		reactIs_production_min$1.SuspenseList=n;reactIs_production_min$1.isAsyncMode=function(){return !1};reactIs_production_min$1.isConcurrentMode=function(){return !1};reactIs_production_min$1.isContextConsumer=function(a){return v(a)===h};reactIs_production_min$1.isContextProvider=function(a){return v(a)===g};reactIs_production_min$1.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===b};reactIs_production_min$1.isForwardRef=function(a){return v(a)===l};reactIs_production_min$1.isFragment=function(a){return v(a)===d};reactIs_production_min$1.isLazy=function(a){return v(a)===q};reactIs_production_min$1.isMemo=function(a){return v(a)===p};
		reactIs_production_min$1.isPortal=function(a){return v(a)===c};reactIs_production_min$1.isProfiler=function(a){return v(a)===f};reactIs_production_min$1.isStrictMode=function(a){return v(a)===e};reactIs_production_min$1.isSuspense=function(a){return v(a)===m};reactIs_production_min$1.isSuspenseList=function(a){return v(a)===n};
		reactIs_production_min$1.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||"object"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};reactIs_production_min$1.typeOf=v;
		return reactIs_production_min$1;
	}

	var reactIs_development$1 = {};

	/**
	 * @license React
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactIs_development$1;

	function requireReactIs_development$1 () {
		if (hasRequiredReactIs_development$1) return reactIs_development$1;
		hasRequiredReactIs_development$1 = 1;

		if (process.env.NODE_ENV !== "production") {
		  (function() {

		// ATTENTION
		// When adding new symbols to this file,
		// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
		// The Symbol used to tag the ReactElement-like types.
		var REACT_ELEMENT_TYPE = Symbol.for('react.element');
		var REACT_PORTAL_TYPE = Symbol.for('react.portal');
		var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
		var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
		var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
		var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
		var REACT_CONTEXT_TYPE = Symbol.for('react.context');
		var REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');
		var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
		var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
		var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
		var REACT_MEMO_TYPE = Symbol.for('react.memo');
		var REACT_LAZY_TYPE = Symbol.for('react.lazy');
		var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');

		// -----------------------------------------------------------------------------

		var enableScopeAPI = false; // Experimental Create Event Handle API.
		var enableCacheElement = false;
		var enableTransitionTracing = false; // No known bugs, but needs performance testing

		var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
		// stuff. Intended to enable React core members to more easily debug scheduling
		// issues in DEV builds.

		var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

		var REACT_MODULE_REFERENCE;

		{
		  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
		}

		function isValidElementType(type) {
		  if (typeof type === 'string' || typeof type === 'function') {
		    return true;
		  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


		  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
		    return true;
		  }

		  if (typeof type === 'object' && type !== null) {
		    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
		    // types supported by any Flight configuration anywhere since
		    // we don't know which Flight build this will end up being used
		    // with.
		    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
		      return true;
		    }
		  }

		  return false;
		}

		function typeOf(object) {
		  if (typeof object === 'object' && object !== null) {
		    var $$typeof = object.$$typeof;

		    switch ($$typeof) {
		      case REACT_ELEMENT_TYPE:
		        var type = object.type;

		        switch (type) {
		          case REACT_FRAGMENT_TYPE:
		          case REACT_PROFILER_TYPE:
		          case REACT_STRICT_MODE_TYPE:
		          case REACT_SUSPENSE_TYPE:
		          case REACT_SUSPENSE_LIST_TYPE:
		            return type;

		          default:
		            var $$typeofType = type && type.$$typeof;

		            switch ($$typeofType) {
		              case REACT_SERVER_CONTEXT_TYPE:
		              case REACT_CONTEXT_TYPE:
		              case REACT_FORWARD_REF_TYPE:
		              case REACT_LAZY_TYPE:
		              case REACT_MEMO_TYPE:
		              case REACT_PROVIDER_TYPE:
		                return $$typeofType;

		              default:
		                return $$typeof;
		            }

		        }

		      case REACT_PORTAL_TYPE:
		        return $$typeof;
		    }
		  }

		  return undefined;
		}
		var ContextConsumer = REACT_CONTEXT_TYPE;
		var ContextProvider = REACT_PROVIDER_TYPE;
		var Element = REACT_ELEMENT_TYPE;
		var ForwardRef = REACT_FORWARD_REF_TYPE;
		var Fragment = REACT_FRAGMENT_TYPE;
		var Lazy = REACT_LAZY_TYPE;
		var Memo = REACT_MEMO_TYPE;
		var Portal = REACT_PORTAL_TYPE;
		var Profiler = REACT_PROFILER_TYPE;
		var StrictMode = REACT_STRICT_MODE_TYPE;
		var Suspense = REACT_SUSPENSE_TYPE;
		var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
		var hasWarnedAboutDeprecatedIsAsyncMode = false;
		var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

		function isAsyncMode(object) {
		  {
		    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
		      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

		      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
		    }
		  }

		  return false;
		}
		function isConcurrentMode(object) {
		  {
		    if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
		      hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

		      console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
		    }
		  }

		  return false;
		}
		function isContextConsumer(object) {
		  return typeOf(object) === REACT_CONTEXT_TYPE;
		}
		function isContextProvider(object) {
		  return typeOf(object) === REACT_PROVIDER_TYPE;
		}
		function isElement(object) {
		  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
		}
		function isForwardRef(object) {
		  return typeOf(object) === REACT_FORWARD_REF_TYPE;
		}
		function isFragment(object) {
		  return typeOf(object) === REACT_FRAGMENT_TYPE;
		}
		function isLazy(object) {
		  return typeOf(object) === REACT_LAZY_TYPE;
		}
		function isMemo(object) {
		  return typeOf(object) === REACT_MEMO_TYPE;
		}
		function isPortal(object) {
		  return typeOf(object) === REACT_PORTAL_TYPE;
		}
		function isProfiler(object) {
		  return typeOf(object) === REACT_PROFILER_TYPE;
		}
		function isStrictMode(object) {
		  return typeOf(object) === REACT_STRICT_MODE_TYPE;
		}
		function isSuspense(object) {
		  return typeOf(object) === REACT_SUSPENSE_TYPE;
		}
		function isSuspenseList(object) {
		  return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
		}

		reactIs_development$1.ContextConsumer = ContextConsumer;
		reactIs_development$1.ContextProvider = ContextProvider;
		reactIs_development$1.Element = Element;
		reactIs_development$1.ForwardRef = ForwardRef;
		reactIs_development$1.Fragment = Fragment;
		reactIs_development$1.Lazy = Lazy;
		reactIs_development$1.Memo = Memo;
		reactIs_development$1.Portal = Portal;
		reactIs_development$1.Profiler = Profiler;
		reactIs_development$1.StrictMode = StrictMode;
		reactIs_development$1.Suspense = Suspense;
		reactIs_development$1.SuspenseList = SuspenseList;
		reactIs_development$1.isAsyncMode = isAsyncMode;
		reactIs_development$1.isConcurrentMode = isConcurrentMode;
		reactIs_development$1.isContextConsumer = isContextConsumer;
		reactIs_development$1.isContextProvider = isContextProvider;
		reactIs_development$1.isElement = isElement;
		reactIs_development$1.isForwardRef = isForwardRef;
		reactIs_development$1.isFragment = isFragment;
		reactIs_development$1.isLazy = isLazy;
		reactIs_development$1.isMemo = isMemo;
		reactIs_development$1.isPortal = isPortal;
		reactIs_development$1.isProfiler = isProfiler;
		reactIs_development$1.isStrictMode = isStrictMode;
		reactIs_development$1.isSuspense = isSuspense;
		reactIs_development$1.isSuspenseList = isSuspenseList;
		reactIs_development$1.isValidElementType = isValidElementType;
		reactIs_development$1.typeOf = typeOf;
		  })();
		}
		return reactIs_development$1;
	}

	if (process.env.NODE_ENV === 'production') {
	  reactIs$2.exports = requireReactIs_production_min$1();
	} else {
	  reactIs$2.exports = requireReactIs_development$1();
	}

	var reactIsExports$1 = reactIs$2.exports;

	// Simplified polyfill for IE11 support
	// https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3
	const fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
	function getFunctionName(fn) {
	  const match = `${fn}`.match(fnNameMatchRegex);
	  const name = match && match[1];
	  return name || '';
	}
	function getFunctionComponentName(Component, fallback = '') {
	  return Component.displayName || Component.name || getFunctionName(Component) || fallback;
	}
	function getWrappedName(outerType, innerType, wrapperName) {
	  const functionName = getFunctionComponentName(innerType);
	  return outerType.displayName || (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName);
	}

	/**
	 * cherry-pick from
	 * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js
	 * originally forked from recompose/getDisplayName with added IE11 support
	 */
	function getDisplayName(Component) {
	  if (Component == null) {
	    return undefined;
	  }
	  if (typeof Component === 'string') {
	    return Component;
	  }
	  if (typeof Component === 'function') {
	    return getFunctionComponentName(Component, 'Component');
	  }

	  // TypeScript can't have components as objects but they exist in the form of `memo` or `Suspense`
	  if (typeof Component === 'object') {
	    switch (Component.$$typeof) {
	      case reactIsExports$1.ForwardRef:
	        return getWrappedName(Component, Component.render, 'ForwardRef');
	      case reactIsExports$1.Memo:
	        return getWrappedName(Component, Component.type, 'memo');
	      default:
	        return undefined;
	    }
	  }
	  return undefined;
	}

	function HTMLElementType(props, propName, componentName, location, propFullName) {
	  if (process.env.NODE_ENV === 'production') {
	    return null;
	  }
	  const propValue = props[propName];
	  const safePropName = propFullName || propName;
	  if (propValue == null) {
	    return null;
	  }
	  if (propValue && propValue.nodeType !== 1) {
	    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an HTMLElement.`);
	  }
	  return null;
	}

	const refType = PropTypes.oneOfType([PropTypes.func, PropTypes.object]);
	var refType$1 = refType;

	// It should to be noted that this function isn't equivalent to `text-transform: capitalize`.
	//
	// A strict capitalization should uppercase the first letter of each word in the sentence.
	// We only handle the first word.
	function capitalize(string) {
	  if (typeof string !== 'string') {
	    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: \`capitalize(string)\` expects a string argument.` : formatMuiErrorMessage(7));
	  }
	  return string.charAt(0).toUpperCase() + string.slice(1);
	}

	/**
	 * Safe chained function.
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 */
	function createChainedFunction(...funcs) {
	  return funcs.reduce((acc, func) => {
	    if (func == null) {
	      return acc;
	    }
	    return function chainedFunction(...args) {
	      acc.apply(this, args);
	      func.apply(this, args);
	    };
	  }, () => {});
	}

	// Corresponds to 10 frames at 60 Hz.
	// A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.
	function debounce$1(func, wait = 166) {
	  let timeout;
	  function debounced(...args) {
	    const later = () => {
	      // @ts-ignore
	      func.apply(this, args);
	    };
	    clearTimeout(timeout);
	    timeout = setTimeout(later, wait);
	  }
	  debounced.clear = () => {
	    clearTimeout(timeout);
	  };
	  return debounced;
	}

	function deprecatedPropType(validator, reason) {
	  if (process.env.NODE_ENV === 'production') {
	    return () => null;
	  }
	  return (props, propName, componentName, location, propFullName) => {
	    const componentNameSafe = componentName || '<<anonymous>>';
	    const propFullNameSafe = propFullName || propName;
	    if (typeof props[propName] !== 'undefined') {
	      return new Error(`The ${location} \`${propFullNameSafe}\` of ` + `\`${componentNameSafe}\` is deprecated. ${reason}`);
	    }
	    return null;
	  };
	}

	function isMuiElement(element, muiNames) {
	  var _muiName, _element$type;
	  return /*#__PURE__*/reactExports.isValidElement(element) && muiNames.indexOf( // For server components `muiName` is avaialble in element.type._payload.value.muiName
	  // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45
	  // eslint-disable-next-line no-underscore-dangle
	  (_muiName = element.type.muiName) != null ? _muiName : (_element$type = element.type) == null || (_element$type = _element$type._payload) == null || (_element$type = _element$type.value) == null ? void 0 : _element$type.muiName) !== -1;
	}

	function ownerDocument(node) {
	  return node && node.ownerDocument || document;
	}

	function ownerWindow(node) {
	  const doc = ownerDocument(node);
	  return doc.defaultView || window;
	}

	function requirePropFactory(componentNameInError, Component) {
	  if (process.env.NODE_ENV === 'production') {
	    return () => null;
	  }

	  // eslint-disable-next-line react/forbid-foreign-prop-types
	  const prevPropTypes = Component ? _extends$2({}, Component.propTypes) : null;
	  const requireProp = requiredProp => (props, propName, componentName, location, propFullName, ...args) => {
	    const propFullNameSafe = propFullName || propName;
	    const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];
	    if (defaultTypeChecker) {
	      const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);
	      if (typeCheckerResult) {
	        return typeCheckerResult;
	      }
	    }
	    if (typeof props[propName] !== 'undefined' && !props[requiredProp]) {
	      return new Error(`The prop \`${propFullNameSafe}\` of ` + `\`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
	    }
	    return null;
	  };
	  return requireProp;
	}

	/**
	 * TODO v5: consider making it private
	 *
	 * passes {value} to {ref}
	 *
	 * WARNING: Be sure to only call this inside a callback that is passed as a ref.
	 * Otherwise, make sure to cleanup the previous {ref} if it changes. See
	 * https://github.com/mui/material-ui/issues/13539
	 *
	 * Useful if you want to expose the ref of an inner component to the public API
	 * while still using it inside the component.
	 * @param ref A ref callback or ref object. If anything falsy, this is a no-op.
	 */
	function setRef(ref, value) {
	  if (typeof ref === 'function') {
	    ref(value);
	  } else if (ref) {
	    ref.current = value;
	  }
	}

	/**
	 * A version of `React.useLayoutEffect` that does not show a warning when server-side rendering.
	 * This is useful for effects that are only needed for client-side rendering but not for SSR.
	 *
	 * Before you use this hook, make sure to read https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85
	 * and confirm it doesn't apply to your use-case.
	 */
	const useEnhancedEffect = typeof window !== 'undefined' ? reactExports.useLayoutEffect : reactExports.useEffect;
	var useEnhancedEffect$1 = useEnhancedEffect;

	let globalId = 0;
	function useGlobalId(idOverride) {
	  const [defaultId, setDefaultId] = reactExports.useState(idOverride);
	  const id = idOverride || defaultId;
	  reactExports.useEffect(() => {
	    if (defaultId == null) {
	      // Fallback to this default id when possible.
	      // Use the incrementing value for client-side rendering only.
	      // We can't use it server-side.
	      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem
	      globalId += 1;
	      setDefaultId(`mui-${globalId}`);
	    }
	  }, [defaultId]);
	  return id;
	}

	// downstream bundlers may remove unnecessary concatenation, but won't remove toString call -- Workaround for https://github.com/webpack/webpack/issues/14814
	const maybeReactUseId = React$1['useId'.toString()];
	/**
	 *
	 * @example <div id={useId()} />
	 * @param idOverride
	 * @returns {string}
	 */
	function useId(idOverride) {
	  if (maybeReactUseId !== undefined) {
	    const reactId = maybeReactUseId();
	    return idOverride != null ? idOverride : reactId;
	  }
	  // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.
	  return useGlobalId(idOverride);
	}

	function unsupportedProp(props, propName, componentName, location, propFullName) {
	  if (process.env.NODE_ENV === 'production') {
	    return null;
	  }
	  const propFullNameSafe = propFullName || propName;
	  if (typeof props[propName] !== 'undefined') {
	    return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
	  }
	  return null;
	}

	function useControlled({
	  controlled,
	  default: defaultProp,
	  name,
	  state = 'value'
	}) {
	  // isControlled is ignored in the hook dependency lists as it should never change.
	  const {
	    current: isControlled
	  } = reactExports.useRef(controlled !== undefined);
	  const [valueState, setValue] = reactExports.useState(defaultProp);
	  const value = isControlled ? controlled : valueState;
	  if (process.env.NODE_ENV !== 'production') {
	    reactExports.useEffect(() => {
	      if (isControlled !== (controlled !== undefined)) {
	        console.error([`MUI: A component is changing the ${isControlled ? '' : 'un'}controlled ${state} state of ${name} to be ${isControlled ? 'un' : ''}controlled.`, 'Elements should not switch from uncontrolled to controlled (or vice versa).', `Decide between using a controlled or uncontrolled ${name} ` + 'element for the lifetime of the component.', "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", 'More info: https://fb.me/react-controlled-components'].join('\n'));
	      }
	    }, [state, name, controlled]);
	    const {
	      current: defaultValue
	    } = reactExports.useRef(defaultProp);
	    reactExports.useEffect(() => {
	      if (!isControlled && defaultValue !== defaultProp) {
	        console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. ` + `To suppress this warning opt to use a controlled ${name}.`].join('\n'));
	      }
	    }, [JSON.stringify(defaultProp)]);
	  }
	  const setValueIfUncontrolled = reactExports.useCallback(newValue => {
	    if (!isControlled) {
	      setValue(newValue);
	    }
	  }, []);
	  return [value, setValueIfUncontrolled];
	}

	/**
	 * Inspired by https://github.com/facebook/react/issues/14099#issuecomment-440013892
	 * See RFC in https://github.com/reactjs/rfcs/pull/220
	 */

	function useEventCallback(fn) {
	  const ref = reactExports.useRef(fn);
	  useEnhancedEffect$1(() => {
	    ref.current = fn;
	  });
	  return reactExports.useCallback((...args) =>
	  // @ts-expect-error hide `this`
	  // tslint:disable-next-line:ban-comma-operator
	  (0, ref.current)(...args), []);
	}

	function useForkRef(...refs) {
	  /**
	   * This will create a new function if the refs passed to this hook change and are all defined.
	   * This means react will call the old forkRef with `null` and the new forkRef
	   * with the ref. Cleanup naturally emerges from this behavior.
	   */
	  return reactExports.useMemo(() => {
	    if (refs.every(ref => ref == null)) {
	      return null;
	    }
	    return instance => {
	      refs.forEach(ref => {
	        setRef(ref, instance);
	      });
	    };
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, refs);
	}

	let hadKeyboardEvent = true;
	let hadFocusVisibleRecently = false;
	let hadFocusVisibleRecentlyTimeout;
	const inputTypesWhitelist = {
	  text: true,
	  search: true,
	  url: true,
	  tel: true,
	  email: true,
	  password: true,
	  number: true,
	  date: true,
	  month: true,
	  week: true,
	  time: true,
	  datetime: true,
	  'datetime-local': true
	};

	/**
	 * Computes whether the given element should automatically trigger the
	 * `focus-visible` class being added, i.e. whether it should always match
	 * `:focus-visible` when focused.
	 * @param {Element} node
	 * @returns {boolean}
	 */
	function focusTriggersKeyboardModality(node) {
	  const {
	    type,
	    tagName
	  } = node;
	  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {
	    return true;
	  }
	  if (tagName === 'TEXTAREA' && !node.readOnly) {
	    return true;
	  }
	  if (node.isContentEditable) {
	    return true;
	  }
	  return false;
	}

	/**
	 * Keep track of our keyboard modality state with `hadKeyboardEvent`.
	 * If the most recent user interaction was via the keyboard;
	 * and the key press did not include a meta, alt/option, or control key;
	 * then the modality is keyboard. Otherwise, the modality is not keyboard.
	 * @param {KeyboardEvent} event
	 */
	function handleKeyDown(event) {
	  if (event.metaKey || event.altKey || event.ctrlKey) {
	    return;
	  }
	  hadKeyboardEvent = true;
	}

	/**
	 * If at any point a user clicks with a pointing device, ensure that we change
	 * the modality away from keyboard.
	 * This avoids the situation where a user presses a key on an already focused
	 * element, and then clicks on a different element, focusing it with a
	 * pointing device, while we still think we're in keyboard modality.
	 */
	function handlePointerDown() {
	  hadKeyboardEvent = false;
	}
	function handleVisibilityChange() {
	  if (this.visibilityState === 'hidden') {
	    // If the tab becomes active again, the browser will handle calling focus
	    // on the element (Safari actually calls it twice).
	    // If this tab change caused a blur on an element with focus-visible,
	    // re-apply the class when the user switches back to the tab.
	    if (hadFocusVisibleRecently) {
	      hadKeyboardEvent = true;
	    }
	  }
	}
	function prepare(doc) {
	  doc.addEventListener('keydown', handleKeyDown, true);
	  doc.addEventListener('mousedown', handlePointerDown, true);
	  doc.addEventListener('pointerdown', handlePointerDown, true);
	  doc.addEventListener('touchstart', handlePointerDown, true);
	  doc.addEventListener('visibilitychange', handleVisibilityChange, true);
	}
	function isFocusVisible(event) {
	  const {
	    target
	  } = event;
	  try {
	    return target.matches(':focus-visible');
	  } catch (error) {
	    // Browsers not implementing :focus-visible will throw a SyntaxError.
	    // We use our own heuristic for those browsers.
	    // Rethrow might be better if it's not the expected error but do we really
	    // want to crash if focus-visible malfunctioned?
	  }

	  // No need for validFocusTarget check. The user does that by attaching it to
	  // focusable events only.
	  return hadKeyboardEvent || focusTriggersKeyboardModality(target);
	}
	function useIsFocusVisible() {
	  const ref = reactExports.useCallback(node => {
	    if (node != null) {
	      prepare(node.ownerDocument);
	    }
	  }, []);
	  const isFocusVisibleRef = reactExports.useRef(false);

	  /**
	   * Should be called if a blur event is fired
	   */
	  function handleBlurVisible() {
	    // checking against potential state variable does not suffice if we focus and blur synchronously.
	    // React wouldn't have time to trigger a re-render so `focusVisible` would be stale.
	    // Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.
	    // This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751
	    // TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).
	    if (isFocusVisibleRef.current) {
	      // To detect a tab/window switch, we look for a blur event followed
	      // rapidly by a visibility change.
	      // If we don't see a visibility change within 100ms, it's probably a
	      // regular focus change.
	      hadFocusVisibleRecently = true;
	      window.clearTimeout(hadFocusVisibleRecentlyTimeout);
	      hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
	        hadFocusVisibleRecently = false;
	      }, 100);
	      isFocusVisibleRef.current = false;
	      return true;
	    }
	    return false;
	  }

	  /**
	   * Should be called if a blur event is fired
	   */
	  function handleFocusVisible(event) {
	    if (isFocusVisible(event)) {
	      isFocusVisibleRef.current = true;
	      return true;
	    }
	    return false;
	  }
	  return {
	    isFocusVisibleRef,
	    onFocus: handleFocusVisible,
	    onBlur: handleBlurVisible,
	    ref
	  };
	}

	// A change of the browser zoom change the scrollbar size.
	// Credit https://github.com/twbs/bootstrap/blob/488fd8afc535ca3a6ad4dc581f5e89217b6a36ac/js/src/util/scrollbar.js#L14-L18
	function getScrollbarSize(doc) {
	  // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
	  const documentWidth = doc.documentElement.clientWidth;
	  return Math.abs(window.innerWidth - documentWidth);
	}

	const usePreviousProps = value => {
	  const ref = reactExports.useRef({});
	  reactExports.useEffect(() => {
	    ref.current = value;
	  });
	  return ref.current;
	};
	var usePreviousProps$1 = usePreviousProps;

	function getTypeByValue(value) {
	  const valueType = typeof value;
	  switch (valueType) {
	    case 'number':
	      if (Number.isNaN(value)) {
	        return 'NaN';
	      }
	      if (!Number.isFinite(value)) {
	        return 'Infinity';
	      }
	      if (value !== Math.floor(value)) {
	        return 'float';
	      }
	      return 'number';
	    case 'object':
	      if (value === null) {
	        return 'null';
	      }
	      return value.constructor.name;
	    default:
	      return valueType;
	  }
	}

	// IE 11 support
	function ponyfillIsInteger(x) {
	  // eslint-disable-next-line no-restricted-globals
	  return typeof x === 'number' && isFinite(x) && Math.floor(x) === x;
	}
	const isInteger$2 = Number.isInteger || ponyfillIsInteger;
	function requiredInteger(props, propName, componentName, location) {
	  const propValue = props[propName];
	  if (propValue == null || !isInteger$2(propValue)) {
	    const propType = getTypeByValue(propValue);
	    return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
	  }
	  return null;
	}
	function validator(props, propName, ...other) {
	  const propValue = props[propName];
	  if (propValue === undefined) {
	    return null;
	  }
	  return requiredInteger(props, propName, ...other);
	}
	function validatorNoop() {
	  return null;
	}
	validator.isRequired = requiredInteger;
	validatorNoop.isRequired = validatorNoop;
	var integerPropType = process.env.NODE_ENV === 'production' ? validatorNoop : validator;

	/**
	 * Add keys, values of `defaultProps` that does not exist in `props`
	 * @param {object} defaultProps
	 * @param {object} props
	 * @returns {object} resolved props
	 */
	function resolveProps(defaultProps, props) {
	  const output = _extends$2({}, props);
	  Object.keys(defaultProps).forEach(propName => {
	    if (propName.toString().match(/^(components|slots)$/)) {
	      output[propName] = _extends$2({}, defaultProps[propName], output[propName]);
	    } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {
	      const defaultSlotProps = defaultProps[propName] || {};
	      const slotProps = props[propName];
	      output[propName] = {};
	      if (!slotProps || !Object.keys(slotProps)) {
	        // Reduce the iteration if the slot props is empty
	        output[propName] = defaultSlotProps;
	      } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {
	        // Reduce the iteration if the default slot props is empty
	        output[propName] = slotProps;
	      } else {
	        output[propName] = _extends$2({}, slotProps);
	        Object.keys(defaultSlotProps).forEach(slotPropName => {
	          output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
	        });
	      }
	    } else if (output[propName] === undefined) {
	      output[propName] = defaultProps[propName];
	    }
	  });
	  return output;
	}

	function composeClasses(slots, getUtilityClass, classes = undefined) {
	  const output = {};
	  Object.keys(slots).forEach(
	  // `Object.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
	  // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
	  slot => {
	    output[slot] = slots[slot].reduce((acc, key) => {
	      if (key) {
	        const utilityClass = getUtilityClass(key);
	        if (utilityClass !== '') {
	          acc.push(utilityClass);
	        }
	        if (classes && classes[key]) {
	          acc.push(classes[key]);
	        }
	      }
	      return acc;
	    }, []).join(' ');
	  });
	  return output;
	}

	const defaultGenerator = componentName => componentName;
	const createClassNameGenerator = () => {
	  let generate = defaultGenerator;
	  return {
	    configure(generator) {
	      generate = generator;
	    },
	    generate(componentName) {
	      return generate(componentName);
	    },
	    reset() {
	      generate = defaultGenerator;
	    }
	  };
	};
	const ClassNameGenerator = createClassNameGenerator();
	var ClassNameGenerator$1 = ClassNameGenerator;

	// If GlobalStateSlot is changed, GLOBAL_STATE_CLASSES in
	// \packages\api-docs-builder\utils\parseSlotsAndClasses.ts must be updated accordingly.
	const globalStateClassesMapping = {
	  active: 'active',
	  checked: 'checked',
	  completed: 'completed',
	  disabled: 'disabled',
	  error: 'error',
	  expanded: 'expanded',
	  focused: 'focused',
	  focusVisible: 'focusVisible',
	  open: 'open',
	  readOnly: 'readOnly',
	  required: 'required',
	  selected: 'selected'
	};
	function generateUtilityClass(componentName, slot, globalStatePrefix = 'Mui') {
	  const globalStateClass = globalStateClassesMapping[slot];
	  return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator$1.generate(componentName)}-${slot}`;
	}

	function generateUtilityClasses(componentName, slots, globalStatePrefix = 'Mui') {
	  const result = {};
	  slots.forEach(slot => {
	    result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
	  });
	  return result;
	}

	function memoize$1(fn) {
	  var cache = Object.create(null);
	  return function (arg) {
	    if (cache[arg] === undefined) cache[arg] = fn(arg);
	    return cache[arg];
	  };
	}

	var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

	var isPropValid = /* #__PURE__ */memoize$1(function (prop) {
	  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
	  /* o */
	  && prop.charCodeAt(1) === 110
	  /* n */
	  && prop.charCodeAt(2) < 91;
	}
	/* Z+1 */
	);

	/*

	Based off glamor's StyleSheet, thanks Sunil ❤️

	high performance StyleSheet for css-in-js systems

	- uses multiple style tags behind the scenes for millions of rules
	- uses `insertRule` for appending in production for *much* faster performance

	// usage

	import { StyleSheet } from '@emotion/sheet'

	let styleSheet = new StyleSheet({ key: '', container: document.head })

	styleSheet.insert('#box { border: 1px solid red; }')
	- appends a css rule into the stylesheet

	styleSheet.flush()
	- empties the stylesheet of all its contents

	*/
	// $FlowFixMe
	function sheetForTag(tag) {
	  if (tag.sheet) {
	    // $FlowFixMe
	    return tag.sheet;
	  } // this weirdness brought to you by firefox

	  /* istanbul ignore next */


	  for (var i = 0; i < document.styleSheets.length; i++) {
	    if (document.styleSheets[i].ownerNode === tag) {
	      // $FlowFixMe
	      return document.styleSheets[i];
	    }
	  }
	}

	function createStyleElement(options) {
	  var tag = document.createElement('style');
	  tag.setAttribute('data-emotion', options.key);

	  if (options.nonce !== undefined) {
	    tag.setAttribute('nonce', options.nonce);
	  }

	  tag.appendChild(document.createTextNode(''));
	  tag.setAttribute('data-s', '');
	  return tag;
	}

	var StyleSheet = /*#__PURE__*/function () {
	  // Using Node instead of HTMLElement since container may be a ShadowRoot
	  function StyleSheet(options) {
	    var _this = this;

	    this._insertTag = function (tag) {
	      var before;

	      if (_this.tags.length === 0) {
	        if (_this.insertionPoint) {
	          before = _this.insertionPoint.nextSibling;
	        } else if (_this.prepend) {
	          before = _this.container.firstChild;
	        } else {
	          before = _this.before;
	        }
	      } else {
	        before = _this.tags[_this.tags.length - 1].nextSibling;
	      }

	      _this.container.insertBefore(tag, before);

	      _this.tags.push(tag);
	    };

	    this.isSpeedy = options.speedy === undefined ? process.env.NODE_ENV === 'production' : options.speedy;
	    this.tags = [];
	    this.ctr = 0;
	    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

	    this.key = options.key;
	    this.container = options.container;
	    this.prepend = options.prepend;
	    this.insertionPoint = options.insertionPoint;
	    this.before = null;
	  }

	  var _proto = StyleSheet.prototype;

	  _proto.hydrate = function hydrate(nodes) {
	    nodes.forEach(this._insertTag);
	  };

	  _proto.insert = function insert(rule) {
	    // the max length is how many rules we have per style tag, it's 65000 in speedy mode
	    // it's 1 in dev because we insert source maps that map a single rule to a location
	    // and you can only have one source map per style tag
	    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
	      this._insertTag(createStyleElement(this));
	    }

	    var tag = this.tags[this.tags.length - 1];

	    if (process.env.NODE_ENV !== 'production') {
	      var isImportRule = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;

	      if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) {
	        // this would only cause problem in speedy mode
	        // but we don't want enabling speedy to affect the observable behavior
	        // so we report this error at all times
	        console.error("You're attempting to insert the following rule:\n" + rule + '\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.');
	      }
	      this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule;
	    }

	    if (this.isSpeedy) {
	      var sheet = sheetForTag(tag);

	      try {
	        // this is the ultrafast version, works across browsers
	        // the big drawback is that the css won't be editable in devtools
	        sheet.insertRule(rule, sheet.cssRules.length);
	      } catch (e) {
	        if (process.env.NODE_ENV !== 'production' && !/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {
	          console.error("There was a problem inserting the following rule: \"" + rule + "\"", e);
	        }
	      }
	    } else {
	      tag.appendChild(document.createTextNode(rule));
	    }

	    this.ctr++;
	  };

	  _proto.flush = function flush() {
	    // $FlowFixMe
	    this.tags.forEach(function (tag) {
	      return tag.parentNode && tag.parentNode.removeChild(tag);
	    });
	    this.tags = [];
	    this.ctr = 0;

	    if (process.env.NODE_ENV !== 'production') {
	      this._alreadyInsertedOrderInsensitiveRule = false;
	    }
	  };

	  return StyleSheet;
	}();

	var MS = '-ms-';
	var MOZ = '-moz-';
	var WEBKIT = '-webkit-';

	var COMMENT = 'comm';
	var RULESET = 'rule';
	var DECLARATION = 'decl';
	var IMPORT = '@import';
	var KEYFRAMES = '@keyframes';
	var LAYER = '@layer';

	/**
	 * @param {number}
	 * @return {number}
	 */
	var abs$2 = Math.abs;

	/**
	 * @param {number}
	 * @return {string}
	 */
	var from = String.fromCharCode;

	/**
	 * @param {object}
	 * @return {object}
	 */
	var assign = Object.assign;

	/**
	 * @param {string} value
	 * @param {number} length
	 * @return {number}
	 */
	function hash (value, length) {
		return charat(value, 0) ^ 45 ? (((((((length << 2) ^ charat(value, 0)) << 2) ^ charat(value, 1)) << 2) ^ charat(value, 2)) << 2) ^ charat(value, 3) : 0
	}

	/**
	 * @param {string} value
	 * @return {string}
	 */
	function trim (value) {
		return value.trim()
	}

	/**
	 * @param {string} value
	 * @param {RegExp} pattern
	 * @return {string?}
	 */
	function match (value, pattern) {
		return (value = pattern.exec(value)) ? value[0] : value
	}

	/**
	 * @param {string} value
	 * @param {(string|RegExp)} pattern
	 * @param {string} replacement
	 * @return {string}
	 */
	function replace (value, pattern, replacement) {
		return value.replace(pattern, replacement)
	}

	/**
	 * @param {string} value
	 * @param {string} search
	 * @return {number}
	 */
	function indexof (value, search) {
		return value.indexOf(search)
	}

	/**
	 * @param {string} value
	 * @param {number} index
	 * @return {number}
	 */
	function charat (value, index) {
		return value.charCodeAt(index) | 0
	}

	/**
	 * @param {string} value
	 * @param {number} begin
	 * @param {number} end
	 * @return {string}
	 */
	function substr (value, begin, end) {
		return value.slice(begin, end)
	}

	/**
	 * @param {string} value
	 * @return {number}
	 */
	function strlen (value) {
		return value.length
	}

	/**
	 * @param {any[]} value
	 * @return {number}
	 */
	function sizeof (value) {
		return value.length
	}

	/**
	 * @param {any} value
	 * @param {any[]} array
	 * @return {any}
	 */
	function append (value, array) {
		return array.push(value), value
	}

	/**
	 * @param {string[]} array
	 * @param {function} callback
	 * @return {string}
	 */
	function combine (array, callback) {
		return array.map(callback).join('')
	}

	var line = 1;
	var column$1 = 1;
	var length = 0;
	var position = 0;
	var character = 0;
	var characters = '';

	/**
	 * @param {string} value
	 * @param {object | null} root
	 * @param {object | null} parent
	 * @param {string} type
	 * @param {string[] | string} props
	 * @param {object[] | string} children
	 * @param {number} length
	 */
	function node (value, root, parent, type, props, children, length) {
		return {value: value, root: root, parent: parent, type: type, props: props, children: children, line: line, column: column$1, length: length, return: ''}
	}

	/**
	 * @param {object} root
	 * @param {object} props
	 * @return {object}
	 */
	function copy (root, props) {
		return assign(node('', null, null, '', null, null, 0), root, {length: -root.length}, props)
	}

	/**
	 * @return {number}
	 */
	function char () {
		return character
	}

	/**
	 * @return {number}
	 */
	function prev () {
		character = position > 0 ? charat(characters, --position) : 0;

		if (column$1--, character === 10)
			column$1 = 1, line--;

		return character
	}

	/**
	 * @return {number}
	 */
	function next () {
		character = position < length ? charat(characters, position++) : 0;

		if (column$1++, character === 10)
			column$1 = 1, line++;

		return character
	}

	/**
	 * @return {number}
	 */
	function peek () {
		return charat(characters, position)
	}

	/**
	 * @return {number}
	 */
	function caret () {
		return position
	}

	/**
	 * @param {number} begin
	 * @param {number} end
	 * @return {string}
	 */
	function slice (begin, end) {
		return substr(characters, begin, end)
	}

	/**
	 * @param {number} type
	 * @return {number}
	 */
	function token (type) {
		switch (type) {
			// \0 \t \n \r \s whitespace token
			case 0: case 9: case 10: case 13: case 32:
				return 5
			// ! + , / > @ ~ isolate token
			case 33: case 43: case 44: case 47: case 62: case 64: case 126:
			// ; { } breakpoint token
			case 59: case 123: case 125:
				return 4
			// : accompanied token
			case 58:
				return 3
			// " ' ( [ opening delimit token
			case 34: case 39: case 40: case 91:
				return 2
			// ) ] closing delimit token
			case 41: case 93:
				return 1
		}

		return 0
	}

	/**
	 * @param {string} value
	 * @return {any[]}
	 */
	function alloc (value) {
		return line = column$1 = 1, length = strlen(characters = value), position = 0, []
	}

	/**
	 * @param {any} value
	 * @return {any}
	 */
	function dealloc (value) {
		return characters = '', value
	}

	/**
	 * @param {number} type
	 * @return {string}
	 */
	function delimit (type) {
		return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)))
	}

	/**
	 * @param {number} type
	 * @return {string}
	 */
	function whitespace (type) {
		while (character = peek())
			if (character < 33)
				next();
			else
				break

		return token(type) > 2 || token(character) > 3 ? '' : ' '
	}

	/**
	 * @param {number} index
	 * @param {number} count
	 * @return {string}
	 */
	function escaping (index, count) {
		while (--count && next())
			// not 0-9 A-F a-f
			if (character < 48 || character > 102 || (character > 57 && character < 65) || (character > 70 && character < 97))
				break

		return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32))
	}

	/**
	 * @param {number} type
	 * @return {number}
	 */
	function delimiter (type) {
		while (next())
			switch (character) {
				// ] ) " '
				case type:
					return position
				// " '
				case 34: case 39:
					if (type !== 34 && type !== 39)
						delimiter(character);
					break
				// (
				case 40:
					if (type === 41)
						delimiter(type);
					break
				// \
				case 92:
					next();
					break
			}

		return position
	}

	/**
	 * @param {number} type
	 * @param {number} index
	 * @return {number}
	 */
	function commenter (type, index) {
		while (next())
			// //
			if (type + character === 47 + 10)
				break
			// /*
			else if (type + character === 42 + 42 && peek() === 47)
				break

		return '/*' + slice(index, position - 1) + '*' + from(type === 47 ? type : next())
	}

	/**
	 * @param {number} index
	 * @return {string}
	 */
	function identifier (index) {
		while (!token(peek()))
			next();

		return slice(index, position)
	}

	/**
	 * @param {string} value
	 * @return {object[]}
	 */
	function compile (value) {
		return dealloc(parse('', null, null, null, [''], value = alloc(value), 0, [0], value))
	}

	/**
	 * @param {string} value
	 * @param {object} root
	 * @param {object?} parent
	 * @param {string[]} rule
	 * @param {string[]} rules
	 * @param {string[]} rulesets
	 * @param {number[]} pseudo
	 * @param {number[]} points
	 * @param {string[]} declarations
	 * @return {object}
	 */
	function parse (value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
		var index = 0;
		var offset = 0;
		var length = pseudo;
		var atrule = 0;
		var property = 0;
		var previous = 0;
		var variable = 1;
		var scanning = 1;
		var ampersand = 1;
		var character = 0;
		var type = '';
		var props = rules;
		var children = rulesets;
		var reference = rule;
		var characters = type;

		while (scanning)
			switch (previous = character, character = next()) {
				// (
				case 40:
					if (previous != 108 && charat(characters, length - 1) == 58) {
						if (indexof(characters += replace(delimit(character), '&', '&\f'), '&\f') != -1)
							ampersand = -1;
						break
					}
				// " ' [
				case 34: case 39: case 91:
					characters += delimit(character);
					break
				// \t \n \r \s
				case 9: case 10: case 13: case 32:
					characters += whitespace(previous);
					break
				// \
				case 92:
					characters += escaping(caret() - 1, 7);
					continue
				// /
				case 47:
					switch (peek()) {
						case 42: case 47:
							append(comment(commenter(next(), caret()), root, parent), declarations);
							break
						default:
							characters += '/';
					}
					break
				// {
				case 123 * variable:
					points[index++] = strlen(characters) * ampersand;
				// } ; \0
				case 125 * variable: case 59: case 0:
					switch (character) {
						// \0 }
						case 0: case 125: scanning = 0;
						// ;
						case 59 + offset: if (ampersand == -1) characters = replace(characters, /\f/g, '');
							if (property > 0 && (strlen(characters) - length))
								append(property > 32 ? declaration(characters + ';', rule, parent, length - 1) : declaration(replace(characters, ' ', '') + ';', rule, parent, length - 2), declarations);
							break
						// @ ;
						case 59: characters += ';';
						// { rule/at-rule
						default:
							append(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets);

							if (character === 123)
								if (offset === 0)
									parse(characters, root, reference, reference, props, rulesets, length, points, children);
								else
									switch (atrule === 99 && charat(characters, 3) === 110 ? 100 : atrule) {
										// d l m s
										case 100: case 108: case 109: case 115:
											parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children);
											break
										default:
											parse(characters, reference, reference, reference, [''], children, 0, points, children);
									}
					}

					index = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo;
					break
				// :
				case 58:
					length = 1 + strlen(characters), property = previous;
				default:
					if (variable < 1)
						if (character == 123)
							--variable;
						else if (character == 125 && variable++ == 0 && prev() == 125)
							continue

					switch (characters += from(character), character * variable) {
						// &
						case 38:
							ampersand = offset > 0 ? 1 : (characters += '\f', -1);
							break
						// ,
						case 44:
							points[index++] = (strlen(characters) - 1) * ampersand, ampersand = 1;
							break
						// @
						case 64:
							// -
							if (peek() === 45)
								characters += delimit(next());

							atrule = peek(), offset = length = strlen(type = characters += identifier(caret())), character++;
							break
						// -
						case 45:
							if (previous === 45 && strlen(characters) == 2)
								variable = 0;
					}
			}

		return rulesets
	}

	/**
	 * @param {string} value
	 * @param {object} root
	 * @param {object?} parent
	 * @param {number} index
	 * @param {number} offset
	 * @param {string[]} rules
	 * @param {number[]} points
	 * @param {string} type
	 * @param {string[]} props
	 * @param {string[]} children
	 * @param {number} length
	 * @return {object}
	 */
	function ruleset (value, root, parent, index, offset, rules, points, type, props, children, length) {
		var post = offset - 1;
		var rule = offset === 0 ? rules : [''];
		var size = sizeof(rule);

		for (var i = 0, j = 0, k = 0; i < index; ++i)
			for (var x = 0, y = substr(value, post + 1, post = abs$2(j = points[i])), z = value; x < size; ++x)
				if (z = trim(j > 0 ? rule[x] + ' ' + y : replace(y, /&\f/g, rule[x])))
					props[k++] = z;

		return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length)
	}

	/**
	 * @param {number} value
	 * @param {object} root
	 * @param {object?} parent
	 * @return {object}
	 */
	function comment (value, root, parent) {
		return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0)
	}

	/**
	 * @param {string} value
	 * @param {object} root
	 * @param {object?} parent
	 * @param {number} length
	 * @return {object}
	 */
	function declaration (value, root, parent, length) {
		return node(value, root, parent, DECLARATION, substr(value, 0, length), substr(value, length + 1, -1), length)
	}

	/**
	 * @param {object[]} children
	 * @param {function} callback
	 * @return {string}
	 */
	function serialize (children, callback) {
		var output = '';
		var length = sizeof(children);

		for (var i = 0; i < length; i++)
			output += callback(children[i], i, children, callback) || '';

		return output
	}

	/**
	 * @param {object} element
	 * @param {number} index
	 * @param {object[]} children
	 * @param {function} callback
	 * @return {string}
	 */
	function stringify (element, index, children, callback) {
		switch (element.type) {
			case LAYER: if (element.children.length) break
			case IMPORT: case DECLARATION: return element.return = element.return || element.value
			case COMMENT: return ''
			case KEYFRAMES: return element.return = element.value + '{' + serialize(element.children, callback) + '}'
			case RULESET: element.value = element.props.join(',');
		}

		return strlen(children = serialize(element.children, callback)) ? element.return = element.value + '{' + children + '}' : ''
	}

	/**
	 * @param {function[]} collection
	 * @return {function}
	 */
	function middleware (collection) {
		var length = sizeof(collection);

		return function (element, index, children, callback) {
			var output = '';

			for (var i = 0; i < length; i++)
				output += collection[i](element, index, children, callback) || '';

			return output
		}
	}

	/**
	 * @param {function} callback
	 * @return {function}
	 */
	function rulesheet (callback) {
		return function (element) {
			if (!element.root)
				if (element = element.return)
					callback(element);
		}
	}

	var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
	  var previous = 0;
	  var character = 0;

	  while (true) {
	    previous = character;
	    character = peek(); // &\f

	    if (previous === 38 && character === 12) {
	      points[index] = 1;
	    }

	    if (token(character)) {
	      break;
	    }

	    next();
	  }

	  return slice(begin, position);
	};

	var toRules = function toRules(parsed, points) {
	  // pretend we've started with a comma
	  var index = -1;
	  var character = 44;

	  do {
	    switch (token(character)) {
	      case 0:
	        // &\f
	        if (character === 38 && peek() === 12) {
	          // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
	          // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
	          // and when it should just concatenate the outer and inner selectors
	          // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
	          points[index] = 1;
	        }

	        parsed[index] += identifierWithPointTracking(position - 1, points, index);
	        break;

	      case 2:
	        parsed[index] += delimit(character);
	        break;

	      case 4:
	        // comma
	        if (character === 44) {
	          // colon
	          parsed[++index] = peek() === 58 ? '&\f' : '';
	          points[index] = parsed[index].length;
	          break;
	        }

	      // fallthrough

	      default:
	        parsed[index] += from(character);
	    }
	  } while (character = next());

	  return parsed;
	};

	var getRules = function getRules(value, points) {
	  return dealloc(toRules(alloc(value), points));
	}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11


	var fixedElements = /* #__PURE__ */new WeakMap();
	var compat = function compat(element) {
	  if (element.type !== 'rule' || !element.parent || // positive .length indicates that this rule contains pseudo
	  // negative .length indicates that this rule has been already prefixed
	  element.length < 1) {
	    return;
	  }

	  var value = element.value,
	      parent = element.parent;
	  var isImplicitRule = element.column === parent.column && element.line === parent.line;

	  while (parent.type !== 'rule') {
	    parent = parent.parent;
	    if (!parent) return;
	  } // short-circuit for the simplest case


	  if (element.props.length === 1 && value.charCodeAt(0) !== 58
	  /* colon */
	  && !fixedElements.get(parent)) {
	    return;
	  } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
	  // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"


	  if (isImplicitRule) {
	    return;
	  }

	  fixedElements.set(element, true);
	  var points = [];
	  var rules = getRules(value, points);
	  var parentRules = parent.props;

	  for (var i = 0, k = 0; i < rules.length; i++) {
	    for (var j = 0; j < parentRules.length; j++, k++) {
	      element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
	    }
	  }
	};
	var removeLabel = function removeLabel(element) {
	  if (element.type === 'decl') {
	    var value = element.value;

	    if ( // charcode for l
	    value.charCodeAt(0) === 108 && // charcode for b
	    value.charCodeAt(2) === 98) {
	      // this ignores label
	      element["return"] = '';
	      element.value = '';
	    }
	  }
	};
	var ignoreFlag = 'emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason';

	var isIgnoringComment = function isIgnoringComment(element) {
	  return element.type === 'comm' && element.children.indexOf(ignoreFlag) > -1;
	};

	var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm(cache) {
	  return function (element, index, children) {
	    if (element.type !== 'rule' || cache.compat) return;
	    var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);

	    if (unsafePseudoClasses) {
	      var isNested = !!element.parent; // in nested rules comments become children of the "auto-inserted" rule and that's always the `element.parent`
	      //
	      // considering this input:
	      // .a {
	      //   .b /* comm */ {}
	      //   color: hotpink;
	      // }
	      // we get output corresponding to this:
	      // .a {
	      //   & {
	      //     /* comm */
	      //     color: hotpink;
	      //   }
	      //   .b {}
	      // }

	      var commentContainer = isNested ? element.parent.children : // global rule at the root level
	      children;

	      for (var i = commentContainer.length - 1; i >= 0; i--) {
	        var node = commentContainer[i];

	        if (node.line < element.line) {
	          break;
	        } // it is quite weird but comments are *usually* put at `column: element.column - 1`
	        // so we seek *from the end* for the node that is earlier than the rule's `element` and check that
	        // this will also match inputs like this:
	        // .a {
	        //   /* comm */
	        //   .b {}
	        // }
	        //
	        // but that is fine
	        //
	        // it would be the easiest to change the placement of the comment to be the first child of the rule:
	        // .a {
	        //   .b { /* comm */ }
	        // }
	        // with such inputs we wouldn't have to search for the comment at all
	        // TODO: consider changing this comment placement in the next major version


	        if (node.column < element.column) {
	          if (isIgnoringComment(node)) {
	            return;
	          }

	          break;
	        }
	      }

	      unsafePseudoClasses.forEach(function (unsafePseudoClass) {
	        console.error("The pseudo class \"" + unsafePseudoClass + "\" is potentially unsafe when doing server-side rendering. Try changing it to \"" + unsafePseudoClass.split('-child')[0] + "-of-type\".");
	      });
	    }
	  };
	};

	var isImportRule = function isImportRule(element) {
	  return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
	};

	var isPrependedWithRegularRules = function isPrependedWithRegularRules(index, children) {
	  for (var i = index - 1; i >= 0; i--) {
	    if (!isImportRule(children[i])) {
	      return true;
	    }
	  }

	  return false;
	}; // use this to remove incorrect elements from further processing
	// so they don't get handed to the `sheet` (or anything else)
	// as that could potentially lead to additional logs which in turn could be overhelming to the user


	var nullifyElement = function nullifyElement(element) {
	  element.type = '';
	  element.value = '';
	  element["return"] = '';
	  element.children = '';
	  element.props = '';
	};

	var incorrectImportAlarm = function incorrectImportAlarm(element, index, children) {
	  if (!isImportRule(element)) {
	    return;
	  }

	  if (element.parent) {
	    console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
	    nullifyElement(element);
	  } else if (isPrependedWithRegularRules(index, children)) {
	    console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
	    nullifyElement(element);
	  }
	};

	/* eslint-disable no-fallthrough */

	function prefix(value, length) {
	  switch (hash(value, length)) {
	    // color-adjust
	    case 5103:
	      return WEBKIT + 'print-' + value + value;
	    // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)

	    case 5737:
	    case 4201:
	    case 3177:
	    case 3433:
	    case 1641:
	    case 4457:
	    case 2921: // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break

	    case 5572:
	    case 6356:
	    case 5844:
	    case 3191:
	    case 6645:
	    case 3005: // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,

	    case 6391:
	    case 5879:
	    case 5623:
	    case 6135:
	    case 4599:
	    case 4855: // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)

	    case 4215:
	    case 6389:
	    case 5109:
	    case 5365:
	    case 5621:
	    case 3829:
	      return WEBKIT + value + value;
	    // appearance, user-select, transform, hyphens, text-size-adjust

	    case 5349:
	    case 4246:
	    case 4810:
	    case 6968:
	    case 2756:
	      return WEBKIT + value + MOZ + value + MS + value + value;
	    // flex, flex-direction

	    case 6828:
	    case 4268:
	      return WEBKIT + value + MS + value + value;
	    // order

	    case 6165:
	      return WEBKIT + value + MS + 'flex-' + value + value;
	    // align-items

	    case 5187:
	      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + 'box-$1$2' + MS + 'flex-$1$2') + value;
	    // align-self

	    case 5443:
	      return WEBKIT + value + MS + 'flex-item-' + replace(value, /flex-|-self/, '') + value;
	    // align-content

	    case 4675:
	      return WEBKIT + value + MS + 'flex-line-pack' + replace(value, /align-content|flex-|-self/, '') + value;
	    // flex-shrink

	    case 5548:
	      return WEBKIT + value + MS + replace(value, 'shrink', 'negative') + value;
	    // flex-basis

	    case 5292:
	      return WEBKIT + value + MS + replace(value, 'basis', 'preferred-size') + value;
	    // flex-grow

	    case 6060:
	      return WEBKIT + 'box-' + replace(value, '-grow', '') + WEBKIT + value + MS + replace(value, 'grow', 'positive') + value;
	    // transition

	    case 4554:
	      return WEBKIT + replace(value, /([^-])(transform)/g, '$1' + WEBKIT + '$2') + value;
	    // cursor

	    case 6187:
	      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + '$1'), /(image-set)/, WEBKIT + '$1'), value, '') + value;
	    // background, background-image

	    case 5495:
	    case 3959:
	      return replace(value, /(image-set\([^]*)/, WEBKIT + '$1' + '$`$1');
	    // justify-content

	    case 4968:
	      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + 'box-pack:$3' + MS + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + WEBKIT + value + value;
	    // (margin|padding)-inline-(start|end)

	    case 4095:
	    case 3583:
	    case 4068:
	    case 2532:
	      return replace(value, /(.+)-inline(.+)/, WEBKIT + '$1$2') + value;
	    // (min|max)?(width|height|inline-size|block-size)

	    case 8116:
	    case 7059:
	    case 5753:
	    case 5535:
	    case 5445:
	    case 5701:
	    case 4933:
	    case 4677:
	    case 5533:
	    case 5789:
	    case 5021:
	    case 4765:
	      // stretch, max-content, min-content, fill-available
	      if (strlen(value) - 1 - length > 6) switch (charat(value, length + 1)) {
	        // (m)ax-content, (m)in-content
	        case 109:
	          // -
	          if (charat(value, length + 4) !== 45) break;
	        // (f)ill-available, (f)it-content

	        case 102:
	          return replace(value, /(.+:)(.+)-([^]+)/, '$1' + WEBKIT + '$2-$3' + '$1' + MOZ + (charat(value, length + 3) == 108 ? '$3' : '$2-$3')) + value;
	        // (s)tretch

	        case 115:
	          return ~indexof(value, 'stretch') ? prefix(replace(value, 'stretch', 'fill-available'), length) + value : value;
	      }
	      break;
	    // position: sticky

	    case 4949:
	      // (s)ticky?
	      if (charat(value, length + 1) !== 115) break;
	    // display: (flex|inline-flex)

	    case 6444:
	      switch (charat(value, strlen(value) - 3 - (~indexof(value, '!important') && 10))) {
	        // stic(k)y
	        case 107:
	          return replace(value, ':', ':' + WEBKIT) + value;
	        // (inline-)?fl(e)x

	        case 101:
	          return replace(value, /(.+:)([^;!]+)(;|!.+)?/, '$1' + WEBKIT + (charat(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + WEBKIT + '$2$3' + '$1' + MS + '$2box$3') + value;
	      }

	      break;
	    // writing-mode

	    case 5936:
	      switch (charat(value, length + 11)) {
	        // vertical-l(r)
	        case 114:
	          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb') + value;
	        // vertical-r(l)

	        case 108:
	          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value;
	        // horizontal(-)tb

	        case 45:
	          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'lr') + value;
	      }

	      return WEBKIT + value + MS + value + value;
	  }

	  return value;
	}

	var prefixer = function prefixer(element, index, children, callback) {
	  if (element.length > -1) if (!element["return"]) switch (element.type) {
	    case DECLARATION:
	      element["return"] = prefix(element.value, element.length);
	      break;

	    case KEYFRAMES:
	      return serialize([copy(element, {
	        value: replace(element.value, '@', '@' + WEBKIT)
	      })], callback);

	    case RULESET:
	      if (element.length) return combine(element.props, function (value) {
	        switch (match(value, /(::plac\w+|:read-\w+)/)) {
	          // :read-(only|write)
	          case ':read-only':
	          case ':read-write':
	            return serialize([copy(element, {
	              props: [replace(value, /:(read-\w+)/, ':' + MOZ + '$1')]
	            })], callback);
	          // :placeholder

	          case '::placeholder':
	            return serialize([copy(element, {
	              props: [replace(value, /:(plac\w+)/, ':' + WEBKIT + 'input-$1')]
	            }), copy(element, {
	              props: [replace(value, /:(plac\w+)/, ':' + MOZ + '$1')]
	            }), copy(element, {
	              props: [replace(value, /:(plac\w+)/, MS + 'input-$1')]
	            })], callback);
	        }

	        return '';
	      });
	  }
	};

	var defaultStylisPlugins = [prefixer];

	var createCache = function createCache(options) {
	  var key = options.key;

	  if (process.env.NODE_ENV !== 'production' && !key) {
	    throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\n" + "If multiple caches share the same key they might \"fight\" for each other's style elements.");
	  }

	  if (key === 'css') {
	    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
	    // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
	    // note this very very intentionally targets all style elements regardless of the key to ensure
	    // that creating a cache works inside of render of a React component

	    Array.prototype.forEach.call(ssrStyles, function (node) {
	      // we want to only move elements which have a space in the data-emotion attribute value
	      // because that indicates that it is an Emotion 11 server-side rendered style elements
	      // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
	      // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
	      // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
	      // will not result in the Emotion 10 styles being destroyed
	      var dataEmotionAttribute = node.getAttribute('data-emotion');

	      if (dataEmotionAttribute.indexOf(' ') === -1) {
	        return;
	      }
	      document.head.appendChild(node);
	      node.setAttribute('data-s', '');
	    });
	  }

	  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;

	  if (process.env.NODE_ENV !== 'production') {
	    // $FlowFixMe
	    if (/[^a-z-]/.test(key)) {
	      throw new Error("Emotion key must only contain lower case alphabetical characters and - but \"" + key + "\" was passed");
	    }
	  }

	  var inserted = {};
	  var container;
	  var nodesToHydrate = [];

	  {
	    container = options.container || document.head;
	    Array.prototype.forEach.call( // this means we will ignore elements which don't have a space in them which
	    // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
	    document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function (node) {
	      var attrib = node.getAttribute("data-emotion").split(' '); // $FlowFixMe

	      for (var i = 1; i < attrib.length; i++) {
	        inserted[attrib[i]] = true;
	      }

	      nodesToHydrate.push(node);
	    });
	  }

	  var _insert;

	  var omnipresentPlugins = [compat, removeLabel];

	  if (process.env.NODE_ENV !== 'production') {
	    omnipresentPlugins.push(createUnsafeSelectorsAlarm({
	      get compat() {
	        return cache.compat;
	      }

	    }), incorrectImportAlarm);
	  }

	  {
	    var currentSheet;
	    var finalizingPlugins = [stringify, process.env.NODE_ENV !== 'production' ? function (element) {
	      if (!element.root) {
	        if (element["return"]) {
	          currentSheet.insert(element["return"]);
	        } else if (element.value && element.type !== COMMENT) {
	          // insert empty rule in non-production environments
	          // so @emotion/jest can grab `key` from the (JS)DOM for caches without any rules inserted yet
	          currentSheet.insert(element.value + "{}");
	        }
	      }
	    } : rulesheet(function (rule) {
	      currentSheet.insert(rule);
	    })];
	    var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));

	    var stylis = function stylis(styles) {
	      return serialize(compile(styles), serializer);
	    };

	    _insert = function insert(selector, serialized, sheet, shouldCache) {
	      currentSheet = sheet;

	      if (process.env.NODE_ENV !== 'production' && serialized.map !== undefined) {
	        currentSheet = {
	          insert: function insert(rule) {
	            sheet.insert(rule + serialized.map);
	          }
	        };
	      }

	      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);

	      if (shouldCache) {
	        cache.inserted[serialized.name] = true;
	      }
	    };
	  }

	  var cache = {
	    key: key,
	    sheet: new StyleSheet({
	      key: key,
	      container: container,
	      nonce: options.nonce,
	      speedy: options.speedy,
	      prepend: options.prepend,
	      insertionPoint: options.insertionPoint
	    }),
	    nonce: options.nonce,
	    inserted: inserted,
	    registered: {},
	    insert: _insert
	  };
	  cache.sheet.hydrate(nodesToHydrate);
	  return cache;
	};

	var reactIs$1 = {exports: {}};

	var reactIs_production_min = {};

	/** @license React v16.13.1
	 * react-is.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactIs_production_min;

	function requireReactIs_production_min () {
		if (hasRequiredReactIs_production_min) return reactIs_production_min;
		hasRequiredReactIs_production_min = 1;
	var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
		Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
		function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min.AsyncMode=l;reactIs_production_min.ConcurrentMode=m;reactIs_production_min.ContextConsumer=k;reactIs_production_min.ContextProvider=h;reactIs_production_min.Element=c;reactIs_production_min.ForwardRef=n;reactIs_production_min.Fragment=e;reactIs_production_min.Lazy=t;reactIs_production_min.Memo=r;reactIs_production_min.Portal=d;
		reactIs_production_min.Profiler=g;reactIs_production_min.StrictMode=f;reactIs_production_min.Suspense=p;reactIs_production_min.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min.isConcurrentMode=A;reactIs_production_min.isContextConsumer=function(a){return z(a)===k};reactIs_production_min.isContextProvider=function(a){return z(a)===h};reactIs_production_min.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min.isForwardRef=function(a){return z(a)===n};reactIs_production_min.isFragment=function(a){return z(a)===e};reactIs_production_min.isLazy=function(a){return z(a)===t};
		reactIs_production_min.isMemo=function(a){return z(a)===r};reactIs_production_min.isPortal=function(a){return z(a)===d};reactIs_production_min.isProfiler=function(a){return z(a)===g};reactIs_production_min.isStrictMode=function(a){return z(a)===f};reactIs_production_min.isSuspense=function(a){return z(a)===p};
		reactIs_production_min.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min.typeOf=z;
		return reactIs_production_min;
	}

	var reactIs_development = {};

	/** @license React v16.13.1
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactIs_development;

	function requireReactIs_development () {
		if (hasRequiredReactIs_development) return reactIs_development;
		hasRequiredReactIs_development = 1;



		if (process.env.NODE_ENV !== "production") {
		  (function() {

		// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
		// nor polyfill, then a plain number is used for performance.
		var hasSymbol = typeof Symbol === 'function' && Symbol.for;
		var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
		var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
		var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
		var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
		var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
		var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
		var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
		// (unstable) APIs that have been removed. Can we remove the symbols?

		var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
		var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
		var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
		var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
		var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
		var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
		var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
		var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
		var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
		var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
		var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

		function isValidElementType(type) {
		  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
		  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
		}

		function typeOf(object) {
		  if (typeof object === 'object' && object !== null) {
		    var $$typeof = object.$$typeof;

		    switch ($$typeof) {
		      case REACT_ELEMENT_TYPE:
		        var type = object.type;

		        switch (type) {
		          case REACT_ASYNC_MODE_TYPE:
		          case REACT_CONCURRENT_MODE_TYPE:
		          case REACT_FRAGMENT_TYPE:
		          case REACT_PROFILER_TYPE:
		          case REACT_STRICT_MODE_TYPE:
		          case REACT_SUSPENSE_TYPE:
		            return type;

		          default:
		            var $$typeofType = type && type.$$typeof;

		            switch ($$typeofType) {
		              case REACT_CONTEXT_TYPE:
		              case REACT_FORWARD_REF_TYPE:
		              case REACT_LAZY_TYPE:
		              case REACT_MEMO_TYPE:
		              case REACT_PROVIDER_TYPE:
		                return $$typeofType;

		              default:
		                return $$typeof;
		            }

		        }

		      case REACT_PORTAL_TYPE:
		        return $$typeof;
		    }
		  }

		  return undefined;
		} // AsyncMode is deprecated along with isAsyncMode

		var AsyncMode = REACT_ASYNC_MODE_TYPE;
		var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
		var ContextConsumer = REACT_CONTEXT_TYPE;
		var ContextProvider = REACT_PROVIDER_TYPE;
		var Element = REACT_ELEMENT_TYPE;
		var ForwardRef = REACT_FORWARD_REF_TYPE;
		var Fragment = REACT_FRAGMENT_TYPE;
		var Lazy = REACT_LAZY_TYPE;
		var Memo = REACT_MEMO_TYPE;
		var Portal = REACT_PORTAL_TYPE;
		var Profiler = REACT_PROFILER_TYPE;
		var StrictMode = REACT_STRICT_MODE_TYPE;
		var Suspense = REACT_SUSPENSE_TYPE;
		var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

		function isAsyncMode(object) {
		  {
		    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
		      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

		      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
		    }
		  }

		  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
		}
		function isConcurrentMode(object) {
		  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
		}
		function isContextConsumer(object) {
		  return typeOf(object) === REACT_CONTEXT_TYPE;
		}
		function isContextProvider(object) {
		  return typeOf(object) === REACT_PROVIDER_TYPE;
		}
		function isElement(object) {
		  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
		}
		function isForwardRef(object) {
		  return typeOf(object) === REACT_FORWARD_REF_TYPE;
		}
		function isFragment(object) {
		  return typeOf(object) === REACT_FRAGMENT_TYPE;
		}
		function isLazy(object) {
		  return typeOf(object) === REACT_LAZY_TYPE;
		}
		function isMemo(object) {
		  return typeOf(object) === REACT_MEMO_TYPE;
		}
		function isPortal(object) {
		  return typeOf(object) === REACT_PORTAL_TYPE;
		}
		function isProfiler(object) {
		  return typeOf(object) === REACT_PROFILER_TYPE;
		}
		function isStrictMode(object) {
		  return typeOf(object) === REACT_STRICT_MODE_TYPE;
		}
		function isSuspense(object) {
		  return typeOf(object) === REACT_SUSPENSE_TYPE;
		}

		reactIs_development.AsyncMode = AsyncMode;
		reactIs_development.ConcurrentMode = ConcurrentMode;
		reactIs_development.ContextConsumer = ContextConsumer;
		reactIs_development.ContextProvider = ContextProvider;
		reactIs_development.Element = Element;
		reactIs_development.ForwardRef = ForwardRef;
		reactIs_development.Fragment = Fragment;
		reactIs_development.Lazy = Lazy;
		reactIs_development.Memo = Memo;
		reactIs_development.Portal = Portal;
		reactIs_development.Profiler = Profiler;
		reactIs_development.StrictMode = StrictMode;
		reactIs_development.Suspense = Suspense;
		reactIs_development.isAsyncMode = isAsyncMode;
		reactIs_development.isConcurrentMode = isConcurrentMode;
		reactIs_development.isContextConsumer = isContextConsumer;
		reactIs_development.isContextProvider = isContextProvider;
		reactIs_development.isElement = isElement;
		reactIs_development.isForwardRef = isForwardRef;
		reactIs_development.isFragment = isFragment;
		reactIs_development.isLazy = isLazy;
		reactIs_development.isMemo = isMemo;
		reactIs_development.isPortal = isPortal;
		reactIs_development.isProfiler = isProfiler;
		reactIs_development.isStrictMode = isStrictMode;
		reactIs_development.isSuspense = isSuspense;
		reactIs_development.isValidElementType = isValidElementType;
		reactIs_development.typeOf = typeOf;
		  })();
		}
		return reactIs_development;
	}

	if (process.env.NODE_ENV === 'production') {
	  reactIs$1.exports = requireReactIs_production_min();
	} else {
	  reactIs$1.exports = requireReactIs_development();
	}

	var reactIsExports = reactIs$1.exports;

	var reactIs = reactIsExports;

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	var REACT_STATICS = {
	  childContextTypes: true,
	  contextType: true,
	  contextTypes: true,
	  defaultProps: true,
	  displayName: true,
	  getDefaultProps: true,
	  getDerivedStateFromError: true,
	  getDerivedStateFromProps: true,
	  mixins: true,
	  propTypes: true,
	  type: true
	};
	var KNOWN_STATICS = {
	  name: true,
	  length: true,
	  prototype: true,
	  caller: true,
	  callee: true,
	  arguments: true,
	  arity: true
	};
	var FORWARD_REF_STATICS = {
	  '$$typeof': true,
	  render: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true
	};
	var MEMO_STATICS = {
	  '$$typeof': true,
	  compare: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true,
	  type: true
	};
	var TYPE_STATICS = {};
	TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
	TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

	function getStatics(component) {
	  // React v16.11 and below
	  if (reactIs.isMemo(component)) {
	    return MEMO_STATICS;
	  } // React v16.12 and above


	  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
	}

	var defineProperty = Object.defineProperty;
	var getOwnPropertyNames = Object.getOwnPropertyNames;
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var getPrototypeOf = Object.getPrototypeOf;
	var objectPrototype = Object.prototype;
	function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
	  if (typeof sourceComponent !== 'string') {
	    // don't hoist over string (html) components
	    if (objectPrototype) {
	      var inheritedComponent = getPrototypeOf(sourceComponent);

	      if (inheritedComponent && inheritedComponent !== objectPrototype) {
	        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
	      }
	    }

	    var keys = getOwnPropertyNames(sourceComponent);

	    if (getOwnPropertySymbols) {
	      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
	    }

	    var targetStatics = getStatics(targetComponent);
	    var sourceStatics = getStatics(sourceComponent);

	    for (var i = 0; i < keys.length; ++i) {
	      var key = keys[i];

	      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
	        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

	        try {
	          // Avoid failures from read-only properties
	          defineProperty(targetComponent, key, descriptor);
	        } catch (e) {}
	      }
	    }
	  }

	  return targetComponent;
	}

	var hoistNonReactStatics_cjs = hoistNonReactStatics;

	var hoistStatics = /*@__PURE__*/getDefaultExportFromCjs(hoistNonReactStatics_cjs);

	var isBrowser$1 = "object" !== 'undefined';
	function getRegisteredStyles(registered, registeredStyles, classNames) {
	  var rawClassName = '';
	  classNames.split(' ').forEach(function (className) {
	    if (registered[className] !== undefined) {
	      registeredStyles.push(registered[className] + ";");
	    } else {
	      rawClassName += className + " ";
	    }
	  });
	  return rawClassName;
	}
	var registerStyles = function registerStyles(cache, serialized, isStringTag) {
	  var className = cache.key + "-" + serialized.name;

	  if ( // we only need to add the styles to the registered cache if the
	  // class name could be used further down
	  // the tree but if it's a string tag, we know it won't
	  // so we don't have to add it to registered cache.
	  // this improves memory usage since we can avoid storing the whole style string
	  (isStringTag === false || // we need to always store it if we're in compat mode and
	  // in node since emotion-server relies on whether a style is in
	  // the registered cache to know whether a style is global or not
	  // also, note that this check will be dead code eliminated in the browser
	  isBrowser$1 === false ) && cache.registered[className] === undefined) {
	    cache.registered[className] = serialized.styles;
	  }
	};
	var insertStyles = function insertStyles(cache, serialized, isStringTag) {
	  registerStyles(cache, serialized, isStringTag);
	  var className = cache.key + "-" + serialized.name;

	  if (cache.inserted[serialized.name] === undefined) {
	    var current = serialized;

	    do {
	      cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);

	      current = current.next;
	    } while (current !== undefined);
	  }
	};

	/* eslint-disable */
	// Inspired by https://github.com/garycourt/murmurhash-js
	// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
	function murmur2(str) {
	  // 'm' and 'r' are mixing constants generated offline.
	  // They're not really 'magic', they just happen to work well.
	  // const m = 0x5bd1e995;
	  // const r = 24;
	  // Initialize the hash
	  var h = 0; // Mix 4 bytes at a time into the hash

	  var k,
	      i = 0,
	      len = str.length;

	  for (; len >= 4; ++i, len -= 4) {
	    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
	    k =
	    /* Math.imul(k, m): */
	    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
	    k ^=
	    /* k >>> r: */
	    k >>> 24;
	    h =
	    /* Math.imul(k, m): */
	    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
	    /* Math.imul(h, m): */
	    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  } // Handle the last few bytes of the input array


	  switch (len) {
	    case 3:
	      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

	    case 2:
	      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

	    case 1:
	      h ^= str.charCodeAt(i) & 0xff;
	      h =
	      /* Math.imul(h, m): */
	      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  } // Do a few final mixes of the hash to ensure the last few
	  // bytes are well-incorporated.


	  h ^= h >>> 13;
	  h =
	  /* Math.imul(h, m): */
	  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  return ((h ^ h >>> 15) >>> 0).toString(36);
	}

	var unitlessKeys = {
	  animationIterationCount: 1,
	  aspectRatio: 1,
	  borderImageOutset: 1,
	  borderImageSlice: 1,
	  borderImageWidth: 1,
	  boxFlex: 1,
	  boxFlexGroup: 1,
	  boxOrdinalGroup: 1,
	  columnCount: 1,
	  columns: 1,
	  flex: 1,
	  flexGrow: 1,
	  flexPositive: 1,
	  flexShrink: 1,
	  flexNegative: 1,
	  flexOrder: 1,
	  gridRow: 1,
	  gridRowEnd: 1,
	  gridRowSpan: 1,
	  gridRowStart: 1,
	  gridColumn: 1,
	  gridColumnEnd: 1,
	  gridColumnSpan: 1,
	  gridColumnStart: 1,
	  msGridRow: 1,
	  msGridRowSpan: 1,
	  msGridColumn: 1,
	  msGridColumnSpan: 1,
	  fontWeight: 1,
	  lineHeight: 1,
	  opacity: 1,
	  order: 1,
	  orphans: 1,
	  tabSize: 1,
	  widows: 1,
	  zIndex: 1,
	  zoom: 1,
	  WebkitLineClamp: 1,
	  // SVG-related properties
	  fillOpacity: 1,
	  floodOpacity: 1,
	  stopOpacity: 1,
	  strokeDasharray: 1,
	  strokeDashoffset: 1,
	  strokeMiterlimit: 1,
	  strokeOpacity: 1,
	  strokeWidth: 1
	};

	var ILLEGAL_ESCAPE_SEQUENCE_ERROR$1 = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
	var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
	var hyphenateRegex = /[A-Z]|^ms/g;
	var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

	var isCustomProperty = function isCustomProperty(property) {
	  return property.charCodeAt(1) === 45;
	};

	var isProcessableValue = function isProcessableValue(value) {
	  return value != null && typeof value !== 'boolean';
	};

	var processStyleName = /* #__PURE__ */memoize$1(function (styleName) {
	  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
	});

	var processStyleValue = function processStyleValue(key, value) {
	  switch (key) {
	    case 'animation':
	    case 'animationName':
	      {
	        if (typeof value === 'string') {
	          return value.replace(animationRegex, function (match, p1, p2) {
	            cursor = {
	              name: p1,
	              styles: p2,
	              next: cursor
	            };
	            return p1;
	          });
	        }
	      }
	  }

	  if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
	    return value + 'px';
	  }

	  return value;
	};

	if (process.env.NODE_ENV !== 'production') {
	  var contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
	  var contentValues = ['normal', 'none', 'initial', 'inherit', 'unset'];
	  var oldProcessStyleValue = processStyleValue;
	  var msPattern = /^-ms-/;
	  var hyphenPattern = /-(.)/g;
	  var hyphenatedCache = {};

	  processStyleValue = function processStyleValue(key, value) {
	    if (key === 'content') {
	      if (typeof value !== 'string' || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
	        throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
	      }
	    }

	    var processed = oldProcessStyleValue(key, value);

	    if (processed !== '' && !isCustomProperty(key) && key.indexOf('-') !== -1 && hyphenatedCache[key] === undefined) {
	      hyphenatedCache[key] = true;
	      console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, 'ms-').replace(hyphenPattern, function (str, _char) {
	        return _char.toUpperCase();
	      }) + "?");
	    }

	    return processed;
	  };
	}

	var noComponentSelectorMessage = 'Component selectors can only be used in conjunction with ' + '@emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware ' + 'compiler transform.';

	function handleInterpolation(mergedProps, registered, interpolation) {
	  if (interpolation == null) {
	    return '';
	  }

	  if (interpolation.__emotion_styles !== undefined) {
	    if (process.env.NODE_ENV !== 'production' && interpolation.toString() === 'NO_COMPONENT_SELECTOR') {
	      throw new Error(noComponentSelectorMessage);
	    }

	    return interpolation;
	  }

	  switch (typeof interpolation) {
	    case 'boolean':
	      {
	        return '';
	      }

	    case 'object':
	      {
	        if (interpolation.anim === 1) {
	          cursor = {
	            name: interpolation.name,
	            styles: interpolation.styles,
	            next: cursor
	          };
	          return interpolation.name;
	        }

	        if (interpolation.styles !== undefined) {
	          var next = interpolation.next;

	          if (next !== undefined) {
	            // not the most efficient thing ever but this is a pretty rare case
	            // and there will be very few iterations of this generally
	            while (next !== undefined) {
	              cursor = {
	                name: next.name,
	                styles: next.styles,
	                next: cursor
	              };
	              next = next.next;
	            }
	          }

	          var styles = interpolation.styles + ";";

	          if (process.env.NODE_ENV !== 'production' && interpolation.map !== undefined) {
	            styles += interpolation.map;
	          }

	          return styles;
	        }

	        return createStringFromObject(mergedProps, registered, interpolation);
	      }

	    case 'function':
	      {
	        if (mergedProps !== undefined) {
	          var previousCursor = cursor;
	          var result = interpolation(mergedProps);
	          cursor = previousCursor;
	          return handleInterpolation(mergedProps, registered, result);
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Functions that are interpolated in css calls will be stringified.\n' + 'If you want to have a css call based on props, create a function that returns a css call like this\n' + 'let dynamicStyle = (props) => css`color: ${props.color}`\n' + 'It can be called directly with props or interpolated in a styled call like this\n' + "let SomeComponent = styled('div')`${dynamicStyle}`");
	        }

	        break;
	      }

	    case 'string':
	      if (process.env.NODE_ENV !== 'production') {
	        var matched = [];
	        var replaced = interpolation.replace(animationRegex, function (match, p1, p2) {
	          var fakeVarName = "animation" + matched.length;
	          matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, '') + "`");
	          return "${" + fakeVarName + "}";
	        });

	        if (matched.length) {
	          console.error('`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\n' + 'Instead of doing this:\n\n' + [].concat(matched, ["`" + replaced + "`"]).join('\n') + '\n\nYou should wrap it with `css` like this:\n\n' + ("css`" + replaced + "`"));
	        }
	      }

	      break;
	  } // finalize string values (regular strings and functions interpolated into css calls)


	  if (registered == null) {
	    return interpolation;
	  }

	  var cached = registered[interpolation];
	  return cached !== undefined ? cached : interpolation;
	}

	function createStringFromObject(mergedProps, registered, obj) {
	  var string = '';

	  if (Array.isArray(obj)) {
	    for (var i = 0; i < obj.length; i++) {
	      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
	    }
	  } else {
	    for (var _key in obj) {
	      var value = obj[_key];

	      if (typeof value !== 'object') {
	        if (registered != null && registered[value] !== undefined) {
	          string += _key + "{" + registered[value] + "}";
	        } else if (isProcessableValue(value)) {
	          string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
	        }
	      } else {
	        if (_key === 'NO_COMPONENT_SELECTOR' && process.env.NODE_ENV !== 'production') {
	          throw new Error(noComponentSelectorMessage);
	        }

	        if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
	          for (var _i = 0; _i < value.length; _i++) {
	            if (isProcessableValue(value[_i])) {
	              string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
	            }
	          }
	        } else {
	          var interpolated = handleInterpolation(mergedProps, registered, value);

	          switch (_key) {
	            case 'animation':
	            case 'animationName':
	              {
	                string += processStyleName(_key) + ":" + interpolated + ";";
	                break;
	              }

	            default:
	              {
	                if (process.env.NODE_ENV !== 'production' && _key === 'undefined') {
	                  console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
	                }

	                string += _key + "{" + interpolated + "}";
	              }
	          }
	        }
	      }
	    }
	  }

	  return string;
	}

	var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
	var sourceMapPattern;

	if (process.env.NODE_ENV !== 'production') {
	  sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
	} // this is the cursor for keyframes
	// keyframes are stored on the SerializedStyles object as a linked list


	var cursor;
	var serializeStyles = function serializeStyles(args, registered, mergedProps) {
	  if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
	    return args[0];
	  }

	  var stringMode = true;
	  var styles = '';
	  cursor = undefined;
	  var strings = args[0];

	  if (strings == null || strings.raw === undefined) {
	    stringMode = false;
	    styles += handleInterpolation(mergedProps, registered, strings);
	  } else {
	    if (process.env.NODE_ENV !== 'production' && strings[0] === undefined) {
	      console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
	    }

	    styles += strings[0];
	  } // we start at 1 since we've already handled the first arg


	  for (var i = 1; i < args.length; i++) {
	    styles += handleInterpolation(mergedProps, registered, args[i]);

	    if (stringMode) {
	      if (process.env.NODE_ENV !== 'production' && strings[i] === undefined) {
	        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
	      }

	      styles += strings[i];
	    }
	  }

	  var sourceMap;

	  if (process.env.NODE_ENV !== 'production') {
	    styles = styles.replace(sourceMapPattern, function (match) {
	      sourceMap = match;
	      return '';
	    });
	  } // using a global regex with .exec is stateful so lastIndex has to be reset each time


	  labelPattern.lastIndex = 0;
	  var identifierName = '';
	  var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

	  while ((match = labelPattern.exec(styles)) !== null) {
	    identifierName += '-' + // $FlowFixMe we know it's not null
	    match[1];
	  }

	  var name = murmur2(styles) + identifierName;

	  if (process.env.NODE_ENV !== 'production') {
	    // $FlowFixMe SerializedStyles type doesn't have toString property (and we don't want to add it)
	    return {
	      name: name,
	      styles: styles,
	      map: sourceMap,
	      next: cursor,
	      toString: function toString() {
	        return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
	      }
	    };
	  }

	  return {
	    name: name,
	    styles: styles,
	    next: cursor
	  };
	};

	var syncFallback = function syncFallback(create) {
	  return create();
	};

	var useInsertionEffect = React$1['useInsertion' + 'Effect'] ? React$1['useInsertion' + 'Effect'] : false;
	var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect || syncFallback;
	var useInsertionEffectWithLayoutFallback = useInsertionEffect || reactExports.useLayoutEffect;

	var hasOwnProperty$1 = {}.hasOwnProperty;

	var EmotionCacheContext = /* #__PURE__ */reactExports.createContext( // we're doing this to avoid preconstruct's dead code elimination in this one case
	// because this module is primarily intended for the browser and node
	// but it's also required in react native and similar environments sometimes
	// and we could have a special build just for that
	// but this is much easier and the native packages
	// might use a different theme context in the future anyway
	typeof HTMLElement !== 'undefined' ? /* #__PURE__ */createCache({
	  key: 'css'
	}) : null);

	if (process.env.NODE_ENV !== 'production') {
	  EmotionCacheContext.displayName = 'EmotionCacheContext';
	}

	var CacheProvider = EmotionCacheContext.Provider;

	var withEmotionCache = function withEmotionCache(func) {
	  // $FlowFixMe
	  return /*#__PURE__*/reactExports.forwardRef(function (props, ref) {
	    // the cache will never be null in the browser
	    var cache = reactExports.useContext(EmotionCacheContext);
	    return func(props, cache, ref);
	  });
	};

	var ThemeContext$2 = /* #__PURE__ */reactExports.createContext({});

	if (process.env.NODE_ENV !== 'production') {
	  ThemeContext$2.displayName = 'EmotionThemeContext';
	}

	var typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__';
	var labelPropName = '__EMOTION_LABEL_PLEASE_DO_NOT_USE__';

	var Insertion$2 = function Insertion(_ref) {
	  var cache = _ref.cache,
	      serialized = _ref.serialized,
	      isStringTag = _ref.isStringTag;
	  registerStyles(cache, serialized, isStringTag);
	  useInsertionEffectAlwaysWithSyncFallback(function () {
	    return insertStyles(cache, serialized, isStringTag);
	  });

	  return null;
	};

	var Emotion = /* #__PURE__ */withEmotionCache(function (props, cache, ref) {
	  var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works
	  // not passing the registered cache to serializeStyles because it would
	  // make certain babel optimisations not possible

	  if (typeof cssProp === 'string' && cache.registered[cssProp] !== undefined) {
	    cssProp = cache.registered[cssProp];
	  }

	  var WrappedComponent = props[typePropName];
	  var registeredStyles = [cssProp];
	  var className = '';

	  if (typeof props.className === 'string') {
	    className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
	  } else if (props.className != null) {
	    className = props.className + " ";
	  }

	  var serialized = serializeStyles(registeredStyles, undefined, reactExports.useContext(ThemeContext$2));

	  if (process.env.NODE_ENV !== 'production' && serialized.name.indexOf('-') === -1) {
	    var labelFromStack = props[labelPropName];

	    if (labelFromStack) {
	      serialized = serializeStyles([serialized, 'label:' + labelFromStack + ';']);
	    }
	  }

	  className += cache.key + "-" + serialized.name;
	  var newProps = {};

	  for (var key in props) {
	    if (hasOwnProperty$1.call(props, key) && key !== 'css' && key !== typePropName && (process.env.NODE_ENV === 'production' || key !== labelPropName)) {
	      newProps[key] = props[key];
	    }
	  }

	  newProps.ref = ref;
	  newProps.className = className;
	  return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement(Insertion$2, {
	    cache: cache,
	    serialized: serialized,
	    isStringTag: typeof WrappedComponent === 'string'
	  }), /*#__PURE__*/reactExports.createElement(WrappedComponent, newProps));
	});

	if (process.env.NODE_ENV !== 'production') {
	  Emotion.displayName = 'EmotionCssPropInternal';
	}

	var pkg = {
		name: "@emotion/react",
		version: "11.11.1",
		main: "dist/emotion-react.cjs.js",
		module: "dist/emotion-react.esm.js",
		browser: {
			"./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
		},
		exports: {
			".": {
				module: {
					worker: "./dist/emotion-react.worker.esm.js",
					browser: "./dist/emotion-react.browser.esm.js",
					"default": "./dist/emotion-react.esm.js"
				},
				"import": "./dist/emotion-react.cjs.mjs",
				"default": "./dist/emotion-react.cjs.js"
			},
			"./jsx-runtime": {
				module: {
					worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
					browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
					"default": "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
				},
				"import": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.mjs",
				"default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
			},
			"./_isolated-hnrs": {
				module: {
					worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
					browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
					"default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
				},
				"import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.mjs",
				"default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
			},
			"./jsx-dev-runtime": {
				module: {
					worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
					browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
					"default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
				},
				"import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.mjs",
				"default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
			},
			"./package.json": "./package.json",
			"./types/css-prop": "./types/css-prop.d.ts",
			"./macro": {
				types: {
					"import": "./macro.d.mts",
					"default": "./macro.d.ts"
				},
				"default": "./macro.js"
			}
		},
		types: "types/index.d.ts",
		files: [
			"src",
			"dist",
			"jsx-runtime",
			"jsx-dev-runtime",
			"_isolated-hnrs",
			"types/*.d.ts",
			"macro.*"
		],
		sideEffects: false,
		author: "Emotion Contributors",
		license: "MIT",
		scripts: {
			"test:typescript": "dtslint types"
		},
		dependencies: {
			"@babel/runtime": "^7.18.3",
			"@emotion/babel-plugin": "^11.11.0",
			"@emotion/cache": "^11.11.0",
			"@emotion/serialize": "^1.1.2",
			"@emotion/use-insertion-effect-with-fallbacks": "^1.0.1",
			"@emotion/utils": "^1.2.1",
			"@emotion/weak-memoize": "^0.3.1",
			"hoist-non-react-statics": "^3.3.1"
		},
		peerDependencies: {
			react: ">=16.8.0"
		},
		peerDependenciesMeta: {
			"@types/react": {
				optional: true
			}
		},
		devDependencies: {
			"@definitelytyped/dtslint": "0.0.112",
			"@emotion/css": "11.11.0",
			"@emotion/css-prettifier": "1.1.3",
			"@emotion/server": "11.11.0",
			"@emotion/styled": "11.11.0",
			"html-tag-names": "^1.1.2",
			react: "16.14.0",
			"svg-tag-names": "^1.1.1",
			typescript: "^4.5.5"
		},
		repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
		publishConfig: {
			access: "public"
		},
		"umd:main": "dist/emotion-react.umd.min.js",
		preconstruct: {
			entrypoints: [
				"./index.js",
				"./jsx-runtime.js",
				"./jsx-dev-runtime.js",
				"./_isolated-hnrs.js"
			],
			umdName: "emotionReact",
			exports: {
				envConditions: [
					"browser",
					"worker"
				],
				extra: {
					"./types/css-prop": "./types/css-prop.d.ts",
					"./macro": {
						types: {
							"import": "./macro.d.mts",
							"default": "./macro.d.ts"
						},
						"default": "./macro.js"
					}
				}
			}
		}
	};

	var warnedAboutCssPropForGlobal = false; // maintain place over rerenders.
	// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
	// initial client-side render from SSR, use place of hydrating tag

	var Global = /* #__PURE__ */withEmotionCache(function (props, cache) {
	  if (process.env.NODE_ENV !== 'production' && !warnedAboutCssPropForGlobal && ( // check for className as well since the user is
	  // probably using the custom createElement which
	  // means it will be turned into a className prop
	  // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
	  props.className || props.css)) {
	    console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
	    warnedAboutCssPropForGlobal = true;
	  }

	  var styles = props.styles;
	  var serialized = serializeStyles([styles], undefined, reactExports.useContext(ThemeContext$2));
	  // but it is based on a constant that will never change at runtime
	  // it's effectively like having two implementations and switching them out
	  // so it's not actually breaking anything


	  var sheetRef = reactExports.useRef();
	  useInsertionEffectWithLayoutFallback(function () {
	    var key = cache.key + "-global"; // use case of https://github.com/emotion-js/emotion/issues/2675

	    var sheet = new cache.sheet.constructor({
	      key: key,
	      nonce: cache.sheet.nonce,
	      container: cache.sheet.container,
	      speedy: cache.sheet.isSpeedy
	    });
	    var rehydrating = false; // $FlowFixMe

	    var node = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");

	    if (cache.sheet.tags.length) {
	      sheet.before = cache.sheet.tags[0];
	    }

	    if (node !== null) {
	      rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s

	      node.setAttribute('data-emotion', key);
	      sheet.hydrate([node]);
	    }

	    sheetRef.current = [sheet, rehydrating];
	    return function () {
	      sheet.flush();
	    };
	  }, [cache]);
	  useInsertionEffectWithLayoutFallback(function () {
	    var sheetRefCurrent = sheetRef.current;
	    var sheet = sheetRefCurrent[0],
	        rehydrating = sheetRefCurrent[1];

	    if (rehydrating) {
	      sheetRefCurrent[1] = false;
	      return;
	    }

	    if (serialized.next !== undefined) {
	      // insert keyframes
	      insertStyles(cache, serialized.next, true);
	    }

	    if (sheet.tags.length) {
	      // if this doesn't exist then it will be null so the style element will be appended
	      var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
	      sheet.before = element;
	      sheet.flush();
	    }

	    cache.insert("", serialized, sheet, false);
	  }, [cache, serialized.name]);
	  return null;
	});

	if (process.env.NODE_ENV !== 'production') {
	  Global.displayName = 'EmotionGlobal';
	}

	function css() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  return serializeStyles(args);
	}

	var keyframes = function keyframes() {
	  var insertable = css.apply(void 0, arguments);
	  var name = "animation-" + insertable.name; // $FlowFixMe

	  return {
	    name: name,
	    styles: "@keyframes " + name + "{" + insertable.styles + "}",
	    anim: 1,
	    toString: function toString() {
	      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
	    }
	  };
	};

	var classnames = function classnames(args) {
	  var len = args.length;
	  var i = 0;
	  var cls = '';

	  for (; i < len; i++) {
	    var arg = args[i];
	    if (arg == null) continue;
	    var toAdd = void 0;

	    switch (typeof arg) {
	      case 'boolean':
	        break;

	      case 'object':
	        {
	          if (Array.isArray(arg)) {
	            toAdd = classnames(arg);
	          } else {
	            if (process.env.NODE_ENV !== 'production' && arg.styles !== undefined && arg.name !== undefined) {
	              console.error('You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n' + '`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.');
	            }

	            toAdd = '';

	            for (var k in arg) {
	              if (arg[k] && k) {
	                toAdd && (toAdd += ' ');
	                toAdd += k;
	              }
	            }
	          }

	          break;
	        }

	      default:
	        {
	          toAdd = arg;
	        }
	    }

	    if (toAdd) {
	      cls && (cls += ' ');
	      cls += toAdd;
	    }
	  }

	  return cls;
	};

	function merge$1(registered, css, className) {
	  var registeredStyles = [];
	  var rawClassName = getRegisteredStyles(registered, registeredStyles, className);

	  if (registeredStyles.length < 2) {
	    return className;
	  }

	  return rawClassName + css(registeredStyles);
	}

	var Insertion$1 = function Insertion(_ref) {
	  var cache = _ref.cache,
	      serializedArr = _ref.serializedArr;
	  useInsertionEffectAlwaysWithSyncFallback(function () {

	    for (var i = 0; i < serializedArr.length; i++) {
	      insertStyles(cache, serializedArr[i], false);
	    }
	  });

	  return null;
	};

	var ClassNames = /* #__PURE__ */withEmotionCache(function (props, cache) {
	  var hasRendered = false;
	  var serializedArr = [];

	  var css = function css() {
	    if (hasRendered && process.env.NODE_ENV !== 'production') {
	      throw new Error('css can only be used during render');
	    }

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    var serialized = serializeStyles(args, cache.registered);
	    serializedArr.push(serialized); // registration has to happen here as the result of this might get consumed by `cx`

	    registerStyles(cache, serialized, false);
	    return cache.key + "-" + serialized.name;
	  };

	  var cx = function cx() {
	    if (hasRendered && process.env.NODE_ENV !== 'production') {
	      throw new Error('cx can only be used during render');
	    }

	    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    return merge$1(cache.registered, css, classnames(args));
	  };

	  var content = {
	    css: css,
	    cx: cx,
	    theme: reactExports.useContext(ThemeContext$2)
	  };
	  var ele = props.children(content);
	  hasRendered = true;
	  return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement(Insertion$1, {
	    cache: cache,
	    serializedArr: serializedArr
	  }), ele);
	});

	if (process.env.NODE_ENV !== 'production') {
	  ClassNames.displayName = 'EmotionClassNames';
	}

	if (process.env.NODE_ENV !== 'production') {
	  var isBrowser = "object" !== 'undefined'; // #1727, #2905 for some reason Jest and Vitest evaluate modules twice if some consuming module gets mocked

	  var isTestEnv = typeof jest !== 'undefined' || typeof vi !== 'undefined';

	  if (isBrowser && !isTestEnv) {
	    // globalThis has wide browser support - https://caniuse.com/?search=globalThis, Node.js 12 and later
	    var globalContext = // $FlowIgnore
	    typeof globalThis !== 'undefined' ? globalThis // eslint-disable-line no-undef
	    : isBrowser ? window : global;
	    var globalKey = "__EMOTION_REACT_" + pkg.version.split('.')[0] + "__";

	    if (globalContext[globalKey]) {
	      console.warn('You are loading @emotion/react when it is already loaded. Running ' + 'multiple instances may cause problems. This can happen if multiple ' + 'versions are used, or if multiple builds of the same version are ' + 'used.');
	    }

	    globalContext[globalKey] = true;
	  }
	}

	var testOmitPropsOnStringTag = isPropValid;

	var testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {
	  return key !== 'theme';
	};

	var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {
	  return typeof tag === 'string' && // 96 is one less than the char code
	  // for "a" so this is checking that
	  // it's a lowercase character
	  tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
	};
	var composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {
	  var shouldForwardProp;

	  if (options) {
	    var optionsShouldForwardProp = options.shouldForwardProp;
	    shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function (propName) {
	      return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
	    } : optionsShouldForwardProp;
	  }

	  if (typeof shouldForwardProp !== 'function' && isReal) {
	    shouldForwardProp = tag.__emotion_forwardProp;
	  }

	  return shouldForwardProp;
	};

	var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";

	var Insertion = function Insertion(_ref) {
	  var cache = _ref.cache,
	      serialized = _ref.serialized,
	      isStringTag = _ref.isStringTag;
	  registerStyles(cache, serialized, isStringTag);
	  useInsertionEffectAlwaysWithSyncFallback(function () {
	    return insertStyles(cache, serialized, isStringTag);
	  });

	  return null;
	};

	var createStyled$1 = function createStyled(tag, options) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (tag === undefined) {
	      throw new Error('You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.');
	    }
	  }

	  var isReal = tag.__emotion_real === tag;
	  var baseTag = isReal && tag.__emotion_base || tag;
	  var identifierName;
	  var targetClassName;

	  if (options !== undefined) {
	    identifierName = options.label;
	    targetClassName = options.target;
	  }

	  var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
	  var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
	  var shouldUseAs = !defaultShouldForwardProp('as');
	  return function () {
	    var args = arguments;
	    var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];

	    if (identifierName !== undefined) {
	      styles.push("label:" + identifierName + ";");
	    }

	    if (args[0] == null || args[0].raw === undefined) {
	      styles.push.apply(styles, args);
	    } else {
	      if (process.env.NODE_ENV !== 'production' && args[0][0] === undefined) {
	        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
	      }

	      styles.push(args[0][0]);
	      var len = args.length;
	      var i = 1;

	      for (; i < len; i++) {
	        if (process.env.NODE_ENV !== 'production' && args[0][i] === undefined) {
	          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
	        }

	        styles.push(args[i], args[0][i]);
	      }
	    } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class


	    var Styled = withEmotionCache(function (props, cache, ref) {
	      var FinalTag = shouldUseAs && props.as || baseTag;
	      var className = '';
	      var classInterpolations = [];
	      var mergedProps = props;

	      if (props.theme == null) {
	        mergedProps = {};

	        for (var key in props) {
	          mergedProps[key] = props[key];
	        }

	        mergedProps.theme = reactExports.useContext(ThemeContext$2);
	      }

	      if (typeof props.className === 'string') {
	        className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
	      } else if (props.className != null) {
	        className = props.className + " ";
	      }

	      var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
	      className += cache.key + "-" + serialized.name;

	      if (targetClassName !== undefined) {
	        className += " " + targetClassName;
	      }

	      var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
	      var newProps = {};

	      for (var _key in props) {
	        if (shouldUseAs && _key === 'as') continue;

	        if ( // $FlowFixMe
	        finalShouldForwardProp(_key)) {
	          newProps[_key] = props[_key];
	        }
	      }

	      newProps.className = className;
	      newProps.ref = ref;
	      return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement(Insertion, {
	        cache: cache,
	        serialized: serialized,
	        isStringTag: typeof FinalTag === 'string'
	      }), /*#__PURE__*/reactExports.createElement(FinalTag, newProps));
	    });
	    Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
	    Styled.defaultProps = tag.defaultProps;
	    Styled.__emotion_real = Styled;
	    Styled.__emotion_base = baseTag;
	    Styled.__emotion_styles = styles;
	    Styled.__emotion_forwardProp = shouldForwardProp;
	    Object.defineProperty(Styled, 'toString', {
	      value: function value() {
	        if (targetClassName === undefined && process.env.NODE_ENV !== 'production') {
	          return 'NO_COMPONENT_SELECTOR';
	        } // $FlowFixMe: coerce undefined to string


	        return "." + targetClassName;
	      }
	    });

	    Styled.withComponent = function (nextTag, nextOptions) {
	      return createStyled(nextTag, _extends$2({}, options, nextOptions, {
	        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
	      })).apply(void 0, styles);
	    };

	    return Styled;
	  };
	};

	var tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG
	'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];

	var newStyled = createStyled$1.bind();
	tags.forEach(function (tagName) {
	  // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type
	  newStyled[tagName] = newStyled(tagName);
	});

	var jsxRuntime = {exports: {}};

	var reactJsxRuntime_production_min = {};

	/**
	 * @license React
	 * react-jsx-runtime.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactJsxRuntime_production_min;

	function requireReactJsxRuntime_production_min () {
		if (hasRequiredReactJsxRuntime_production_min) return reactJsxRuntime_production_min;
		hasRequiredReactJsxRuntime_production_min = 1;
	var f=reactExports,k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};
		function q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=""+g);void 0!==a.key&&(e=""+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return {$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}reactJsxRuntime_production_min.Fragment=l;reactJsxRuntime_production_min.jsx=q;reactJsxRuntime_production_min.jsxs=q;
		return reactJsxRuntime_production_min;
	}

	var reactJsxRuntime_development = {};

	/**
	 * @license React
	 * react-jsx-runtime.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactJsxRuntime_development;

	function requireReactJsxRuntime_development () {
		if (hasRequiredReactJsxRuntime_development) return reactJsxRuntime_development;
		hasRequiredReactJsxRuntime_development = 1;

		if (process.env.NODE_ENV !== "production") {
		  (function() {

		var React = reactExports;

		// ATTENTION
		// When adding new symbols to this file,
		// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
		// The Symbol used to tag the ReactElement-like types.
		var REACT_ELEMENT_TYPE = Symbol.for('react.element');
		var REACT_PORTAL_TYPE = Symbol.for('react.portal');
		var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
		var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
		var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
		var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
		var REACT_CONTEXT_TYPE = Symbol.for('react.context');
		var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
		var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
		var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
		var REACT_MEMO_TYPE = Symbol.for('react.memo');
		var REACT_LAZY_TYPE = Symbol.for('react.lazy');
		var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
		var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
		var FAUX_ITERATOR_SYMBOL = '@@iterator';
		function getIteratorFn(maybeIterable) {
		  if (maybeIterable === null || typeof maybeIterable !== 'object') {
		    return null;
		  }

		  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

		  if (typeof maybeIterator === 'function') {
		    return maybeIterator;
		  }

		  return null;
		}

		var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

		function error(format) {
		  {
		    {
		      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
		        args[_key2 - 1] = arguments[_key2];
		      }

		      printWarning('error', format, args);
		    }
		  }
		}

		function printWarning(level, format, args) {
		  // When changing this logic, you might want to also
		  // update consoleWithStackDev.www.js as well.
		  {
		    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
		    var stack = ReactDebugCurrentFrame.getStackAddendum();

		    if (stack !== '') {
		      format += '%s';
		      args = args.concat([stack]);
		    } // eslint-disable-next-line react-internal/safe-string-coercion


		    var argsWithFormat = args.map(function (item) {
		      return String(item);
		    }); // Careful: RN currently depends on this prefix

		    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
		    // breaks IE9: https://github.com/facebook/react/issues/13610
		    // eslint-disable-next-line react-internal/no-production-logging

		    Function.prototype.apply.call(console[level], console, argsWithFormat);
		  }
		}

		// -----------------------------------------------------------------------------

		var enableScopeAPI = false; // Experimental Create Event Handle API.
		var enableCacheElement = false;
		var enableTransitionTracing = false; // No known bugs, but needs performance testing

		var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
		// stuff. Intended to enable React core members to more easily debug scheduling
		// issues in DEV builds.

		var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

		var REACT_MODULE_REFERENCE;

		{
		  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
		}

		function isValidElementType(type) {
		  if (typeof type === 'string' || typeof type === 'function') {
		    return true;
		  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


		  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
		    return true;
		  }

		  if (typeof type === 'object' && type !== null) {
		    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
		    // types supported by any Flight configuration anywhere since
		    // we don't know which Flight build this will end up being used
		    // with.
		    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
		      return true;
		    }
		  }

		  return false;
		}

		function getWrappedName(outerType, innerType, wrapperName) {
		  var displayName = outerType.displayName;

		  if (displayName) {
		    return displayName;
		  }

		  var functionName = innerType.displayName || innerType.name || '';
		  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
		} // Keep in sync with react-reconciler/getComponentNameFromFiber


		function getContextName(type) {
		  return type.displayName || 'Context';
		} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


		function getComponentNameFromType(type) {
		  if (type == null) {
		    // Host root, text node or just invalid type.
		    return null;
		  }

		  {
		    if (typeof type.tag === 'number') {
		      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
		    }
		  }

		  if (typeof type === 'function') {
		    return type.displayName || type.name || null;
		  }

		  if (typeof type === 'string') {
		    return type;
		  }

		  switch (type) {
		    case REACT_FRAGMENT_TYPE:
		      return 'Fragment';

		    case REACT_PORTAL_TYPE:
		      return 'Portal';

		    case REACT_PROFILER_TYPE:
		      return 'Profiler';

		    case REACT_STRICT_MODE_TYPE:
		      return 'StrictMode';

		    case REACT_SUSPENSE_TYPE:
		      return 'Suspense';

		    case REACT_SUSPENSE_LIST_TYPE:
		      return 'SuspenseList';

		  }

		  if (typeof type === 'object') {
		    switch (type.$$typeof) {
		      case REACT_CONTEXT_TYPE:
		        var context = type;
		        return getContextName(context) + '.Consumer';

		      case REACT_PROVIDER_TYPE:
		        var provider = type;
		        return getContextName(provider._context) + '.Provider';

		      case REACT_FORWARD_REF_TYPE:
		        return getWrappedName(type, type.render, 'ForwardRef');

		      case REACT_MEMO_TYPE:
		        var outerName = type.displayName || null;

		        if (outerName !== null) {
		          return outerName;
		        }

		        return getComponentNameFromType(type.type) || 'Memo';

		      case REACT_LAZY_TYPE:
		        {
		          var lazyComponent = type;
		          var payload = lazyComponent._payload;
		          var init = lazyComponent._init;

		          try {
		            return getComponentNameFromType(init(payload));
		          } catch (x) {
		            return null;
		          }
		        }

		      // eslint-disable-next-line no-fallthrough
		    }
		  }

		  return null;
		}

		var assign = Object.assign;

		// Helpers to patch console.logs to avoid logging during side-effect free
		// replaying on render function. This currently only patches the object
		// lazily which won't cover if the log function was extracted eagerly.
		// We could also eagerly patch the method.
		var disabledDepth = 0;
		var prevLog;
		var prevInfo;
		var prevWarn;
		var prevError;
		var prevGroup;
		var prevGroupCollapsed;
		var prevGroupEnd;

		function disabledLog() {}

		disabledLog.__reactDisabledLog = true;
		function disableLogs() {
		  {
		    if (disabledDepth === 0) {
		      /* eslint-disable react-internal/no-production-logging */
		      prevLog = console.log;
		      prevInfo = console.info;
		      prevWarn = console.warn;
		      prevError = console.error;
		      prevGroup = console.group;
		      prevGroupCollapsed = console.groupCollapsed;
		      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

		      var props = {
		        configurable: true,
		        enumerable: true,
		        value: disabledLog,
		        writable: true
		      }; // $FlowFixMe Flow thinks console is immutable.

		      Object.defineProperties(console, {
		        info: props,
		        log: props,
		        warn: props,
		        error: props,
		        group: props,
		        groupCollapsed: props,
		        groupEnd: props
		      });
		      /* eslint-enable react-internal/no-production-logging */
		    }

		    disabledDepth++;
		  }
		}
		function reenableLogs() {
		  {
		    disabledDepth--;

		    if (disabledDepth === 0) {
		      /* eslint-disable react-internal/no-production-logging */
		      var props = {
		        configurable: true,
		        enumerable: true,
		        writable: true
		      }; // $FlowFixMe Flow thinks console is immutable.

		      Object.defineProperties(console, {
		        log: assign({}, props, {
		          value: prevLog
		        }),
		        info: assign({}, props, {
		          value: prevInfo
		        }),
		        warn: assign({}, props, {
		          value: prevWarn
		        }),
		        error: assign({}, props, {
		          value: prevError
		        }),
		        group: assign({}, props, {
		          value: prevGroup
		        }),
		        groupCollapsed: assign({}, props, {
		          value: prevGroupCollapsed
		        }),
		        groupEnd: assign({}, props, {
		          value: prevGroupEnd
		        })
		      });
		      /* eslint-enable react-internal/no-production-logging */
		    }

		    if (disabledDepth < 0) {
		      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
		    }
		  }
		}

		var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
		var prefix;
		function describeBuiltInComponentFrame(name, source, ownerFn) {
		  {
		    if (prefix === undefined) {
		      // Extract the VM specific prefix used by each line.
		      try {
		        throw Error();
		      } catch (x) {
		        var match = x.stack.trim().match(/\n( *(at )?)/);
		        prefix = match && match[1] || '';
		      }
		    } // We use the prefix to ensure our stacks line up with native stack frames.


		    return '\n' + prefix + name;
		  }
		}
		var reentry = false;
		var componentFrameCache;

		{
		  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
		  componentFrameCache = new PossiblyWeakMap();
		}

		function describeNativeComponentFrame(fn, construct) {
		  // If something asked for a stack inside a fake render, it should get ignored.
		  if ( !fn || reentry) {
		    return '';
		  }

		  {
		    var frame = componentFrameCache.get(fn);

		    if (frame !== undefined) {
		      return frame;
		    }
		  }

		  var control;
		  reentry = true;
		  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

		  Error.prepareStackTrace = undefined;
		  var previousDispatcher;

		  {
		    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
		    // for warnings.

		    ReactCurrentDispatcher.current = null;
		    disableLogs();
		  }

		  try {
		    // This should throw.
		    if (construct) {
		      // Something should be setting the props in the constructor.
		      var Fake = function () {
		        throw Error();
		      }; // $FlowFixMe


		      Object.defineProperty(Fake.prototype, 'props', {
		        set: function () {
		          // We use a throwing setter instead of frozen or non-writable props
		          // because that won't throw in a non-strict mode function.
		          throw Error();
		        }
		      });

		      if (typeof Reflect === 'object' && Reflect.construct) {
		        // We construct a different control for this case to include any extra
		        // frames added by the construct call.
		        try {
		          Reflect.construct(Fake, []);
		        } catch (x) {
		          control = x;
		        }

		        Reflect.construct(fn, [], Fake);
		      } else {
		        try {
		          Fake.call();
		        } catch (x) {
		          control = x;
		        }

		        fn.call(Fake.prototype);
		      }
		    } else {
		      try {
		        throw Error();
		      } catch (x) {
		        control = x;
		      }

		      fn();
		    }
		  } catch (sample) {
		    // This is inlined manually because closure doesn't do it for us.
		    if (sample && control && typeof sample.stack === 'string') {
		      // This extracts the first frame from the sample that isn't also in the control.
		      // Skipping one frame that we assume is the frame that calls the two.
		      var sampleLines = sample.stack.split('\n');
		      var controlLines = control.stack.split('\n');
		      var s = sampleLines.length - 1;
		      var c = controlLines.length - 1;

		      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
		        // We expect at least one stack frame to be shared.
		        // Typically this will be the root most one. However, stack frames may be
		        // cut off due to maximum stack limits. In this case, one maybe cut off
		        // earlier than the other. We assume that the sample is longer or the same
		        // and there for cut off earlier. So we should find the root most frame in
		        // the sample somewhere in the control.
		        c--;
		      }

		      for (; s >= 1 && c >= 0; s--, c--) {
		        // Next we find the first one that isn't the same which should be the
		        // frame that called our sample function and the control.
		        if (sampleLines[s] !== controlLines[c]) {
		          // In V8, the first line is describing the message but other VMs don't.
		          // If we're about to return the first line, and the control is also on the same
		          // line, that's a pretty good indicator that our sample threw at same line as
		          // the control. I.e. before we entered the sample frame. So we ignore this result.
		          // This can happen if you passed a class to function component, or non-function.
		          if (s !== 1 || c !== 1) {
		            do {
		              s--;
		              c--; // We may still have similar intermediate frames from the construct call.
		              // The next one that isn't the same should be our match though.

		              if (c < 0 || sampleLines[s] !== controlLines[c]) {
		                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
		                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
		                // but we have a user-provided "displayName"
		                // splice it in to make the stack more readable.


		                if (fn.displayName && _frame.includes('<anonymous>')) {
		                  _frame = _frame.replace('<anonymous>', fn.displayName);
		                }

		                {
		                  if (typeof fn === 'function') {
		                    componentFrameCache.set(fn, _frame);
		                  }
		                } // Return the line we found.


		                return _frame;
		              }
		            } while (s >= 1 && c >= 0);
		          }

		          break;
		        }
		      }
		    }
		  } finally {
		    reentry = false;

		    {
		      ReactCurrentDispatcher.current = previousDispatcher;
		      reenableLogs();
		    }

		    Error.prepareStackTrace = previousPrepareStackTrace;
		  } // Fallback to just using the name if we couldn't make it throw.


		  var name = fn ? fn.displayName || fn.name : '';
		  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

		  {
		    if (typeof fn === 'function') {
		      componentFrameCache.set(fn, syntheticFrame);
		    }
		  }

		  return syntheticFrame;
		}
		function describeFunctionComponentFrame(fn, source, ownerFn) {
		  {
		    return describeNativeComponentFrame(fn, false);
		  }
		}

		function shouldConstruct(Component) {
		  var prototype = Component.prototype;
		  return !!(prototype && prototype.isReactComponent);
		}

		function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

		  if (type == null) {
		    return '';
		  }

		  if (typeof type === 'function') {
		    {
		      return describeNativeComponentFrame(type, shouldConstruct(type));
		    }
		  }

		  if (typeof type === 'string') {
		    return describeBuiltInComponentFrame(type);
		  }

		  switch (type) {
		    case REACT_SUSPENSE_TYPE:
		      return describeBuiltInComponentFrame('Suspense');

		    case REACT_SUSPENSE_LIST_TYPE:
		      return describeBuiltInComponentFrame('SuspenseList');
		  }

		  if (typeof type === 'object') {
		    switch (type.$$typeof) {
		      case REACT_FORWARD_REF_TYPE:
		        return describeFunctionComponentFrame(type.render);

		      case REACT_MEMO_TYPE:
		        // Memo may contain any component type so we recursively resolve it.
		        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

		      case REACT_LAZY_TYPE:
		        {
		          var lazyComponent = type;
		          var payload = lazyComponent._payload;
		          var init = lazyComponent._init;

		          try {
		            // Lazy may contain any component type so we recursively resolve it.
		            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
		          } catch (x) {}
		        }
		    }
		  }

		  return '';
		}

		var hasOwnProperty = Object.prototype.hasOwnProperty;

		var loggedTypeFailures = {};
		var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

		function setCurrentlyValidatingElement(element) {
		  {
		    if (element) {
		      var owner = element._owner;
		      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
		      ReactDebugCurrentFrame.setExtraStackFrame(stack);
		    } else {
		      ReactDebugCurrentFrame.setExtraStackFrame(null);
		    }
		  }
		}

		function checkPropTypes(typeSpecs, values, location, componentName, element) {
		  {
		    // $FlowFixMe This is okay but Flow doesn't know it.
		    var has = Function.call.bind(hasOwnProperty);

		    for (var typeSpecName in typeSpecs) {
		      if (has(typeSpecs, typeSpecName)) {
		        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
		        // fail the render phase where it didn't fail before. So we log it.
		        // After these have been cleaned up, we'll let them throw.

		        try {
		          // This is intentionally an invariant that gets caught. It's the same
		          // behavior as without this statement except with a better message.
		          if (typeof typeSpecs[typeSpecName] !== 'function') {
		            // eslint-disable-next-line react-internal/prod-error-codes
		            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
		            err.name = 'Invariant Violation';
		            throw err;
		          }

		          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
		        } catch (ex) {
		          error$1 = ex;
		        }

		        if (error$1 && !(error$1 instanceof Error)) {
		          setCurrentlyValidatingElement(element);

		          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

		          setCurrentlyValidatingElement(null);
		        }

		        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
		          // Only monitor this failure once because there tends to be a lot of the
		          // same error.
		          loggedTypeFailures[error$1.message] = true;
		          setCurrentlyValidatingElement(element);

		          error('Failed %s type: %s', location, error$1.message);

		          setCurrentlyValidatingElement(null);
		        }
		      }
		    }
		  }
		}

		var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

		function isArray(a) {
		  return isArrayImpl(a);
		}

		/*
		 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
		 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
		 *
		 * The functions in this module will throw an easier-to-understand,
		 * easier-to-debug exception with a clear errors message message explaining the
		 * problem. (Instead of a confusing exception thrown inside the implementation
		 * of the `value` object).
		 */
		// $FlowFixMe only called in DEV, so void return is not possible.
		function typeName(value) {
		  {
		    // toStringTag is needed for namespaced types like Temporal.Instant
		    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
		    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
		    return type;
		  }
		} // $FlowFixMe only called in DEV, so void return is not possible.


		function willCoercionThrow(value) {
		  {
		    try {
		      testStringCoercion(value);
		      return false;
		    } catch (e) {
		      return true;
		    }
		  }
		}

		function testStringCoercion(value) {
		  // If you ended up here by following an exception call stack, here's what's
		  // happened: you supplied an object or symbol value to React (as a prop, key,
		  // DOM attribute, CSS property, string ref, etc.) and when React tried to
		  // coerce it to a string using `'' + value`, an exception was thrown.
		  //
		  // The most common types that will cause this exception are `Symbol` instances
		  // and Temporal objects like `Temporal.Instant`. But any object that has a
		  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
		  // exception. (Library authors do this to prevent users from using built-in
		  // numeric operators like `+` or comparison operators like `>=` because custom
		  // methods are needed to perform accurate arithmetic or comparison.)
		  //
		  // To fix the problem, coerce this object or symbol value to a string before
		  // passing it to React. The most reliable way is usually `String(value)`.
		  //
		  // To find which value is throwing, check the browser or debugger console.
		  // Before this exception was thrown, there should be `console.error` output
		  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
		  // problem and how that type was used: key, atrribute, input value prop, etc.
		  // In most cases, this console output also shows the component and its
		  // ancestor components where the exception happened.
		  //
		  // eslint-disable-next-line react-internal/safe-string-coercion
		  return '' + value;
		}
		function checkKeyStringCoercion(value) {
		  {
		    if (willCoercionThrow(value)) {
		      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

		      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
		    }
		  }
		}

		var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
		var RESERVED_PROPS = {
		  key: true,
		  ref: true,
		  __self: true,
		  __source: true
		};
		var specialPropKeyWarningShown;
		var specialPropRefWarningShown;
		var didWarnAboutStringRefs;

		{
		  didWarnAboutStringRefs = {};
		}

		function hasValidRef(config) {
		  {
		    if (hasOwnProperty.call(config, 'ref')) {
		      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

		      if (getter && getter.isReactWarning) {
		        return false;
		      }
		    }
		  }

		  return config.ref !== undefined;
		}

		function hasValidKey(config) {
		  {
		    if (hasOwnProperty.call(config, 'key')) {
		      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

		      if (getter && getter.isReactWarning) {
		        return false;
		      }
		    }
		  }

		  return config.key !== undefined;
		}

		function warnIfStringRefCannotBeAutoConverted(config, self) {
		  {
		    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
		      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);

		      if (!didWarnAboutStringRefs[componentName]) {
		        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);

		        didWarnAboutStringRefs[componentName] = true;
		      }
		    }
		  }
		}

		function defineKeyPropWarningGetter(props, displayName) {
		  {
		    var warnAboutAccessingKey = function () {
		      if (!specialPropKeyWarningShown) {
		        specialPropKeyWarningShown = true;

		        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
		      }
		    };

		    warnAboutAccessingKey.isReactWarning = true;
		    Object.defineProperty(props, 'key', {
		      get: warnAboutAccessingKey,
		      configurable: true
		    });
		  }
		}

		function defineRefPropWarningGetter(props, displayName) {
		  {
		    var warnAboutAccessingRef = function () {
		      if (!specialPropRefWarningShown) {
		        specialPropRefWarningShown = true;

		        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
		      }
		    };

		    warnAboutAccessingRef.isReactWarning = true;
		    Object.defineProperty(props, 'ref', {
		      get: warnAboutAccessingRef,
		      configurable: true
		    });
		  }
		}
		/**
		 * Factory method to create a new React element. This no longer adheres to
		 * the class pattern, so do not use new to call it. Also, instanceof check
		 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
		 * if something is a React Element.
		 *
		 * @param {*} type
		 * @param {*} props
		 * @param {*} key
		 * @param {string|object} ref
		 * @param {*} owner
		 * @param {*} self A *temporary* helper to detect places where `this` is
		 * different from the `owner` when React.createElement is called, so that we
		 * can warn. We want to get rid of owner and replace string `ref`s with arrow
		 * functions, and as long as `this` and owner are the same, there will be no
		 * change in behavior.
		 * @param {*} source An annotation object (added by a transpiler or otherwise)
		 * indicating filename, line number, and/or other information.
		 * @internal
		 */


		var ReactElement = function (type, key, ref, self, source, owner, props) {
		  var element = {
		    // This tag allows us to uniquely identify this as a React Element
		    $$typeof: REACT_ELEMENT_TYPE,
		    // Built-in properties that belong on the element
		    type: type,
		    key: key,
		    ref: ref,
		    props: props,
		    // Record the component responsible for creating this element.
		    _owner: owner
		  };

		  {
		    // The validation flag is currently mutative. We put it on
		    // an external backing store so that we can freeze the whole object.
		    // This can be replaced with a WeakMap once they are implemented in
		    // commonly used development environments.
		    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
		    // the validation flag non-enumerable (where possible, which should
		    // include every environment we run tests in), so the test framework
		    // ignores it.

		    Object.defineProperty(element._store, 'validated', {
		      configurable: false,
		      enumerable: false,
		      writable: true,
		      value: false
		    }); // self and source are DEV only properties.

		    Object.defineProperty(element, '_self', {
		      configurable: false,
		      enumerable: false,
		      writable: false,
		      value: self
		    }); // Two elements created in two different places should be considered
		    // equal for testing purposes and therefore we hide it from enumeration.

		    Object.defineProperty(element, '_source', {
		      configurable: false,
		      enumerable: false,
		      writable: false,
		      value: source
		    });

		    if (Object.freeze) {
		      Object.freeze(element.props);
		      Object.freeze(element);
		    }
		  }

		  return element;
		};
		/**
		 * https://github.com/reactjs/rfcs/pull/107
		 * @param {*} type
		 * @param {object} props
		 * @param {string} key
		 */

		function jsxDEV(type, config, maybeKey, source, self) {
		  {
		    var propName; // Reserved names are extracted

		    var props = {};
		    var key = null;
		    var ref = null; // Currently, key can be spread in as a prop. This causes a potential
		    // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
		    // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
		    // but as an intermediary step, we will use jsxDEV for everything except
		    // <div {...props} key="Hi" />, because we aren't currently able to tell if
		    // key is explicitly declared to be undefined or not.

		    if (maybeKey !== undefined) {
		      {
		        checkKeyStringCoercion(maybeKey);
		      }

		      key = '' + maybeKey;
		    }

		    if (hasValidKey(config)) {
		      {
		        checkKeyStringCoercion(config.key);
		      }

		      key = '' + config.key;
		    }

		    if (hasValidRef(config)) {
		      ref = config.ref;
		      warnIfStringRefCannotBeAutoConverted(config, self);
		    } // Remaining properties are added to a new props object


		    for (propName in config) {
		      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
		        props[propName] = config[propName];
		      }
		    } // Resolve default props


		    if (type && type.defaultProps) {
		      var defaultProps = type.defaultProps;

		      for (propName in defaultProps) {
		        if (props[propName] === undefined) {
		          props[propName] = defaultProps[propName];
		        }
		      }
		    }

		    if (key || ref) {
		      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

		      if (key) {
		        defineKeyPropWarningGetter(props, displayName);
		      }

		      if (ref) {
		        defineRefPropWarningGetter(props, displayName);
		      }
		    }

		    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
		  }
		}

		var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
		var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

		function setCurrentlyValidatingElement$1(element) {
		  {
		    if (element) {
		      var owner = element._owner;
		      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
		      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
		    } else {
		      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
		    }
		  }
		}

		var propTypesMisspellWarningShown;

		{
		  propTypesMisspellWarningShown = false;
		}
		/**
		 * Verifies the object is a ReactElement.
		 * See https://reactjs.org/docs/react-api.html#isvalidelement
		 * @param {?object} object
		 * @return {boolean} True if `object` is a ReactElement.
		 * @final
		 */


		function isValidElement(object) {
		  {
		    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
		  }
		}

		function getDeclarationErrorAddendum() {
		  {
		    if (ReactCurrentOwner$1.current) {
		      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);

		      if (name) {
		        return '\n\nCheck the render method of `' + name + '`.';
		      }
		    }

		    return '';
		  }
		}

		function getSourceInfoErrorAddendum(source) {
		  {
		    if (source !== undefined) {
		      var fileName = source.fileName.replace(/^.*[\\\/]/, '');
		      var lineNumber = source.lineNumber;
		      return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
		    }

		    return '';
		  }
		}
		/**
		 * Warn if there's no key explicitly set on dynamic arrays of children or
		 * object keys are not valid. This allows us to keep track of children between
		 * updates.
		 */


		var ownerHasKeyUseWarning = {};

		function getCurrentComponentErrorInfo(parentType) {
		  {
		    var info = getDeclarationErrorAddendum();

		    if (!info) {
		      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

		      if (parentName) {
		        info = "\n\nCheck the top-level render call using <" + parentName + ">.";
		      }
		    }

		    return info;
		  }
		}
		/**
		 * Warn if the element doesn't have an explicit key assigned to it.
		 * This element is in an array. The array could grow and shrink or be
		 * reordered. All children that haven't already been validated are required to
		 * have a "key" property assigned to it. Error statuses are cached so a warning
		 * will only be shown once.
		 *
		 * @internal
		 * @param {ReactElement} element Element that requires a key.
		 * @param {*} parentType element's parent's type.
		 */


		function validateExplicitKey(element, parentType) {
		  {
		    if (!element._store || element._store.validated || element.key != null) {
		      return;
		    }

		    element._store.validated = true;
		    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

		    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
		      return;
		    }

		    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
		    // property, it may be the creator of the child that's responsible for
		    // assigning it a key.

		    var childOwner = '';

		    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
		      // Give the component that originally created this child.
		      childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
		    }

		    setCurrentlyValidatingElement$1(element);

		    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

		    setCurrentlyValidatingElement$1(null);
		  }
		}
		/**
		 * Ensure that every element either is passed in a static location, in an
		 * array with an explicit keys property defined, or in an object literal
		 * with valid key property.
		 *
		 * @internal
		 * @param {ReactNode} node Statically passed child of any type.
		 * @param {*} parentType node's parent's type.
		 */


		function validateChildKeys(node, parentType) {
		  {
		    if (typeof node !== 'object') {
		      return;
		    }

		    if (isArray(node)) {
		      for (var i = 0; i < node.length; i++) {
		        var child = node[i];

		        if (isValidElement(child)) {
		          validateExplicitKey(child, parentType);
		        }
		      }
		    } else if (isValidElement(node)) {
		      // This element was passed in a valid location.
		      if (node._store) {
		        node._store.validated = true;
		      }
		    } else if (node) {
		      var iteratorFn = getIteratorFn(node);

		      if (typeof iteratorFn === 'function') {
		        // Entry iterators used to provide implicit keys,
		        // but now we print a separate warning for them later.
		        if (iteratorFn !== node.entries) {
		          var iterator = iteratorFn.call(node);
		          var step;

		          while (!(step = iterator.next()).done) {
		            if (isValidElement(step.value)) {
		              validateExplicitKey(step.value, parentType);
		            }
		          }
		        }
		      }
		    }
		  }
		}
		/**
		 * Given an element, validate that its props follow the propTypes definition,
		 * provided by the type.
		 *
		 * @param {ReactElement} element
		 */


		function validatePropTypes(element) {
		  {
		    var type = element.type;

		    if (type === null || type === undefined || typeof type === 'string') {
		      return;
		    }

		    var propTypes;

		    if (typeof type === 'function') {
		      propTypes = type.propTypes;
		    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
		    // Inner props are checked in the reconciler.
		    type.$$typeof === REACT_MEMO_TYPE)) {
		      propTypes = type.propTypes;
		    } else {
		      return;
		    }

		    if (propTypes) {
		      // Intentionally inside to avoid triggering lazy initializers:
		      var name = getComponentNameFromType(type);
		      checkPropTypes(propTypes, element.props, 'prop', name, element);
		    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
		      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

		      var _name = getComponentNameFromType(type);

		      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
		    }

		    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
		      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
		    }
		  }
		}
		/**
		 * Given a fragment, validate that it can only be provided with fragment props
		 * @param {ReactElement} fragment
		 */


		function validateFragmentProps(fragment) {
		  {
		    var keys = Object.keys(fragment.props);

		    for (var i = 0; i < keys.length; i++) {
		      var key = keys[i];

		      if (key !== 'children' && key !== 'key') {
		        setCurrentlyValidatingElement$1(fragment);

		        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

		        setCurrentlyValidatingElement$1(null);
		        break;
		      }
		    }

		    if (fragment.ref !== null) {
		      setCurrentlyValidatingElement$1(fragment);

		      error('Invalid attribute `ref` supplied to `React.Fragment`.');

		      setCurrentlyValidatingElement$1(null);
		    }
		  }
		}

		function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
		  {
		    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
		    // succeed and there will likely be errors in render.

		    if (!validType) {
		      var info = '';

		      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
		        info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
		      }

		      var sourceInfo = getSourceInfoErrorAddendum(source);

		      if (sourceInfo) {
		        info += sourceInfo;
		      } else {
		        info += getDeclarationErrorAddendum();
		      }

		      var typeString;

		      if (type === null) {
		        typeString = 'null';
		      } else if (isArray(type)) {
		        typeString = 'array';
		      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
		        typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
		        info = ' Did you accidentally export a JSX literal instead of a component?';
		      } else {
		        typeString = typeof type;
		      }

		      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
		    }

		    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
		    // TODO: Drop this when these are no longer allowed as the type argument.

		    if (element == null) {
		      return element;
		    } // Skip key warning if the type isn't valid since our key validation logic
		    // doesn't expect a non-string/function type and can throw confusing errors.
		    // We don't want exception behavior to differ between dev and prod.
		    // (Rendering will throw with a helpful message and as soon as the type is
		    // fixed, the key warnings will appear.)


		    if (validType) {
		      var children = props.children;

		      if (children !== undefined) {
		        if (isStaticChildren) {
		          if (isArray(children)) {
		            for (var i = 0; i < children.length; i++) {
		              validateChildKeys(children[i], type);
		            }

		            if (Object.freeze) {
		              Object.freeze(children);
		            }
		          } else {
		            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
		          }
		        } else {
		          validateChildKeys(children, type);
		        }
		      }
		    }

		    if (type === REACT_FRAGMENT_TYPE) {
		      validateFragmentProps(element);
		    } else {
		      validatePropTypes(element);
		    }

		    return element;
		  }
		} // These two functions exist to still get child warnings in dev
		// even with the prod transform. This means that jsxDEV is purely
		// opt-in behavior for better messages but that we won't stop
		// giving you warnings if you use production apis.

		function jsxWithValidationStatic(type, props, key) {
		  {
		    return jsxWithValidation(type, props, key, true);
		  }
		}
		function jsxWithValidationDynamic(type, props, key) {
		  {
		    return jsxWithValidation(type, props, key, false);
		  }
		}

		var jsx =  jsxWithValidationDynamic ; // we may want to special case jsxs internally to take advantage of static children.
		// for now we can ship identical prod functions

		var jsxs =  jsxWithValidationStatic ;

		reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
		reactJsxRuntime_development.jsx = jsx;
		reactJsxRuntime_development.jsxs = jsxs;
		  })();
		}
		return reactJsxRuntime_development;
	}

	if (process.env.NODE_ENV === 'production') {
	  jsxRuntime.exports = requireReactJsxRuntime_production_min();
	} else {
	  jsxRuntime.exports = requireReactJsxRuntime_development();
	}

	var jsxRuntimeExports = jsxRuntime.exports;

	/**
	 * @mui/styled-engine v5.14.14
	 *
	 * @license MIT
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	function styled$2(tag, options) {
	  const stylesFactory = newStyled(tag, options);
	  if (process.env.NODE_ENV !== 'production') {
	    return (...styles) => {
	      const component = typeof tag === 'string' ? `"${tag}"` : 'component';
	      if (styles.length === 0) {
	        console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join('\n'));
	      } else if (styles.some(style => style === undefined)) {
	        console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
	      }
	      return stylesFactory(...styles);
	    };
	  }
	  return stylesFactory;
	}

	// eslint-disable-next-line @typescript-eslint/naming-convention
	const internal_processStyles = (tag, processor) => {
	  // Emotion attaches all the styles as `__emotion_styles`.
	  // Ref: https://github.com/emotion-js/emotion/blob/16d971d0da229596d6bcc39d282ba9753c9ee7cf/packages/styled/src/base.js#L186
	  if (Array.isArray(tag.__emotion_styles)) {
	    tag.__emotion_styles = processor(tag.__emotion_styles);
	  }
	};

	const _excluded$J = ["values", "unit", "step"];
	const sortBreakpointsValues = values => {
	  const breakpointsAsArray = Object.keys(values).map(key => ({
	    key,
	    val: values[key]
	  })) || [];
	  // Sort in ascending order
	  breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
	  return breakpointsAsArray.reduce((acc, obj) => {
	    return _extends$2({}, acc, {
	      [obj.key]: obj.val
	    });
	  }, {});
	};

	// Keep in mind that @media is inclusive by the CSS specification.
	function createBreakpoints(breakpoints) {
	  const {
	      // The breakpoint **start** at this value.
	      // For instance with the first breakpoint xs: [xs, sm).
	      values = {
	        xs: 0,
	        // phone
	        sm: 600,
	        // tablet
	        md: 900,
	        // small laptop
	        lg: 1200,
	        // desktop
	        xl: 1536 // large screen
	      },

	      unit = 'px',
	      step = 5
	    } = breakpoints,
	    other = _objectWithoutPropertiesLoose$1(breakpoints, _excluded$J);
	  const sortedValues = sortBreakpointsValues(values);
	  const keys = Object.keys(sortedValues);
	  function up(key) {
	    const value = typeof values[key] === 'number' ? values[key] : key;
	    return `@media (min-width:${value}${unit})`;
	  }
	  function down(key) {
	    const value = typeof values[key] === 'number' ? values[key] : key;
	    return `@media (max-width:${value - step / 100}${unit})`;
	  }
	  function between(start, end) {
	    const endIndex = keys.indexOf(end);
	    return `@media (min-width:${typeof values[start] === 'number' ? values[start] : start}${unit}) and ` + `(max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === 'number' ? values[keys[endIndex]] : end) - step / 100}${unit})`;
	  }
	  function only(key) {
	    if (keys.indexOf(key) + 1 < keys.length) {
	      return between(key, keys[keys.indexOf(key) + 1]);
	    }
	    return up(key);
	  }
	  function not(key) {
	    // handle first and last key separately, for better readability
	    const keyIndex = keys.indexOf(key);
	    if (keyIndex === 0) {
	      return up(keys[1]);
	    }
	    if (keyIndex === keys.length - 1) {
	      return down(keys[keyIndex]);
	    }
	    return between(key, keys[keys.indexOf(key) + 1]).replace('@media', '@media not all and');
	  }
	  return _extends$2({
	    keys,
	    values: sortedValues,
	    up,
	    down,
	    between,
	    only,
	    not,
	    unit
	  }, other);
	}

	const shape = {
	  borderRadius: 4
	};
	var shape$1 = shape;

	const responsivePropType = process.env.NODE_ENV !== 'production' ? PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.object, PropTypes.array]) : {};
	var responsivePropType$1 = responsivePropType;

	function merge(acc, item) {
	  if (!item) {
	    return acc;
	  }
	  return deepmerge(acc, item, {
	    clone: false // No need to clone deep, it's way faster.
	  });
	}

	// The breakpoint **start** at this value.
	// For instance with the first breakpoint xs: [xs, sm[.
	const values$1 = {
	  xs: 0,
	  // phone
	  sm: 600,
	  // tablet
	  md: 900,
	  // small laptop
	  lg: 1200,
	  // desktop
	  xl: 1536 // large screen
	};

	const defaultBreakpoints = {
	  // Sorted ASC by size. That's important.
	  // It can't be configured as it's used statically for propTypes.
	  keys: ['xs', 'sm', 'md', 'lg', 'xl'],
	  up: key => `@media (min-width:${values$1[key]}px)`
	};
	function handleBreakpoints(props, propValue, styleFromPropValue) {
	  const theme = props.theme || {};
	  if (Array.isArray(propValue)) {
	    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
	    return propValue.reduce((acc, item, index) => {
	      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
	      return acc;
	    }, {});
	  }
	  if (typeof propValue === 'object') {
	    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
	    return Object.keys(propValue).reduce((acc, breakpoint) => {
	      // key is breakpoint
	      if (Object.keys(themeBreakpoints.values || values$1).indexOf(breakpoint) !== -1) {
	        const mediaKey = themeBreakpoints.up(breakpoint);
	        acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
	      } else {
	        const cssKey = breakpoint;
	        acc[cssKey] = propValue[cssKey];
	      }
	      return acc;
	    }, {});
	  }
	  const output = styleFromPropValue(propValue);
	  return output;
	}
	function createEmptyBreakpointObject(breakpointsInput = {}) {
	  var _breakpointsInput$key;
	  const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
	    const breakpointStyleKey = breakpointsInput.up(key);
	    acc[breakpointStyleKey] = {};
	    return acc;
	  }, {});
	  return breakpointsInOrder || {};
	}
	function removeUnusedBreakpoints(breakpointKeys, style) {
	  return breakpointKeys.reduce((acc, key) => {
	    const breakpointOutput = acc[key];
	    const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
	    if (isBreakpointUnused) {
	      delete acc[key];
	    }
	    return acc;
	  }, style);
	}

	function getPath(obj, path, checkVars = true) {
	  if (!path || typeof path !== 'string') {
	    return null;
	  }

	  // Check if CSS variables are used
	  if (obj && obj.vars && checkVars) {
	    const val = `vars.${path}`.split('.').reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
	    if (val != null) {
	      return val;
	    }
	  }
	  return path.split('.').reduce((acc, item) => {
	    if (acc && acc[item] != null) {
	      return acc[item];
	    }
	    return null;
	  }, obj);
	}
	function getStyleValue(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
	  let value;
	  if (typeof themeMapping === 'function') {
	    value = themeMapping(propValueFinal);
	  } else if (Array.isArray(themeMapping)) {
	    value = themeMapping[propValueFinal] || userValue;
	  } else {
	    value = getPath(themeMapping, propValueFinal) || userValue;
	  }
	  if (transform) {
	    value = transform(value, userValue, themeMapping);
	  }
	  return value;
	}
	function style$1(options) {
	  const {
	    prop,
	    cssProperty = options.prop,
	    themeKey,
	    transform
	  } = options;

	  // false positive
	  // eslint-disable-next-line react/function-component-definition
	  const fn = props => {
	    if (props[prop] == null) {
	      return null;
	    }
	    const propValue = props[prop];
	    const theme = props.theme;
	    const themeMapping = getPath(theme, themeKey) || {};
	    const styleFromPropValue = propValueFinal => {
	      let value = getStyleValue(themeMapping, transform, propValueFinal);
	      if (propValueFinal === value && typeof propValueFinal === 'string') {
	        // Haven't found value
	        value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : capitalize(propValueFinal)}`, propValueFinal);
	      }
	      if (cssProperty === false) {
	        return value;
	      }
	      return {
	        [cssProperty]: value
	      };
	    };
	    return handleBreakpoints(props, propValue, styleFromPropValue);
	  };
	  fn.propTypes = process.env.NODE_ENV !== 'production' ? {
	    [prop]: responsivePropType$1
	  } : {};
	  fn.filterProps = [prop];
	  return fn;
	}

	function memoize(fn) {
	  const cache = {};
	  return arg => {
	    if (cache[arg] === undefined) {
	      cache[arg] = fn(arg);
	    }
	    return cache[arg];
	  };
	}

	const properties = {
	  m: 'margin',
	  p: 'padding'
	};
	const directions = {
	  t: 'Top',
	  r: 'Right',
	  b: 'Bottom',
	  l: 'Left',
	  x: ['Left', 'Right'],
	  y: ['Top', 'Bottom']
	};
	const aliases = {
	  marginX: 'mx',
	  marginY: 'my',
	  paddingX: 'px',
	  paddingY: 'py'
	};

	// memoize() impact:
	// From 300,000 ops/sec
	// To 350,000 ops/sec
	const getCssProperties = memoize(prop => {
	  // It's not a shorthand notation.
	  if (prop.length > 2) {
	    if (aliases[prop]) {
	      prop = aliases[prop];
	    } else {
	      return [prop];
	    }
	  }
	  const [a, b] = prop.split('');
	  const property = properties[a];
	  const direction = directions[b] || '';
	  return Array.isArray(direction) ? direction.map(dir => property + dir) : [property + direction];
	});
	const marginKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'marginInline', 'marginInlineStart', 'marginInlineEnd', 'marginBlock', 'marginBlockStart', 'marginBlockEnd'];
	const paddingKeys = ['p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY', 'paddingInline', 'paddingInlineStart', 'paddingInlineEnd', 'paddingBlock', 'paddingBlockStart', 'paddingBlockEnd'];
	const spacingKeys = [...marginKeys, ...paddingKeys];
	function createUnaryUnit(theme, themeKey, defaultValue, propName) {
	  var _getPath;
	  const themeSpacing = (_getPath = getPath(theme, themeKey, false)) != null ? _getPath : defaultValue;
	  if (typeof themeSpacing === 'number') {
	    return abs => {
	      if (typeof abs === 'string') {
	        return abs;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        if (typeof abs !== 'number') {
	          console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs}.`);
	        }
	      }
	      return themeSpacing * abs;
	    };
	  }
	  if (Array.isArray(themeSpacing)) {
	    return abs => {
	      if (typeof abs === 'string') {
	        return abs;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        if (!Number.isInteger(abs)) {
	          console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.` + `You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join('\n'));
	        } else if (abs > themeSpacing.length - 1) {
	          console.error([`MUI: The value provided (${abs}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs} > ${themeSpacing.length - 1}, you need to add the missing values.`].join('\n'));
	        }
	      }
	      return themeSpacing[abs];
	    };
	  }
	  if (typeof themeSpacing === 'function') {
	    return themeSpacing;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, 'It should be a number, an array or a function.'].join('\n'));
	  }
	  return () => undefined;
	}
	function createUnarySpacing(theme) {
	  return createUnaryUnit(theme, 'spacing', 8, 'spacing');
	}
	function getValue(transformer, propValue) {
	  if (typeof propValue === 'string' || propValue == null) {
	    return propValue;
	  }
	  const abs = Math.abs(propValue);
	  const transformed = transformer(abs);
	  if (propValue >= 0) {
	    return transformed;
	  }
	  if (typeof transformed === 'number') {
	    return -transformed;
	  }
	  return `-${transformed}`;
	}
	function getStyleFromPropValue(cssProperties, transformer) {
	  return propValue => cssProperties.reduce((acc, cssProperty) => {
	    acc[cssProperty] = getValue(transformer, propValue);
	    return acc;
	  }, {});
	}
	function resolveCssProperty(props, keys, prop, transformer) {
	  // Using a hash computation over an array iteration could be faster, but with only 28 items,
	  // it's doesn't worth the bundle size.
	  if (keys.indexOf(prop) === -1) {
	    return null;
	  }
	  const cssProperties = getCssProperties(prop);
	  const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
	  const propValue = props[prop];
	  return handleBreakpoints(props, propValue, styleFromPropValue);
	}
	function style(props, keys) {
	  const transformer = createUnarySpacing(props.theme);
	  return Object.keys(props).map(prop => resolveCssProperty(props, keys, prop, transformer)).reduce(merge, {});
	}
	function margin(props) {
	  return style(props, marginKeys);
	}
	margin.propTypes = process.env.NODE_ENV !== 'production' ? marginKeys.reduce((obj, key) => {
	  obj[key] = responsivePropType$1;
	  return obj;
	}, {}) : {};
	margin.filterProps = marginKeys;
	function padding(props) {
	  return style(props, paddingKeys);
	}
	padding.propTypes = process.env.NODE_ENV !== 'production' ? paddingKeys.reduce((obj, key) => {
	  obj[key] = responsivePropType$1;
	  return obj;
	}, {}) : {};
	padding.filterProps = paddingKeys;
	process.env.NODE_ENV !== 'production' ? spacingKeys.reduce((obj, key) => {
	  obj[key] = responsivePropType$1;
	  return obj;
	}, {}) : {};

	// The different signatures imply different meaning for their arguments that can't be expressed structurally.
	// We express the difference with variable names.
	/* tslint:disable:unified-signatures */
	/* tslint:enable:unified-signatures */

	function createSpacing(spacingInput = 8) {
	  // Already transformed.
	  if (spacingInput.mui) {
	    return spacingInput;
	  }

	  // Material Design layouts are visually balanced. Most measurements align to an 8dp grid, which aligns both spacing and the overall layout.
	  // Smaller components, such as icons, can align to a 4dp grid.
	  // https://m2.material.io/design/layout/understanding-layout.html
	  const transform = createUnarySpacing({
	    spacing: spacingInput
	  });
	  const spacing = (...argsInput) => {
	    if (process.env.NODE_ENV !== 'production') {
	      if (!(argsInput.length <= 4)) {
	        console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
	      }
	    }
	    const args = argsInput.length === 0 ? [1] : argsInput;
	    return args.map(argument => {
	      const output = transform(argument);
	      return typeof output === 'number' ? `${output}px` : output;
	    }).join(' ');
	  };
	  spacing.mui = true;
	  return spacing;
	}

	function compose(...styles) {
	  const handlers = styles.reduce((acc, style) => {
	    style.filterProps.forEach(prop => {
	      acc[prop] = style;
	    });
	    return acc;
	  }, {});

	  // false positive
	  // eslint-disable-next-line react/function-component-definition
	  const fn = props => {
	    return Object.keys(props).reduce((acc, prop) => {
	      if (handlers[prop]) {
	        return merge(acc, handlers[prop](props));
	      }
	      return acc;
	    }, {});
	  };
	  fn.propTypes = process.env.NODE_ENV !== 'production' ? styles.reduce((acc, style) => Object.assign(acc, style.propTypes), {}) : {};
	  fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);
	  return fn;
	}

	function borderTransform(value) {
	  if (typeof value !== 'number') {
	    return value;
	  }
	  return `${value}px solid`;
	}
	const border = style$1({
	  prop: 'border',
	  themeKey: 'borders',
	  transform: borderTransform
	});
	const borderTop = style$1({
	  prop: 'borderTop',
	  themeKey: 'borders',
	  transform: borderTransform
	});
	const borderRight = style$1({
	  prop: 'borderRight',
	  themeKey: 'borders',
	  transform: borderTransform
	});
	const borderBottom = style$1({
	  prop: 'borderBottom',
	  themeKey: 'borders',
	  transform: borderTransform
	});
	const borderLeft = style$1({
	  prop: 'borderLeft',
	  themeKey: 'borders',
	  transform: borderTransform
	});
	const borderColor = style$1({
	  prop: 'borderColor',
	  themeKey: 'palette'
	});
	const borderTopColor = style$1({
	  prop: 'borderTopColor',
	  themeKey: 'palette'
	});
	const borderRightColor = style$1({
	  prop: 'borderRightColor',
	  themeKey: 'palette'
	});
	const borderBottomColor = style$1({
	  prop: 'borderBottomColor',
	  themeKey: 'palette'
	});
	const borderLeftColor = style$1({
	  prop: 'borderLeftColor',
	  themeKey: 'palette'
	});

	// false positive
	// eslint-disable-next-line react/function-component-definition
	const borderRadius = props => {
	  if (props.borderRadius !== undefined && props.borderRadius !== null) {
	    const transformer = createUnaryUnit(props.theme, 'shape.borderRadius', 4, 'borderRadius');
	    const styleFromPropValue = propValue => ({
	      borderRadius: getValue(transformer, propValue)
	    });
	    return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
	  }
	  return null;
	};
	borderRadius.propTypes = process.env.NODE_ENV !== 'production' ? {
	  borderRadius: responsivePropType$1
	} : {};
	borderRadius.filterProps = ['borderRadius'];
	compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);

	// false positive
	// eslint-disable-next-line react/function-component-definition
	const gap = props => {
	  if (props.gap !== undefined && props.gap !== null) {
	    const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'gap');
	    const styleFromPropValue = propValue => ({
	      gap: getValue(transformer, propValue)
	    });
	    return handleBreakpoints(props, props.gap, styleFromPropValue);
	  }
	  return null;
	};
	gap.propTypes = process.env.NODE_ENV !== 'production' ? {
	  gap: responsivePropType$1
	} : {};
	gap.filterProps = ['gap'];

	// false positive
	// eslint-disable-next-line react/function-component-definition
	const columnGap = props => {
	  if (props.columnGap !== undefined && props.columnGap !== null) {
	    const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'columnGap');
	    const styleFromPropValue = propValue => ({
	      columnGap: getValue(transformer, propValue)
	    });
	    return handleBreakpoints(props, props.columnGap, styleFromPropValue);
	  }
	  return null;
	};
	columnGap.propTypes = process.env.NODE_ENV !== 'production' ? {
	  columnGap: responsivePropType$1
	} : {};
	columnGap.filterProps = ['columnGap'];

	// false positive
	// eslint-disable-next-line react/function-component-definition
	const rowGap = props => {
	  if (props.rowGap !== undefined && props.rowGap !== null) {
	    const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'rowGap');
	    const styleFromPropValue = propValue => ({
	      rowGap: getValue(transformer, propValue)
	    });
	    return handleBreakpoints(props, props.rowGap, styleFromPropValue);
	  }
	  return null;
	};
	rowGap.propTypes = process.env.NODE_ENV !== 'production' ? {
	  rowGap: responsivePropType$1
	} : {};
	rowGap.filterProps = ['rowGap'];
	const gridColumn = style$1({
	  prop: 'gridColumn'
	});
	const gridRow = style$1({
	  prop: 'gridRow'
	});
	const gridAutoFlow = style$1({
	  prop: 'gridAutoFlow'
	});
	const gridAutoColumns = style$1({
	  prop: 'gridAutoColumns'
	});
	const gridAutoRows = style$1({
	  prop: 'gridAutoRows'
	});
	const gridTemplateColumns = style$1({
	  prop: 'gridTemplateColumns'
	});
	const gridTemplateRows = style$1({
	  prop: 'gridTemplateRows'
	});
	const gridTemplateAreas = style$1({
	  prop: 'gridTemplateAreas'
	});
	const gridArea = style$1({
	  prop: 'gridArea'
	});
	compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);

	function paletteTransform(value, userValue) {
	  if (userValue === 'grey') {
	    return userValue;
	  }
	  return value;
	}
	const color = style$1({
	  prop: 'color',
	  themeKey: 'palette',
	  transform: paletteTransform
	});
	const bgcolor = style$1({
	  prop: 'bgcolor',
	  cssProperty: 'backgroundColor',
	  themeKey: 'palette',
	  transform: paletteTransform
	});
	const backgroundColor = style$1({
	  prop: 'backgroundColor',
	  themeKey: 'palette',
	  transform: paletteTransform
	});
	compose(color, bgcolor, backgroundColor);

	function sizingTransform(value) {
	  return value <= 1 && value !== 0 ? `${value * 100}%` : value;
	}
	const width = style$1({
	  prop: 'width',
	  transform: sizingTransform
	});
	const maxWidth = props => {
	  if (props.maxWidth !== undefined && props.maxWidth !== null) {
	    const styleFromPropValue = propValue => {
	      var _props$theme, _props$theme2;
	      const breakpoint = ((_props$theme = props.theme) == null || (_props$theme = _props$theme.breakpoints) == null || (_props$theme = _props$theme.values) == null ? void 0 : _props$theme[propValue]) || values$1[propValue];
	      if (!breakpoint) {
	        return {
	          maxWidth: sizingTransform(propValue)
	        };
	      }
	      if (((_props$theme2 = props.theme) == null || (_props$theme2 = _props$theme2.breakpoints) == null ? void 0 : _props$theme2.unit) !== 'px') {
	        return {
	          maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
	        };
	      }
	      return {
	        maxWidth: breakpoint
	      };
	    };
	    return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
	  }
	  return null;
	};
	maxWidth.filterProps = ['maxWidth'];
	const minWidth = style$1({
	  prop: 'minWidth',
	  transform: sizingTransform
	});
	const height = style$1({
	  prop: 'height',
	  transform: sizingTransform
	});
	const maxHeight = style$1({
	  prop: 'maxHeight',
	  transform: sizingTransform
	});
	const minHeight = style$1({
	  prop: 'minHeight',
	  transform: sizingTransform
	});
	style$1({
	  prop: 'size',
	  cssProperty: 'width',
	  transform: sizingTransform
	});
	style$1({
	  prop: 'size',
	  cssProperty: 'height',
	  transform: sizingTransform
	});
	const boxSizing = style$1({
	  prop: 'boxSizing'
	});
	compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);

	const defaultSxConfig = {
	  // borders
	  border: {
	    themeKey: 'borders',
	    transform: borderTransform
	  },
	  borderTop: {
	    themeKey: 'borders',
	    transform: borderTransform
	  },
	  borderRight: {
	    themeKey: 'borders',
	    transform: borderTransform
	  },
	  borderBottom: {
	    themeKey: 'borders',
	    transform: borderTransform
	  },
	  borderLeft: {
	    themeKey: 'borders',
	    transform: borderTransform
	  },
	  borderColor: {
	    themeKey: 'palette'
	  },
	  borderTopColor: {
	    themeKey: 'palette'
	  },
	  borderRightColor: {
	    themeKey: 'palette'
	  },
	  borderBottomColor: {
	    themeKey: 'palette'
	  },
	  borderLeftColor: {
	    themeKey: 'palette'
	  },
	  borderRadius: {
	    themeKey: 'shape.borderRadius',
	    style: borderRadius
	  },
	  // palette
	  color: {
	    themeKey: 'palette',
	    transform: paletteTransform
	  },
	  bgcolor: {
	    themeKey: 'palette',
	    cssProperty: 'backgroundColor',
	    transform: paletteTransform
	  },
	  backgroundColor: {
	    themeKey: 'palette',
	    transform: paletteTransform
	  },
	  // spacing
	  p: {
	    style: padding
	  },
	  pt: {
	    style: padding
	  },
	  pr: {
	    style: padding
	  },
	  pb: {
	    style: padding
	  },
	  pl: {
	    style: padding
	  },
	  px: {
	    style: padding
	  },
	  py: {
	    style: padding
	  },
	  padding: {
	    style: padding
	  },
	  paddingTop: {
	    style: padding
	  },
	  paddingRight: {
	    style: padding
	  },
	  paddingBottom: {
	    style: padding
	  },
	  paddingLeft: {
	    style: padding
	  },
	  paddingX: {
	    style: padding
	  },
	  paddingY: {
	    style: padding
	  },
	  paddingInline: {
	    style: padding
	  },
	  paddingInlineStart: {
	    style: padding
	  },
	  paddingInlineEnd: {
	    style: padding
	  },
	  paddingBlock: {
	    style: padding
	  },
	  paddingBlockStart: {
	    style: padding
	  },
	  paddingBlockEnd: {
	    style: padding
	  },
	  m: {
	    style: margin
	  },
	  mt: {
	    style: margin
	  },
	  mr: {
	    style: margin
	  },
	  mb: {
	    style: margin
	  },
	  ml: {
	    style: margin
	  },
	  mx: {
	    style: margin
	  },
	  my: {
	    style: margin
	  },
	  margin: {
	    style: margin
	  },
	  marginTop: {
	    style: margin
	  },
	  marginRight: {
	    style: margin
	  },
	  marginBottom: {
	    style: margin
	  },
	  marginLeft: {
	    style: margin
	  },
	  marginX: {
	    style: margin
	  },
	  marginY: {
	    style: margin
	  },
	  marginInline: {
	    style: margin
	  },
	  marginInlineStart: {
	    style: margin
	  },
	  marginInlineEnd: {
	    style: margin
	  },
	  marginBlock: {
	    style: margin
	  },
	  marginBlockStart: {
	    style: margin
	  },
	  marginBlockEnd: {
	    style: margin
	  },
	  // display
	  displayPrint: {
	    cssProperty: false,
	    transform: value => ({
	      '@media print': {
	        display: value
	      }
	    })
	  },
	  display: {},
	  overflow: {},
	  textOverflow: {},
	  visibility: {},
	  whiteSpace: {},
	  // flexbox
	  flexBasis: {},
	  flexDirection: {},
	  flexWrap: {},
	  justifyContent: {},
	  alignItems: {},
	  alignContent: {},
	  order: {},
	  flex: {},
	  flexGrow: {},
	  flexShrink: {},
	  alignSelf: {},
	  justifyItems: {},
	  justifySelf: {},
	  // grid
	  gap: {
	    style: gap
	  },
	  rowGap: {
	    style: rowGap
	  },
	  columnGap: {
	    style: columnGap
	  },
	  gridColumn: {},
	  gridRow: {},
	  gridAutoFlow: {},
	  gridAutoColumns: {},
	  gridAutoRows: {},
	  gridTemplateColumns: {},
	  gridTemplateRows: {},
	  gridTemplateAreas: {},
	  gridArea: {},
	  // positions
	  position: {},
	  zIndex: {
	    themeKey: 'zIndex'
	  },
	  top: {},
	  right: {},
	  bottom: {},
	  left: {},
	  // shadows
	  boxShadow: {
	    themeKey: 'shadows'
	  },
	  // sizing
	  width: {
	    transform: sizingTransform
	  },
	  maxWidth: {
	    style: maxWidth
	  },
	  minWidth: {
	    transform: sizingTransform
	  },
	  height: {
	    transform: sizingTransform
	  },
	  maxHeight: {
	    transform: sizingTransform
	  },
	  minHeight: {
	    transform: sizingTransform
	  },
	  boxSizing: {},
	  // typography
	  fontFamily: {
	    themeKey: 'typography'
	  },
	  fontSize: {
	    themeKey: 'typography'
	  },
	  fontStyle: {
	    themeKey: 'typography'
	  },
	  fontWeight: {
	    themeKey: 'typography'
	  },
	  letterSpacing: {},
	  textTransform: {},
	  lineHeight: {},
	  textAlign: {},
	  typography: {
	    cssProperty: false,
	    themeKey: 'typography'
	  }
	};
	var defaultSxConfig$1 = defaultSxConfig;

	function objectsHaveSameKeys(...objects) {
	  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
	  const union = new Set(allKeys);
	  return objects.every(object => union.size === Object.keys(object).length);
	}
	function callIfFn(maybeFn, arg) {
	  return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;
	}

	// eslint-disable-next-line @typescript-eslint/naming-convention
	function unstable_createStyleFunctionSx() {
	  function getThemeValue(prop, val, theme, config) {
	    const props = {
	      [prop]: val,
	      theme
	    };
	    const options = config[prop];
	    if (!options) {
	      return {
	        [prop]: val
	      };
	    }
	    const {
	      cssProperty = prop,
	      themeKey,
	      transform,
	      style
	    } = options;
	    if (val == null) {
	      return null;
	    }

	    // TODO v6: remove, see https://github.com/mui/material-ui/pull/38123
	    if (themeKey === 'typography' && val === 'inherit') {
	      return {
	        [prop]: val
	      };
	    }
	    const themeMapping = getPath(theme, themeKey) || {};
	    if (style) {
	      return style(props);
	    }
	    const styleFromPropValue = propValueFinal => {
	      let value = getStyleValue(themeMapping, transform, propValueFinal);
	      if (propValueFinal === value && typeof propValueFinal === 'string') {
	        // Haven't found value
	        value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : capitalize(propValueFinal)}`, propValueFinal);
	      }
	      if (cssProperty === false) {
	        return value;
	      }
	      return {
	        [cssProperty]: value
	      };
	    };
	    return handleBreakpoints(props, val, styleFromPropValue);
	  }
	  function styleFunctionSx(props) {
	    var _theme$unstable_sxCon;
	    const {
	      sx,
	      theme = {}
	    } = props || {};
	    if (!sx) {
	      return null; // Emotion & styled-components will neglect null
	    }

	    const config = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : defaultSxConfig$1;

	    /*
	     * Receive `sxInput` as object or callback
	     * and then recursively check keys & values to create media query object styles.
	     * (the result will be used in `styled`)
	     */
	    function traverse(sxInput) {
	      let sxObject = sxInput;
	      if (typeof sxInput === 'function') {
	        sxObject = sxInput(theme);
	      } else if (typeof sxInput !== 'object') {
	        // value
	        return sxInput;
	      }
	      if (!sxObject) {
	        return null;
	      }
	      const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
	      const breakpointsKeys = Object.keys(emptyBreakpoints);
	      let css = emptyBreakpoints;
	      Object.keys(sxObject).forEach(styleKey => {
	        const value = callIfFn(sxObject[styleKey], theme);
	        if (value !== null && value !== undefined) {
	          if (typeof value === 'object') {
	            if (config[styleKey]) {
	              css = merge(css, getThemeValue(styleKey, value, theme, config));
	            } else {
	              const breakpointsValues = handleBreakpoints({
	                theme
	              }, value, x => ({
	                [styleKey]: x
	              }));
	              if (objectsHaveSameKeys(breakpointsValues, value)) {
	                css[styleKey] = styleFunctionSx({
	                  sx: value,
	                  theme
	                });
	              } else {
	                css = merge(css, breakpointsValues);
	              }
	            }
	          } else {
	            css = merge(css, getThemeValue(styleKey, value, theme, config));
	          }
	        }
	      });
	      return removeUnusedBreakpoints(breakpointsKeys, css);
	    }
	    return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
	  }
	  return styleFunctionSx;
	}
	const styleFunctionSx = unstable_createStyleFunctionSx();
	styleFunctionSx.filterProps = ['sx'];
	var styleFunctionSx$1 = styleFunctionSx;

	const _excluded$I = ["breakpoints", "palette", "spacing", "shape"];
	function createTheme$1(options = {}, ...args) {
	  const {
	      breakpoints: breakpointsInput = {},
	      palette: paletteInput = {},
	      spacing: spacingInput,
	      shape: shapeInput = {}
	    } = options,
	    other = _objectWithoutPropertiesLoose$1(options, _excluded$I);
	  const breakpoints = createBreakpoints(breakpointsInput);
	  const spacing = createSpacing(spacingInput);
	  let muiTheme = deepmerge({
	    breakpoints,
	    direction: 'ltr',
	    components: {},
	    // Inject component definitions.
	    palette: _extends$2({
	      mode: 'light'
	    }, paletteInput),
	    spacing,
	    shape: _extends$2({}, shape$1, shapeInput)
	  }, other);
	  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
	  muiTheme.unstable_sxConfig = _extends$2({}, defaultSxConfig$1, other == null ? void 0 : other.unstable_sxConfig);
	  muiTheme.unstable_sx = function sx(props) {
	    return styleFunctionSx$1({
	      sx: props,
	      theme: this
	    });
	  };
	  return muiTheme;
	}

	function isObjectEmpty(obj) {
	  return Object.keys(obj).length === 0;
	}
	function useTheme$3(defaultTheme = null) {
	  const contextTheme = reactExports.useContext(ThemeContext$2);
	  return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme : contextTheme;
	}

	const systemDefaultTheme$1 = createTheme$1();
	function useTheme$2(defaultTheme = systemDefaultTheme$1) {
	  return useTheme$3(defaultTheme);
	}

	const _excluded$H = ["sx"];
	const splitProps = props => {
	  var _props$theme$unstable, _props$theme;
	  const result = {
	    systemProps: {},
	    otherProps: {}
	  };
	  const config = (_props$theme$unstable = props == null || (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : defaultSxConfig$1;
	  Object.keys(props).forEach(prop => {
	    if (config[prop]) {
	      result.systemProps[prop] = props[prop];
	    } else {
	      result.otherProps[prop] = props[prop];
	    }
	  });
	  return result;
	};
	function extendSxProp(props) {
	  const {
	      sx: inSx
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$H);
	  const {
	    systemProps,
	    otherProps
	  } = splitProps(other);
	  let finalSx;
	  if (Array.isArray(inSx)) {
	    finalSx = [systemProps, ...inSx];
	  } else if (typeof inSx === 'function') {
	    finalSx = (...args) => {
	      const result = inSx(...args);
	      if (!isPlainObject$3(result)) {
	        return systemProps;
	      }
	      return _extends$2({}, systemProps, result);
	    };
	  } else {
	    finalSx = _extends$2({}, systemProps, inSx);
	  }
	  return _extends$2({}, otherProps, {
	    sx: finalSx
	  });
	}

	const _excluded$G = ["className", "component"];
	function createBox(options = {}) {
	  const {
	    themeId,
	    defaultTheme,
	    defaultClassName = 'MuiBox-root',
	    generateClassName
	  } = options;
	  const BoxRoot = styled$2('div', {
	    shouldForwardProp: prop => prop !== 'theme' && prop !== 'sx' && prop !== 'as'
	  })(styleFunctionSx$1);
	  const Box = /*#__PURE__*/reactExports.forwardRef(function Box(inProps, ref) {
	    const theme = useTheme$2(defaultTheme);
	    const _extendSxProp = extendSxProp(inProps),
	      {
	        className,
	        component = 'div'
	      } = _extendSxProp,
	      other = _objectWithoutPropertiesLoose$1(_extendSxProp, _excluded$G);
	    return /*#__PURE__*/jsxRuntimeExports.jsx(BoxRoot, _extends$2({
	      as: component,
	      ref: ref,
	      className: clsx(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
	      theme: themeId ? theme[themeId] || theme : theme
	    }, other));
	  });
	  return Box;
	}

	const _excluded$F = ["variant"];
	function isEmpty$1(string) {
	  return string.length === 0;
	}

	/**
	 * Generates string classKey based on the properties provided. It starts with the
	 * variant if defined, and then it appends all other properties in alphabetical order.
	 * @param {object} props - the properties for which the classKey should be created.
	 */
	function propsToClassKey(props) {
	  const {
	      variant
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$F);
	  let classKey = variant || '';
	  Object.keys(other).sort().forEach(key => {
	    if (key === 'color') {
	      classKey += isEmpty$1(classKey) ? props[key] : capitalize(props[key]);
	    } else {
	      classKey += `${isEmpty$1(classKey) ? key : capitalize(key)}${capitalize(props[key].toString())}`;
	    }
	  });
	  return classKey;
	}

	const _excluded$E = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
	function isEmpty(obj) {
	  return Object.keys(obj).length === 0;
	}

	// https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40
	function isStringTag(tag) {
	  return typeof tag === 'string' &&
	  // 96 is one less than the char code
	  // for "a" so this is checking that
	  // it's a lowercase character
	  tag.charCodeAt(0) > 96;
	}
	const getStyleOverrides = (name, theme) => {
	  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
	    return theme.components[name].styleOverrides;
	  }
	  return null;
	};
	const transformVariants = variants => {
	  const variantsStyles = {};
	  if (variants) {
	    variants.forEach(definition => {
	      const key = propsToClassKey(definition.props);
	      variantsStyles[key] = definition.style;
	    });
	  }
	  return variantsStyles;
	};
	const getVariantStyles = (name, theme) => {
	  let variants = [];
	  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
	    variants = theme.components[name].variants;
	  }
	  return transformVariants(variants);
	};
	const variantsResolver = (props, styles, variants) => {
	  const {
	    ownerState = {}
	  } = props;
	  const variantsStyles = [];
	  if (variants) {
	    variants.forEach(variant => {
	      let isMatch = true;
	      Object.keys(variant.props).forEach(key => {
	        if (ownerState[key] !== variant.props[key] && props[key] !== variant.props[key]) {
	          isMatch = false;
	        }
	      });
	      if (isMatch) {
	        variantsStyles.push(styles[propsToClassKey(variant.props)]);
	      }
	    });
	  }
	  return variantsStyles;
	};
	const themeVariantsResolver = (props, styles, theme, name) => {
	  var _theme$components;
	  const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[name]) == null ? void 0 : _theme$components.variants;
	  return variantsResolver(props, styles, themeVariants);
	};

	// Update /system/styled/#api in case if this changes
	function shouldForwardProp(prop) {
	  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
	}
	const systemDefaultTheme = createTheme$1();
	const lowercaseFirstLetter = string => {
	  if (!string) {
	    return string;
	  }
	  return string.charAt(0).toLowerCase() + string.slice(1);
	};
	function resolveTheme({
	  defaultTheme,
	  theme,
	  themeId
	}) {
	  return isEmpty(theme) ? defaultTheme : theme[themeId] || theme;
	}
	function defaultOverridesResolver(slot) {
	  if (!slot) {
	    return null;
	  }
	  return (props, styles) => styles[slot];
	}
	const muiStyledFunctionResolver = ({
	  styledArg,
	  props,
	  defaultTheme,
	  themeId
	}) => {
	  const resolvedStyles = styledArg(_extends$2({}, props, {
	    theme: resolveTheme(_extends$2({}, props, {
	      defaultTheme,
	      themeId
	    }))
	  }));
	  let optionalVariants;
	  if (resolvedStyles && resolvedStyles.variants) {
	    optionalVariants = resolvedStyles.variants;
	    delete resolvedStyles.variants;
	  }
	  if (optionalVariants) {
	    const variantsStyles = variantsResolver(props, transformVariants(optionalVariants), optionalVariants);
	    return [resolvedStyles, ...variantsStyles];
	  }
	  return resolvedStyles;
	};
	function createStyled(input = {}) {
	  const {
	    themeId,
	    defaultTheme = systemDefaultTheme,
	    rootShouldForwardProp = shouldForwardProp,
	    slotShouldForwardProp = shouldForwardProp
	  } = input;
	  const systemSx = props => {
	    return styleFunctionSx$1(_extends$2({}, props, {
	      theme: resolveTheme(_extends$2({}, props, {
	        defaultTheme,
	        themeId
	      }))
	    }));
	  };
	  systemSx.__mui_systemSx = true;
	  return (tag, inputOptions = {}) => {
	    // Filter out the `sx` style function from the previous styled component to prevent unnecessary styles generated by the composite components.
	    internal_processStyles(tag, styles => styles.filter(style => !(style != null && style.__mui_systemSx)));
	    const {
	        name: componentName,
	        slot: componentSlot,
	        skipVariantsResolver: inputSkipVariantsResolver,
	        skipSx: inputSkipSx,
	        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
	        // For more details: https://github.com/mui/material-ui/pull/37908
	        overridesResolver = defaultOverridesResolver(lowercaseFirstLetter(componentSlot))
	      } = inputOptions,
	      options = _objectWithoutPropertiesLoose$1(inputOptions, _excluded$E);

	    // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
	    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver :
	    // TODO v6: remove `Root` in the next major release
	    // For more details: https://github.com/mui/material-ui/pull/37908
	    componentSlot && componentSlot !== 'Root' && componentSlot !== 'root' || false;
	    const skipSx = inputSkipSx || false;
	    let label;
	    if (process.env.NODE_ENV !== 'production') {
	      if (componentName) {
	        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
	        // For more details: https://github.com/mui/material-ui/pull/37908
	        label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;
	      }
	    }
	    let shouldForwardPropOption = shouldForwardProp;

	    // TODO v6: remove `Root` in the next major release
	    // For more details: https://github.com/mui/material-ui/pull/37908
	    if (componentSlot === 'Root' || componentSlot === 'root') {
	      shouldForwardPropOption = rootShouldForwardProp;
	    } else if (componentSlot) {
	      // any other slot specified
	      shouldForwardPropOption = slotShouldForwardProp;
	    } else if (isStringTag(tag)) {
	      // for string (html) tag, preserve the behavior in emotion & styled-components.
	      shouldForwardPropOption = undefined;
	    }
	    const defaultStyledResolver = styled$2(tag, _extends$2({
	      shouldForwardProp: shouldForwardPropOption,
	      label
	    }, options));
	    const muiStyledResolver = (styleArg, ...expressions) => {
	      const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {
	        // On the server Emotion doesn't use React.forwardRef for creating components, so the created
	        // component stays as a function. This condition makes sure that we do not interpolate functions
	        // which are basically components used as a selectors.
	        if (typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg) {
	          return props => muiStyledFunctionResolver({
	            styledArg: stylesArg,
	            props,
	            defaultTheme,
	            themeId
	          });
	        }
	        if (isPlainObject$3(stylesArg)) {
	          let transformedStylesArg = stylesArg;
	          let styledArgVariants;
	          if (stylesArg && stylesArg.variants) {
	            styledArgVariants = stylesArg.variants;
	            delete transformedStylesArg.variants;
	            transformedStylesArg = props => {
	              let result = stylesArg;
	              const variantStyles = variantsResolver(props, transformVariants(styledArgVariants), styledArgVariants);
	              variantStyles.forEach(variantStyle => {
	                result = deepmerge(result, variantStyle);
	              });
	              return result;
	            };
	          }
	          return transformedStylesArg;
	        }
	        return stylesArg;
	      }) : [];
	      let transformedStyleArg = styleArg;
	      if (isPlainObject$3(styleArg)) {
	        let styledArgVariants;
	        if (styleArg && styleArg.variants) {
	          styledArgVariants = styleArg.variants;
	          delete transformedStyleArg.variants;
	          transformedStyleArg = props => {
	            let result = styleArg;
	            const variantStyles = variantsResolver(props, transformVariants(styledArgVariants), styledArgVariants);
	            variantStyles.forEach(variantStyle => {
	              result = deepmerge(result, variantStyle);
	            });
	            return result;
	          };
	        }
	      } else if (typeof styleArg === 'function' &&
	      // On the server Emotion doesn't use React.forwardRef for creating components, so the created
	      // component stays as a function. This condition makes sure that we do not interpolate functions
	      // which are basically components used as a selectors.
	      styleArg.__emotion_real !== styleArg) {
	        // If the type is function, we need to define the default theme.
	        transformedStyleArg = props => muiStyledFunctionResolver({
	          styledArg: styleArg,
	          props,
	          defaultTheme,
	          themeId
	        });
	      }
	      if (componentName && overridesResolver) {
	        expressionsWithDefaultTheme.push(props => {
	          const theme = resolveTheme(_extends$2({}, props, {
	            defaultTheme,
	            themeId
	          }));
	          const styleOverrides = getStyleOverrides(componentName, theme);
	          if (styleOverrides) {
	            const resolvedStyleOverrides = {};
	            Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
	              resolvedStyleOverrides[slotKey] = typeof slotStyle === 'function' ? slotStyle(_extends$2({}, props, {
	                theme
	              })) : slotStyle;
	            });
	            return overridesResolver(props, resolvedStyleOverrides);
	          }
	          return null;
	        });
	      }
	      if (componentName && !skipVariantsResolver) {
	        expressionsWithDefaultTheme.push(props => {
	          const theme = resolveTheme(_extends$2({}, props, {
	            defaultTheme,
	            themeId
	          }));
	          return themeVariantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
	        });
	      }
	      if (!skipSx) {
	        expressionsWithDefaultTheme.push(systemSx);
	      }
	      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
	      if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
	        const placeholders = new Array(numOfCustomFnsApplied).fill('');
	        // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.
	        transformedStyleArg = [...styleArg, ...placeholders];
	        transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
	      }
	      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
	      if (process.env.NODE_ENV !== 'production') {
	        let displayName;
	        if (componentName) {
	          displayName = `${componentName}${capitalize(componentSlot || '')}`;
	        }
	        if (displayName === undefined) {
	          displayName = `Styled(${getDisplayName(tag)})`;
	        }
	        Component.displayName = displayName;
	      }
	      if (tag.muiName) {
	        Component.muiName = tag.muiName;
	      }
	      return Component;
	    };
	    if (defaultStyledResolver.withConfig) {
	      muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
	    }
	    return muiStyledResolver;
	  };
	}

	function getThemeProps(params) {
	  const {
	    theme,
	    name,
	    props
	  } = params;
	  if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
	    return props;
	  }
	  return resolveProps(theme.components[name].defaultProps, props);
	}

	function useThemeProps$1({
	  props,
	  name,
	  defaultTheme,
	  themeId
	}) {
	  let theme = useTheme$2(defaultTheme);
	  if (themeId) {
	    theme = theme[themeId] || theme;
	  }
	  const mergedProps = getThemeProps({
	    theme,
	    name,
	    props
	  });
	  return mergedProps;
	}

	/* eslint-disable @typescript-eslint/naming-convention */
	/**
	 * Returns a number whose value is limited to the given range.
	 * @param {number} value The value to be clamped
	 * @param {number} min The lower boundary of the output range
	 * @param {number} max The upper boundary of the output range
	 * @returns {number} A number in the range [min, max]
	 */
	function clamp$1(value, min = 0, max = 1) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (value < min || value > max) {
	      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
	    }
	  }
	  return Math.min(Math.max(min, value), max);
	}

	/**
	 * Converts a color from CSS hex format to CSS rgb format.
	 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
	 * @returns {string} A CSS rgb color string
	 */
	function hexToRgb(color) {
	  color = color.slice(1);
	  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');
	  let colors = color.match(re);
	  if (colors && colors[0].length === 1) {
	    colors = colors.map(n => n + n);
	  }
	  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {
    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
  }).join(', ')})` : '';
	}

	/**
	 * Returns an object with the type and values of a color.
	 *
	 * Note: Does not support rgb % values.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @returns {object} - A MUI color object: {type: string, values: number[]}
	 */
	function decomposeColor(color) {
	  // Idempotent
	  if (color.type) {
	    return color;
	  }
	  if (color.charAt(0) === '#') {
	    return decomposeColor(hexToRgb(color));
	  }
	  const marker = color.indexOf('(');
	  const type = color.substring(0, marker);
	  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {
	    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Unsupported \`${color}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : formatMuiErrorMessage(9, color));
	  }
	  let values = color.substring(marker + 1, color.length - 1);
	  let colorSpace;
	  if (type === 'color') {
	    values = values.split(' ');
	    colorSpace = values.shift();
	    if (values.length === 4 && values[3].charAt(0) === '/') {
	      values[3] = values[3].slice(1);
	    }
	    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {
	      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : formatMuiErrorMessage(10, colorSpace));
	    }
	  } else {
	    values = values.split(',');
	  }
	  values = values.map(value => parseFloat(value));
	  return {
	    type,
	    values,
	    colorSpace
	  };
	}

	/**
	 * Converts a color object with type and values to a string.
	 * @param {object} color - Decomposed color
	 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'
	 * @param {array} color.values - [n,n,n] or [n,n,n,n]
	 * @returns {string} A CSS color string
	 */
	function recomposeColor(color) {
	  const {
	    type,
	    colorSpace
	  } = color;
	  let {
	    values
	  } = color;
	  if (type.indexOf('rgb') !== -1) {
	    // Only convert the first 3 values to int (i.e. not alpha)
	    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);
	  } else if (type.indexOf('hsl') !== -1) {
	    values[1] = `${values[1]}%`;
	    values[2] = `${values[2]}%`;
	  }
	  if (type.indexOf('color') !== -1) {
	    values = `${colorSpace} ${values.join(' ')}`;
	  } else {
	    values = `${values.join(', ')}`;
	  }
	  return `${type}(${values})`;
	}

	/**
	 * Converts a color from hsl format to rgb format.
	 * @param {string} color - HSL color values
	 * @returns {string} rgb color values
	 */
	function hslToRgb(color) {
	  color = decomposeColor(color);
	  const {
	    values
	  } = color;
	  const h = values[0];
	  const s = values[1] / 100;
	  const l = values[2] / 100;
	  const a = s * Math.min(l, 1 - l);
	  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
	  let type = 'rgb';
	  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
	  if (color.type === 'hsla') {
	    type += 'a';
	    rgb.push(values[3]);
	  }
	  return recomposeColor({
	    type,
	    values: rgb
	  });
	}
	/**
	 * The relative brightness of any point in a color space,
	 * normalized to 0 for darkest black and 1 for lightest white.
	 *
	 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @returns {number} The relative brightness of the color in the range 0 - 1
	 */
	function getLuminance(color) {
	  color = decomposeColor(color);
	  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;
	  rgb = rgb.map(val => {
	    if (color.type !== 'color') {
	      val /= 255; // normalized
	    }

	    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
	  });

	  // Truncate at 3 digits
	  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
	}

	/**
	 * Calculates the contrast ratio between two colors.
	 *
	 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
	 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {number} A contrast ratio value in the range 0 - 21.
	 */
	function getContrastRatio(foreground, background) {
	  const lumA = getLuminance(foreground);
	  const lumB = getLuminance(background);
	  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
	}

	/**
	 * Sets the absolute transparency of a color.
	 * Any existing alpha values are overwritten.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @param {number} value - value to set the alpha channel to in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function alpha(color, value) {
	  color = decomposeColor(color);
	  value = clamp$1(value);
	  if (color.type === 'rgb' || color.type === 'hsl') {
	    color.type += 'a';
	  }
	  if (color.type === 'color') {
	    color.values[3] = `/${value}`;
	  } else {
	    color.values[3] = value;
	  }
	  return recomposeColor(color);
	}

	/**
	 * Darkens a color.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function darken(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp$1(coefficient);
	  if (color.type.indexOf('hsl') !== -1) {
	    color.values[2] *= 1 - coefficient;
	  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {
	    for (let i = 0; i < 3; i += 1) {
	      color.values[i] *= 1 - coefficient;
	    }
	  }
	  return recomposeColor(color);
	}

	/**
	 * Lightens a color.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function lighten(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp$1(coefficient);
	  if (color.type.indexOf('hsl') !== -1) {
	    color.values[2] += (100 - color.values[2]) * coefficient;
	  } else if (color.type.indexOf('rgb') !== -1) {
	    for (let i = 0; i < 3; i += 1) {
	      color.values[i] += (255 - color.values[i]) * coefficient;
	    }
	  } else if (color.type.indexOf('color') !== -1) {
	    for (let i = 0; i < 3; i += 1) {
	      color.values[i] += (1 - color.values[i]) * coefficient;
	    }
	  }
	  return recomposeColor(color);
	}

	const ThemeContext = /*#__PURE__*/reactExports.createContext(null);
	if (process.env.NODE_ENV !== 'production') {
	  ThemeContext.displayName = 'ThemeContext';
	}
	var ThemeContext$1 = ThemeContext;

	function useTheme$1() {
	  const theme = reactExports.useContext(ThemeContext$1);
	  if (process.env.NODE_ENV !== 'production') {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    reactExports.useDebugValue(theme);
	  }
	  return theme;
	}

	const hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var nested = hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';

	function mergeOuterLocalTheme(outerTheme, localTheme) {
	  if (typeof localTheme === 'function') {
	    const mergedTheme = localTheme(outerTheme);
	    if (process.env.NODE_ENV !== 'production') {
	      if (!mergedTheme) {
	        console.error(['MUI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\n'));
	      }
	    }
	    return mergedTheme;
	  }
	  return _extends$2({}, outerTheme, localTheme);
	}

	/**
	 * This component takes a `theme` prop.
	 * It makes the `theme` available down the React tree thanks to React context.
	 * This component should preferably be used at **the root of your component tree**.
	 */
	function ThemeProvider$2(props) {
	  const {
	    children,
	    theme: localTheme
	  } = props;
	  const outerTheme = useTheme$1();
	  if (process.env.NODE_ENV !== 'production') {
	    if (outerTheme === null && typeof localTheme === 'function') {
	      console.error(['MUI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\n'));
	    }
	  }
	  const theme = reactExports.useMemo(() => {
	    const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
	    if (output != null) {
	      output[nested] = outerTheme !== null;
	    }
	    return output;
	  }, [localTheme, outerTheme]);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(ThemeContext$1.Provider, {
	    value: theme,
	    children: children
	  });
	}
	process.env.NODE_ENV !== "production" ? ThemeProvider$2.propTypes = {
	  /**
	   * Your component tree.
	   */
	  children: PropTypes.node,
	  /**
	   * A theme object. You can provide a function to extend the outer theme.
	   */
	  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired
	} : void 0;
	if (process.env.NODE_ENV !== 'production') {
	  process.env.NODE_ENV !== "production" ? ThemeProvider$2.propTypes = exactProp(ThemeProvider$2.propTypes) : void 0;
	}

	const EMPTY_THEME = {};
	function useThemeScoping(themeId, upperTheme, localTheme, isPrivate = false) {
	  return reactExports.useMemo(() => {
	    const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;
	    if (typeof localTheme === 'function') {
	      const mergedTheme = localTheme(resolvedTheme);
	      const result = themeId ? _extends$2({}, upperTheme, {
	        [themeId]: mergedTheme
	      }) : mergedTheme;
	      // must return a function for the private theme to NOT merge with the upper theme.
	      // see the test case "use provided theme from a callback" in ThemeProvider.test.js
	      if (isPrivate) {
	        return () => result;
	      }
	      return result;
	    }
	    return themeId ? _extends$2({}, upperTheme, {
	      [themeId]: localTheme
	    }) : _extends$2({}, upperTheme, localTheme);
	  }, [themeId, upperTheme, localTheme, isPrivate]);
	}

	/**
	 * This component makes the `theme` available down the React tree.
	 * It should preferably be used at **the root of your component tree**.
	 *
	 * <ThemeProvider theme={theme}> // existing use case
	 * <ThemeProvider theme={{ id: theme }}> // theme scoping
	 */
	function ThemeProvider$1(props) {
	  const {
	    children,
	    theme: localTheme,
	    themeId
	  } = props;
	  const upperTheme = useTheme$3(EMPTY_THEME);
	  const upperPrivateTheme = useTheme$1() || EMPTY_THEME;
	  if (process.env.NODE_ENV !== 'production') {
	    if (upperTheme === null && typeof localTheme === 'function' || themeId && upperTheme && !upperTheme[themeId] && typeof localTheme === 'function') {
	      console.error(['MUI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\n'));
	    }
	  }
	  const engineTheme = useThemeScoping(themeId, upperTheme, localTheme);
	  const privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(ThemeProvider$2, {
	    theme: privateTheme,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(ThemeContext$2.Provider, {
	      value: engineTheme,
	      children: children
	    })
	  });
	}
	process.env.NODE_ENV !== "production" ? ThemeProvider$1.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * Your component tree.
	   */
	  children: PropTypes.node,
	  /**
	   * A theme object. You can provide a function to extend the outer theme.
	   */
	  theme: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,
	  /**
	   * The design system's unique id for getting the corresponded theme when there are multiple design systems.
	   */
	  themeId: PropTypes.string
	} : void 0;
	if (process.env.NODE_ENV !== 'production') {
	  process.env.NODE_ENV !== "production" ? ThemeProvider$1.propTypes = exactProp(ThemeProvider$1.propTypes) : void 0;
	}

	function createMixins(breakpoints, mixins) {
	  return _extends$2({
	    toolbar: {
	      minHeight: 56,
	      [breakpoints.up('xs')]: {
	        '@media (orientation: landscape)': {
	          minHeight: 48
	        }
	      },
	      [breakpoints.up('sm')]: {
	        minHeight: 64
	      }
	    }
	  }, mixins);
	}

	const common = {
	  black: '#000',
	  white: '#fff'
	};
	var common$1 = common;

	const grey = {
	  50: '#fafafa',
	  100: '#f5f5f5',
	  200: '#eeeeee',
	  300: '#e0e0e0',
	  400: '#bdbdbd',
	  500: '#9e9e9e',
	  600: '#757575',
	  700: '#616161',
	  800: '#424242',
	  900: '#212121',
	  A100: '#f5f5f5',
	  A200: '#eeeeee',
	  A400: '#bdbdbd',
	  A700: '#616161'
	};
	var grey$1 = grey;

	const purple = {
	  50: '#f3e5f5',
	  100: '#e1bee7',
	  200: '#ce93d8',
	  300: '#ba68c8',
	  400: '#ab47bc',
	  500: '#9c27b0',
	  600: '#8e24aa',
	  700: '#7b1fa2',
	  800: '#6a1b9a',
	  900: '#4a148c',
	  A100: '#ea80fc',
	  A200: '#e040fb',
	  A400: '#d500f9',
	  A700: '#aa00ff'
	};
	var purple$1 = purple;

	const red = {
	  50: '#ffebee',
	  100: '#ffcdd2',
	  200: '#ef9a9a',
	  300: '#e57373',
	  400: '#ef5350',
	  500: '#f44336',
	  600: '#e53935',
	  700: '#d32f2f',
	  800: '#c62828',
	  900: '#b71c1c',
	  A100: '#ff8a80',
	  A200: '#ff5252',
	  A400: '#ff1744',
	  A700: '#d50000'
	};
	var red$1 = red;

	const orange = {
	  50: '#fff3e0',
	  100: '#ffe0b2',
	  200: '#ffcc80',
	  300: '#ffb74d',
	  400: '#ffa726',
	  500: '#ff9800',
	  600: '#fb8c00',
	  700: '#f57c00',
	  800: '#ef6c00',
	  900: '#e65100',
	  A100: '#ffd180',
	  A200: '#ffab40',
	  A400: '#ff9100',
	  A700: '#ff6d00'
	};
	var orange$1 = orange;

	const blue = {
	  50: '#e3f2fd',
	  100: '#bbdefb',
	  200: '#90caf9',
	  300: '#64b5f6',
	  400: '#42a5f5',
	  500: '#2196f3',
	  600: '#1e88e5',
	  700: '#1976d2',
	  800: '#1565c0',
	  900: '#0d47a1',
	  A100: '#82b1ff',
	  A200: '#448aff',
	  A400: '#2979ff',
	  A700: '#2962ff'
	};
	var blue$1 = blue;

	const lightBlue = {
	  50: '#e1f5fe',
	  100: '#b3e5fc',
	  200: '#81d4fa',
	  300: '#4fc3f7',
	  400: '#29b6f6',
	  500: '#03a9f4',
	  600: '#039be5',
	  700: '#0288d1',
	  800: '#0277bd',
	  900: '#01579b',
	  A100: '#80d8ff',
	  A200: '#40c4ff',
	  A400: '#00b0ff',
	  A700: '#0091ea'
	};
	var lightBlue$1 = lightBlue;

	const green = {
	  50: '#e8f5e9',
	  100: '#c8e6c9',
	  200: '#a5d6a7',
	  300: '#81c784',
	  400: '#66bb6a',
	  500: '#4caf50',
	  600: '#43a047',
	  700: '#388e3c',
	  800: '#2e7d32',
	  900: '#1b5e20',
	  A100: '#b9f6ca',
	  A200: '#69f0ae',
	  A400: '#00e676',
	  A700: '#00c853'
	};
	var green$1 = green;

	const _excluded$D = ["mode", "contrastThreshold", "tonalOffset"];
	const light = {
	  // The colors used to style the text.
	  text: {
	    // The most important text.
	    primary: 'rgba(0, 0, 0, 0.87)',
	    // Secondary text.
	    secondary: 'rgba(0, 0, 0, 0.6)',
	    // Disabled text have even lower visual prominence.
	    disabled: 'rgba(0, 0, 0, 0.38)'
	  },
	  // The color used to divide different elements.
	  divider: 'rgba(0, 0, 0, 0.12)',
	  // The background colors used to style the surfaces.
	  // Consistency between these values is important.
	  background: {
	    paper: common$1.white,
	    default: common$1.white
	  },
	  // The colors used to style the action elements.
	  action: {
	    // The color of an active action like an icon button.
	    active: 'rgba(0, 0, 0, 0.54)',
	    // The color of an hovered action.
	    hover: 'rgba(0, 0, 0, 0.04)',
	    hoverOpacity: 0.04,
	    // The color of a selected action.
	    selected: 'rgba(0, 0, 0, 0.08)',
	    selectedOpacity: 0.08,
	    // The color of a disabled action.
	    disabled: 'rgba(0, 0, 0, 0.26)',
	    // The background color of a disabled action.
	    disabledBackground: 'rgba(0, 0, 0, 0.12)',
	    disabledOpacity: 0.38,
	    focus: 'rgba(0, 0, 0, 0.12)',
	    focusOpacity: 0.12,
	    activatedOpacity: 0.12
	  }
	};
	const dark = {
	  text: {
	    primary: common$1.white,
	    secondary: 'rgba(255, 255, 255, 0.7)',
	    disabled: 'rgba(255, 255, 255, 0.5)',
	    icon: 'rgba(255, 255, 255, 0.5)'
	  },
	  divider: 'rgba(255, 255, 255, 0.12)',
	  background: {
	    paper: '#121212',
	    default: '#121212'
	  },
	  action: {
	    active: common$1.white,
	    hover: 'rgba(255, 255, 255, 0.08)',
	    hoverOpacity: 0.08,
	    selected: 'rgba(255, 255, 255, 0.16)',
	    selectedOpacity: 0.16,
	    disabled: 'rgba(255, 255, 255, 0.3)',
	    disabledBackground: 'rgba(255, 255, 255, 0.12)',
	    disabledOpacity: 0.38,
	    focus: 'rgba(255, 255, 255, 0.12)',
	    focusOpacity: 0.12,
	    activatedOpacity: 0.24
	  }
	};
	function addLightOrDark(intent, direction, shade, tonalOffset) {
	  const tonalOffsetLight = tonalOffset.light || tonalOffset;
	  const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
	  if (!intent[direction]) {
	    if (intent.hasOwnProperty(shade)) {
	      intent[direction] = intent[shade];
	    } else if (direction === 'light') {
	      intent.light = lighten(intent.main, tonalOffsetLight);
	    } else if (direction === 'dark') {
	      intent.dark = darken(intent.main, tonalOffsetDark);
	    }
	  }
	}
	function getDefaultPrimary(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: blue$1[200],
	      light: blue$1[50],
	      dark: blue$1[400]
	    };
	  }
	  return {
	    main: blue$1[700],
	    light: blue$1[400],
	    dark: blue$1[800]
	  };
	}
	function getDefaultSecondary(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: purple$1[200],
	      light: purple$1[50],
	      dark: purple$1[400]
	    };
	  }
	  return {
	    main: purple$1[500],
	    light: purple$1[300],
	    dark: purple$1[700]
	  };
	}
	function getDefaultError(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: red$1[500],
	      light: red$1[300],
	      dark: red$1[700]
	    };
	  }
	  return {
	    main: red$1[700],
	    light: red$1[400],
	    dark: red$1[800]
	  };
	}
	function getDefaultInfo(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: lightBlue$1[400],
	      light: lightBlue$1[300],
	      dark: lightBlue$1[700]
	    };
	  }
	  return {
	    main: lightBlue$1[700],
	    light: lightBlue$1[500],
	    dark: lightBlue$1[900]
	  };
	}
	function getDefaultSuccess(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: green$1[400],
	      light: green$1[300],
	      dark: green$1[700]
	    };
	  }
	  return {
	    main: green$1[800],
	    light: green$1[500],
	    dark: green$1[900]
	  };
	}
	function getDefaultWarning(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: orange$1[400],
	      light: orange$1[300],
	      dark: orange$1[700]
	    };
	  }
	  return {
	    main: '#ed6c02',
	    // closest to orange[800] that pass 3:1.
	    light: orange$1[500],
	    dark: orange$1[900]
	  };
	}
	function createPalette(palette) {
	  const {
	      mode = 'light',
	      contrastThreshold = 3,
	      tonalOffset = 0.2
	    } = palette,
	    other = _objectWithoutPropertiesLoose$1(palette, _excluded$D);
	  const primary = palette.primary || getDefaultPrimary(mode);
	  const secondary = palette.secondary || getDefaultSecondary(mode);
	  const error = palette.error || getDefaultError(mode);
	  const info = palette.info || getDefaultInfo(mode);
	  const success = palette.success || getDefaultSuccess(mode);
	  const warning = palette.warning || getDefaultWarning(mode);

	  // Use the same logic as
	  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
	  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54
	  function getContrastText(background) {
	    const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
	    if (process.env.NODE_ENV !== 'production') {
	      const contrast = getContrastRatio(background, contrastText);
	      if (contrast < 3) {
	        console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\n'));
	      }
	    }
	    return contrastText;
	  }
	  const augmentColor = ({
	    color,
	    name,
	    mainShade = 500,
	    lightShade = 300,
	    darkShade = 700
	  }) => {
	    color = _extends$2({}, color);
	    if (!color.main && color[mainShade]) {
	      color.main = color[mainShade];
	    }
	    if (!color.hasOwnProperty('main')) {
	      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : formatMuiErrorMessage(11, name ? ` (${name})` : '', mainShade));
	    }
	    if (typeof color.main !== 'string') {
	      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : formatMuiErrorMessage(12, name ? ` (${name})` : '', JSON.stringify(color.main)));
	    }
	    addLightOrDark(color, 'light', lightShade, tonalOffset);
	    addLightOrDark(color, 'dark', darkShade, tonalOffset);
	    if (!color.contrastText) {
	      color.contrastText = getContrastText(color.main);
	    }
	    return color;
	  };
	  const modes = {
	    dark,
	    light
	  };
	  if (process.env.NODE_ENV !== 'production') {
	    if (!modes[mode]) {
	      console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
	    }
	  }
	  const paletteOutput = deepmerge(_extends$2({
	    // A collection of common colors.
	    common: _extends$2({}, common$1),
	    // prevent mutable object.
	    // The palette mode, can be light or dark.
	    mode,
	    // The colors used to represent primary interface elements for a user.
	    primary: augmentColor({
	      color: primary,
	      name: 'primary'
	    }),
	    // The colors used to represent secondary interface elements for a user.
	    secondary: augmentColor({
	      color: secondary,
	      name: 'secondary',
	      mainShade: 'A400',
	      lightShade: 'A200',
	      darkShade: 'A700'
	    }),
	    // The colors used to represent interface elements that the user should be made aware of.
	    error: augmentColor({
	      color: error,
	      name: 'error'
	    }),
	    // The colors used to represent potentially dangerous actions or important messages.
	    warning: augmentColor({
	      color: warning,
	      name: 'warning'
	    }),
	    // The colors used to present information to the user that is neutral and not necessarily important.
	    info: augmentColor({
	      color: info,
	      name: 'info'
	    }),
	    // The colors used to indicate the successful completion of an action that user triggered.
	    success: augmentColor({
	      color: success,
	      name: 'success'
	    }),
	    // The grey colors.
	    grey: grey$1,
	    // Used by `getContrastText()` to maximize the contrast between
	    // the background and the text.
	    contrastThreshold,
	    // Takes a background color and returns the text color that maximizes the contrast.
	    getContrastText,
	    // Generate a rich color object.
	    augmentColor,
	    // Used by the functions below to shift a color's luminance by approximately
	    // two indexes within its tonal palette.
	    // E.g., shift from Red 500 to Red 300 or Red 700.
	    tonalOffset
	  }, modes[mode]), other);
	  return paletteOutput;
	}

	const _excluded$C = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
	function round$1(value) {
	  return Math.round(value * 1e5) / 1e5;
	}
	const caseAllCaps = {
	  textTransform: 'uppercase'
	};
	const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';

	/**
	 * @see @link{https://m2.material.io/design/typography/the-type-system.html}
	 * @see @link{https://m2.material.io/design/typography/understanding-typography.html}
	 */
	function createTypography(palette, typography) {
	  const _ref = typeof typography === 'function' ? typography(palette) : typography,
	    {
	      fontFamily = defaultFontFamily,
	      // The default font size of the Material Specification.
	      fontSize = 14,
	      // px
	      fontWeightLight = 300,
	      fontWeightRegular = 400,
	      fontWeightMedium = 500,
	      fontWeightBold = 700,
	      // Tell MUI what's the font-size on the html element.
	      // 16px is the default font-size used by browsers.
	      htmlFontSize = 16,
	      // Apply the CSS properties to all the variants.
	      allVariants,
	      pxToRem: pxToRem2
	    } = _ref,
	    other = _objectWithoutPropertiesLoose$1(_ref, _excluded$C);
	  if (process.env.NODE_ENV !== 'production') {
	    if (typeof fontSize !== 'number') {
	      console.error('MUI: `fontSize` is required to be a number.');
	    }
	    if (typeof htmlFontSize !== 'number') {
	      console.error('MUI: `htmlFontSize` is required to be a number.');
	    }
	  }
	  const coef = fontSize / 14;
	  const pxToRem = pxToRem2 || (size => `${size / htmlFontSize * coef}rem`);
	  const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends$2({
	    fontFamily,
	    fontWeight,
	    fontSize: pxToRem(size),
	    // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
	    lineHeight
	  }, fontFamily === defaultFontFamily ? {
	    letterSpacing: `${round$1(letterSpacing / size)}em`
	  } : {}, casing, allVariants);
	  const variants = {
	    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
	    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
	    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
	    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
	    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
	    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
	    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
	    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
	    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
	    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
	    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
	    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
	    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
	    // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
	    inherit: {
	      fontFamily: 'inherit',
	      fontWeight: 'inherit',
	      fontSize: 'inherit',
	      lineHeight: 'inherit',
	      letterSpacing: 'inherit'
	    }
	  };
	  return deepmerge(_extends$2({
	    htmlFontSize,
	    pxToRem,
	    fontFamily,
	    fontSize,
	    fontWeightLight,
	    fontWeightRegular,
	    fontWeightMedium,
	    fontWeightBold
	  }, variants), other, {
	    clone: false // No need to clone deep
	  });
	}

	const shadowKeyUmbraOpacity = 0.2;
	const shadowKeyPenumbraOpacity = 0.14;
	const shadowAmbientShadowOpacity = 0.12;
	function createShadow(...px) {
	  return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(',');
	}

	// Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss
	const shadows = ['none', createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
	var shadows$1 = shadows;

	const _excluded$B = ["duration", "easing", "delay"];
	// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
	// to learn the context in which each easing should be used.
	const easing = {
	  // This is the most common easing curve.
	  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
	  // Objects enter the screen at full velocity from off-screen and
	  // slowly decelerate to a resting point.
	  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
	  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
	  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
	  // The sharp curve is used by objects that may return to the screen at any time.
	  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
	};

	// Follow https://m2.material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
	// to learn when use what timing
	const duration = {
	  shortest: 150,
	  shorter: 200,
	  short: 250,
	  // most basic recommended timing
	  standard: 300,
	  // this is to be used in complex animations
	  complex: 375,
	  // recommended when something is entering screen
	  enteringScreen: 225,
	  // recommended when something is leaving screen
	  leavingScreen: 195
	};
	function formatMs(milliseconds) {
	  return `${Math.round(milliseconds)}ms`;
	}
	function getAutoHeightDuration(height) {
	  if (!height) {
	    return 0;
	  }
	  const constant = height / 36;

	  // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10
	  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
	}
	function createTransitions(inputTransitions) {
	  const mergedEasing = _extends$2({}, easing, inputTransitions.easing);
	  const mergedDuration = _extends$2({}, duration, inputTransitions.duration);
	  const create = (props = ['all'], options = {}) => {
	    const {
	        duration: durationOption = mergedDuration.standard,
	        easing: easingOption = mergedEasing.easeInOut,
	        delay = 0
	      } = options,
	      other = _objectWithoutPropertiesLoose$1(options, _excluded$B);
	    if (process.env.NODE_ENV !== 'production') {
	      const isString = value => typeof value === 'string';
	      // IE11 support, replace with Number.isNaN
	      // eslint-disable-next-line no-restricted-globals
	      const isNumber = value => !isNaN(parseFloat(value));
	      if (!isString(props) && !Array.isArray(props)) {
	        console.error('MUI: Argument "props" must be a string or Array.');
	      }
	      if (!isNumber(durationOption) && !isString(durationOption)) {
	        console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
	      }
	      if (!isString(easingOption)) {
	        console.error('MUI: Argument "easing" must be a string.');
	      }
	      if (!isNumber(delay) && !isString(delay)) {
	        console.error('MUI: Argument "delay" must be a number or a string.');
	      }
	      if (typeof options !== 'object') {
	        console.error(['MUI: Secong argument of transition.create must be an object.', "Arguments should be either `create('prop1', options)` or `create(['prop1', 'prop2'], options)`"].join('\n'));
	      }
	      if (Object.keys(other).length !== 0) {
	        console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(',')}].`);
	      }
	    }
	    return (Array.isArray(props) ? props : [props]).map(animatedProp => `${animatedProp} ${typeof durationOption === 'string' ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`).join(',');
	  };
	  return _extends$2({
	    getAutoHeightDuration,
	    create
	  }, inputTransitions, {
	    easing: mergedEasing,
	    duration: mergedDuration
	  });
	}

	// We need to centralize the zIndex definitions as they work
	// like global values in the browser.
	const zIndex = {
	  mobileStepper: 1000,
	  fab: 1050,
	  speedDial: 1050,
	  appBar: 1100,
	  drawer: 1200,
	  modal: 1300,
	  snackbar: 1400,
	  tooltip: 1500
	};
	var zIndex$1 = zIndex;

	const _excluded$A = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
	function createTheme(options = {}, ...args) {
	  const {
	      mixins: mixinsInput = {},
	      palette: paletteInput = {},
	      transitions: transitionsInput = {},
	      typography: typographyInput = {}
	    } = options,
	    other = _objectWithoutPropertiesLoose$1(options, _excluded$A);
	  if (options.vars) {
	    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: \`vars\` is a private field used for CSS variables support.
Please use another name.` : formatMuiErrorMessage(18));
	  }
	  const palette = createPalette(paletteInput);
	  const systemTheme = createTheme$1(options);
	  let muiTheme = deepmerge(systemTheme, {
	    mixins: createMixins(systemTheme.breakpoints, mixinsInput),
	    palette,
	    // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
	    shadows: shadows$1.slice(),
	    typography: createTypography(palette, typographyInput),
	    transitions: createTransitions(transitionsInput),
	    zIndex: _extends$2({}, zIndex$1)
	  });
	  muiTheme = deepmerge(muiTheme, other);
	  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
	  if (process.env.NODE_ENV !== 'production') {
	    // TODO v6: Refactor to use globalStateClassesMapping from @mui/utils once `readOnly` state class is used in Rating component.
	    const stateClasses = ['active', 'checked', 'completed', 'disabled', 'error', 'expanded', 'focused', 'focusVisible', 'required', 'selected'];
	    const traverse = (node, component) => {
	      let key;

	      // eslint-disable-next-line guard-for-in, no-restricted-syntax
	      for (key in node) {
	        const child = node[key];
	        if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
	          if (process.env.NODE_ENV !== 'production') {
	            const stateClass = generateUtilityClass('', key);
	            console.error([`MUI: The \`${component}\` component increases ` + `the CSS specificity of the \`${key}\` internal state.`, 'You can not override it like this: ', JSON.stringify(node, null, 2), '', `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
	              root: {
	                [`&.${stateClass}`]: child
	              }
	            }, null, 2), '', 'https://mui.com/r/state-classes-guide'].join('\n'));
	          }
	          // Remove the style to prevent global conflicts.
	          node[key] = {};
	        }
	      }
	    };
	    Object.keys(muiTheme.components).forEach(component => {
	      const styleOverrides = muiTheme.components[component].styleOverrides;
	      if (styleOverrides && component.indexOf('Mui') === 0) {
	        traverse(styleOverrides, component);
	      }
	    });
	  }
	  muiTheme.unstable_sxConfig = _extends$2({}, defaultSxConfig$1, other == null ? void 0 : other.unstable_sxConfig);
	  muiTheme.unstable_sx = function sx(props) {
	    return styleFunctionSx$1({
	      sx: props,
	      theme: this
	    });
	  };
	  return muiTheme;
	}

	const defaultTheme$1 = createTheme();
	var defaultTheme$2 = defaultTheme$1;

	var THEME_ID = '$$material';

	function useThemeProps({
	  props,
	  name
	}) {
	  return useThemeProps$1({
	    props,
	    name,
	    defaultTheme: defaultTheme$2,
	    themeId: THEME_ID
	  });
	}

	const rootShouldForwardProp = prop => shouldForwardProp(prop) && prop !== 'classes';
	const styled = createStyled({
	  themeId: THEME_ID,
	  defaultTheme: defaultTheme$2,
	  rootShouldForwardProp
	});
	var styled$1 = styled;

	const html = (theme, enableColorScheme) => _extends$2({
	  WebkitFontSmoothing: 'antialiased',
	  // Antialiasing.
	  MozOsxFontSmoothing: 'grayscale',
	  // Antialiasing.
	  // Change from `box-sizing: content-box` so that `width`
	  // is not affected by `padding` or `border`.
	  boxSizing: 'border-box',
	  // Fix font resize problem in iOS
	  WebkitTextSizeAdjust: '100%'
	}, enableColorScheme && !theme.vars && {
	  colorScheme: theme.palette.mode
	});
	const body = theme => _extends$2({
	  color: (theme.vars || theme).palette.text.primary
	}, theme.typography.body1, {
	  backgroundColor: (theme.vars || theme).palette.background.default,
	  '@media print': {
	    // Save printer ink.
	    backgroundColor: (theme.vars || theme).palette.common.white
	  }
	});
	process.env.NODE_ENV !== "production" ? {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * You can wrap a node.
	   */
	  children: PropTypes.node,
	  /**
	   * Enable `color-scheme` CSS property to use `theme.palette.mode`.
	   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
	   * For browser support, check out https://caniuse.com/?search=color-scheme
	   * @default false
	   */
	  enableColorScheme: PropTypes.bool
	} : void 0;

	function getScopedCssBaselineUtilityClass(slot) {
	  return generateUtilityClass('MuiScopedCssBaseline', slot);
	}
	generateUtilityClasses('MuiScopedCssBaseline', ['root']);

	const _excluded$z = ["className", "component", "enableColorScheme"];
	const useUtilityClasses$q = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getScopedCssBaselineUtilityClass, classes);
	};
	const ScopedCssBaselineRoot = styled$1('div', {
	  name: 'MuiScopedCssBaseline',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(({
	  theme,
	  ownerState
	}) => {
	  const colorSchemeStyles = {};
	  if (ownerState.enableColorScheme && theme.colorSchemes) {
	    Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {
	      var _scheme$palette;
	      colorSchemeStyles[`&${theme.getColorSchemeSelector(key).replace(/\s*&/, '')}`] = {
	        colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode
	      };
	    });
	  }
	  return _extends$2({}, html(theme, ownerState.enableColorScheme), body(theme), {
	    '& *, & *::before, & *::after': {
	      boxSizing: 'inherit'
	    },
	    '& strong, & b': {
	      fontWeight: theme.typography.fontWeightBold
	    }
	  }, colorSchemeStyles);
	});
	const ScopedCssBaseline = /*#__PURE__*/reactExports.forwardRef(function ScopedCssBaseline(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiScopedCssBaseline'
	  });
	  const {
	      className,
	      component = 'div'
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$z);
	  const ownerState = _extends$2({}, props, {
	    component
	  });
	  const classes = useUtilityClasses$q(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(ScopedCssBaselineRoot, _extends$2({
	    as: component,
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? ScopedCssBaseline.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * The content of the component.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: PropTypes.elementType,
	  /**
	   * Enable `color-scheme` CSS property to use `theme.palette.mode`.
	   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
	   * For browser support, check out https://caniuse.com/?search=color-scheme
	   */
	  enableColorScheme: PropTypes.bool,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
	} : void 0;
	var ScopedCssBaseline$1 = ScopedCssBaseline;

	var reactDom = {exports: {}};

	var reactDom_production_min = {};

	var scheduler = {exports: {}};

	var scheduler_production_min = {};

	/**
	 * @license React
	 * scheduler.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredScheduler_production_min;

	function requireScheduler_production_min () {
		if (hasRequiredScheduler_production_min) return scheduler_production_min;
		hasRequiredScheduler_production_min = 1;
		(function (exports) {
	function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}
			function g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()};}else {var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q};}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D="function"===typeof setTimeout?setTimeout:null,E="function"===typeof clearTimeout?clearTimeout:null,F="undefined"!==typeof setImmediate?setImmediate:null;
			"undefined"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t);}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else {var b=h(t);null!==b&&K(H,b.startTime-a);}}
			function J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if("function"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?v.callback=e:v===h(r)&&k(r);G(b);}else k(r);v=h(r);}if(null!==v)var w=!0;else {var m=h(t);null!==m&&K(H,m.startTime-b);w=!1;}return w}finally{v=null,y=c,z=!1;}}var N=!1,O=null,L=-1,P=5,Q=-1;
			function M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a);}finally{b?S():(N=!1,O=null);}}else N=!1;}var S;if("function"===typeof F)S=function(){F(R);};else if("undefined"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null);};}else S=function(){D(R,0);};function I(a){O=a;N||(N=!0,S());}function K(a,b){L=D(function(){a(exports.unstable_now());},b);}
			exports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null;};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J));};
			exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):P=0<a?Math.floor(1E3/a):5;};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y;}var c=y;y=b;try{return a()}finally{y=c;}};exports.unstable_pauseExecution=function(){};
			exports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3;}var c=y;y=a;try{return b()}finally{y=c;}};
			exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();"object"===typeof c&&null!==c?(c=c.delay,c="number"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3;}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};
			exports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c;}}}; 
		} (scheduler_production_min));
		return scheduler_production_min;
	}

	var scheduler_development = {};

	/**
	 * @license React
	 * scheduler.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredScheduler_development;

	function requireScheduler_development () {
		if (hasRequiredScheduler_development) return scheduler_development;
		hasRequiredScheduler_development = 1;
		(function (exports) {

			if (process.env.NODE_ENV !== "production") {
			  (function() {

			/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
			if (
			  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
			  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
			    'function'
			) {
			  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
			}
			          var enableSchedulerDebugging = false;
			var enableProfiling = false;
			var frameYieldMs = 5;

			function push(heap, node) {
			  var index = heap.length;
			  heap.push(node);
			  siftUp(heap, node, index);
			}
			function peek(heap) {
			  return heap.length === 0 ? null : heap[0];
			}
			function pop(heap) {
			  if (heap.length === 0) {
			    return null;
			  }

			  var first = heap[0];
			  var last = heap.pop();

			  if (last !== first) {
			    heap[0] = last;
			    siftDown(heap, last, 0);
			  }

			  return first;
			}

			function siftUp(heap, node, i) {
			  var index = i;

			  while (index > 0) {
			    var parentIndex = index - 1 >>> 1;
			    var parent = heap[parentIndex];

			    if (compare(parent, node) > 0) {
			      // The parent is larger. Swap positions.
			      heap[parentIndex] = node;
			      heap[index] = parent;
			      index = parentIndex;
			    } else {
			      // The parent is smaller. Exit.
			      return;
			    }
			  }
			}

			function siftDown(heap, node, i) {
			  var index = i;
			  var length = heap.length;
			  var halfLength = length >>> 1;

			  while (index < halfLength) {
			    var leftIndex = (index + 1) * 2 - 1;
			    var left = heap[leftIndex];
			    var rightIndex = leftIndex + 1;
			    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

			    if (compare(left, node) < 0) {
			      if (rightIndex < length && compare(right, left) < 0) {
			        heap[index] = right;
			        heap[rightIndex] = node;
			        index = rightIndex;
			      } else {
			        heap[index] = left;
			        heap[leftIndex] = node;
			        index = leftIndex;
			      }
			    } else if (rightIndex < length && compare(right, node) < 0) {
			      heap[index] = right;
			      heap[rightIndex] = node;
			      index = rightIndex;
			    } else {
			      // Neither child is smaller. Exit.
			      return;
			    }
			  }
			}

			function compare(a, b) {
			  // Compare sort index first, then task id.
			  var diff = a.sortIndex - b.sortIndex;
			  return diff !== 0 ? diff : a.id - b.id;
			}

			// TODO: Use symbols?
			var ImmediatePriority = 1;
			var UserBlockingPriority = 2;
			var NormalPriority = 3;
			var LowPriority = 4;
			var IdlePriority = 5;

			function markTaskErrored(task, ms) {
			}

			/* eslint-disable no-var */

			var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

			if (hasPerformanceNow) {
			  var localPerformance = performance;

			  exports.unstable_now = function () {
			    return localPerformance.now();
			  };
			} else {
			  var localDate = Date;
			  var initialTime = localDate.now();

			  exports.unstable_now = function () {
			    return localDate.now() - initialTime;
			  };
			} // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
			// Math.pow(2, 30) - 1
			// 0b111111111111111111111111111111


			var maxSigned31BitInt = 1073741823; // Times out immediately

			var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

			var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
			var NORMAL_PRIORITY_TIMEOUT = 5000;
			var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

			var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap

			var taskQueue = [];
			var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

			var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
			var currentTask = null;
			var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.

			var isPerformingWork = false;
			var isHostCallbackScheduled = false;
			var isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.

			var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;
			var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;
			var localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom

			typeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;

			function advanceTimers(currentTime) {
			  // Check for tasks that are no longer delayed and add them to the queue.
			  var timer = peek(timerQueue);

			  while (timer !== null) {
			    if (timer.callback === null) {
			      // Timer was cancelled.
			      pop(timerQueue);
			    } else if (timer.startTime <= currentTime) {
			      // Timer fired. Transfer to the task queue.
			      pop(timerQueue);
			      timer.sortIndex = timer.expirationTime;
			      push(taskQueue, timer);
			    } else {
			      // Remaining timers are pending.
			      return;
			    }

			    timer = peek(timerQueue);
			  }
			}

			function handleTimeout(currentTime) {
			  isHostTimeoutScheduled = false;
			  advanceTimers(currentTime);

			  if (!isHostCallbackScheduled) {
			    if (peek(taskQueue) !== null) {
			      isHostCallbackScheduled = true;
			      requestHostCallback(flushWork);
			    } else {
			      var firstTimer = peek(timerQueue);

			      if (firstTimer !== null) {
			        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
			      }
			    }
			  }
			}

			function flushWork(hasTimeRemaining, initialTime) {


			  isHostCallbackScheduled = false;

			  if (isHostTimeoutScheduled) {
			    // We scheduled a timeout but it's no longer needed. Cancel it.
			    isHostTimeoutScheduled = false;
			    cancelHostTimeout();
			  }

			  isPerformingWork = true;
			  var previousPriorityLevel = currentPriorityLevel;

			  try {
			    var currentTime; if (enableProfiling) ; else {
			      // No catch in prod code path.
			      return workLoop(hasTimeRemaining, initialTime);
			    }
			  } finally {
			    currentTask = null;
			    currentPriorityLevel = previousPriorityLevel;
			    isPerformingWork = false;
			  }
			}

			function workLoop(hasTimeRemaining, initialTime) {
			  var currentTime = initialTime;
			  advanceTimers(currentTime);
			  currentTask = peek(taskQueue);

			  while (currentTask !== null && !(enableSchedulerDebugging )) {
			    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
			      // This currentTask hasn't expired, and we've reached the deadline.
			      break;
			    }

			    var callback = currentTask.callback;

			    if (typeof callback === 'function') {
			      currentTask.callback = null;
			      currentPriorityLevel = currentTask.priorityLevel;
			      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;

			      var continuationCallback = callback(didUserCallbackTimeout);
			      currentTime = exports.unstable_now();

			      if (typeof continuationCallback === 'function') {
			        currentTask.callback = continuationCallback;
			      } else {

			        if (currentTask === peek(taskQueue)) {
			          pop(taskQueue);
			        }
			      }

			      advanceTimers(currentTime);
			    } else {
			      pop(taskQueue);
			    }

			    currentTask = peek(taskQueue);
			  } // Return whether there's additional work


			  if (currentTask !== null) {
			    return true;
			  } else {
			    var firstTimer = peek(timerQueue);

			    if (firstTimer !== null) {
			      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
			    }

			    return false;
			  }
			}

			function unstable_runWithPriority(priorityLevel, eventHandler) {
			  switch (priorityLevel) {
			    case ImmediatePriority:
			    case UserBlockingPriority:
			    case NormalPriority:
			    case LowPriority:
			    case IdlePriority:
			      break;

			    default:
			      priorityLevel = NormalPriority;
			  }

			  var previousPriorityLevel = currentPriorityLevel;
			  currentPriorityLevel = priorityLevel;

			  try {
			    return eventHandler();
			  } finally {
			    currentPriorityLevel = previousPriorityLevel;
			  }
			}

			function unstable_next(eventHandler) {
			  var priorityLevel;

			  switch (currentPriorityLevel) {
			    case ImmediatePriority:
			    case UserBlockingPriority:
			    case NormalPriority:
			      // Shift down to normal priority
			      priorityLevel = NormalPriority;
			      break;

			    default:
			      // Anything lower than normal priority should remain at the current level.
			      priorityLevel = currentPriorityLevel;
			      break;
			  }

			  var previousPriorityLevel = currentPriorityLevel;
			  currentPriorityLevel = priorityLevel;

			  try {
			    return eventHandler();
			  } finally {
			    currentPriorityLevel = previousPriorityLevel;
			  }
			}

			function unstable_wrapCallback(callback) {
			  var parentPriorityLevel = currentPriorityLevel;
			  return function () {
			    // This is a fork of runWithPriority, inlined for performance.
			    var previousPriorityLevel = currentPriorityLevel;
			    currentPriorityLevel = parentPriorityLevel;

			    try {
			      return callback.apply(this, arguments);
			    } finally {
			      currentPriorityLevel = previousPriorityLevel;
			    }
			  };
			}

			function unstable_scheduleCallback(priorityLevel, callback, options) {
			  var currentTime = exports.unstable_now();
			  var startTime;

			  if (typeof options === 'object' && options !== null) {
			    var delay = options.delay;

			    if (typeof delay === 'number' && delay > 0) {
			      startTime = currentTime + delay;
			    } else {
			      startTime = currentTime;
			    }
			  } else {
			    startTime = currentTime;
			  }

			  var timeout;

			  switch (priorityLevel) {
			    case ImmediatePriority:
			      timeout = IMMEDIATE_PRIORITY_TIMEOUT;
			      break;

			    case UserBlockingPriority:
			      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
			      break;

			    case IdlePriority:
			      timeout = IDLE_PRIORITY_TIMEOUT;
			      break;

			    case LowPriority:
			      timeout = LOW_PRIORITY_TIMEOUT;
			      break;

			    case NormalPriority:
			    default:
			      timeout = NORMAL_PRIORITY_TIMEOUT;
			      break;
			  }

			  var expirationTime = startTime + timeout;
			  var newTask = {
			    id: taskIdCounter++,
			    callback: callback,
			    priorityLevel: priorityLevel,
			    startTime: startTime,
			    expirationTime: expirationTime,
			    sortIndex: -1
			  };

			  if (startTime > currentTime) {
			    // This is a delayed task.
			    newTask.sortIndex = startTime;
			    push(timerQueue, newTask);

			    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
			      // All tasks are delayed, and this is the task with the earliest delay.
			      if (isHostTimeoutScheduled) {
			        // Cancel an existing timeout.
			        cancelHostTimeout();
			      } else {
			        isHostTimeoutScheduled = true;
			      } // Schedule a timeout.


			      requestHostTimeout(handleTimeout, startTime - currentTime);
			    }
			  } else {
			    newTask.sortIndex = expirationTime;
			    push(taskQueue, newTask);
			    // wait until the next time we yield.


			    if (!isHostCallbackScheduled && !isPerformingWork) {
			      isHostCallbackScheduled = true;
			      requestHostCallback(flushWork);
			    }
			  }

			  return newTask;
			}

			function unstable_pauseExecution() {
			}

			function unstable_continueExecution() {

			  if (!isHostCallbackScheduled && !isPerformingWork) {
			    isHostCallbackScheduled = true;
			    requestHostCallback(flushWork);
			  }
			}

			function unstable_getFirstCallbackNode() {
			  return peek(taskQueue);
			}

			function unstable_cancelCallback(task) {
			  // remove from the queue because you can't remove arbitrary nodes from an
			  // array based heap, only the first one.)


			  task.callback = null;
			}

			function unstable_getCurrentPriorityLevel() {
			  return currentPriorityLevel;
			}

			var isMessageLoopRunning = false;
			var scheduledHostCallback = null;
			var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
			// thread, like user events. By default, it yields multiple times per frame.
			// It does not attempt to align with frame boundaries, since most tasks don't
			// need to be frame aligned; for those that do, use requestAnimationFrame.

			var frameInterval = frameYieldMs;
			var startTime = -1;

			function shouldYieldToHost() {
			  var timeElapsed = exports.unstable_now() - startTime;

			  if (timeElapsed < frameInterval) {
			    // The main thread has only been blocked for a really short amount of time;
			    // smaller than a single frame. Don't yield yet.
			    return false;
			  } // The main thread has been blocked for a non-negligible amount of time. We


			  return true;
			}

			function requestPaint() {

			}

			function forceFrameRate(fps) {
			  if (fps < 0 || fps > 125) {
			    // Using console['error'] to evade Babel and ESLint
			    console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
			    return;
			  }

			  if (fps > 0) {
			    frameInterval = Math.floor(1000 / fps);
			  } else {
			    // reset the framerate
			    frameInterval = frameYieldMs;
			  }
			}

			var performWorkUntilDeadline = function () {
			  if (scheduledHostCallback !== null) {
			    var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread
			    // has been blocked.

			    startTime = currentTime;
			    var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the
			    // error can be observed.
			    //
			    // Intentionally not using a try-catch, since that makes some debugging
			    // techniques harder. Instead, if `scheduledHostCallback` errors, then
			    // `hasMoreWork` will remain true, and we'll continue the work loop.

			    var hasMoreWork = true;

			    try {
			      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
			    } finally {
			      if (hasMoreWork) {
			        // If there's more work, schedule the next message event at the end
			        // of the preceding one.
			        schedulePerformWorkUntilDeadline();
			      } else {
			        isMessageLoopRunning = false;
			        scheduledHostCallback = null;
			      }
			    }
			  } else {
			    isMessageLoopRunning = false;
			  } // Yielding to the browser will give it a chance to paint, so we can
			};

			var schedulePerformWorkUntilDeadline;

			if (typeof localSetImmediate === 'function') {
			  // Node.js and old IE.
			  // There's a few reasons for why we prefer setImmediate.
			  //
			  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.
			  // (Even though this is a DOM fork of the Scheduler, you could get here
			  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)
			  // https://github.com/facebook/react/issues/20756
			  //
			  // But also, it runs earlier which is the semantic we want.
			  // If other browsers ever implement it, it's better to use it.
			  // Although both of these would be inferior to native scheduling.
			  schedulePerformWorkUntilDeadline = function () {
			    localSetImmediate(performWorkUntilDeadline);
			  };
			} else if (typeof MessageChannel !== 'undefined') {
			  // DOM and Worker environments.
			  // We prefer MessageChannel because of the 4ms setTimeout clamping.
			  var channel = new MessageChannel();
			  var port = channel.port2;
			  channel.port1.onmessage = performWorkUntilDeadline;

			  schedulePerformWorkUntilDeadline = function () {
			    port.postMessage(null);
			  };
			} else {
			  // We should only fallback here in non-browser environments.
			  schedulePerformWorkUntilDeadline = function () {
			    localSetTimeout(performWorkUntilDeadline, 0);
			  };
			}

			function requestHostCallback(callback) {
			  scheduledHostCallback = callback;

			  if (!isMessageLoopRunning) {
			    isMessageLoopRunning = true;
			    schedulePerformWorkUntilDeadline();
			  }
			}

			function requestHostTimeout(callback, ms) {
			  taskTimeoutID = localSetTimeout(function () {
			    callback(exports.unstable_now());
			  }, ms);
			}

			function cancelHostTimeout() {
			  localClearTimeout(taskTimeoutID);
			  taskTimeoutID = -1;
			}

			var unstable_requestPaint = requestPaint;
			var unstable_Profiling =  null;

			exports.unstable_IdlePriority = IdlePriority;
			exports.unstable_ImmediatePriority = ImmediatePriority;
			exports.unstable_LowPriority = LowPriority;
			exports.unstable_NormalPriority = NormalPriority;
			exports.unstable_Profiling = unstable_Profiling;
			exports.unstable_UserBlockingPriority = UserBlockingPriority;
			exports.unstable_cancelCallback = unstable_cancelCallback;
			exports.unstable_continueExecution = unstable_continueExecution;
			exports.unstable_forceFrameRate = forceFrameRate;
			exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
			exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
			exports.unstable_next = unstable_next;
			exports.unstable_pauseExecution = unstable_pauseExecution;
			exports.unstable_requestPaint = unstable_requestPaint;
			exports.unstable_runWithPriority = unstable_runWithPriority;
			exports.unstable_scheduleCallback = unstable_scheduleCallback;
			exports.unstable_shouldYield = shouldYieldToHost;
			exports.unstable_wrapCallback = unstable_wrapCallback;
			          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
			if (
			  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
			  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
			    'function'
			) {
			  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
			}
			        
			  })();
			} 
		} (scheduler_development));
		return scheduler_development;
	}

	var hasRequiredScheduler;

	function requireScheduler () {
		if (hasRequiredScheduler) return scheduler.exports;
		hasRequiredScheduler = 1;

		if (process.env.NODE_ENV === 'production') {
		  scheduler.exports = requireScheduler_production_min();
		} else {
		  scheduler.exports = requireScheduler_development();
		}
		return scheduler.exports;
	}

	/**
	 * @license React
	 * react-dom.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactDom_production_min;

	function requireReactDom_production_min () {
		if (hasRequiredReactDom_production_min) return reactDom_production_min;
		hasRequiredReactDom_production_min = 1;
	var aa=reactExports,ca=requireScheduler();function p(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return "Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var da=new Set,ea={};function fa(a,b){ha(a,b);ha(a+"Capture",b);}
		function ha(a,b){ea[a]=b;for(a=0;a<b.length;a++)da.add(b[a]);}
		var ia=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),ja=Object.prototype.hasOwnProperty,ka=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,la=
		{},ma={};function oa(a){if(ja.call(ma,a))return !0;if(ja.call(la,a))return !1;if(ka.test(a))return ma[a]=!0;la[a]=!0;return !1}function pa(a,b,c,d){if(null!==c&&0===c.type)return !1;switch(typeof b){case "function":case "symbol":return !0;case "boolean":if(d)return !1;if(null!==c)return !c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return "data-"!==a&&"aria-"!==a;default:return !1}}
		function qa(a,b,c,d){if(null===b||"undefined"===typeof b||pa(a,b,c,d))return !0;if(d)return !1;if(null!==c)switch(c.type){case 3:return !b;case 4:return !1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return !1}function v(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g;}var z={};
		"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){z[a]=new v(a,0,!1,a,null,!1,!1);});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];z[b]=new v(b,1,!1,a[1],null,!1,!1);});["contentEditable","draggable","spellCheck","value"].forEach(function(a){z[a]=new v(a,2,!1,a.toLowerCase(),null,!1,!1);});
		["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){z[a]=new v(a,2,!1,a,null,!1,!1);});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){z[a]=new v(a,3,!1,a.toLowerCase(),null,!1,!1);});
		["checked","multiple","muted","selected"].forEach(function(a){z[a]=new v(a,3,!0,a,null,!1,!1);});["capture","download"].forEach(function(a){z[a]=new v(a,4,!1,a,null,!1,!1);});["cols","rows","size","span"].forEach(function(a){z[a]=new v(a,6,!1,a,null,!1,!1);});["rowSpan","start"].forEach(function(a){z[a]=new v(a,5,!1,a.toLowerCase(),null,!1,!1);});var ra=/[\-:]([a-z])/g;function sa(a){return a[1].toUpperCase()}
		"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(ra,
		sa);z[b]=new v(b,1,!1,a,null,!1,!1);});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,"http://www.w3.org/1999/xlink",!1,!1);});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1,!1);});["tabIndex","crossOrigin"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!1,!1);});
		z.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!0,!0);});
		function ta(a,b,c,d){var e=z.hasOwnProperty(b)?z[b]:null;if(null!==e?0!==e.type:d||!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1])qa(b,c,e,d)&&(c=null),d||null===e?oa(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c)));}
		var ua=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,va=Symbol.for("react.element"),wa=Symbol.for("react.portal"),ya=Symbol.for("react.fragment"),za=Symbol.for("react.strict_mode"),Aa=Symbol.for("react.profiler"),Ba=Symbol.for("react.provider"),Ca=Symbol.for("react.context"),Da=Symbol.for("react.forward_ref"),Ea=Symbol.for("react.suspense"),Fa=Symbol.for("react.suspense_list"),Ga=Symbol.for("react.memo"),Ha=Symbol.for("react.lazy");	var Ia=Symbol.for("react.offscreen");var Ja=Symbol.iterator;function Ka(a){if(null===a||"object"!==typeof a)return null;a=Ja&&a[Ja]||a["@@iterator"];return "function"===typeof a?a:null}var A=Object.assign,La;function Ma(a){if(void 0===La)try{throw Error();}catch(c){var b=c.stack.trim().match(/\n( *(at )?)/);La=b&&b[1]||"";}return "\n"+La+a}var Na=!1;
		function Oa(a,b){if(!a||Na)return "";Na=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,"props",{set:function(){throw Error();}}),"object"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[]);}catch(l){var d=l;}Reflect.construct(a,[],b);}else {try{b.call();}catch(l){d=l;}a.call(b.prototype);}else {try{throw Error();}catch(l){d=l;}a();}}catch(l){if(l&&d&&"string"===typeof l.stack){for(var e=l.stack.split("\n"),
		f=d.stack.split("\n"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h]){var k="\n"+e[g].replace(" at new "," at ");a.displayName&&k.includes("<anonymous>")&&(k=k.replace("<anonymous>",a.displayName));return k}while(1<=g&&0<=h)}break}}}finally{Na=!1,Error.prepareStackTrace=c;}return (a=a?a.displayName||a.name:"")?Ma(a):""}
		function Pa(a){switch(a.tag){case 5:return Ma(a.type);case 16:return Ma("Lazy");case 13:return Ma("Suspense");case 19:return Ma("SuspenseList");case 0:case 2:case 15:return a=Oa(a.type,!1),a;case 11:return a=Oa(a.type.render,!1),a;case 1:return a=Oa(a.type,!0),a;default:return ""}}
		function Qa(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ya:return "Fragment";case wa:return "Portal";case Aa:return "Profiler";case za:return "StrictMode";case Ea:return "Suspense";case Fa:return "SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case Ca:return (a.displayName||"Context")+".Consumer";case Ba:return (a._context.displayName||"Context")+".Provider";case Da:var b=a.render;a=a.displayName;a||(a=b.displayName||
		b.name||"",a=""!==a?"ForwardRef("+a+")":"ForwardRef");return a;case Ga:return b=a.displayName||null,null!==b?b:Qa(a.type)||"Memo";case Ha:b=a._payload;a=a._init;try{return Qa(a(b))}catch(c){}}return null}
		function Ra(a){var b=a.type;switch(a.tag){case 24:return "Cache";case 9:return (b.displayName||"Context")+".Consumer";case 10:return (b._context.displayName||"Context")+".Provider";case 18:return "DehydratedFragment";case 11:return a=b.render,a=a.displayName||a.name||"",b.displayName||(""!==a?"ForwardRef("+a+")":"ForwardRef");case 7:return "Fragment";case 5:return b;case 4:return "Portal";case 3:return "Root";case 6:return "Text";case 16:return Qa(b);case 8:return b===za?"StrictMode":"Mode";case 22:return "Offscreen";
		case 12:return "Profiler";case 21:return "Scope";case 13:return "Suspense";case 19:return "SuspenseList";case 25:return "TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"===typeof b)return b.displayName||b.name||null;if("string"===typeof b)return b}return null}function Sa(a){switch(typeof a){case "boolean":case "number":case "string":case "undefined":return a;case "object":return a;default:return ""}}
		function Ta(a){var b=a.type;return (a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
		function Ua(a){var b=Ta(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a);}});Object.defineProperty(a,b,{enumerable:c.enumerable});return {getValue:function(){return d},setValue:function(a){d=""+a;},stopTracking:function(){a._valueTracker=
		null;delete a[b];}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a));}function Wa(a){if(!a)return !1;var b=a._valueTracker;if(!b)return !0;var c=b.getValue();var d="";a&&(d=Ta(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}
		function Ya(a,b){var c=b.checked;return A({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value};}function ab(a,b){b=b.checked;null!=b&&ta(a,"checked",b,!1);}
		function bb(a,b){ab(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c;}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?cb(a,b.type,c):b.hasOwnProperty("defaultValue")&&cb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked);}
		function db(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b;}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c);}
		function cb(a,b,c){if("number"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c);}var eb=Array.isArray;
		function fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0);}else {c=""+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e]);}null!==b&&(b.selected=!0);}}
		function gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(p(91));return A({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(p(92));if(eb(c)){if(1<c.length)throw Error(p(93));c=c[0];}b=c;}null==b&&(b="");c=b;}a._wrapperState={initialValue:Sa(c)};}
		function ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d);}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b);}function kb(a){switch(a){case "svg":return "http://www.w3.org/2000/svg";case "math":return "http://www.w3.org/1998/Math/MathML";default:return "http://www.w3.org/1999/xhtml"}}
		function lb(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?kb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
		var mb,nb=function(a){return "undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)});}:a}(function(a,b){if("http://www.w3.org/2000/svg"!==a.namespaceURI||"innerHTML"in a)a.innerHTML=b;else {mb=mb||document.createElement("div");mb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=mb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild);}});
		function ob(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b;}
		var pb={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,
		zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},qb=["Webkit","ms","Moz","O"];Object.keys(pb).forEach(function(a){qb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);pb[b]=pb[a];});});function rb(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||pb.hasOwnProperty(a)&&pb[a]?(""+b).trim():b+"px"}
		function sb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=rb(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e;}}var tb=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
		function ub(a,b){if(b){if(tb[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(p(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(p(60));if("object"!==typeof b.dangerouslySetInnerHTML||!("__html"in b.dangerouslySetInnerHTML))throw Error(p(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(p(62));}}
		function vb(a,b){if(-1===a.indexOf("-"))return "string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return !1;default:return !0}}var wb=null;function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;
		function Bb(a){if(a=Cb(a)){if("function"!==typeof yb)throw Error(p(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b));}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a;}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a]);}}function Gb(a,b){return a(b)}function Hb(){}var Ib=!1;function Jb(a,b,c){if(Ib)return a(b,c);Ib=!0;try{return Gb(a,b,c)}finally{if(Ib=!1,null!==zb||null!==Ab)Hb(),Fb();}}
		function Kb(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1;}if(a)return null;if(c&&"function"!==
		typeof c)throw Error(p(231,b,typeof c));return c}var Lb=!1;if(ia)try{var Mb={};Object.defineProperty(Mb,"passive",{get:function(){Lb=!0;}});window.addEventListener("test",Mb,Mb);window.removeEventListener("test",Mb,Mb);}catch(a){Lb=!1;}function Nb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l);}catch(m){this.onError(m);}}var Ob=!1,Pb=null,Qb=!1,Rb=null,Sb={onError:function(a){Ob=!0;Pb=a;}};function Tb(a,b,c,d,e,f,g,h,k){Ob=!1;Pb=null;Nb.apply(Sb,arguments);}
		function Ub(a,b,c,d,e,f,g,h,k){Tb.apply(this,arguments);if(Ob){if(Ob){var l=Pb;Ob=!1;Pb=null;}else throw Error(p(198));Qb||(Qb=!0,Rb=l);}}function Vb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else {a=b;do b=a,0!==(b.flags&4098)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function Wb(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function Xb(a){if(Vb(a)!==a)throw Error(p(188));}
		function Yb(a){var b=a.alternate;if(!b){b=Vb(a);if(null===b)throw Error(p(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return Xb(e),a;if(f===d)return Xb(e),b;f=f.sibling;}throw Error(p(188));}if(c.return!==d.return)c=e,d=f;else {for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling;}if(!g){for(h=f.child;h;){if(h===
		c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling;}if(!g)throw Error(p(189));}}if(c.alternate!==d)throw Error(p(190));}if(3!==c.tag)throw Error(p(188));return c.stateNode.current===c?a:b}function Zb(a){a=Yb(a);return null!==a?$b(a):null}function $b(a){if(5===a.tag||6===a.tag)return a;for(a=a.child;null!==a;){var b=$b(a);if(null!==b)return b;a=a.sibling;}return null}
		var ac=ca.unstable_scheduleCallback,bc=ca.unstable_cancelCallback,cc=ca.unstable_shouldYield,dc=ca.unstable_requestPaint,B=ca.unstable_now,ec=ca.unstable_getCurrentPriorityLevel,fc=ca.unstable_ImmediatePriority,gc=ca.unstable_UserBlockingPriority,hc=ca.unstable_NormalPriority,ic=ca.unstable_LowPriority,jc=ca.unstable_IdlePriority,kc=null,lc=null;function mc(a){if(lc&&"function"===typeof lc.onCommitFiberRoot)try{lc.onCommitFiberRoot(kc,a,void 0,128===(a.current.flags&128));}catch(b){}}
		var oc=Math.clz32?Math.clz32:nc,pc=Math.log,qc=Math.LN2;function nc(a){a>>>=0;return 0===a?32:31-(pc(a)/qc|0)|0}var rc=64,sc=4194304;
		function tc(a){switch(a&-a){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return a&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return a&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;
		default:return a}}function uc(a,b){var c=a.pendingLanes;if(0===c)return 0;var d=0,e=a.suspendedLanes,f=a.pingedLanes,g=c&268435455;if(0!==g){var h=g&~e;0!==h?d=tc(h):(f&=g,0!==f&&(d=tc(f)));}else g=c&~e,0!==g?d=tc(g):0!==f&&(d=tc(f));if(0===d)return 0;if(0!==b&&b!==d&&0===(b&e)&&(e=d&-d,f=b&-b,e>=f||16===e&&0!==(f&4194240)))return b;0!==(d&4)&&(d|=c&16);b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-oc(b),e=1<<c,d|=a[c],b&=~e;return d}
		function vc(a,b){switch(a){case 1:case 2:case 4:return b+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return b+5E3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return -1;case 134217728:case 268435456:case 536870912:case 1073741824:return -1;default:return -1}}
		function wc(a,b){for(var c=a.suspendedLanes,d=a.pingedLanes,e=a.expirationTimes,f=a.pendingLanes;0<f;){var g=31-oc(f),h=1<<g,k=e[g];if(-1===k){if(0===(h&c)||0!==(h&d))e[g]=vc(h,b);}else k<=b&&(a.expiredLanes|=h);f&=~h;}}function xc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function yc(){var a=rc;rc<<=1;0===(rc&4194240)&&(rc=64);return a}function zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}
		function Ac(a,b,c){a.pendingLanes|=b;536870912!==b&&(a.suspendedLanes=0,a.pingedLanes=0);a=a.eventTimes;b=31-oc(b);a[b]=c;}function Bc(a,b){var c=a.pendingLanes&~b;a.pendingLanes=b;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=b;a.mutableReadLanes&=b;a.entangledLanes&=b;b=a.entanglements;var d=a.eventTimes;for(a=a.expirationTimes;0<c;){var e=31-oc(c),f=1<<e;b[e]=0;d[e]=-1;a[e]=-1;c&=~f;}}
		function Cc(a,b){var c=a.entangledLanes|=b;for(a=a.entanglements;c;){var d=31-oc(c),e=1<<d;e&b|a[d]&b&&(a[d]|=b);c&=~e;}}var C=0;function Dc(a){a&=-a;return 1<a?4<a?0!==(a&268435455)?16:536870912:4:1}var Ec,Fc,Gc,Hc,Ic,Jc=!1,Kc=[],Lc=null,Mc=null,Nc=null,Oc=new Map,Pc=new Map,Qc=[],Rc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
		function Sc(a,b){switch(a){case "focusin":case "focusout":Lc=null;break;case "dragenter":case "dragleave":Mc=null;break;case "mouseover":case "mouseout":Nc=null;break;case "pointerover":case "pointerout":Oc.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":Pc.delete(b.pointerId);}}
		function Tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a={blockedOn:b,domEventName:c,eventSystemFlags:d,nativeEvent:f,targetContainers:[e]},null!==b&&(b=Cb(b),null!==b&&Fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}
		function Uc(a,b,c,d,e){switch(b){case "focusin":return Lc=Tc(Lc,a,b,c,d,e),!0;case "dragenter":return Mc=Tc(Mc,a,b,c,d,e),!0;case "mouseover":return Nc=Tc(Nc,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;Oc.set(f,Tc(Oc.get(f)||null,a,b,c,d,e));return !0;case "gotpointercapture":return f=e.pointerId,Pc.set(f,Tc(Pc.get(f)||null,a,b,c,d,e)),!0}return !1}
		function Vc(a){var b=Wc(a.target);if(null!==b){var c=Vb(b);if(null!==c)if(b=c.tag,13===b){if(b=Wb(c),null!==b){a.blockedOn=b;Ic(a.priority,function(){Gc(c);});return}}else if(3===b&&c.stateNode.current.memoizedState.isDehydrated){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null;}
		function Xc(a){if(null!==a.blockedOn)return !1;for(var b=a.targetContainers;0<b.length;){var c=Yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null===c){c=a.nativeEvent;var d=new c.constructor(c.type,c);wb=d;c.target.dispatchEvent(d);wb=null;}else return b=Cb(c),null!==b&&Fc(b),a.blockedOn=c,!1;b.shift();}return !0}function Zc(a,b,c){Xc(a)&&c.delete(b);}function $c(){Jc=!1;null!==Lc&&Xc(Lc)&&(Lc=null);null!==Mc&&Xc(Mc)&&(Mc=null);null!==Nc&&Xc(Nc)&&(Nc=null);Oc.forEach(Zc);Pc.forEach(Zc);}
		function ad(a,b){a.blockedOn===b&&(a.blockedOn=null,Jc||(Jc=!0,ca.unstable_scheduleCallback(ca.unstable_NormalPriority,$c)));}
		function bd(a){function b(b){return ad(b,a)}if(0<Kc.length){ad(Kc[0],a);for(var c=1;c<Kc.length;c++){var d=Kc[c];d.blockedOn===a&&(d.blockedOn=null);}}null!==Lc&&ad(Lc,a);null!==Mc&&ad(Mc,a);null!==Nc&&ad(Nc,a);Oc.forEach(b);Pc.forEach(b);for(c=0;c<Qc.length;c++)d=Qc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Qc.length&&(c=Qc[0],null===c.blockedOn);)Vc(c),null===c.blockedOn&&Qc.shift();}var cd=ua.ReactCurrentBatchConfig,dd=!0;
		function ed(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=1,fd(a,b,c,d);}finally{C=e,cd.transition=f;}}function gd(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=4,fd(a,b,c,d);}finally{C=e,cd.transition=f;}}
		function fd(a,b,c,d){if(dd){var e=Yc(a,b,c,d);if(null===e)hd(a,b,d,id,c),Sc(a,d);else if(Uc(e,a,b,c,d))d.stopPropagation();else if(Sc(a,d),b&4&&-1<Rc.indexOf(a)){for(;null!==e;){var f=Cb(e);null!==f&&Ec(f);f=Yc(a,b,c,d);null===f&&hd(a,b,d,id,c);if(f===e)break;e=f;}null!==e&&d.stopPropagation();}else hd(a,b,d,null,c);}}var id=null;
		function Yc(a,b,c,d){id=null;a=xb(d);a=Wc(a);if(null!==a)if(b=Vb(a),null===b)a=null;else if(c=b.tag,13===c){a=Wb(b);if(null!==a)return a;a=null;}else if(3===c){if(b.stateNode.current.memoizedState.isDehydrated)return 3===b.tag?b.stateNode.containerInfo:null;a=null;}else b!==a&&(a=null);id=a;return null}
		function jd(a){switch(a){case "cancel":case "click":case "close":case "contextmenu":case "copy":case "cut":case "auxclick":case "dblclick":case "dragend":case "dragstart":case "drop":case "focusin":case "focusout":case "input":case "invalid":case "keydown":case "keypress":case "keyup":case "mousedown":case "mouseup":case "paste":case "pause":case "play":case "pointercancel":case "pointerdown":case "pointerup":case "ratechange":case "reset":case "resize":case "seeked":case "submit":case "touchcancel":case "touchend":case "touchstart":case "volumechange":case "change":case "selectionchange":case "textInput":case "compositionstart":case "compositionend":case "compositionupdate":case "beforeblur":case "afterblur":case "beforeinput":case "blur":case "fullscreenchange":case "focus":case "hashchange":case "popstate":case "select":case "selectstart":return 1;case "drag":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "mousemove":case "mouseout":case "mouseover":case "pointermove":case "pointerout":case "pointerover":case "scroll":case "toggle":case "touchmove":case "wheel":case "mouseenter":case "mouseleave":case "pointerenter":case "pointerleave":return 4;
		case "message":switch(ec()){case fc:return 1;case gc:return 4;case hc:case ic:return 16;case jc:return 536870912;default:return 16}default:return 16}}var kd=null,ld=null,md=null;function nd(){if(md)return md;var a,b=ld,c=b.length,d,e="value"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}
		function od(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return !0}function qd(){return !1}
		function rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}A(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&
		(a.returnValue=!1),this.isDefaultPrevented=pd);},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd);},persist:function(){},isPersistent:pd});return b}
		var sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=A({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=A({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if("movementX"in
		a)return a.movementX;a!==yd&&(yd&&"mousemove"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return "movementY"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=A({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=A({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=A({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=A({},sd,{clipboardData:function(a){return "clipboardData"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=A({},sd,{data:0}),Ld=rd(Kd),Md={Esc:"Escape",
		Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Nd={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",
		119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Od={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}
		var Qd=A({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if("Unidentified"!==b)return b}return "keypress"===a.type?(a=od(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?Nd[a.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return "keypress"===a.type?od(a):0},keyCode:function(a){return "keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return "keypress"===
		a.type?od(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=A({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=A({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=A({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=A({},Ad,{deltaX:function(a){return "deltaX"in a?a.deltaX:"wheelDeltaX"in a?-a.wheelDeltaX:0},
		deltaY:function(a){return "deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=ia&&"CompositionEvent"in window,be=null;ia&&"documentMode"in document&&(be=document.documentMode);var ce=ia&&"TextEvent"in window&&!be,de=ia&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;
		function ge(a,b){switch(a){case "keyup":return -1!==$d.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "focusout":return !0;default:return !1}}function he(a){a=a.detail;return "object"===typeof a&&"data"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case "compositionend":return he(b);case "keypress":if(32!==b.which)return null;fe=!0;return ee;case "textInput":return a=b.data,a===ee&&fe?null:a;default:return null}}
		function ke(a,b){if(ie)return "compositionend"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return de&&"ko"!==b.locale?null:b.data;default:return null}}
		var le={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return "input"===b?!!le[a.type]:"textarea"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,"onChange");0<b.length&&(c=new td("onChange","change",null,c,d),a.push({event:c,listeners:b}));}var pe=null,qe=null;function re(a){se(a,0);}function te(a){var b=ue(a);if(Wa(b))return a}
		function ve(a,b){if("change"===a)return b}var we=!1;if(ia){var xe;if(ia){var ye="oninput"in document;if(!ye){var ze=document.createElement("div");ze.setAttribute("oninput","return;");ye="function"===typeof ze.oninput;}xe=ye;}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode);}function Ae(){pe&&(pe.detachEvent("onpropertychange",Be),qe=pe=null);}function Be(a){if("value"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));Jb(re,b);}}
		function Ce(a,b,c){"focusin"===a?(Ae(),pe=b,qe=c,pe.attachEvent("onpropertychange",Be)):"focusout"===a&&Ae();}function De(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return te(qe)}function Ee(a,b){if("click"===a)return te(b)}function Fe(a,b){if("input"===a||"change"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He="function"===typeof Object.is?Object.is:Ge;
		function Ie(a,b){if(He(a,b))return !0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return !1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return !1;for(d=0;d<c.length;d++){var e=c[d];if(!ja.call(b,e)||!He(a[e],b[e]))return !1}return !0}function Je(a){for(;a&&a.firstChild;)a=a.firstChild;return a}
		function Ke(a,b){var c=Je(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return {node:c,offset:b-a};a=d;}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode;}c=void 0;}c=Je(c);}}function Le(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Le(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}
		function Me(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href;}catch(d){c=!1;}if(c)a=b.contentWindow;else break;b=Xa(a.document);}return b}function Ne(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}
		function Oe(a){var b=Me(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&c&&c.ownerDocument&&Le(c.ownerDocument.documentElement,c)){if(null!==d&&Ne(c))if(b=d.start,a=d.end,void 0===a&&(a=b),"selectionStart"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(a=(b=c.ownerDocument||document)&&b.defaultView||window,a.getSelection){a=a.getSelection();var e=c.textContent.length,f=Math.min(d.start,e);d=void 0===d.end?f:Math.min(d.end,e);!a.extend&&f>d&&(e=d,d=f,f=e);e=Ke(c,f);var g=Ke(c,
		d);e&&g&&(1!==a.rangeCount||a.anchorNode!==e.node||a.anchorOffset!==e.offset||a.focusNode!==g.node||a.focusOffset!==g.offset)&&(b=b.createRange(),b.setStart(e.node,e.offset),a.removeAllRanges(),f>d?(a.addRange(b),a.extend(g.node,g.offset)):(b.setEnd(g.node,g.offset),a.addRange(b)));}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});"function"===typeof c.focus&&c.focus();for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=a.top;}}
		var Pe=ia&&"documentMode"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;
		function Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,"selectionStart"in d&&Ne(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Ie(Se,d)||(Se=d,d=oe(Re,"onSelect"),0<d.length&&(b=new td("onSelect","select",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)));}
		function Ve(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var We={animationend:Ve("Animation","AnimationEnd"),animationiteration:Ve("Animation","AnimationIteration"),animationstart:Ve("Animation","AnimationStart"),transitionend:Ve("Transition","TransitionEnd")},Xe={},Ye={};
		ia&&(Ye=document.createElement("div").style,"AnimationEvent"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),"TransitionEvent"in window||delete We.transitionend.transition);function Ze(a){if(Xe[a])return Xe[a];if(!We[a])return a;var b=We[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Ye)return Xe[a]=b[c];return a}var $e=Ze("animationend"),af=Ze("animationiteration"),bf=Ze("animationstart"),cf=Ze("transitionend"),df=new Map,ef="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
		function ff(a,b){df.set(a,b);fa(b,[a]);}for(var gf=0;gf<ef.length;gf++){var hf=ef[gf],jf=hf.toLowerCase(),kf=hf[0].toUpperCase()+hf.slice(1);ff(jf,"on"+kf);}ff($e,"onAnimationEnd");ff(af,"onAnimationIteration");ff(bf,"onAnimationStart");ff("dblclick","onDoubleClick");ff("focusin","onFocus");ff("focusout","onBlur");ff(cf,"onTransitionEnd");ha("onMouseEnter",["mouseout","mouseover"]);ha("onMouseLeave",["mouseout","mouseover"]);ha("onPointerEnter",["pointerout","pointerover"]);
		ha("onPointerLeave",["pointerout","pointerover"]);fa("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));fa("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));fa("onBeforeInput",["compositionend","keypress","textInput","paste"]);fa("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));fa("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));
		fa("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var lf="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),mf=new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
		function nf(a,b,c){var d=a.type||"unknown-event";a.currentTarget=c;Ub(d,b,void 0,a);a.currentTarget=null;}
		function se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k;}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k;}}}if(Qb)throw a=Rb,Qb=!1,Rb=null,a;}
		function D(a,b){var c=b[of];void 0===c&&(c=b[of]=new Set);var d=a+"__bubble";c.has(d)||(pf(b,a,2,!1),c.add(d));}function qf(a,b,c){var d=0;b&&(d|=4);pf(c,a,d,b);}var rf="_reactListening"+Math.random().toString(36).slice(2);function sf(a){if(!a[rf]){a[rf]=!0;da.forEach(function(b){"selectionchange"!==b&&(mf.has(b)||qf(b,!1,a),qf(b,!0,a));});var b=9===a.nodeType?a:a.ownerDocument;null===b||b[rf]||(b[rf]=!0,qf("selectionchange",!1,b));}}
		function pf(a,b,c,d){switch(jd(b)){case 1:var e=ed;break;case 4:e=gd;break;default:e=fd;}c=e.bind(null,b,c,a);e=void 0;!Lb||"touchstart"!==b&&"touchmove"!==b&&"wheel"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1);}
		function hd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return;}for(;null!==h;){g=Wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode;}}d=d.return;}Jb(function(){var d=f,e=xb(c),g=[];
		a:{var h=df.get(a);if(void 0!==h){var k=td,n=a;switch(a){case "keypress":if(0===od(c))break a;case "keydown":case "keyup":k=Rd;break;case "focusin":n="focus";k=Fd;break;case "focusout":n="blur";k=Fd;break;case "beforeblur":case "afterblur":k=Fd;break;case "click":if(2===c.button)break a;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":k=Bd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":k=
		Dd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":k=Vd;break;case $e:case af:case bf:k=Hd;break;case cf:k=Xd;break;case "scroll":k=vd;break;case "wheel":k=Zd;break;case "copy":case "cut":case "paste":k=Jd;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":k=Td;}var t=0!==(b&4),J=!t&&"scroll"===a,x=t?null!==h?h+"Capture":null:h;t=[];for(var w=d,u;null!==
		w;){u=w;var F=u.stateNode;5===u.tag&&null!==F&&(u=F,null!==x&&(F=Kb(w,x),null!=F&&t.push(tf(w,F,u))));if(J)break;w=w.return;}0<t.length&&(h=new k(h,n,null,c,e),g.push({event:h,listeners:t}));}}if(0===(b&7)){a:{h="mouseover"===a||"pointerover"===a;k="mouseout"===a||"pointerout"===a;if(h&&c!==wb&&(n=c.relatedTarget||c.fromElement)&&(Wc(n)||n[uf]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(n=c.relatedTarget||c.toElement,k=d,n=n?Wc(n):null,null!==
		n&&(J=Vb(n),n!==J||5!==n.tag&&6!==n.tag))n=null;}else k=null,n=d;if(k!==n){t=Bd;F="onMouseLeave";x="onMouseEnter";w="mouse";if("pointerout"===a||"pointerover"===a)t=Td,F="onPointerLeave",x="onPointerEnter",w="pointer";J=null==k?h:ue(k);u=null==n?h:ue(n);h=new t(F,w+"leave",k,c,e);h.target=J;h.relatedTarget=u;F=null;Wc(e)===d&&(t=new t(x,w+"enter",n,c,e),t.target=u,t.relatedTarget=J,F=t);J=F;if(k&&n)b:{t=k;x=n;w=0;for(u=t;u;u=vf(u))w++;u=0;for(F=x;F;F=vf(F))u++;for(;0<w-u;)t=vf(t),w--;for(;0<u-w;)x=
		vf(x),u--;for(;w--;){if(t===x||null!==x&&t===x.alternate)break b;t=vf(t);x=vf(x);}t=null;}else t=null;null!==k&&wf(g,h,k,t,!1);null!==n&&null!==J&&wf(g,J,n,t,!0);}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if("select"===k||"input"===k&&"file"===h.type)var na=ve;else if(me(h))if(we)na=Fe;else {na=De;var xa=Ce;}else (k=h.nodeName)&&"input"===k.toLowerCase()&&("checkbox"===h.type||"radio"===h.type)&&(na=Ee);if(na&&(na=na(a,d))){ne(g,na,c,e);break a}xa&&xa(a,h,d);"focusout"===a&&(xa=h._wrapperState)&&
		xa.controlled&&"number"===h.type&&cb(h,"number",h.value);}xa=d?ue(d):window;switch(a){case "focusin":if(me(xa)||"true"===xa.contentEditable)Qe=xa,Re=d,Se=null;break;case "focusout":Se=Re=Qe=null;break;case "mousedown":Te=!0;break;case "contextmenu":case "mouseup":case "dragend":Te=!1;Ue(g,c,e);break;case "selectionchange":if(Pe)break;case "keydown":case "keyup":Ue(g,c,e);}var $a;if(ae)b:{switch(a){case "compositionstart":var ba="onCompositionStart";break b;case "compositionend":ba="onCompositionEnd";
		break b;case "compositionupdate":ba="onCompositionUpdate";break b}ba=void 0;}else ie?ge(a,c)&&(ba="onCompositionEnd"):"keydown"===a&&229===c.keyCode&&(ba="onCompositionStart");ba&&(de&&"ko"!==c.locale&&(ie||"onCompositionStart"!==ba?"onCompositionEnd"===ba&&ie&&($a=nd()):(kd=e,ld="value"in kd?kd.value:kd.textContent,ie=!0)),xa=oe(d,ba),0<xa.length&&(ba=new Ld(ba,a,null,c,e),g.push({event:ba,listeners:xa}),$a?ba.data=$a:($a=he(c),null!==$a&&(ba.data=$a))));if($a=ce?je(a,c):ke(a,c))d=oe(d,"onBeforeInput"),
		0<d.length&&(e=new Ld("onBeforeInput","beforeinput",null,c,e),g.push({event:e,listeners:d}),e.data=$a);}se(g,b);});}function tf(a,b,c){return {instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+"Capture",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Kb(a,c),null!=f&&d.unshift(tf(a,f,e)),f=Kb(a,b),null!=f&&d.push(tf(a,f,e)));a=a.return;}return d}function vf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}
		function wf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Kb(c,f),null!=k&&g.unshift(tf(c,k,h))):e||(k=Kb(c,f),null!=k&&g.push(tf(c,k,h))));c=c.return;}0!==g.length&&a.push({event:b,listeners:g});}var xf=/\r\n?/g,yf=/\u0000|\uFFFD/g;function zf(a){return ("string"===typeof a?a:""+a).replace(xf,"\n").replace(yf,"")}function Af(a,b,c){b=zf(b);if(zf(a)!==b&&c)throw Error(p(425));}function Bf(){}
		var Cf=null,Df=null;function Ef(a,b){return "textarea"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}
		var Ff="function"===typeof setTimeout?setTimeout:void 0,Gf="function"===typeof clearTimeout?clearTimeout:void 0,Hf="function"===typeof Promise?Promise:void 0,Jf="function"===typeof queueMicrotask?queueMicrotask:"undefined"!==typeof Hf?function(a){return Hf.resolve(null).then(a).catch(If)}:Ff;function If(a){setTimeout(function(){throw a;});}
		function Kf(a,b){var c=b,d=0;do{var e=c.nextSibling;a.removeChild(c);if(e&&8===e.nodeType)if(c=e.data,"/$"===c){if(0===d){a.removeChild(e);bd(b);return}d--;}else "$"!==c&&"$?"!==c&&"$!"!==c||d++;c=e;}while(c);bd(b);}function Lf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break;if(8===b){b=a.data;if("$"===b||"$!"===b||"$?"===b)break;if("/$"===b)return null}}return a}
		function Mf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if("$"===c||"$!"===c||"$?"===c){if(0===b)return a;b--;}else "/$"===c&&b++;}a=a.previousSibling;}return null}var Nf=Math.random().toString(36).slice(2),Of="__reactFiber$"+Nf,Pf="__reactProps$"+Nf,uf="__reactContainer$"+Nf,of="__reactEvents$"+Nf,Qf="__reactListeners$"+Nf,Rf="__reactHandles$"+Nf;
		function Wc(a){var b=a[Of];if(b)return b;for(var c=a.parentNode;c;){if(b=c[uf]||c[Of]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Mf(a);null!==a;){if(c=a[Of])return c;a=Mf(a);}return b}a=c;c=a.parentNode;}return null}function Cb(a){a=a[Of]||a[uf];return !a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(p(33));}function Db(a){return a[Pf]||null}var Sf=[],Tf=-1;function Uf(a){return {current:a}}
		function E(a){0>Tf||(a.current=Sf[Tf],Sf[Tf]=null,Tf--);}function G(a,b){Tf++;Sf[Tf]=a.current;a.current=b;}var Vf={},H=Uf(Vf),Wf=Uf(!1),Xf=Vf;function Yf(a,b){var c=a.type.contextTypes;if(!c)return Vf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}
		function Zf(a){a=a.childContextTypes;return null!==a&&void 0!==a}function $f(){E(Wf);E(H);}function ag(a,b,c){if(H.current!==Vf)throw Error(p(168));G(H,b);G(Wf,c);}function bg(a,b,c){var d=a.stateNode;b=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in b))throw Error(p(108,Ra(a)||"Unknown",e));return A({},c,d)}
		function cg(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Vf;Xf=H.current;G(H,a);G(Wf,Wf.current);return !0}function dg(a,b,c){var d=a.stateNode;if(!d)throw Error(p(169));c?(a=bg(a,b,Xf),d.__reactInternalMemoizedMergedChildContext=a,E(Wf),E(H),G(H,a)):E(Wf);G(Wf,c);}var eg=null,fg=!1,gg=!1;function hg(a){null===eg?eg=[a]:eg.push(a);}function ig(a){fg=!0;hg(a);}
		function jg(){if(!gg&&null!==eg){gg=!0;var a=0,b=C;try{var c=eg;for(C=1;a<c.length;a++){var d=c[a];do d=d(!0);while(null!==d)}eg=null;fg=!1;}catch(e){throw null!==eg&&(eg=eg.slice(a+1)),ac(fc,jg),e;}finally{C=b,gg=!1;}}return null}var kg=[],lg=0,mg=null,ng=0,og=[],pg=0,qg=null,rg=1,sg="";function tg(a,b){kg[lg++]=ng;kg[lg++]=mg;mg=a;ng=b;}
		function ug(a,b,c){og[pg++]=rg;og[pg++]=sg;og[pg++]=qg;qg=a;var d=rg;a=sg;var e=32-oc(d)-1;d&=~(1<<e);c+=1;var f=32-oc(b)+e;if(30<f){var g=e-e%5;f=(d&(1<<g)-1).toString(32);d>>=g;e-=g;rg=1<<32-oc(b)+e|c<<e|d;sg=f+a;}else rg=1<<f|c<<e|d,sg=a;}function vg(a){null!==a.return&&(tg(a,1),ug(a,1,0));}function wg(a){for(;a===mg;)mg=kg[--lg],kg[lg]=null,ng=kg[--lg],kg[lg]=null;for(;a===qg;)qg=og[--pg],og[pg]=null,sg=og[--pg],og[pg]=null,rg=og[--pg],og[pg]=null;}var xg=null,yg=null,I=!1,zg=null;
		function Ag(a,b){var c=Bg(5,null,null,0);c.elementType="DELETED";c.stateNode=b;c.return=a;b=a.deletions;null===b?(a.deletions=[c],a.flags|=16):b.push(c);}
		function Cg(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,xg=a,yg=Lf(b.firstChild),!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,xg=a,yg=null,!0):!1;case 13:return b=8!==b.nodeType?null:b,null!==b?(c=null!==qg?{id:rg,overflow:sg}:null,a.memoizedState={dehydrated:b,treeContext:c,retryLane:1073741824},c=Bg(18,null,null,0),c.stateNode=b,c.return=a,a.child=c,xg=a,yg=
		null,!0):!1;default:return !1}}function Dg(a){return 0!==(a.mode&1)&&0===(a.flags&128)}function Eg(a){if(I){var b=yg;if(b){var c=b;if(!Cg(a,b)){if(Dg(a))throw Error(p(418));b=Lf(c.nextSibling);var d=xg;b&&Cg(a,b)?Ag(d,c):(a.flags=a.flags&-4097|2,I=!1,xg=a);}}else {if(Dg(a))throw Error(p(418));a.flags=a.flags&-4097|2;I=!1;xg=a;}}}function Fg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;xg=a;}
		function Gg(a){if(a!==xg)return !1;if(!I)return Fg(a),I=!0,!1;var b;(b=3!==a.tag)&&!(b=5!==a.tag)&&(b=a.type,b="head"!==b&&"body"!==b&&!Ef(a.type,a.memoizedProps));if(b&&(b=yg)){if(Dg(a))throw Hg(),Error(p(418));for(;b;)Ag(a,b),b=Lf(b.nextSibling);}Fg(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(p(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if("/$"===c){if(0===b){yg=Lf(a.nextSibling);break a}b--;}else "$"!==c&&"$!"!==c&&"$?"!==c||b++;}a=a.nextSibling;}yg=
		null;}}else yg=xg?Lf(a.stateNode.nextSibling):null;return !0}function Hg(){for(var a=yg;a;)a=Lf(a.nextSibling);}function Ig(){yg=xg=null;I=!1;}function Jg(a){null===zg?zg=[a]:zg.push(a);}var Kg=ua.ReactCurrentBatchConfig;function Lg(a,b){if(a&&a.defaultProps){b=A({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var Mg=Uf(null),Ng=null,Og=null,Pg=null;function Qg(){Pg=Og=Ng=null;}function Rg(a){var b=Mg.current;E(Mg);a._currentValue=b;}
		function Sg(a,b,c){for(;null!==a;){var d=a.alternate;(a.childLanes&b)!==b?(a.childLanes|=b,null!==d&&(d.childLanes|=b)):null!==d&&(d.childLanes&b)!==b&&(d.childLanes|=b);if(a===c)break;a=a.return;}}function Tg(a,b){Ng=a;Pg=Og=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(Ug=!0),a.firstContext=null);}
		function Vg(a){var b=a._currentValue;if(Pg!==a)if(a={context:a,memoizedValue:b,next:null},null===Og){if(null===Ng)throw Error(p(308));Og=a;Ng.dependencies={lanes:0,firstContext:a};}else Og=Og.next=a;return b}var Wg=null;function Xg(a){null===Wg?Wg=[a]:Wg.push(a);}function Yg(a,b,c,d){var e=b.interleaved;null===e?(c.next=c,Xg(b)):(c.next=e.next,e.next=c);b.interleaved=c;return Zg(a,d)}
		function Zg(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}var $g=!1;function ah(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null};}
		function bh(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects});}function ch(a,b){return {eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}
		function dh(a,b,c){var d=a.updateQueue;if(null===d)return null;d=d.shared;if(0!==(K&2)){var e=d.pending;null===e?b.next=b:(b.next=e.next,e.next=b);d.pending=b;return Zg(a,c)}e=d.interleaved;null===e?(b.next=b,Xg(d)):(b.next=e.next,e.next=b);d.interleaved=b;return Zg(a,c)}function eh(a,b,c){b=b.updateQueue;if(null!==b&&(b=b.shared,0!==(c&4194240))){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c);}}
		function fh(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next;}while(null!==c);null===f?e=f=b:f=f.next=b;}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=
		b;c.lastBaseUpdate=b;}
		function gh(a,b,c,d){var e=a.updateQueue;$g=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var m=a.alternate;null!==m&&(m=m.updateQueue,h=m.lastBaseUpdate,h!==g&&(null===h?m.firstBaseUpdate=l:h.next=l,m.lastBaseUpdate=k));}if(null!==f){var q=e.baseState;g=0;m=l=k=null;h=f;do{var r=h.lane,y=h.eventTime;if((d&r)===r){null!==m&&(m=m.next={eventTime:y,lane:0,tag:h.tag,payload:h.payload,callback:h.callback,
		next:null});a:{var n=a,t=h;r=b;y=c;switch(t.tag){case 1:n=t.payload;if("function"===typeof n){q=n.call(y,q,r);break a}q=n;break a;case 3:n.flags=n.flags&-65537|128;case 0:n=t.payload;r="function"===typeof n?n.call(y,q,r):n;if(null===r||void 0===r)break a;q=A({},q,r);break a;case 2:$g=!0;}}null!==h.callback&&0!==h.lane&&(a.flags|=64,r=e.effects,null===r?e.effects=[h]:r.push(h));}else y={eventTime:y,lane:r,tag:h.tag,payload:h.payload,callback:h.callback,next:null},null===m?(l=m=y,k=q):m=m.next=y,g|=r;
		h=h.next;if(null===h)if(h=e.shared.pending,null===h)break;else r=h,h=r.next,r.next=null,e.lastBaseUpdate=r,e.shared.pending=null;}while(1);null===m&&(k=q);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=m;b=e.shared.interleaved;if(null!==b){e=b;do g|=e.lane,e=e.next;while(e!==b)}else null===f&&(e.shared.lanes=0);hh|=g;a.lanes=g;a.memoizedState=q;}}
		function ih(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if("function"!==typeof e)throw Error(p(191,e));e.call(d);}}}var jh=(new aa.Component).refs;function kh(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:A({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c);}
		var nh={isMounted:function(a){return (a=a._reactInternals)?Vb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e));},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e));},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=L(),d=
		lh(a),e=ch(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=b);b=dh(a,e,d);null!==b&&(mh(b,a,d,c),eh(b,a,d));}};function oh(a,b,c,d,e,f,g){a=a.stateNode;return "function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Ie(c,d)||!Ie(e,f):!0}
		function ph(a,b,c){var d=!1,e=Vf;var f=b.contextType;"object"===typeof f&&null!==f?f=Vg(f):(e=Zf(b)?Xf:H.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Yf(a,e):Vf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=nh;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
		function qh(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&nh.enqueueReplaceState(b,b.state,null);}
		function rh(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=jh;ah(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=Vg(f):(f=Zf(b)?Xf:H.current,e.context=Yf(a,f));e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(kh(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||(b=e.state,
		"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&nh.enqueueReplaceState(e,e.state,null),gh(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.flags|=4194308);}
		function sh(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(p(309));var d=c.stateNode;}if(!d)throw Error(p(147,a));var e=d,f=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===f)return b.ref;b=function(a){var b=e.refs;b===jh&&(b=e.refs={});null===a?delete b[f]:b[f]=a;};b._stringRef=f;return b}if("string"!==typeof a)throw Error(p(284));if(!c._owner)throw Error(p(290,a));}return a}
		function th(a,b){a=Object.prototype.toString.call(b);throw Error(p(31,"[object Object]"===a?"object with keys {"+Object.keys(b).join(", ")+"}":a));}function uh(a){var b=a._init;return b(a._payload)}
		function vh(a){function b(b,c){if(a){var d=b.deletions;null===d?(b.deletions=[c],b.flags|=16):d.push(c);}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=wh(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return b.flags|=1048576,c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags|=2,c):d;b.flags|=2;return c}function g(b){a&&
		null===b.alternate&&(b.flags|=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=xh(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){var f=c.type;if(f===ya)return m(a,b,c.props.children,d,c.key);if(null!==b&&(b.elementType===f||"object"===typeof f&&null!==f&&f.$$typeof===Ha&&uh(f)===b.type))return d=e(b,c.props),d.ref=sh(a,b,c),d.return=a,d;d=yh(c.type,c.key,c.props,null,a.mode,d);d.ref=sh(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||
		b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=zh(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Ah(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function q(a,b,c){if("string"===typeof b&&""!==b||"number"===typeof b)return b=xh(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case va:return c=yh(b.type,b.key,b.props,null,a.mode,c),
		c.ref=sh(a,null,b),c.return=a,c;case wa:return b=zh(b,a.mode,c),b.return=a,b;case Ha:var d=b._init;return q(a,d(b._payload),c)}if(eb(b)||Ka(b))return b=Ah(b,a.mode,c,null),b.return=a,b;th(a,b);}return null}function r(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c&&""!==c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case va:return c.key===e?k(a,b,c,d):null;case wa:return c.key===e?l(a,b,c,d):null;case Ha:return e=c._init,r(a,
		b,e(c._payload),d)}if(eb(c)||Ka(c))return null!==e?null:m(a,b,c,d,null);th(a,c);}return null}function y(a,b,c,d,e){if("string"===typeof d&&""!==d||"number"===typeof d)return a=a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case va:return a=a.get(null===d.key?c:d.key)||null,k(b,a,d,e);case wa:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e);case Ha:var f=d._init;return y(a,b,c,f(d._payload),e)}if(eb(d)||Ka(d))return a=a.get(c)||null,m(b,a,d,e,null);th(b,d);}return null}
		function n(e,g,h,k){for(var l=null,m=null,u=g,w=g=0,x=null;null!==u&&w<h.length;w++){u.index>w?(x=u,u=null):x=u.sibling;var n=r(e,u,h[w],k);if(null===n){null===u&&(u=x);break}a&&u&&null===n.alternate&&b(e,u);g=f(n,g,w);null===m?l=n:m.sibling=n;m=n;u=x;}if(w===h.length)return c(e,u),I&&tg(e,w),l;if(null===u){for(;w<h.length;w++)u=q(e,h[w],k),null!==u&&(g=f(u,g,w),null===m?l=u:m.sibling=u,m=u);I&&tg(e,w);return l}for(u=d(e,u);w<h.length;w++)x=y(u,e,w,h[w],k),null!==x&&(a&&null!==x.alternate&&u.delete(null===
		x.key?w:x.key),g=f(x,g,w),null===m?l=x:m.sibling=x,m=x);a&&u.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function t(e,g,h,k){var l=Ka(h);if("function"!==typeof l)throw Error(p(150));h=l.call(h);if(null==h)throw Error(p(151));for(var u=l=null,m=g,w=g=0,x=null,n=h.next();null!==m&&!n.done;w++,n=h.next()){m.index>w?(x=m,m=null):x=m.sibling;var t=r(e,m,n.value,k);if(null===t){null===m&&(m=x);break}a&&m&&null===t.alternate&&b(e,m);g=f(t,g,w);null===u?l=t:u.sibling=t;u=t;m=x;}if(n.done)return c(e,
		m),I&&tg(e,w),l;if(null===m){for(;!n.done;w++,n=h.next())n=q(e,n.value,k),null!==n&&(g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);I&&tg(e,w);return l}for(m=d(e,m);!n.done;w++,n=h.next())n=y(m,e,w,n.value,k),null!==n&&(a&&null!==n.alternate&&m.delete(null===n.key?w:n.key),g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);a&&m.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function J(a,d,f,h){"object"===typeof f&&null!==f&&f.type===ya&&null===f.key&&(f=f.props.children);if("object"===typeof f&&null!==f){switch(f.$$typeof){case va:a:{for(var k=
		f.key,l=d;null!==l;){if(l.key===k){k=f.type;if(k===ya){if(7===l.tag){c(a,l.sibling);d=e(l,f.props.children);d.return=a;a=d;break a}}else if(l.elementType===k||"object"===typeof k&&null!==k&&k.$$typeof===Ha&&uh(k)===l.type){c(a,l.sibling);d=e(l,f.props);d.ref=sh(a,l,f);d.return=a;a=d;break a}c(a,l);break}else b(a,l);l=l.sibling;}f.type===ya?(d=Ah(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=yh(f.type,f.key,f.props,null,a.mode,h),h.ref=sh(a,d,f),h.return=a,a=h);}return g(a);case wa:a:{for(l=f.key;null!==
		d;){if(d.key===l)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else {c(a,d);break}else b(a,d);d=d.sibling;}d=zh(f,a.mode,h);d.return=a;a=d;}return g(a);case Ha:return l=f._init,J(a,d,l(f._payload),h)}if(eb(f))return n(a,d,f,h);if(Ka(f))return t(a,d,f,h);th(a,f);}return "string"===typeof f&&""!==f||"number"===typeof f?(f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):
		(c(a,d),d=xh(f,a.mode,h),d.return=a,a=d),g(a)):c(a,d)}return J}var Bh=vh(!0),Ch=vh(!1),Dh={},Eh=Uf(Dh),Fh=Uf(Dh),Gh=Uf(Dh);function Hh(a){if(a===Dh)throw Error(p(174));return a}function Ih(a,b){G(Gh,b);G(Fh,a);G(Eh,Dh);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:lb(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=lb(b,a);}E(Eh);G(Eh,b);}function Jh(){E(Eh);E(Fh);E(Gh);}
		function Kh(a){Hh(Gh.current);var b=Hh(Eh.current);var c=lb(b,a.type);b!==c&&(G(Fh,a),G(Eh,c));}function Lh(a){Fh.current===a&&(E(Eh),E(Fh));}var M=Uf(0);
		function Mh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||"$?"===c.data||"$!"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&128))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}return null}var Nh=[];
		function Oh(){for(var a=0;a<Nh.length;a++)Nh[a]._workInProgressVersionPrimary=null;Nh.length=0;}var Ph=ua.ReactCurrentDispatcher,Qh=ua.ReactCurrentBatchConfig,Rh=0,N=null,O=null,P=null,Sh=!1,Th=!1,Uh=0,Vh=0;function Q(){throw Error(p(321));}function Wh(a,b){if(null===b)return !1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return !1;return !0}
		function Xh(a,b,c,d,e,f){Rh=f;N=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;Ph.current=null===a||null===a.memoizedState?Yh:Zh;a=c(d,e);if(Th){f=0;do{Th=!1;Uh=0;if(25<=f)throw Error(p(301));f+=1;P=O=null;b.updateQueue=null;Ph.current=$h;a=c(d,e);}while(Th)}Ph.current=ai;b=null!==O&&null!==O.next;Rh=0;P=O=N=null;Sh=!1;if(b)throw Error(p(300));return a}function bi(){var a=0!==Uh;Uh=0;return a}
		function ci(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}function di(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null;}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else {if(null===a)throw Error(p(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a;}return P}
		function ei(a,b){return "function"===typeof b?b(a):b}
		function fi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g;}d.baseQueue=e=f;c.pending=null;}if(null!==e){f=e.next;d=d.baseState;var h=g=null,k=null,l=f;do{var m=l.lane;if((Rh&m)===m)null!==k&&(k=k.next={lane:0,action:l.action,hasEagerState:l.hasEagerState,eagerState:l.eagerState,next:null}),d=l.hasEagerState?l.eagerState:a(d,l.action);else {var q={lane:m,action:l.action,hasEagerState:l.hasEagerState,
		eagerState:l.eagerState,next:null};null===k?(h=k=q,g=d):k=k.next=q;N.lanes|=m;hh|=m;}l=l.next;}while(null!==l&&l!==f);null===k?g=d:k.next=h;He(d,b.memoizedState)||(Ug=!0);b.memoizedState=d;b.baseState=g;b.baseQueue=k;c.lastRenderedState=d;}a=c.interleaved;if(null!==a){e=a;do f=e.lane,N.lanes|=f,hh|=f,e=e.next;while(e!==a)}else null===e&&(c.lanes=0);return [b.memoizedState,c.dispatch]}
		function gi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(Ug=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f;}return [f,d]}function hi(){}
		function ii(a,b){var c=N,d=di(),e=b(),f=!He(d.memoizedState,e);f&&(d.memoizedState=e,Ug=!0);d=d.queue;ji(ki.bind(null,c,d,a),[a]);if(d.getSnapshot!==b||f||null!==P&&P.memoizedState.tag&1){c.flags|=2048;li(9,mi.bind(null,c,d,e,b),void 0,null);if(null===R)throw Error(p(349));0!==(Rh&30)||ni(c,b,e);}return e}function ni(a,b,c){a.flags|=16384;a={getSnapshot:b,value:c};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.stores=[a]):(c=b.stores,null===c?b.stores=[a]:c.push(a));}
		function mi(a,b,c,d){b.value=c;b.getSnapshot=d;oi(b)&&pi(a);}function ki(a,b,c){return c(function(){oi(b)&&pi(a);})}function oi(a){var b=a.getSnapshot;a=a.value;try{var c=b();return !He(a,c)}catch(d){return !0}}function pi(a){var b=Zg(a,1);null!==b&&mh(b,a,1,-1);}
		function qi(a){var b=ci();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ei,lastRenderedState:a};b.queue=a;a=a.dispatch=ri.bind(null,N,a);return [b.memoizedState,a]}
		function li(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function si(){return di().memoizedState}function ti(a,b,c,d){var e=ci();N.flags|=a;e.memoizedState=li(1|b,c,void 0,void 0===d?null:d);}
		function ui(a,b,c,d){var e=di();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&Wh(d,g.deps)){e.memoizedState=li(b,c,f,d);return}}N.flags|=a;e.memoizedState=li(1|b,c,f,d);}function vi(a,b){return ti(8390656,8,a,b)}function ji(a,b){return ui(2048,8,a,b)}function wi(a,b){return ui(4,2,a,b)}function xi(a,b){return ui(4,4,a,b)}
		function yi(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null);};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null;}}function zi(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ui(4,4,yi.bind(null,b,a),c)}function Ai(){}function Bi(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}
		function Ci(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Di(a,b,c){if(0===(Rh&21))return a.baseState&&(a.baseState=!1,Ug=!0),a.memoizedState=c;He(c,b)||(c=yc(),N.lanes|=c,hh|=c,a.baseState=!0);return b}function Ei(a,b){var c=C;C=0!==c&&4>c?c:4;a(!0);var d=Qh.transition;Qh.transition={};try{a(!1),b();}finally{C=c,Qh.transition=d;}}function Fi(){return di().memoizedState}
		function Gi(a,b,c){var d=lh(a);c={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,c);else if(c=Yg(a,b,c,d),null!==c){var e=L();mh(c,a,d,e);Ji(c,b,d);}}
		function ri(a,b,c){var d=lh(a),e={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,e);else {var f=a.alternate;if(0===a.lanes&&(null===f||0===f.lanes)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.hasEagerState=!0;e.eagerState=h;if(He(h,g)){var k=b.interleaved;null===k?(e.next=e,Xg(b)):(e.next=k.next,k.next=e);b.interleaved=e;return}}catch(l){}finally{}c=Yg(a,b,e,d);null!==c&&(e=L(),mh(c,a,d,e),Ji(c,b,d));}}
		function Hi(a){var b=a.alternate;return a===N||null!==b&&b===N}function Ii(a,b){Th=Sh=!0;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b;}function Ji(a,b,c){if(0!==(c&4194240)){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c);}}
		var ai={readContext:Vg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useInsertionEffect:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useDeferredValue:Q,useTransition:Q,useMutableSource:Q,useSyncExternalStore:Q,useId:Q,unstable_isNewReconciler:!1},Yh={readContext:Vg,useCallback:function(a,b){ci().memoizedState=[a,void 0===b?null:b];return a},useContext:Vg,useEffect:vi,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ti(4194308,
		4,yi.bind(null,b,a),c)},useLayoutEffect:function(a,b){return ti(4194308,4,a,b)},useInsertionEffect:function(a,b){return ti(4,2,a,b)},useMemo:function(a,b){var c=ci();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=ci();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};d.queue=a;a=a.dispatch=Gi.bind(null,N,a);return [d.memoizedState,a]},useRef:function(a){var b=
		ci();a={current:a};return b.memoizedState=a},useState:qi,useDebugValue:Ai,useDeferredValue:function(a){return ci().memoizedState=a},useTransition:function(){var a=qi(!1),b=a[0];a=Ei.bind(null,a[1]);ci().memoizedState=a;return [b,a]},useMutableSource:function(){},useSyncExternalStore:function(a,b,c){var d=N,e=ci();if(I){if(void 0===c)throw Error(p(407));c=c();}else {c=b();if(null===R)throw Error(p(349));0!==(Rh&30)||ni(d,b,c);}e.memoizedState=c;var f={value:c,getSnapshot:b};e.queue=f;vi(ki.bind(null,d,
		f,a),[a]);d.flags|=2048;li(9,mi.bind(null,d,f,c,b),void 0,null);return c},useId:function(){var a=ci(),b=R.identifierPrefix;if(I){var c=sg;var d=rg;c=(d&~(1<<32-oc(d)-1)).toString(32)+c;b=":"+b+"R"+c;c=Uh++;0<c&&(b+="H"+c.toString(32));b+=":";}else c=Vh++,b=":"+b+"r"+c.toString(32)+":";return a.memoizedState=b},unstable_isNewReconciler:!1},Zh={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:fi,useRef:si,useState:function(){return fi(ei)},
		useDebugValue:Ai,useDeferredValue:function(a){var b=di();return Di(b,O.memoizedState,a)},useTransition:function(){var a=fi(ei)[0],b=di().memoizedState;return [a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1},$h={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:gi,useRef:si,useState:function(){return gi(ei)},useDebugValue:Ai,useDeferredValue:function(a){var b=di();return null===
		O?b.memoizedState=a:Di(b,O.memoizedState,a)},useTransition:function(){var a=gi(ei)[0],b=di().memoizedState;return [a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1};function Ki(a,b){try{var c="",d=b;do c+=Pa(d),d=d.return;while(d);var e=c;}catch(f){e="\nError generating stack: "+f.message+"\n"+f.stack;}return {value:a,source:b,stack:e,digest:null}}function Li(a,b,c){return {value:a,source:null,stack:null!=c?c:null,digest:null!=b?b:null}}
		function Mi(a,b){try{console.error(b.value);}catch(c){setTimeout(function(){throw c;});}}var Ni="function"===typeof WeakMap?WeakMap:Map;function Oi(a,b,c){c=ch(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Pi||(Pi=!0,Qi=d);Mi(a,b);};return c}
		function Ri(a,b,c){c=ch(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){return d(e)};c.callback=function(){Mi(a,b);};}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){Mi(a,b);"function"!==typeof d&&(null===Si?Si=new Set([this]):Si.add(this));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""});});return c}
		function Ti(a,b,c){var d=a.pingCache;if(null===d){d=a.pingCache=new Ni;var e=new Set;d.set(b,e);}else e=d.get(b),void 0===e&&(e=new Set,d.set(b,e));e.has(c)||(e.add(c),a=Ui.bind(null,a,b,c),b.then(a,a));}function Vi(a){do{var b;if(b=13===a.tag)b=a.memoizedState,b=null!==b?null!==b.dehydrated?!0:!1:!0;if(b)return a;a=a.return;}while(null!==a);return null}
		function Wi(a,b,c,d,e){if(0===(a.mode&1))return a===b?a.flags|=65536:(a.flags|=128,c.flags|=131072,c.flags&=-52805,1===c.tag&&(null===c.alternate?c.tag=17:(b=ch(-1,1),b.tag=2,dh(c,b,1))),c.lanes|=1),a;a.flags|=65536;a.lanes=e;return a}var Xi=ua.ReactCurrentOwner,Ug=!1;function Yi(a,b,c,d){b.child=null===a?Ch(b,null,c,d):Bh(b,a.child,c,d);}
		function Zi(a,b,c,d,e){c=c.render;var f=b.ref;Tg(b,e);d=Xh(a,b,c,d,f,e);c=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&c&&vg(b);b.flags|=1;Yi(a,b,d,e);return b.child}
		function aj(a,b,c,d,e){if(null===a){var f=c.type;if("function"===typeof f&&!bj(f)&&void 0===f.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=f,cj(a,b,f,d,e);a=yh(c.type,null,d,b,b.mode,e);a.ref=b.ref;a.return=b;return b.child=a}f=a.child;if(0===(a.lanes&e)){var g=f.memoizedProps;c=c.compare;c=null!==c?c:Ie;if(c(g,d)&&a.ref===b.ref)return $i(a,b,e)}b.flags|=1;a=wh(f,d);a.ref=b.ref;a.return=b;return b.child=a}
		function cj(a,b,c,d,e){if(null!==a){var f=a.memoizedProps;if(Ie(f,d)&&a.ref===b.ref)if(Ug=!1,b.pendingProps=d=f,0!==(a.lanes&e))0!==(a.flags&131072)&&(Ug=!0);else return b.lanes=a.lanes,$i(a,b,e)}return dj(a,b,c,d,e)}
		function ej(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if("hidden"===d.mode)if(0===(b.mode&1))b.memoizedState={baseLanes:0,cachePool:null,transitions:null},G(fj,gj),gj|=c;else {if(0===(c&1073741824))return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a,cachePool:null,transitions:null},b.updateQueue=null,G(fj,gj),gj|=a,null;b.memoizedState={baseLanes:0,cachePool:null,transitions:null};d=null!==f?f.baseLanes:c;G(fj,gj);gj|=d;}else null!==
		f?(d=f.baseLanes|c,b.memoizedState=null):d=c,G(fj,gj),gj|=d;Yi(a,b,e,c);return b.child}function hj(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=512,b.flags|=2097152;}function dj(a,b,c,d,e){var f=Zf(c)?Xf:H.current;f=Yf(b,f);Tg(b,e);c=Xh(a,b,c,d,f,e);d=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&d&&vg(b);b.flags|=1;Yi(a,b,c,e);return b.child}
		function ij(a,b,c,d,e){if(Zf(c)){var f=!0;cg(b);}else f=!1;Tg(b,e);if(null===b.stateNode)jj(a,b),ph(b,c,d),rh(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=Vg(l):(l=Zf(c)?Xf:H.current,l=Yf(b,l));var m=c.getDerivedStateFromProps,q="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;q||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||
		(h!==d||k!==l)&&qh(b,g,d,l);$g=!1;var r=b.memoizedState;g.state=r;gh(b,d,g,e);k=b.memoizedState;h!==d||r!==k||Wf.current||$g?("function"===typeof m&&(kh(b,c,m,d),k=b.memoizedState),(h=$g||oh(b,c,h,d,r,k,l))?(q||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===typeof g.componentDidMount&&(b.flags|=4194308)):
		("function"===typeof g.componentDidMount&&(b.flags|=4194308),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.flags|=4194308),d=!1);}else {g=b.stateNode;bh(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:Lg(b.type,h);g.props=l;q=b.pendingProps;r=g.context;k=c.contextType;"object"===typeof k&&null!==k?k=Vg(k):(k=Zf(c)?Xf:H.current,k=Yf(b,k));var y=c.getDerivedStateFromProps;(m="function"===typeof y||"function"===typeof g.getSnapshotBeforeUpdate)||
		"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==q||r!==k)&&qh(b,g,d,k);$g=!1;r=b.memoizedState;g.state=r;gh(b,d,g,e);var n=b.memoizedState;h!==q||r!==n||Wf.current||$g?("function"===typeof y&&(kh(b,c,y,d),n=b.memoizedState),(l=$g||oh(b,c,l,d,r,n,k)||!1)?(m||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,n,k),"function"===typeof g.UNSAFE_componentWillUpdate&&
		g.UNSAFE_componentWillUpdate(d,n,k)),"function"===typeof g.componentDidUpdate&&(b.flags|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=1024)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),b.memoizedProps=d,b.memoizedState=n),g.props=d,g.state=n,g.context=k,d=l):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===
		a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),d=!1);}return kj(a,b,c,d,f,e)}
		function kj(a,b,c,d,e,f){hj(a,b);var g=0!==(b.flags&128);if(!d&&!g)return e&&dg(b,c,!1),$i(a,b,f);d=b.stateNode;Xi.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Bh(b,a.child,null,f),b.child=Bh(b,null,h,f)):Yi(a,b,h,f);b.memoizedState=d.state;e&&dg(b,c,!0);return b.child}function lj(a){var b=a.stateNode;b.pendingContext?ag(a,b.pendingContext,b.pendingContext!==b.context):b.context&&ag(a,b.context,!1);Ih(a,b.containerInfo);}
		function mj(a,b,c,d,e){Ig();Jg(e);b.flags|=256;Yi(a,b,c,d);return b.child}var nj={dehydrated:null,treeContext:null,retryLane:0};function oj(a){return {baseLanes:a,cachePool:null,transitions:null}}
		function pj(a,b,c){var d=b.pendingProps,e=M.current,f=!1,g=0!==(b.flags&128),h;(h=g)||(h=null!==a&&null===a.memoizedState?!1:0!==(e&2));if(h)f=!0,b.flags&=-129;else if(null===a||null!==a.memoizedState)e|=1;G(M,e&1);if(null===a){Eg(b);a=b.memoizedState;if(null!==a&&(a=a.dehydrated,null!==a))return 0===(b.mode&1)?b.lanes=1:"$!"===a.data?b.lanes=8:b.lanes=1073741824,null;g=d.children;a=d.fallback;return f?(d=b.mode,f=b.child,g={mode:"hidden",children:g},0===(d&1)&&null!==f?(f.childLanes=0,f.pendingProps=
		g):f=qj(g,d,0,null),a=Ah(a,d,c,null),f.return=b,a.return=b,f.sibling=a,b.child=f,b.child.memoizedState=oj(c),b.memoizedState=nj,a):rj(b,g)}e=a.memoizedState;if(null!==e&&(h=e.dehydrated,null!==h))return sj(a,b,g,d,h,e,c);if(f){f=d.fallback;g=b.mode;e=a.child;h=e.sibling;var k={mode:"hidden",children:d.children};0===(g&1)&&b.child!==e?(d=b.child,d.childLanes=0,d.pendingProps=k,b.deletions=null):(d=wh(e,k),d.subtreeFlags=e.subtreeFlags&14680064);null!==h?f=wh(h,f):(f=Ah(f,g,c,null),f.flags|=2);f.return=
		b;d.return=b;d.sibling=f;b.child=d;d=f;f=b.child;g=a.child.memoizedState;g=null===g?oj(c):{baseLanes:g.baseLanes|c,cachePool:null,transitions:g.transitions};f.memoizedState=g;f.childLanes=a.childLanes&~c;b.memoizedState=nj;return d}f=a.child;a=f.sibling;d=wh(f,{mode:"visible",children:d.children});0===(b.mode&1)&&(d.lanes=c);d.return=b;d.sibling=null;null!==a&&(c=b.deletions,null===c?(b.deletions=[a],b.flags|=16):c.push(a));b.child=d;b.memoizedState=null;return d}
		function rj(a,b){b=qj({mode:"visible",children:b},a.mode,0,null);b.return=a;return a.child=b}function tj(a,b,c,d){null!==d&&Jg(d);Bh(b,a.child,null,c);a=rj(b,b.pendingProps.children);a.flags|=2;b.memoizedState=null;return a}
		function sj(a,b,c,d,e,f,g){if(c){if(b.flags&256)return b.flags&=-257,d=Li(Error(p(422))),tj(a,b,g,d);if(null!==b.memoizedState)return b.child=a.child,b.flags|=128,null;f=d.fallback;e=b.mode;d=qj({mode:"visible",children:d.children},e,0,null);f=Ah(f,e,g,null);f.flags|=2;d.return=b;f.return=b;d.sibling=f;b.child=d;0!==(b.mode&1)&&Bh(b,a.child,null,g);b.child.memoizedState=oj(g);b.memoizedState=nj;return f}if(0===(b.mode&1))return tj(a,b,g,null);if("$!"===e.data){d=e.nextSibling&&e.nextSibling.dataset;
		if(d)var h=d.dgst;d=h;f=Error(p(419));d=Li(f,d,void 0);return tj(a,b,g,d)}h=0!==(g&a.childLanes);if(Ug||h){d=R;if(null!==d){switch(g&-g){case 4:e=2;break;case 16:e=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:e=32;break;case 536870912:e=268435456;break;default:e=0;}e=0!==(e&(d.suspendedLanes|g))?0:e;
		0!==e&&e!==f.retryLane&&(f.retryLane=e,Zg(a,e),mh(d,a,e,-1));}uj();d=Li(Error(p(421)));return tj(a,b,g,d)}if("$?"===e.data)return b.flags|=128,b.child=a.child,b=vj.bind(null,a),e._reactRetry=b,null;a=f.treeContext;yg=Lf(e.nextSibling);xg=b;I=!0;zg=null;null!==a&&(og[pg++]=rg,og[pg++]=sg,og[pg++]=qg,rg=a.id,sg=a.overflow,qg=b);b=rj(b,d.children);b.flags|=4096;return b}function wj(a,b,c){a.lanes|=b;var d=a.alternate;null!==d&&(d.lanes|=b);Sg(a.return,b,c);}
		function xj(a,b,c,d,e){var f=a.memoizedState;null===f?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e}:(f.isBackwards=b,f.rendering=null,f.renderingStartTime=0,f.last=d,f.tail=c,f.tailMode=e);}
		function yj(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;Yi(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.flags|=128;else {if(null!==a&&0!==(a.flags&128))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&wj(a,c,b);else if(19===a.tag)wj(a,c,b);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return;}a.sibling.return=a.return;a=a.sibling;}d&=1;}G(M,d);if(0===(b.mode&1))b.memoizedState=
		null;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===Mh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);xj(b,!1,e,c,f);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===Mh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a;}xj(b,!0,c,null,f);break;case "together":xj(b,!1,null,null,void 0);break;default:b.memoizedState=null;}return b.child}
		function jj(a,b){0===(b.mode&1)&&null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);}function $i(a,b,c){null!==a&&(b.dependencies=a.dependencies);hh|=b.lanes;if(0===(c&b.childLanes))return null;if(null!==a&&b.child!==a.child)throw Error(p(153));if(null!==b.child){a=b.child;c=wh(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=wh(a,a.pendingProps),c.return=b;c.sibling=null;}return b.child}
		function zj(a,b,c){switch(b.tag){case 3:lj(b);Ig();break;case 5:Kh(b);break;case 1:Zf(b.type)&&cg(b);break;case 4:Ih(b,b.stateNode.containerInfo);break;case 10:var d=b.type._context,e=b.memoizedProps.value;G(Mg,d._currentValue);d._currentValue=e;break;case 13:d=b.memoizedState;if(null!==d){if(null!==d.dehydrated)return G(M,M.current&1),b.flags|=128,null;if(0!==(c&b.child.childLanes))return pj(a,b,c);G(M,M.current&1);a=$i(a,b,c);return null!==a?a.sibling:null}G(M,M.current&1);break;case 19:d=0!==(c&
		b.childLanes);if(0!==(a.flags&128)){if(d)return yj(a,b,c);b.flags|=128;}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);G(M,M.current);if(d)break;else return null;case 22:case 23:return b.lanes=0,ej(a,b,c)}return $i(a,b,c)}var Aj,Bj,Cj,Dj;
		Aj=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;}c.sibling.return=c.return;c=c.sibling;}};Bj=function(){};
		Cj=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;Hh(Eh.current);var f=null;switch(c){case "input":e=Ya(a,e);d=Ya(a,d);f=[];break;case "select":e=A({},e,{value:void 0});d=A({},d,{value:void 0});f=[];break;case "textarea":e=gb(a,e);d=gb(a,d);f=[];break;default:"function"!==typeof e.onClick&&"function"===typeof d.onClick&&(a.onclick=Bf);}ub(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if("style"===l){var h=e[l];for(g in h)h.hasOwnProperty(g)&&
		(c||(c={}),c[g]="");}else "dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(ea.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if("style"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]="");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||(c={}),c[g]=k[g]);}else c||(f||(f=[]),f.push(l,
		c)),c=k;else "dangerouslySetInnerHTML"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):"children"===l?"string"!==typeof k&&"number"!==typeof k||(f=f||[]).push(l,""+k):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(ea.hasOwnProperty(l)?(null!=k&&"onScroll"===l&&D("scroll",a),f||h===k||(f=[])):(f=f||[]).push(l,k));}c&&(f=f||[]).push("style",c);var l=f;if(b.updateQueue=l)b.flags|=4;}};Dj=function(a,b,c,d){c!==d&&(b.flags|=4);};
		function Ej(a,b){if(!I)switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null;}}
		function S(a){var b=null!==a.alternate&&a.alternate.child===a.child,c=0,d=0;if(b)for(var e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags&14680064,d|=e.flags&14680064,e.return=a,e=e.sibling;else for(e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags,d|=e.flags,e.return=a,e=e.sibling;a.subtreeFlags|=d;a.childLanes=c;return b}
		function Fj(a,b,c){var d=b.pendingProps;wg(b);switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return S(b),null;case 1:return Zf(b.type)&&$f(),S(b),null;case 3:d=b.stateNode;Jh();E(Wf);E(H);Oh();d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)Gg(b)?b.flags|=4:null===a||a.memoizedState.isDehydrated&&0===(b.flags&256)||(b.flags|=1024,null!==zg&&(Gj(zg),zg=null));Bj(a,b);S(b);return null;case 5:Lh(b);var e=Hh(Gh.current);
		c=b.type;if(null!==a&&null!=b.stateNode)Cj(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=512,b.flags|=2097152);else {if(!d){if(null===b.stateNode)throw Error(p(166));S(b);return null}a=Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[Of]=b;d[Pf]=f;a=0!==(b.mode&1);switch(c){case "dialog":D("cancel",d);D("close",d);break;case "iframe":case "object":case "embed":D("load",d);break;case "video":case "audio":for(e=0;e<lf.length;e++)D(lf[e],d);break;case "source":D("error",d);break;case "img":case "image":case "link":D("error",
		d);D("load",d);break;case "details":D("toggle",d);break;case "input":Za(d,f);D("invalid",d);break;case "select":d._wrapperState={wasMultiple:!!f.multiple};D("invalid",d);break;case "textarea":hb(d,f),D("invalid",d);}ub(c,f);e=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];"children"===g?"string"===typeof h?d.textContent!==h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,h,a),e=["children",h]):"number"===typeof h&&d.textContent!==""+h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,
		h,a),e=["children",""+h]):ea.hasOwnProperty(g)&&null!=h&&"onScroll"===g&&D("scroll",d);}switch(c){case "input":Va(d);db(d,f,!0);break;case "textarea":Va(d);jb(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&(d.onclick=Bf);}d=e;b.updateQueue=d;null!==d&&(b.flags|=4);}else {g=9===e.nodeType?e:e.ownerDocument;"http://www.w3.org/1999/xhtml"===a&&(a=kb(c));"http://www.w3.org/1999/xhtml"===a?"script"===c?(a=g.createElement("div"),a.innerHTML="<script>\x3c/script>",a=a.removeChild(a.firstChild)):
		"string"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),"select"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[Of]=b;a[Pf]=d;Aj(a,b,!1,!1);b.stateNode=a;a:{g=vb(c,d);switch(c){case "dialog":D("cancel",a);D("close",a);e=d;break;case "iframe":case "object":case "embed":D("load",a);e=d;break;case "video":case "audio":for(e=0;e<lf.length;e++)D(lf[e],a);e=d;break;case "source":D("error",a);e=d;break;case "img":case "image":case "link":D("error",
		a);D("load",a);e=d;break;case "details":D("toggle",a);e=d;break;case "input":Za(a,d);e=Ya(a,d);D("invalid",a);break;case "option":e=d;break;case "select":a._wrapperState={wasMultiple:!!d.multiple};e=A({},d,{value:void 0});D("invalid",a);break;case "textarea":hb(a,d);e=gb(a,d);D("invalid",a);break;default:e=d;}ub(c,e);h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];"style"===f?sb(a,k):"dangerouslySetInnerHTML"===f?(k=k?k.__html:void 0,null!=k&&nb(a,k)):"children"===f?"string"===typeof k?("textarea"!==
		c||""!==k)&&ob(a,k):"number"===typeof k&&ob(a,""+k):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(ea.hasOwnProperty(f)?null!=k&&"onScroll"===f&&D("scroll",a):null!=k&&ta(a,f,k,g));}switch(c){case "input":Va(a);db(a,d,!1);break;case "textarea":Va(a);jb(a);break;case "option":null!=d.value&&a.setAttribute("value",""+Sa(d.value));break;case "select":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,
		!0);break;default:"function"===typeof e.onClick&&(a.onclick=Bf);}switch(c){case "button":case "input":case "select":case "textarea":d=!!d.autoFocus;break a;case "img":d=!0;break a;default:d=!1;}}d&&(b.flags|=4);}null!==b.ref&&(b.flags|=512,b.flags|=2097152);}S(b);return null;case 6:if(a&&null!=b.stateNode)Dj(a,b,a.memoizedProps,d);else {if("string"!==typeof d&&null===b.stateNode)throw Error(p(166));c=Hh(Gh.current);Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.memoizedProps;d[Of]=b;if(f=d.nodeValue!==c)if(a=
		xg,null!==a)switch(a.tag){case 3:Af(d.nodeValue,c,0!==(a.mode&1));break;case 5:!0!==a.memoizedProps.suppressHydrationWarning&&Af(d.nodeValue,c,0!==(a.mode&1));}f&&(b.flags|=4);}else d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[Of]=b,b.stateNode=d;}S(b);return null;case 13:E(M);d=b.memoizedState;if(null===a||null!==a.memoizedState&&null!==a.memoizedState.dehydrated){if(I&&null!==yg&&0!==(b.mode&1)&&0===(b.flags&128))Hg(),Ig(),b.flags|=98560,f=!1;else if(f=Gg(b),null!==d&&null!==d.dehydrated){if(null===
		a){if(!f)throw Error(p(318));f=b.memoizedState;f=null!==f?f.dehydrated:null;if(!f)throw Error(p(317));f[Of]=b;}else Ig(),0===(b.flags&128)&&(b.memoizedState=null),b.flags|=4;S(b);f=!1;}else null!==zg&&(Gj(zg),zg=null),f=!0;if(!f)return b.flags&65536?b:null}if(0!==(b.flags&128))return b.lanes=c,b;d=null!==d;d!==(null!==a&&null!==a.memoizedState)&&d&&(b.child.flags|=8192,0!==(b.mode&1)&&(null===a||0!==(M.current&1)?0===T&&(T=3):uj()));null!==b.updateQueue&&(b.flags|=4);S(b);return null;case 4:return Jh(),
		Bj(a,b),null===a&&sf(b.stateNode.containerInfo),S(b),null;case 10:return Rg(b.type._context),S(b),null;case 17:return Zf(b.type)&&$f(),S(b),null;case 19:E(M);f=b.memoizedState;if(null===f)return S(b),null;d=0!==(b.flags&128);g=f.rendering;if(null===g)if(d)Ej(f,!1);else {if(0!==T||null!==a&&0!==(a.flags&128))for(a=b.child;null!==a;){g=Mh(a);if(null!==g){b.flags|=128;Ej(f,!1);d=g.updateQueue;null!==d&&(b.updateQueue=d,b.flags|=4);b.subtreeFlags=0;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=14680066,
		g=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.subtreeFlags=0,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.subtreeFlags=0,f.deletions=null,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,f.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;G(M,M.current&1|2);return b.child}a=
		a.sibling;}null!==f.tail&&B()>Hj&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304);}else {if(!d)if(a=Mh(g),null!==a){if(b.flags|=128,d=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Ej(f,!0),null===f.tail&&"hidden"===f.tailMode&&!g.alternate&&!I)return S(b),null}else 2*B()-f.renderingStartTime>Hj&&1073741824!==c&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304);f.isBackwards?(g.sibling=b.child,b.child=g):(c=f.last,null!==c?c.sibling=g:b.child=g,f.last=g);}if(null!==f.tail)return b=f.tail,f.rendering=
		b,f.tail=b.sibling,f.renderingStartTime=B(),b.sibling=null,c=M.current,G(M,d?c&1|2:c&1),b;S(b);return null;case 22:case 23:return Ij(),d=null!==b.memoizedState,null!==a&&null!==a.memoizedState!==d&&(b.flags|=8192),d&&0!==(b.mode&1)?0!==(gj&1073741824)&&(S(b),b.subtreeFlags&6&&(b.flags|=8192)):S(b),null;case 24:return null;case 25:return null}throw Error(p(156,b.tag));}
		function Jj(a,b){wg(b);switch(b.tag){case 1:return Zf(b.type)&&$f(),a=b.flags,a&65536?(b.flags=a&-65537|128,b):null;case 3:return Jh(),E(Wf),E(H),Oh(),a=b.flags,0!==(a&65536)&&0===(a&128)?(b.flags=a&-65537|128,b):null;case 5:return Lh(b),null;case 13:E(M);a=b.memoizedState;if(null!==a&&null!==a.dehydrated){if(null===b.alternate)throw Error(p(340));Ig();}a=b.flags;return a&65536?(b.flags=a&-65537|128,b):null;case 19:return E(M),null;case 4:return Jh(),null;case 10:return Rg(b.type._context),null;case 22:case 23:return Ij(),
		null;case 24:return null;default:return null}}var Kj=!1,U=!1,Lj="function"===typeof WeakSet?WeakSet:Set,V=null;function Mj(a,b){var c=a.ref;if(null!==c)if("function"===typeof c)try{c(null);}catch(d){W(a,b,d);}else c.current=null;}function Nj(a,b,c){try{c();}catch(d){W(a,b,d);}}var Oj=!1;
		function Pj(a,b){Cf=dd;a=Me();if(Ne(a)){if("selectionStart"in a)var c={start:a.selectionStart,end:a.selectionEnd};else a:{c=(c=a.ownerDocument)&&c.defaultView||window;var d=c.getSelection&&c.getSelection();if(d&&0!==d.rangeCount){c=d.anchorNode;var e=d.anchorOffset,f=d.focusNode;d=d.focusOffset;try{c.nodeType,f.nodeType;}catch(F){c=null;break a}var g=0,h=-1,k=-1,l=0,m=0,q=a,r=null;b:for(;;){for(var y;;){q!==c||0!==e&&3!==q.nodeType||(h=g+e);q!==f||0!==d&&3!==q.nodeType||(k=g+d);3===q.nodeType&&(g+=
		q.nodeValue.length);if(null===(y=q.firstChild))break;r=q;q=y;}for(;;){if(q===a)break b;r===c&&++l===e&&(h=g);r===f&&++m===d&&(k=g);if(null!==(y=q.nextSibling))break;q=r;r=q.parentNode;}q=y;}c=-1===h||-1===k?null:{start:h,end:k};}else c=null;}c=c||{start:0,end:0};}else c=null;Df={focusedElem:a,selectionRange:c};dd=!1;for(V=b;null!==V;)if(b=V,a=b.child,0!==(b.subtreeFlags&1028)&&null!==a)a.return=b,V=a;else for(;null!==V;){b=V;try{var n=b.alternate;if(0!==(b.flags&1024))switch(b.tag){case 0:case 11:case 15:break;
		case 1:if(null!==n){var t=n.memoizedProps,J=n.memoizedState,x=b.stateNode,w=x.getSnapshotBeforeUpdate(b.elementType===b.type?t:Lg(b.type,t),J);x.__reactInternalSnapshotBeforeUpdate=w;}break;case 3:var u=b.stateNode.containerInfo;1===u.nodeType?u.textContent="":9===u.nodeType&&u.documentElement&&u.removeChild(u.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(p(163));}}catch(F){W(b,b.return,F);}a=b.sibling;if(null!==a){a.return=b.return;V=a;break}V=b.return;}n=Oj;Oj=!1;return n}
		function Qj(a,b,c){var d=b.updateQueue;d=null!==d?d.lastEffect:null;if(null!==d){var e=d=d.next;do{if((e.tag&a)===a){var f=e.destroy;e.destroy=void 0;void 0!==f&&Nj(b,c,f);}e=e.next;}while(e!==d)}}function Rj(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d();}c=c.next;}while(c!==b)}}function Sj(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:a=c;break;default:a=c;}"function"===typeof b?b(a):b.current=a;}}
		function Tj(a){var b=a.alternate;null!==b&&(a.alternate=null,Tj(b));a.child=null;a.deletions=null;a.sibling=null;5===a.tag&&(b=a.stateNode,null!==b&&(delete b[Of],delete b[Pf],delete b[of],delete b[Qf],delete b[Rf]));a.stateNode=null;a.return=null;a.dependencies=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.stateNode=null;a.updateQueue=null;}function Uj(a){return 5===a.tag||3===a.tag||4===a.tag}
		function Vj(a){a:for(;;){for(;null===a.sibling;){if(null===a.return||Uj(a.return))return null;a=a.return;}a.sibling.return=a.return;for(a=a.sibling;5!==a.tag&&6!==a.tag&&18!==a.tag;){if(a.flags&2)continue a;if(null===a.child||4===a.tag)continue a;else a.child.return=a,a=a.child;}if(!(a.flags&2))return a.stateNode}}
		function Wj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=Bf));else if(4!==d&&(a=a.child,null!==a))for(Wj(a,b,c),a=a.sibling;null!==a;)Wj(a,b,c),a=a.sibling;}
		function Xj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Xj(a,b,c),a=a.sibling;null!==a;)Xj(a,b,c),a=a.sibling;}var X=null,Yj=!1;function Zj(a,b,c){for(c=c.child;null!==c;)ak(a,b,c),c=c.sibling;}
		function ak(a,b,c){if(lc&&"function"===typeof lc.onCommitFiberUnmount)try{lc.onCommitFiberUnmount(kc,c);}catch(h){}switch(c.tag){case 5:U||Mj(c,b);case 6:var d=X,e=Yj;X=null;Zj(a,b,c);X=d;Yj=e;null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?a.parentNode.removeChild(c):a.removeChild(c)):X.removeChild(c.stateNode));break;case 18:null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?Kf(a.parentNode,c):1===a.nodeType&&Kf(a,c),bd(a)):Kf(X,c.stateNode));break;case 4:d=X;e=Yj;X=c.stateNode.containerInfo;Yj=!0;
		Zj(a,b,c);X=d;Yj=e;break;case 0:case 11:case 14:case 15:if(!U&&(d=c.updateQueue,null!==d&&(d=d.lastEffect,null!==d))){e=d=d.next;do{var f=e,g=f.destroy;f=f.tag;void 0!==g&&(0!==(f&2)?Nj(c,b,g):0!==(f&4)&&Nj(c,b,g));e=e.next;}while(e!==d)}Zj(a,b,c);break;case 1:if(!U&&(Mj(c,b),d=c.stateNode,"function"===typeof d.componentWillUnmount))try{d.props=c.memoizedProps,d.state=c.memoizedState,d.componentWillUnmount();}catch(h){W(c,b,h);}Zj(a,b,c);break;case 21:Zj(a,b,c);break;case 22:c.mode&1?(U=(d=U)||null!==
		c.memoizedState,Zj(a,b,c),U=d):Zj(a,b,c);break;default:Zj(a,b,c);}}function bk(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Lj);b.forEach(function(b){var d=ck.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d));});}}
		function dk(a,b){var c=b.deletions;if(null!==c)for(var d=0;d<c.length;d++){var e=c[d];try{var f=a,g=b,h=g;a:for(;null!==h;){switch(h.tag){case 5:X=h.stateNode;Yj=!1;break a;case 3:X=h.stateNode.containerInfo;Yj=!0;break a;case 4:X=h.stateNode.containerInfo;Yj=!0;break a}h=h.return;}if(null===X)throw Error(p(160));ak(f,g,e);X=null;Yj=!1;var k=e.alternate;null!==k&&(k.return=null);e.return=null;}catch(l){W(e,b,l);}}if(b.subtreeFlags&12854)for(b=b.child;null!==b;)ek(b,a),b=b.sibling;}
		function ek(a,b){var c=a.alternate,d=a.flags;switch(a.tag){case 0:case 11:case 14:case 15:dk(b,a);fk(a);if(d&4){try{Qj(3,a,a.return),Rj(3,a);}catch(t){W(a,a.return,t);}try{Qj(5,a,a.return);}catch(t){W(a,a.return,t);}}break;case 1:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);break;case 5:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);if(a.flags&32){var e=a.stateNode;try{ob(e,"");}catch(t){W(a,a.return,t);}}if(d&4&&(e=a.stateNode,null!=e)){var f=a.memoizedProps,g=null!==c?c.memoizedProps:f,h=a.type,k=a.updateQueue;
		a.updateQueue=null;if(null!==k)try{"input"===h&&"radio"===f.type&&null!=f.name&&ab(e,f);vb(h,g);var l=vb(h,f);for(g=0;g<k.length;g+=2){var m=k[g],q=k[g+1];"style"===m?sb(e,q):"dangerouslySetInnerHTML"===m?nb(e,q):"children"===m?ob(e,q):ta(e,m,q,l);}switch(h){case "input":bb(e,f);break;case "textarea":ib(e,f);break;case "select":var r=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=!!f.multiple;var y=f.value;null!=y?fb(e,!!f.multiple,y,!1):r!==!!f.multiple&&(null!=f.defaultValue?fb(e,!!f.multiple,
		f.defaultValue,!0):fb(e,!!f.multiple,f.multiple?[]:"",!1));}e[Pf]=f;}catch(t){W(a,a.return,t);}}break;case 6:dk(b,a);fk(a);if(d&4){if(null===a.stateNode)throw Error(p(162));e=a.stateNode;f=a.memoizedProps;try{e.nodeValue=f;}catch(t){W(a,a.return,t);}}break;case 3:dk(b,a);fk(a);if(d&4&&null!==c&&c.memoizedState.isDehydrated)try{bd(b.containerInfo);}catch(t){W(a,a.return,t);}break;case 4:dk(b,a);fk(a);break;case 13:dk(b,a);fk(a);e=a.child;e.flags&8192&&(f=null!==e.memoizedState,e.stateNode.isHidden=f,!f||
		null!==e.alternate&&null!==e.alternate.memoizedState||(gk=B()));d&4&&bk(a);break;case 22:m=null!==c&&null!==c.memoizedState;a.mode&1?(U=(l=U)||m,dk(b,a),U=l):dk(b,a);fk(a);if(d&8192){l=null!==a.memoizedState;if((a.stateNode.isHidden=l)&&!m&&0!==(a.mode&1))for(V=a,m=a.child;null!==m;){for(q=V=m;null!==V;){r=V;y=r.child;switch(r.tag){case 0:case 11:case 14:case 15:Qj(4,r,r.return);break;case 1:Mj(r,r.return);var n=r.stateNode;if("function"===typeof n.componentWillUnmount){d=r;c=r.return;try{b=d,n.props=
		b.memoizedProps,n.state=b.memoizedState,n.componentWillUnmount();}catch(t){W(d,c,t);}}break;case 5:Mj(r,r.return);break;case 22:if(null!==r.memoizedState){hk(q);continue}}null!==y?(y.return=r,V=y):hk(q);}m=m.sibling;}a:for(m=null,q=a;;){if(5===q.tag){if(null===m){m=q;try{e=q.stateNode,l?(f=e.style,"function"===typeof f.setProperty?f.setProperty("display","none","important"):f.display="none"):(h=q.stateNode,k=q.memoizedProps.style,g=void 0!==k&&null!==k&&k.hasOwnProperty("display")?k.display:null,h.style.display=
		rb("display",g));}catch(t){W(a,a.return,t);}}}else if(6===q.tag){if(null===m)try{q.stateNode.nodeValue=l?"":q.memoizedProps;}catch(t){W(a,a.return,t);}}else if((22!==q.tag&&23!==q.tag||null===q.memoizedState||q===a)&&null!==q.child){q.child.return=q;q=q.child;continue}if(q===a)break a;for(;null===q.sibling;){if(null===q.return||q.return===a)break a;m===q&&(m=null);q=q.return;}m===q&&(m=null);q.sibling.return=q.return;q=q.sibling;}}break;case 19:dk(b,a);fk(a);d&4&&bk(a);break;case 21:break;default:dk(b,
		a),fk(a);}}function fk(a){var b=a.flags;if(b&2){try{a:{for(var c=a.return;null!==c;){if(Uj(c)){var d=c;break a}c=c.return;}throw Error(p(160));}switch(d.tag){case 5:var e=d.stateNode;d.flags&32&&(ob(e,""),d.flags&=-33);var f=Vj(a);Xj(a,f,e);break;case 3:case 4:var g=d.stateNode.containerInfo,h=Vj(a);Wj(a,h,g);break;default:throw Error(p(161));}}catch(k){W(a,a.return,k);}a.flags&=-3;}b&4096&&(a.flags&=-4097);}function ik(a,b,c){V=a;jk(a);}
		function jk(a,b,c){for(var d=0!==(a.mode&1);null!==V;){var e=V,f=e.child;if(22===e.tag&&d){var g=null!==e.memoizedState||Kj;if(!g){var h=e.alternate,k=null!==h&&null!==h.memoizedState||U;h=Kj;var l=U;Kj=g;if((U=k)&&!l)for(V=e;null!==V;)g=V,k=g.child,22===g.tag&&null!==g.memoizedState?kk(e):null!==k?(k.return=g,V=k):kk(e);for(;null!==f;)V=f,jk(f),f=f.sibling;V=e;Kj=h;U=l;}lk(a);}else 0!==(e.subtreeFlags&8772)&&null!==f?(f.return=e,V=f):lk(a);}}
		function lk(a){for(;null!==V;){var b=V;if(0!==(b.flags&8772)){var c=b.alternate;try{if(0!==(b.flags&8772))switch(b.tag){case 0:case 11:case 15:U||Rj(5,b);break;case 1:var d=b.stateNode;if(b.flags&4&&!U)if(null===c)d.componentDidMount();else {var e=b.elementType===b.type?c.memoizedProps:Lg(b.type,c.memoizedProps);d.componentDidUpdate(e,c.memoizedState,d.__reactInternalSnapshotBeforeUpdate);}var f=b.updateQueue;null!==f&&ih(b,f,d);break;case 3:var g=b.updateQueue;if(null!==g){c=null;if(null!==b.child)switch(b.child.tag){case 5:c=
		b.child.stateNode;break;case 1:c=b.child.stateNode;}ih(b,g,c);}break;case 5:var h=b.stateNode;if(null===c&&b.flags&4){c=h;var k=b.memoizedProps;switch(b.type){case "button":case "input":case "select":case "textarea":k.autoFocus&&c.focus();break;case "img":k.src&&(c.src=k.src);}}break;case 6:break;case 4:break;case 12:break;case 13:if(null===b.memoizedState){var l=b.alternate;if(null!==l){var m=l.memoizedState;if(null!==m){var q=m.dehydrated;null!==q&&bd(q);}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;
		default:throw Error(p(163));}U||b.flags&512&&Sj(b);}catch(r){W(b,b.return,r);}}if(b===a){V=null;break}c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return;}}function hk(a){for(;null!==V;){var b=V;if(b===a){V=null;break}var c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return;}}
		function kk(a){for(;null!==V;){var b=V;try{switch(b.tag){case 0:case 11:case 15:var c=b.return;try{Rj(4,b);}catch(k){W(b,c,k);}break;case 1:var d=b.stateNode;if("function"===typeof d.componentDidMount){var e=b.return;try{d.componentDidMount();}catch(k){W(b,e,k);}}var f=b.return;try{Sj(b);}catch(k){W(b,f,k);}break;case 5:var g=b.return;try{Sj(b);}catch(k){W(b,g,k);}}}catch(k){W(b,b.return,k);}if(b===a){V=null;break}var h=b.sibling;if(null!==h){h.return=b.return;V=h;break}V=b.return;}}
		var mk=Math.ceil,nk=ua.ReactCurrentDispatcher,ok=ua.ReactCurrentOwner,pk=ua.ReactCurrentBatchConfig,K=0,R=null,Y=null,Z=0,gj=0,fj=Uf(0),T=0,qk=null,hh=0,rk=0,sk=0,tk=null,uk=null,gk=0,Hj=Infinity,vk=null,Pi=!1,Qi=null,Si=null,wk=!1,xk=null,yk=0,zk=0,Ak=null,Bk=-1,Ck=0;function L(){return 0!==(K&6)?B():-1!==Bk?Bk:Bk=B()}
		function lh(a){if(0===(a.mode&1))return 1;if(0!==(K&2)&&0!==Z)return Z&-Z;if(null!==Kg.transition)return 0===Ck&&(Ck=yc()),Ck;a=C;if(0!==a)return a;a=window.event;a=void 0===a?16:jd(a.type);return a}function mh(a,b,c,d){if(50<zk)throw zk=0,Ak=null,Error(p(185));Ac(a,c,d);if(0===(K&2)||a!==R)a===R&&(0===(K&2)&&(rk|=c),4===T&&Dk(a,Z)),Ek(a,d),1===c&&0===K&&0===(b.mode&1)&&(Hj=B()+500,fg&&jg());}
		function Ek(a,b){var c=a.callbackNode;wc(a,b);var d=uc(a,a===R?Z:0);if(0===d)null!==c&&bc(c),a.callbackNode=null,a.callbackPriority=0;else if(b=d&-d,a.callbackPriority!==b){null!=c&&bc(c);if(1===b)0===a.tag?ig(Fk.bind(null,a)):hg(Fk.bind(null,a)),Jf(function(){0===(K&6)&&jg();}),c=null;else {switch(Dc(d)){case 1:c=fc;break;case 4:c=gc;break;case 16:c=hc;break;case 536870912:c=jc;break;default:c=hc;}c=Gk(c,Hk.bind(null,a));}a.callbackPriority=b;a.callbackNode=c;}}
		function Hk(a,b){Bk=-1;Ck=0;if(0!==(K&6))throw Error(p(327));var c=a.callbackNode;if(Ik()&&a.callbackNode!==c)return null;var d=uc(a,a===R?Z:0);if(0===d)return null;if(0!==(d&30)||0!==(d&a.expiredLanes)||b)b=Jk(a,d);else {b=d;var e=K;K|=2;var f=Kk();if(R!==a||Z!==b)vk=null,Hj=B()+500,Lk(a,b);do try{Mk();break}catch(h){Nk(a,h);}while(1);Qg();nk.current=f;K=e;null!==Y?b=0:(R=null,Z=0,b=T);}if(0!==b){2===b&&(e=xc(a),0!==e&&(d=e,b=Ok(a,e)));if(1===b)throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;if(6===b)Dk(a,d);
		else {e=a.current.alternate;if(0===(d&30)&&!Pk(e)&&(b=Jk(a,d),2===b&&(f=xc(a),0!==f&&(d=f,b=Ok(a,f))),1===b))throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;a.finishedWork=e;a.finishedLanes=d;switch(b){case 0:case 1:throw Error(p(345));case 2:Qk(a,uk,vk);break;case 3:Dk(a,d);if((d&130023424)===d&&(b=gk+500-B(),10<b)){if(0!==uc(a,0))break;e=a.suspendedLanes;if((e&d)!==d){L();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),b);break}Qk(a,uk,vk);break;case 4:Dk(a,d);if((d&4194240)===
		d)break;b=a.eventTimes;for(e=-1;0<d;){var g=31-oc(d);f=1<<g;g=b[g];g>e&&(e=g);d&=~f;}d=e;d=B()-d;d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*mk(d/1960))-d;if(10<d){a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),d);break}Qk(a,uk,vk);break;case 5:Qk(a,uk,vk);break;default:throw Error(p(329));}}}Ek(a,B());return a.callbackNode===c?Hk.bind(null,a):null}
		function Ok(a,b){var c=tk;a.current.memoizedState.isDehydrated&&(Lk(a,b).flags|=256);a=Jk(a,b);2!==a&&(b=uk,uk=c,null!==b&&Gj(b));return a}function Gj(a){null===uk?uk=a:uk.push.apply(uk,a);}
		function Pk(a){for(var b=a;;){if(b.flags&16384){var c=b.updateQueue;if(null!==c&&(c=c.stores,null!==c))for(var d=0;d<c.length;d++){var e=c[d],f=e.getSnapshot;e=e.value;try{if(!He(f(),e))return !1}catch(g){return !1}}}c=b.child;if(b.subtreeFlags&16384&&null!==c)c.return=b,b=c;else {if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return !0;b=b.return;}b.sibling.return=b.return;b=b.sibling;}}return !0}
		function Dk(a,b){b&=~sk;b&=~rk;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-oc(b),d=1<<c;a[c]=-1;b&=~d;}}function Fk(a){if(0!==(K&6))throw Error(p(327));Ik();var b=uc(a,0);if(0===(b&1))return Ek(a,B()),null;var c=Jk(a,b);if(0!==a.tag&&2===c){var d=xc(a);0!==d&&(b=d,c=Ok(a,d));}if(1===c)throw c=qk,Lk(a,0),Dk(a,b),Ek(a,B()),c;if(6===c)throw Error(p(345));a.finishedWork=a.current.alternate;a.finishedLanes=b;Qk(a,uk,vk);Ek(a,B());return null}
		function Rk(a,b){var c=K;K|=1;try{return a(b)}finally{K=c,0===K&&(Hj=B()+500,fg&&jg());}}function Sk(a){null!==xk&&0===xk.tag&&0===(K&6)&&Ik();var b=K;K|=1;var c=pk.transition,d=C;try{if(pk.transition=null,C=1,a)return a()}finally{C=d,pk.transition=c,K=b,0===(K&6)&&jg();}}function Ij(){gj=fj.current;E(fj);}
		function Lk(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Gf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;wg(d);switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&$f();break;case 3:Jh();E(Wf);E(H);Oh();break;case 5:Lh(d);break;case 4:Jh();break;case 13:E(M);break;case 19:E(M);break;case 10:Rg(d.type._context);break;case 22:case 23:Ij();}c=c.return;}R=a;Y=a=wh(a.current,null);Z=gj=b;T=0;qk=null;sk=rk=hh=0;uk=tk=null;if(null!==Wg){for(b=
		0;b<Wg.length;b++)if(c=Wg[b],d=c.interleaved,null!==d){c.interleaved=null;var e=d.next,f=c.pending;if(null!==f){var g=f.next;f.next=e;d.next=g;}c.pending=d;}Wg=null;}return a}
		function Nk(a,b){do{var c=Y;try{Qg();Ph.current=ai;if(Sh){for(var d=N.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next;}Sh=!1;}Rh=0;P=O=N=null;Th=!1;Uh=0;ok.current=null;if(null===c||null===c.return){T=1;qk=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=Z;h.flags|=32768;if(null!==k&&"object"===typeof k&&"function"===typeof k.then){var l=k,m=h,q=m.tag;if(0===(m.mode&1)&&(0===q||11===q||15===q)){var r=m.alternate;r?(m.updateQueue=r.updateQueue,m.memoizedState=r.memoizedState,
		m.lanes=r.lanes):(m.updateQueue=null,m.memoizedState=null);}var y=Vi(g);if(null!==y){y.flags&=-257;Wi(y,g,h,f,b);y.mode&1&&Ti(f,l,b);b=y;k=l;var n=b.updateQueue;if(null===n){var t=new Set;t.add(k);b.updateQueue=t;}else n.add(k);break a}else {if(0===(b&1)){Ti(f,l,b);uj();break a}k=Error(p(426));}}else if(I&&h.mode&1){var J=Vi(g);if(null!==J){0===(J.flags&65536)&&(J.flags|=256);Wi(J,g,h,f,b);Jg(Ki(k,h));break a}}f=k=Ki(k,h);4!==T&&(T=2);null===tk?tk=[f]:tk.push(f);f=g;do{switch(f.tag){case 3:f.flags|=65536;
		b&=-b;f.lanes|=b;var x=Oi(f,k,b);fh(f,x);break a;case 1:h=k;var w=f.type,u=f.stateNode;if(0===(f.flags&128)&&("function"===typeof w.getDerivedStateFromError||null!==u&&"function"===typeof u.componentDidCatch&&(null===Si||!Si.has(u)))){f.flags|=65536;b&=-b;f.lanes|=b;var F=Ri(f,h,b);fh(f,F);break a}}f=f.return;}while(null!==f)}Tk(c);}catch(na){b=na;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}function Kk(){var a=nk.current;nk.current=ai;return null===a?ai:a}
		function uj(){if(0===T||3===T||2===T)T=4;null===R||0===(hh&268435455)&&0===(rk&268435455)||Dk(R,Z);}function Jk(a,b){var c=K;K|=2;var d=Kk();if(R!==a||Z!==b)vk=null,Lk(a,b);do try{Uk();break}catch(e){Nk(a,e);}while(1);Qg();K=c;nk.current=d;if(null!==Y)throw Error(p(261));R=null;Z=0;return T}function Uk(){for(;null!==Y;)Vk(Y);}function Mk(){for(;null!==Y&&!cc();)Vk(Y);}function Vk(a){var b=Wk(a.alternate,a,gj);a.memoizedProps=a.pendingProps;null===b?Tk(a):Y=b;ok.current=null;}
		function Tk(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&32768)){if(c=Fj(c,b,gj),null!==c){Y=c;return}}else {c=Jj(c,b);if(null!==c){c.flags&=32767;Y=c;return}if(null!==a)a.flags|=32768,a.subtreeFlags=0,a.deletions=null;else {T=6;Y=null;return}}b=b.sibling;if(null!==b){Y=b;return}Y=b=a;}while(null!==b);0===T&&(T=5);}function Qk(a,b,c){var d=C,e=pk.transition;try{pk.transition=null,C=1,Xk(a,b,c,d);}finally{pk.transition=e,C=d;}return null}
		function Xk(a,b,c,d){do Ik();while(null!==xk);if(0!==(K&6))throw Error(p(327));c=a.finishedWork;var e=a.finishedLanes;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(p(177));a.callbackNode=null;a.callbackPriority=0;var f=c.lanes|c.childLanes;Bc(a,f);a===R&&(Y=R=null,Z=0);0===(c.subtreeFlags&2064)&&0===(c.flags&2064)||wk||(wk=!0,Gk(hc,function(){Ik();return null}));f=0!==(c.flags&15990);if(0!==(c.subtreeFlags&15990)||f){f=pk.transition;pk.transition=null;
		var g=C;C=1;var h=K;K|=4;ok.current=null;Pj(a,c);ek(c,a);Oe(Df);dd=!!Cf;Df=Cf=null;a.current=c;ik(c);dc();K=h;C=g;pk.transition=f;}else a.current=c;wk&&(wk=!1,xk=a,yk=e);f=a.pendingLanes;0===f&&(Si=null);mc(c.stateNode);Ek(a,B());if(null!==b)for(d=a.onRecoverableError,c=0;c<b.length;c++)e=b[c],d(e.value,{componentStack:e.stack,digest:e.digest});if(Pi)throw Pi=!1,a=Qi,Qi=null,a;0!==(yk&1)&&0!==a.tag&&Ik();f=a.pendingLanes;0!==(f&1)?a===Ak?zk++:(zk=0,Ak=a):zk=0;jg();return null}
		function Ik(){if(null!==xk){var a=Dc(yk),b=pk.transition,c=C;try{pk.transition=null;C=16>a?16:a;if(null===xk)var d=!1;else {a=xk;xk=null;yk=0;if(0!==(K&6))throw Error(p(331));var e=K;K|=4;for(V=a.current;null!==V;){var f=V,g=f.child;if(0!==(V.flags&16)){var h=f.deletions;if(null!==h){for(var k=0;k<h.length;k++){var l=h[k];for(V=l;null!==V;){var m=V;switch(m.tag){case 0:case 11:case 15:Qj(8,m,f);}var q=m.child;if(null!==q)q.return=m,V=q;else for(;null!==V;){m=V;var r=m.sibling,y=m.return;Tj(m);if(m===
		l){V=null;break}if(null!==r){r.return=y;V=r;break}V=y;}}}var n=f.alternate;if(null!==n){var t=n.child;if(null!==t){n.child=null;do{var J=t.sibling;t.sibling=null;t=J;}while(null!==t)}}V=f;}}if(0!==(f.subtreeFlags&2064)&&null!==g)g.return=f,V=g;else b:for(;null!==V;){f=V;if(0!==(f.flags&2048))switch(f.tag){case 0:case 11:case 15:Qj(9,f,f.return);}var x=f.sibling;if(null!==x){x.return=f.return;V=x;break b}V=f.return;}}var w=a.current;for(V=w;null!==V;){g=V;var u=g.child;if(0!==(g.subtreeFlags&2064)&&null!==
		u)u.return=g,V=u;else b:for(g=w;null!==V;){h=V;if(0!==(h.flags&2048))try{switch(h.tag){case 0:case 11:case 15:Rj(9,h);}}catch(na){W(h,h.return,na);}if(h===g){V=null;break b}var F=h.sibling;if(null!==F){F.return=h.return;V=F;break b}V=h.return;}}K=e;jg();if(lc&&"function"===typeof lc.onPostCommitFiberRoot)try{lc.onPostCommitFiberRoot(kc,a);}catch(na){}d=!0;}return d}finally{C=c,pk.transition=b;}}return !1}function Yk(a,b,c){b=Ki(c,b);b=Oi(a,b,1);a=dh(a,b,1);b=L();null!==a&&(Ac(a,1,b),Ek(a,b));}
		function W(a,b,c){if(3===a.tag)Yk(a,a,c);else for(;null!==b;){if(3===b.tag){Yk(b,a,c);break}else if(1===b.tag){var d=b.stateNode;if("function"===typeof b.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===Si||!Si.has(d))){a=Ki(c,a);a=Ri(b,a,1);b=dh(b,a,1);a=L();null!==b&&(Ac(b,1,a),Ek(b,a));break}}b=b.return;}}
		function Ui(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=L();a.pingedLanes|=a.suspendedLanes&c;R===a&&(Z&c)===c&&(4===T||3===T&&(Z&130023424)===Z&&500>B()-gk?Lk(a,0):sk|=c);Ek(a,b);}function Zk(a,b){0===b&&(0===(a.mode&1)?b=1:(b=sc,sc<<=1,0===(sc&130023424)&&(sc=4194304)));var c=L();a=Zg(a,b);null!==a&&(Ac(a,b,c),Ek(a,c));}function vj(a){var b=a.memoizedState,c=0;null!==b&&(c=b.retryLane);Zk(a,c);}
		function ck(a,b){var c=0;switch(a.tag){case 13:var d=a.stateNode;var e=a.memoizedState;null!==e&&(c=e.retryLane);break;case 19:d=a.stateNode;break;default:throw Error(p(314));}null!==d&&d.delete(b);Zk(a,c);}var Wk;
		Wk=function(a,b,c){if(null!==a)if(a.memoizedProps!==b.pendingProps||Wf.current)Ug=!0;else {if(0===(a.lanes&c)&&0===(b.flags&128))return Ug=!1,zj(a,b,c);Ug=0!==(a.flags&131072)?!0:!1;}else Ug=!1,I&&0!==(b.flags&1048576)&&ug(b,ng,b.index);b.lanes=0;switch(b.tag){case 2:var d=b.type;jj(a,b);a=b.pendingProps;var e=Yf(b,H.current);Tg(b,c);e=Xh(null,b,d,a,e,c);var f=bi();b.flags|=1;"object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof?(b.tag=1,b.memoizedState=null,b.updateQueue=
		null,Zf(d)?(f=!0,cg(b)):f=!1,b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,ah(b),e.updater=nh,b.stateNode=e,e._reactInternals=b,rh(b,d,a,c),b=kj(null,b,d,!0,f,c)):(b.tag=0,I&&f&&vg(b),Yi(null,b,e,c),b=b.child);return b;case 16:d=b.elementType;a:{jj(a,b);a=b.pendingProps;e=d._init;d=e(d._payload);b.type=d;e=b.tag=$k(d);a=Lg(d,a);switch(e){case 0:b=dj(null,b,d,a,c);break a;case 1:b=ij(null,b,d,a,c);break a;case 11:b=Zi(null,b,d,a,c);break a;case 14:b=aj(null,b,d,Lg(d.type,a),c);break a}throw Error(p(306,
		d,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),dj(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),ij(a,b,d,e,c);case 3:a:{lj(b);if(null===a)throw Error(p(387));d=b.pendingProps;f=b.memoizedState;e=f.element;bh(a,b);gh(b,d,null,c);var g=b.memoizedState;d=g.element;if(f.isDehydrated)if(f={element:d,isDehydrated:!1,cache:g.cache,pendingSuspenseBoundaries:g.pendingSuspenseBoundaries,transitions:g.transitions},b.updateQueue.baseState=
		f,b.memoizedState=f,b.flags&256){e=Ki(Error(p(423)),b);b=mj(a,b,d,c,e);break a}else if(d!==e){e=Ki(Error(p(424)),b);b=mj(a,b,d,c,e);break a}else for(yg=Lf(b.stateNode.containerInfo.firstChild),xg=b,I=!0,zg=null,c=Ch(b,null,d,c),b.child=c;c;)c.flags=c.flags&-3|4096,c=c.sibling;else {Ig();if(d===e){b=$i(a,b,c);break a}Yi(a,b,d,c);}b=b.child;}return b;case 5:return Kh(b),null===a&&Eg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ef(d,e)?g=null:null!==f&&Ef(d,f)&&(b.flags|=32),
		hj(a,b),Yi(a,b,g,c),b.child;case 6:return null===a&&Eg(b),null;case 13:return pj(a,b,c);case 4:return Ih(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Bh(b,null,d,c):Yi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),Zi(a,b,d,e,c);case 7:return Yi(a,b,b.pendingProps,c),b.child;case 8:return Yi(a,b,b.pendingProps.children,c),b.child;case 12:return Yi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;f=b.memoizedProps;
		g=e.value;G(Mg,d._currentValue);d._currentValue=g;if(null!==f)if(He(f.value,g)){if(f.children===e.children&&!Wf.current){b=$i(a,b,c);break a}}else for(f=b.child,null!==f&&(f.return=b);null!==f;){var h=f.dependencies;if(null!==h){g=f.child;for(var k=h.firstContext;null!==k;){if(k.context===d){if(1===f.tag){k=ch(-1,c&-c);k.tag=2;var l=f.updateQueue;if(null!==l){l=l.shared;var m=l.pending;null===m?k.next=k:(k.next=m.next,m.next=k);l.pending=k;}}f.lanes|=c;k=f.alternate;null!==k&&(k.lanes|=c);Sg(f.return,
		c,b);h.lanes|=c;break}k=k.next;}}else if(10===f.tag)g=f.type===b.type?null:f.child;else if(18===f.tag){g=f.return;if(null===g)throw Error(p(341));g.lanes|=c;h=g.alternate;null!==h&&(h.lanes|=c);Sg(g,c,b);g=f.sibling;}else g=f.child;if(null!==g)g.return=f;else for(g=f;null!==g;){if(g===b){g=null;break}f=g.sibling;if(null!==f){f.return=g.return;g=f;break}g=g.return;}f=g;}Yi(a,b,e.children,c);b=b.child;}return b;case 9:return e=b.type,d=b.pendingProps.children,Tg(b,c),e=Vg(e),d=d(e),b.flags|=1,Yi(a,b,d,c),
		b.child;case 14:return d=b.type,e=Lg(d,b.pendingProps),e=Lg(d.type,e),aj(a,b,d,e,c);case 15:return cj(a,b,b.type,b.pendingProps,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),jj(a,b),b.tag=1,Zf(d)?(a=!0,cg(b)):a=!1,Tg(b,c),ph(b,d,e),rh(b,d,e,c),kj(null,b,d,!0,a,c);case 19:return yj(a,b,c);case 22:return ej(a,b,c)}throw Error(p(156,b.tag));};function Gk(a,b){return ac(a,b)}
		function al(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.subtreeFlags=this.flags=0;this.deletions=null;this.childLanes=this.lanes=0;this.alternate=null;}function Bg(a,b,c,d){return new al(a,b,c,d)}function bj(a){a=a.prototype;return !(!a||!a.isReactComponent)}
		function $k(a){if("function"===typeof a)return bj(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Da)return 11;if(a===Ga)return 14}return 2}
		function wh(a,b){var c=a.alternate;null===c?(c=Bg(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.subtreeFlags=0,c.deletions=null);c.flags=a.flags&14680064;c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};
		c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}
		function yh(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)bj(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ya:return Ah(c.children,e,f,b);case za:g=8;e|=8;break;case Aa:return a=Bg(12,c,b,e|2),a.elementType=Aa,a.lanes=f,a;case Ea:return a=Bg(13,c,b,e),a.elementType=Ea,a.lanes=f,a;case Fa:return a=Bg(19,c,b,e),a.elementType=Fa,a.lanes=f,a;case Ia:return qj(c,e,f,b);default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case Ba:g=10;break a;case Ca:g=9;break a;case Da:g=11;
		break a;case Ga:g=14;break a;case Ha:g=16;d=null;break a}throw Error(p(130,null==a?a:typeof a,""));}b=Bg(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Ah(a,b,c,d){a=Bg(7,a,d,b);a.lanes=c;return a}function qj(a,b,c,d){a=Bg(22,a,d,b);a.elementType=Ia;a.lanes=c;a.stateNode={isHidden:!1};return a}function xh(a,b,c){a=Bg(6,a,null,b);a.lanes=c;return a}
		function zh(a,b,c){b=Bg(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
		function bl(a,b,c,d,e){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.callbackNode=this.pendingContext=this.context=null;this.callbackPriority=0;this.eventTimes=zc(0);this.expirationTimes=zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=zc(0);this.identifierPrefix=d;this.onRecoverableError=e;this.mutableSourceEagerHydrationData=
		null;}function cl(a,b,c,d,e,f,g,h,k){a=new bl(a,b,c,h,k);1===b?(b=1,!0===f&&(b|=8)):b=0;f=Bg(3,null,null,b);a.current=f;f.stateNode=a;f.memoizedState={element:d,isDehydrated:c,cache:null,transitions:null,pendingSuspenseBoundaries:null};ah(f);return a}function dl(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return {$$typeof:wa,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
		function el(a){if(!a)return Vf;a=a._reactInternals;a:{if(Vb(a)!==a||1!==a.tag)throw Error(p(170));var b=a;do{switch(b.tag){case 3:b=b.stateNode.context;break a;case 1:if(Zf(b.type)){b=b.stateNode.__reactInternalMemoizedMergedChildContext;break a}}b=b.return;}while(null!==b);throw Error(p(171));}if(1===a.tag){var c=a.type;if(Zf(c))return bg(a,c,b)}return b}
		function fl(a,b,c,d,e,f,g,h,k){a=cl(c,d,!0,a,e,f,g,h,k);a.context=el(null);c=a.current;d=L();e=lh(c);f=ch(d,e);f.callback=void 0!==b&&null!==b?b:null;dh(c,f,e);a.current.lanes=e;Ac(a,e,d);Ek(a,d);return a}function gl(a,b,c,d){var e=b.current,f=L(),g=lh(e);c=el(c);null===b.context?b.context=c:b.pendingContext=c;b=ch(f,g);b.payload={element:a};d=void 0===d?null:d;null!==d&&(b.callback=d);a=dh(e,b,g);null!==a&&(mh(a,e,g,f),eh(a,e,g));return g}
		function hl(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function il(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b;}}function jl(a,b){il(a,b);(a=a.alternate)&&il(a,b);}function kl(){return null}var ll="function"===typeof reportError?reportError:function(a){console.error(a);};function ml(a){this._internalRoot=a;}
		nl.prototype.render=ml.prototype.render=function(a){var b=this._internalRoot;if(null===b)throw Error(p(409));gl(a,b,null,null);};nl.prototype.unmount=ml.prototype.unmount=function(){var a=this._internalRoot;if(null!==a){this._internalRoot=null;var b=a.containerInfo;Sk(function(){gl(null,a,null,null);});b[uf]=null;}};function nl(a){this._internalRoot=a;}
		nl.prototype.unstable_scheduleHydration=function(a){if(a){var b=Hc();a={blockedOn:null,target:a,priority:b};for(var c=0;c<Qc.length&&0!==b&&b<Qc[c].priority;c++);Qc.splice(c,0,a);0===c&&Vc(a);}};function ol(a){return !(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType)}function pl(a){return !(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}function ql(){}
		function rl(a,b,c,d,e){if(e){if("function"===typeof d){var f=d;d=function(){var a=hl(g);f.call(a);};}var g=fl(b,d,a,0,null,!1,!1,"",ql);a._reactRootContainer=g;a[uf]=g.current;sf(8===a.nodeType?a.parentNode:a);Sk();return g}for(;e=a.lastChild;)a.removeChild(e);if("function"===typeof d){var h=d;d=function(){var a=hl(k);h.call(a);};}var k=cl(a,0,!1,null,null,!1,!1,"",ql);a._reactRootContainer=k;a[uf]=k.current;sf(8===a.nodeType?a.parentNode:a);Sk(function(){gl(b,k,c,d);});return k}
		function sl(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f;if("function"===typeof e){var h=e;e=function(){var a=hl(g);h.call(a);};}gl(b,g,a,e);}else g=rl(c,b,a,e,d);return hl(g)}Ec=function(a){switch(a.tag){case 3:var b=a.stateNode;if(b.current.memoizedState.isDehydrated){var c=tc(b.pendingLanes);0!==c&&(Cc(b,c|1),Ek(b,B()),0===(K&6)&&(Hj=B()+500,jg()));}break;case 13:Sk(function(){var b=Zg(a,1);if(null!==b){var c=L();mh(b,a,1,c);}}),jl(a,1);}};
		Fc=function(a){if(13===a.tag){var b=Zg(a,134217728);if(null!==b){var c=L();mh(b,a,134217728,c);}jl(a,134217728);}};Gc=function(a){if(13===a.tag){var b=lh(a),c=Zg(a,b);if(null!==c){var d=L();mh(c,a,b,d);}jl(a,b);}};Hc=function(){return C};Ic=function(a,b){var c=C;try{return C=a,b()}finally{C=c;}};
		yb=function(a,b,c){switch(b){case "input":bb(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(p(90));Wa(d);bb(d,e);}}}break;case "textarea":ib(a,c);break;case "select":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1);}};Gb=Rk;Hb=Sk;
		var tl={usingClientEntryPoint:!1,Events:[Cb,ue,Db,Eb,Fb,Rk]},ul={findFiberByHostInstance:Wc,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"};
		var vl={bundleType:ul.bundleType,version:ul.version,rendererPackageName:ul.rendererPackageName,rendererConfig:ul.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ua.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=Zb(a);return null===a?null:a.stateNode},findFiberByHostInstance:ul.findFiberByHostInstance||
		kl,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var wl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!wl.isDisabled&&wl.supportsFiber)try{kc=wl.inject(vl),lc=wl;}catch(a){}}reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tl;
		reactDom_production_min.createPortal=function(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ol(b))throw Error(p(200));return dl(a,b,null,c)};reactDom_production_min.createRoot=function(a,b){if(!ol(a))throw Error(p(299));var c=!1,d="",e=ll;null!==b&&void 0!==b&&(!0===b.unstable_strictMode&&(c=!0),void 0!==b.identifierPrefix&&(d=b.identifierPrefix),void 0!==b.onRecoverableError&&(e=b.onRecoverableError));b=cl(a,1,!1,null,null,c,!1,d,e);a[uf]=b.current;sf(8===a.nodeType?a.parentNode:a);return new ml(b)};
		reactDom_production_min.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if("function"===typeof a.render)throw Error(p(188));a=Object.keys(a).join(",");throw Error(p(268,a));}a=Zb(b);a=null===a?null:a.stateNode;return a};reactDom_production_min.flushSync=function(a){return Sk(a)};reactDom_production_min.hydrate=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!0,c)};
		reactDom_production_min.hydrateRoot=function(a,b,c){if(!ol(a))throw Error(p(405));var d=null!=c&&c.hydratedSources||null,e=!1,f="",g=ll;null!==c&&void 0!==c&&(!0===c.unstable_strictMode&&(e=!0),void 0!==c.identifierPrefix&&(f=c.identifierPrefix),void 0!==c.onRecoverableError&&(g=c.onRecoverableError));b=fl(b,null,a,1,null!=c?c:null,e,!1,f,g);a[uf]=b.current;sf(a);if(d)for(a=0;a<d.length;a++)c=d[a],e=c._getVersion,e=e(c._source),null==b.mutableSourceEagerHydrationData?b.mutableSourceEagerHydrationData=[c,e]:b.mutableSourceEagerHydrationData.push(c,
		e);return new nl(b)};reactDom_production_min.render=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!1,c)};reactDom_production_min.unmountComponentAtNode=function(a){if(!pl(a))throw Error(p(40));return a._reactRootContainer?(Sk(function(){sl(null,null,a,!1,function(){a._reactRootContainer=null;a[uf]=null;});}),!0):!1};reactDom_production_min.unstable_batchedUpdates=Rk;
		reactDom_production_min.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!pl(c))throw Error(p(200));if(null==a||void 0===a._reactInternals)throw Error(p(38));return sl(a,b,c,!1,d)};reactDom_production_min.version="18.2.0-next-9e3b772b8-20220608";
		return reactDom_production_min;
	}

	var reactDom_development = {};

	/**
	 * @license React
	 * react-dom.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactDom_development;

	function requireReactDom_development () {
		if (hasRequiredReactDom_development) return reactDom_development;
		hasRequiredReactDom_development = 1;

		if (process.env.NODE_ENV !== "production") {
		  (function() {

		/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		if (
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
		    'function'
		) {
		  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
		}
		          var React = reactExports;
		var Scheduler = requireScheduler();

		var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

		var suppressWarning = false;
		function setSuppressWarning(newSuppressWarning) {
		  {
		    suppressWarning = newSuppressWarning;
		  }
		} // In DEV, calls to console.warn and console.error get replaced
		// by calls to these methods by a Babel plugin.
		//
		// In PROD (or in packages without access to React internals),
		// they are left as they are instead.

		function warn(format) {
		  {
		    if (!suppressWarning) {
		      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		        args[_key - 1] = arguments[_key];
		      }

		      printWarning('warn', format, args);
		    }
		  }
		}
		function error(format) {
		  {
		    if (!suppressWarning) {
		      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
		        args[_key2 - 1] = arguments[_key2];
		      }

		      printWarning('error', format, args);
		    }
		  }
		}

		function printWarning(level, format, args) {
		  // When changing this logic, you might want to also
		  // update consoleWithStackDev.www.js as well.
		  {
		    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
		    var stack = ReactDebugCurrentFrame.getStackAddendum();

		    if (stack !== '') {
		      format += '%s';
		      args = args.concat([stack]);
		    } // eslint-disable-next-line react-internal/safe-string-coercion


		    var argsWithFormat = args.map(function (item) {
		      return String(item);
		    }); // Careful: RN currently depends on this prefix

		    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
		    // breaks IE9: https://github.com/facebook/react/issues/13610
		    // eslint-disable-next-line react-internal/no-production-logging

		    Function.prototype.apply.call(console[level], console, argsWithFormat);
		  }
		}

		var FunctionComponent = 0;
		var ClassComponent = 1;
		var IndeterminateComponent = 2; // Before we know whether it is function or class

		var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

		var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

		var HostComponent = 5;
		var HostText = 6;
		var Fragment = 7;
		var Mode = 8;
		var ContextConsumer = 9;
		var ContextProvider = 10;
		var ForwardRef = 11;
		var Profiler = 12;
		var SuspenseComponent = 13;
		var MemoComponent = 14;
		var SimpleMemoComponent = 15;
		var LazyComponent = 16;
		var IncompleteClassComponent = 17;
		var DehydratedFragment = 18;
		var SuspenseListComponent = 19;
		var ScopeComponent = 21;
		var OffscreenComponent = 22;
		var LegacyHiddenComponent = 23;
		var CacheComponent = 24;
		var TracingMarkerComponent = 25;

		// -----------------------------------------------------------------------------

		var enableClientRenderFallbackOnTextMismatch = true; // TODO: Need to review this code one more time before landing
		// the react-reconciler package.

		var enableNewReconciler = false; // Support legacy Primer support on internal FB www

		var enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.

		var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber

		var enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz
		// React DOM Chopping Block
		//
		// Similar to main Chopping Block but only flags related to React DOM. These are
		// grouped because we will likely batch all of them into a single major release.
		// -----------------------------------------------------------------------------
		// Disable support for comment nodes as React DOM containers. Already disabled
		// in open source, but www codebase still relies on it. Need to remove.

		var disableCommentsAsDOMContainers = true; // Disable javascript: URL strings in href for XSS protection.
		// and client rendering, mostly to allow JSX attributes to apply to the custom
		// element's object properties instead of only HTML attributes.
		// https://github.com/facebook/react/issues/11347

		var enableCustomElementPropertySupport = false; // Disables children for <textarea> elements
		var warnAboutStringRefs = false; // -----------------------------------------------------------------------------
		// Debugging and DevTools
		// -----------------------------------------------------------------------------
		// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,
		// for an experimental timeline tool.

		var enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState

		var enableProfilerTimer = true; // Record durations for commit and passive effects phases.

		var enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an "update" and a "cascading-update".

		var allNativeEvents = new Set();
		/**
		 * Mapping from registration name to event name
		 */


		var registrationNameDependencies = {};
		/**
		 * Mapping from lowercase registration names to the properly cased version,
		 * used to warn in the case of missing event handlers. Available
		 * only in true.
		 * @type {Object}
		 */

		var possibleRegistrationNames =  {} ; // Trust the developer to only use possibleRegistrationNames in true

		function registerTwoPhaseEvent(registrationName, dependencies) {
		  registerDirectEvent(registrationName, dependencies);
		  registerDirectEvent(registrationName + 'Capture', dependencies);
		}
		function registerDirectEvent(registrationName, dependencies) {
		  {
		    if (registrationNameDependencies[registrationName]) {
		      error('EventRegistry: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);
		    }
		  }

		  registrationNameDependencies[registrationName] = dependencies;

		  {
		    var lowerCasedName = registrationName.toLowerCase();
		    possibleRegistrationNames[lowerCasedName] = registrationName;

		    if (registrationName === 'onDoubleClick') {
		      possibleRegistrationNames.ondblclick = registrationName;
		    }
		  }

		  for (var i = 0; i < dependencies.length; i++) {
		    allNativeEvents.add(dependencies[i]);
		  }
		}

		var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

		var hasOwnProperty = Object.prototype.hasOwnProperty;

		/*
		 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
		 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
		 *
		 * The functions in this module will throw an easier-to-understand,
		 * easier-to-debug exception with a clear errors message message explaining the
		 * problem. (Instead of a confusing exception thrown inside the implementation
		 * of the `value` object).
		 */
		// $FlowFixMe only called in DEV, so void return is not possible.
		function typeName(value) {
		  {
		    // toStringTag is needed for namespaced types like Temporal.Instant
		    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
		    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
		    return type;
		  }
		} // $FlowFixMe only called in DEV, so void return is not possible.


		function willCoercionThrow(value) {
		  {
		    try {
		      testStringCoercion(value);
		      return false;
		    } catch (e) {
		      return true;
		    }
		  }
		}

		function testStringCoercion(value) {
		  // If you ended up here by following an exception call stack, here's what's
		  // happened: you supplied an object or symbol value to React (as a prop, key,
		  // DOM attribute, CSS property, string ref, etc.) and when React tried to
		  // coerce it to a string using `'' + value`, an exception was thrown.
		  //
		  // The most common types that will cause this exception are `Symbol` instances
		  // and Temporal objects like `Temporal.Instant`. But any object that has a
		  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
		  // exception. (Library authors do this to prevent users from using built-in
		  // numeric operators like `+` or comparison operators like `>=` because custom
		  // methods are needed to perform accurate arithmetic or comparison.)
		  //
		  // To fix the problem, coerce this object or symbol value to a string before
		  // passing it to React. The most reliable way is usually `String(value)`.
		  //
		  // To find which value is throwing, check the browser or debugger console.
		  // Before this exception was thrown, there should be `console.error` output
		  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
		  // problem and how that type was used: key, atrribute, input value prop, etc.
		  // In most cases, this console output also shows the component and its
		  // ancestor components where the exception happened.
		  //
		  // eslint-disable-next-line react-internal/safe-string-coercion
		  return '' + value;
		}

		function checkAttributeStringCoercion(value, attributeName) {
		  {
		    if (willCoercionThrow(value)) {
		      error('The provided `%s` attribute is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', attributeName, typeName(value));

		      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
		    }
		  }
		}
		function checkKeyStringCoercion(value) {
		  {
		    if (willCoercionThrow(value)) {
		      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

		      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
		    }
		  }
		}
		function checkPropStringCoercion(value, propName) {
		  {
		    if (willCoercionThrow(value)) {
		      error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));

		      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
		    }
		  }
		}
		function checkCSSPropertyStringCoercion(value, propName) {
		  {
		    if (willCoercionThrow(value)) {
		      error('The provided `%s` CSS property is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));

		      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
		    }
		  }
		}
		function checkHtmlStringCoercion(value) {
		  {
		    if (willCoercionThrow(value)) {
		      error('The provided HTML markup uses a value of unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

		      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
		    }
		  }
		}
		function checkFormFieldValueStringCoercion(value) {
		  {
		    if (willCoercionThrow(value)) {
		      error('Form field values (value, checked, defaultValue, or defaultChecked props)' + ' must be strings, not %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

		      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
		    }
		  }
		}

		// A reserved attribute.
		// It is handled by React separately and shouldn't be written to the DOM.
		var RESERVED = 0; // A simple string attribute.
		// Attributes that aren't in the filter are presumed to have this type.

		var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
		// "enumerated" attributes with "true" and "false" as possible values.
		// When true, it should be set to a "true" string.
		// When false, it should be set to a "false" string.

		var BOOLEANISH_STRING = 2; // A real boolean attribute.
		// When true, it should be present (set either to an empty string or its name).
		// When false, it should be omitted.

		var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
		// When true, it should be present (set either to an empty string or its name).
		// When false, it should be omitted.
		// For any other value, should be present with that value.

		var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
		// When falsy, it should be removed.

		var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
		// When falsy, it should be removed.

		var POSITIVE_NUMERIC = 6;

		/* eslint-disable max-len */
		var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
		/* eslint-enable max-len */

		var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
		var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
		var illegalAttributeNameCache = {};
		var validatedAttributeNameCache = {};
		function isAttributeNameSafe(attributeName) {
		  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
		    return true;
		  }

		  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
		    return false;
		  }

		  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
		    validatedAttributeNameCache[attributeName] = true;
		    return true;
		  }

		  illegalAttributeNameCache[attributeName] = true;

		  {
		    error('Invalid attribute name: `%s`', attributeName);
		  }

		  return false;
		}
		function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
		  if (propertyInfo !== null) {
		    return propertyInfo.type === RESERVED;
		  }

		  if (isCustomComponentTag) {
		    return false;
		  }

		  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
		    return true;
		  }

		  return false;
		}
		function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
		  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
		    return false;
		  }

		  switch (typeof value) {
		    case 'function': // $FlowIssue symbol is perfectly valid here

		    case 'symbol':
		      // eslint-disable-line
		      return true;

		    case 'boolean':
		      {
		        if (isCustomComponentTag) {
		          return false;
		        }

		        if (propertyInfo !== null) {
		          return !propertyInfo.acceptsBooleans;
		        } else {
		          var prefix = name.toLowerCase().slice(0, 5);
		          return prefix !== 'data-' && prefix !== 'aria-';
		        }
		      }

		    default:
		      return false;
		  }
		}
		function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
		  if (value === null || typeof value === 'undefined') {
		    return true;
		  }

		  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
		    return true;
		  }

		  if (isCustomComponentTag) {

		    return false;
		  }

		  if (propertyInfo !== null) {

		    switch (propertyInfo.type) {
		      case BOOLEAN:
		        return !value;

		      case OVERLOADED_BOOLEAN:
		        return value === false;

		      case NUMERIC:
		        return isNaN(value);

		      case POSITIVE_NUMERIC:
		        return isNaN(value) || value < 1;
		    }
		  }

		  return false;
		}
		function getPropertyInfo(name) {
		  return properties.hasOwnProperty(name) ? properties[name] : null;
		}

		function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
		  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
		  this.attributeName = attributeName;
		  this.attributeNamespace = attributeNamespace;
		  this.mustUseProperty = mustUseProperty;
		  this.propertyName = name;
		  this.type = type;
		  this.sanitizeURL = sanitizeURL;
		  this.removeEmptyString = removeEmptyString;
		} // When adding attributes to this list, be sure to also add them to
		// the `possibleStandardNames` module to ensure casing and incorrect
		// name warnings.


		var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

		var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
		// elements (not just inputs). Now that ReactDOMInput assigns to the
		// defaultValue property -- do we need this?
		'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];

		reservedProps.forEach(function (name) {
		  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
		  name, // attributeName
		  null, // attributeNamespace
		  false, // sanitizeURL
		  false);
		}); // A few React string attributes have a different name.
		// This is a mapping from React prop names to the attribute names.

		[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
		  var name = _ref[0],
		      attributeName = _ref[1];
		  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
		  attributeName, // attributeName
		  null, // attributeNamespace
		  false, // sanitizeURL
		  false);
		}); // These are "enumerated" HTML attributes that accept "true" and "false".
		// In React, we let users pass `true` and `false` even though technically
		// these aren't boolean attributes (they are coerced to strings).

		['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
		  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
		  name.toLowerCase(), // attributeName
		  null, // attributeNamespace
		  false, // sanitizeURL
		  false);
		}); // These are "enumerated" SVG attributes that accept "true" and "false".
		// In React, we let users pass `true` and `false` even though technically
		// these aren't boolean attributes (they are coerced to strings).
		// Since these are SVG attributes, their attribute names are case-sensitive.

		['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
		  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
		  name, // attributeName
		  null, // attributeNamespace
		  false, // sanitizeURL
		  false);
		}); // These are HTML boolean attributes.

		['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
		// on the client side because the browsers are inconsistent. Instead we call focus().
		'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
		'itemScope'].forEach(function (name) {
		  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
		  name.toLowerCase(), // attributeName
		  null, // attributeNamespace
		  false, // sanitizeURL
		  false);
		}); // These are the few React props that we set as DOM properties
		// rather than attributes. These are all booleans.

		['checked', // Note: `option.selected` is not updated if `select.multiple` is
		// disabled with `removeAttribute`. We have special logic for handling this.
		'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,
		// you'll need to set attributeName to name.toLowerCase()
		// instead in the assignment below.
		].forEach(function (name) {
		  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
		  name, // attributeName
		  null, // attributeNamespace
		  false, // sanitizeURL
		  false);
		}); // These are HTML attributes that are "overloaded booleans": they behave like
		// booleans, but can also accept a string value.

		['capture', 'download' // NOTE: if you add a camelCased prop to this list,
		// you'll need to set attributeName to name.toLowerCase()
		// instead in the assignment below.
		].forEach(function (name) {
		  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
		  name, // attributeName
		  null, // attributeNamespace
		  false, // sanitizeURL
		  false);
		}); // These are HTML attributes that must be positive numbers.

		['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,
		// you'll need to set attributeName to name.toLowerCase()
		// instead in the assignment below.
		].forEach(function (name) {
		  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
		  name, // attributeName
		  null, // attributeNamespace
		  false, // sanitizeURL
		  false);
		}); // These are HTML attributes that must be numbers.

		['rowSpan', 'start'].forEach(function (name) {
		  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
		  name.toLowerCase(), // attributeName
		  null, // attributeNamespace
		  false, // sanitizeURL
		  false);
		});
		var CAMELIZE = /[\-\:]([a-z])/g;

		var capitalize = function (token) {
		  return token[1].toUpperCase();
		}; // This is a list of all SVG attributes that need special casing, namespacing,
		// or boolean value assignment. Regular attributes that just accept strings
		// and have the same names are omitted, just like in the HTML attribute filter.
		// Some of these attributes can be hard to find. This list was created by
		// scraping the MDN documentation.


		['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,
		// you'll need to set attributeName to name.toLowerCase()
		// instead in the assignment below.
		].forEach(function (attributeName) {
		  var name = attributeName.replace(CAMELIZE, capitalize);
		  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
		  attributeName, null, // attributeNamespace
		  false, // sanitizeURL
		  false);
		}); // String SVG attributes with the xlink namespace.

		['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,
		// you'll need to set attributeName to name.toLowerCase()
		// instead in the assignment below.
		].forEach(function (attributeName) {
		  var name = attributeName.replace(CAMELIZE, capitalize);
		  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
		  attributeName, 'http://www.w3.org/1999/xlink', false, // sanitizeURL
		  false);
		}); // String SVG attributes with the xml namespace.

		['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,
		// you'll need to set attributeName to name.toLowerCase()
		// instead in the assignment below.
		].forEach(function (attributeName) {
		  var name = attributeName.replace(CAMELIZE, capitalize);
		  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
		  attributeName, 'http://www.w3.org/XML/1998/namespace', false, // sanitizeURL
		  false);
		}); // These attribute exists both in HTML and SVG.
		// The attribute name is case-sensitive in SVG so we can't just use
		// the React name like we do for attributes that exist only in HTML.

		['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
		  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
		  attributeName.toLowerCase(), // attributeName
		  null, // attributeNamespace
		  false, // sanitizeURL
		  false);
		}); // These attributes accept URLs. These must not allow javascript: URLS.
		// These will also need to accept Trusted Types object in the future.

		var xlinkHref = 'xlinkHref';
		properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
		'xlink:href', 'http://www.w3.org/1999/xlink', true, // sanitizeURL
		false);
		['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
		  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
		  attributeName.toLowerCase(), // attributeName
		  null, // attributeNamespace
		  true, // sanitizeURL
		  true);
		});

		// and any newline or tab are filtered out as if they're not part of the URL.
		// https://url.spec.whatwg.org/#url-parsing
		// Tab or newline are defined as \r\n\t:
		// https://infra.spec.whatwg.org/#ascii-tab-or-newline
		// A C0 control is a code point in the range \u0000 NULL to \u001F
		// INFORMATION SEPARATOR ONE, inclusive:
		// https://infra.spec.whatwg.org/#c0-control-or-space

		/* eslint-disable max-len */

		var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
		var didWarn = false;

		function sanitizeURL(url) {
		  {
		    if (!didWarn && isJavaScriptProtocol.test(url)) {
		      didWarn = true;

		      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
		    }
		  }
		}

		/**
		 * Get the value for a property on a node. Only used in DEV for SSR validation.
		 * The "expected" argument is used as a hint of what the expected value is.
		 * Some properties have multiple equivalent values.
		 */
		function getValueForProperty(node, name, expected, propertyInfo) {
		  {
		    if (propertyInfo.mustUseProperty) {
		      var propertyName = propertyInfo.propertyName;
		      return node[propertyName];
		    } else {
		      // This check protects multiple uses of `expected`, which is why the
		      // react-internal/safe-string-coercion rule is disabled in several spots
		      // below.
		      {
		        checkAttributeStringCoercion(expected, name);
		      }

		      if ( propertyInfo.sanitizeURL) {
		        // If we haven't fully disabled javascript: URLs, and if
		        // the hydration is successful of a javascript: URL, we
		        // still want to warn on the client.
		        // eslint-disable-next-line react-internal/safe-string-coercion
		        sanitizeURL('' + expected);
		      }

		      var attributeName = propertyInfo.attributeName;
		      var stringValue = null;

		      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
		        if (node.hasAttribute(attributeName)) {
		          var value = node.getAttribute(attributeName);

		          if (value === '') {
		            return true;
		          }

		          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
		            return value;
		          } // eslint-disable-next-line react-internal/safe-string-coercion


		          if (value === '' + expected) {
		            return expected;
		          }

		          return value;
		        }
		      } else if (node.hasAttribute(attributeName)) {
		        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
		          // We had an attribute but shouldn't have had one, so read it
		          // for the error message.
		          return node.getAttribute(attributeName);
		        }

		        if (propertyInfo.type === BOOLEAN) {
		          // If this was a boolean, it doesn't matter what the value is
		          // the fact that we have it is the same as the expected.
		          return expected;
		        } // Even if this property uses a namespace we use getAttribute
		        // because we assume its namespaced name is the same as our config.
		        // To use getAttributeNS we need the local name which we don't have
		        // in our config atm.


		        stringValue = node.getAttribute(attributeName);
		      }

		      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
		        return stringValue === null ? expected : stringValue; // eslint-disable-next-line react-internal/safe-string-coercion
		      } else if (stringValue === '' + expected) {
		        return expected;
		      } else {
		        return stringValue;
		      }
		    }
		  }
		}
		/**
		 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
		 * The third argument is used as a hint of what the expected value is. Some
		 * attributes have multiple equivalent values.
		 */

		function getValueForAttribute(node, name, expected, isCustomComponentTag) {
		  {
		    if (!isAttributeNameSafe(name)) {
		      return;
		    }

		    if (!node.hasAttribute(name)) {
		      return expected === undefined ? undefined : null;
		    }

		    var value = node.getAttribute(name);

		    {
		      checkAttributeStringCoercion(expected, name);
		    }

		    if (value === '' + expected) {
		      return expected;
		    }

		    return value;
		  }
		}
		/**
		 * Sets the value for a property on a node.
		 *
		 * @param {DOMElement} node
		 * @param {string} name
		 * @param {*} value
		 */

		function setValueForProperty(node, name, value, isCustomComponentTag) {
		  var propertyInfo = getPropertyInfo(name);

		  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
		    return;
		  }

		  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
		    value = null;
		  }


		  if (isCustomComponentTag || propertyInfo === null) {
		    if (isAttributeNameSafe(name)) {
		      var _attributeName = name;

		      if (value === null) {
		        node.removeAttribute(_attributeName);
		      } else {
		        {
		          checkAttributeStringCoercion(value, name);
		        }

		        node.setAttribute(_attributeName,  '' + value);
		      }
		    }

		    return;
		  }

		  var mustUseProperty = propertyInfo.mustUseProperty;

		  if (mustUseProperty) {
		    var propertyName = propertyInfo.propertyName;

		    if (value === null) {
		      var type = propertyInfo.type;
		      node[propertyName] = type === BOOLEAN ? false : '';
		    } else {
		      // Contrary to `setAttribute`, object properties are properly
		      // `toString`ed by IE8/9.
		      node[propertyName] = value;
		    }

		    return;
		  } // The rest are treated as attributes with special cases.


		  var attributeName = propertyInfo.attributeName,
		      attributeNamespace = propertyInfo.attributeNamespace;

		  if (value === null) {
		    node.removeAttribute(attributeName);
		  } else {
		    var _type = propertyInfo.type;
		    var attributeValue;

		    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
		      // If attribute type is boolean, we know for sure it won't be an execution sink
		      // and we won't require Trusted Type here.
		      attributeValue = '';
		    } else {
		      // `setAttribute` with objects becomes only `[object]` in IE8/9,
		      // ('' + value) makes it output the correct toString()-value.
		      {
		        {
		          checkAttributeStringCoercion(value, attributeName);
		        }

		        attributeValue = '' + value;
		      }

		      if (propertyInfo.sanitizeURL) {
		        sanitizeURL(attributeValue.toString());
		      }
		    }

		    if (attributeNamespace) {
		      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
		    } else {
		      node.setAttribute(attributeName, attributeValue);
		    }
		  }
		}

		// ATTENTION
		// When adding new symbols to this file,
		// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
		// The Symbol used to tag the ReactElement-like types.
		var REACT_ELEMENT_TYPE = Symbol.for('react.element');
		var REACT_PORTAL_TYPE = Symbol.for('react.portal');
		var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
		var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
		var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
		var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
		var REACT_CONTEXT_TYPE = Symbol.for('react.context');
		var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
		var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
		var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
		var REACT_MEMO_TYPE = Symbol.for('react.memo');
		var REACT_LAZY_TYPE = Symbol.for('react.lazy');
		var REACT_SCOPE_TYPE = Symbol.for('react.scope');
		var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');
		var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
		var REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');
		var REACT_CACHE_TYPE = Symbol.for('react.cache');
		var REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');
		var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
		var FAUX_ITERATOR_SYMBOL = '@@iterator';
		function getIteratorFn(maybeIterable) {
		  if (maybeIterable === null || typeof maybeIterable !== 'object') {
		    return null;
		  }

		  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

		  if (typeof maybeIterator === 'function') {
		    return maybeIterator;
		  }

		  return null;
		}

		var assign = Object.assign;

		// Helpers to patch console.logs to avoid logging during side-effect free
		// replaying on render function. This currently only patches the object
		// lazily which won't cover if the log function was extracted eagerly.
		// We could also eagerly patch the method.
		var disabledDepth = 0;
		var prevLog;
		var prevInfo;
		var prevWarn;
		var prevError;
		var prevGroup;
		var prevGroupCollapsed;
		var prevGroupEnd;

		function disabledLog() {}

		disabledLog.__reactDisabledLog = true;
		function disableLogs() {
		  {
		    if (disabledDepth === 0) {
		      /* eslint-disable react-internal/no-production-logging */
		      prevLog = console.log;
		      prevInfo = console.info;
		      prevWarn = console.warn;
		      prevError = console.error;
		      prevGroup = console.group;
		      prevGroupCollapsed = console.groupCollapsed;
		      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

		      var props = {
		        configurable: true,
		        enumerable: true,
		        value: disabledLog,
		        writable: true
		      }; // $FlowFixMe Flow thinks console is immutable.

		      Object.defineProperties(console, {
		        info: props,
		        log: props,
		        warn: props,
		        error: props,
		        group: props,
		        groupCollapsed: props,
		        groupEnd: props
		      });
		      /* eslint-enable react-internal/no-production-logging */
		    }

		    disabledDepth++;
		  }
		}
		function reenableLogs() {
		  {
		    disabledDepth--;

		    if (disabledDepth === 0) {
		      /* eslint-disable react-internal/no-production-logging */
		      var props = {
		        configurable: true,
		        enumerable: true,
		        writable: true
		      }; // $FlowFixMe Flow thinks console is immutable.

		      Object.defineProperties(console, {
		        log: assign({}, props, {
		          value: prevLog
		        }),
		        info: assign({}, props, {
		          value: prevInfo
		        }),
		        warn: assign({}, props, {
		          value: prevWarn
		        }),
		        error: assign({}, props, {
		          value: prevError
		        }),
		        group: assign({}, props, {
		          value: prevGroup
		        }),
		        groupCollapsed: assign({}, props, {
		          value: prevGroupCollapsed
		        }),
		        groupEnd: assign({}, props, {
		          value: prevGroupEnd
		        })
		      });
		      /* eslint-enable react-internal/no-production-logging */
		    }

		    if (disabledDepth < 0) {
		      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
		    }
		  }
		}

		var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
		var prefix;
		function describeBuiltInComponentFrame(name, source, ownerFn) {
		  {
		    if (prefix === undefined) {
		      // Extract the VM specific prefix used by each line.
		      try {
		        throw Error();
		      } catch (x) {
		        var match = x.stack.trim().match(/\n( *(at )?)/);
		        prefix = match && match[1] || '';
		      }
		    } // We use the prefix to ensure our stacks line up with native stack frames.


		    return '\n' + prefix + name;
		  }
		}
		var reentry = false;
		var componentFrameCache;

		{
		  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
		  componentFrameCache = new PossiblyWeakMap();
		}

		function describeNativeComponentFrame(fn, construct) {
		  // If something asked for a stack inside a fake render, it should get ignored.
		  if ( !fn || reentry) {
		    return '';
		  }

		  {
		    var frame = componentFrameCache.get(fn);

		    if (frame !== undefined) {
		      return frame;
		    }
		  }

		  var control;
		  reentry = true;
		  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

		  Error.prepareStackTrace = undefined;
		  var previousDispatcher;

		  {
		    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
		    // for warnings.

		    ReactCurrentDispatcher.current = null;
		    disableLogs();
		  }

		  try {
		    // This should throw.
		    if (construct) {
		      // Something should be setting the props in the constructor.
		      var Fake = function () {
		        throw Error();
		      }; // $FlowFixMe


		      Object.defineProperty(Fake.prototype, 'props', {
		        set: function () {
		          // We use a throwing setter instead of frozen or non-writable props
		          // because that won't throw in a non-strict mode function.
		          throw Error();
		        }
		      });

		      if (typeof Reflect === 'object' && Reflect.construct) {
		        // We construct a different control for this case to include any extra
		        // frames added by the construct call.
		        try {
		          Reflect.construct(Fake, []);
		        } catch (x) {
		          control = x;
		        }

		        Reflect.construct(fn, [], Fake);
		      } else {
		        try {
		          Fake.call();
		        } catch (x) {
		          control = x;
		        }

		        fn.call(Fake.prototype);
		      }
		    } else {
		      try {
		        throw Error();
		      } catch (x) {
		        control = x;
		      }

		      fn();
		    }
		  } catch (sample) {
		    // This is inlined manually because closure doesn't do it for us.
		    if (sample && control && typeof sample.stack === 'string') {
		      // This extracts the first frame from the sample that isn't also in the control.
		      // Skipping one frame that we assume is the frame that calls the two.
		      var sampleLines = sample.stack.split('\n');
		      var controlLines = control.stack.split('\n');
		      var s = sampleLines.length - 1;
		      var c = controlLines.length - 1;

		      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
		        // We expect at least one stack frame to be shared.
		        // Typically this will be the root most one. However, stack frames may be
		        // cut off due to maximum stack limits. In this case, one maybe cut off
		        // earlier than the other. We assume that the sample is longer or the same
		        // and there for cut off earlier. So we should find the root most frame in
		        // the sample somewhere in the control.
		        c--;
		      }

		      for (; s >= 1 && c >= 0; s--, c--) {
		        // Next we find the first one that isn't the same which should be the
		        // frame that called our sample function and the control.
		        if (sampleLines[s] !== controlLines[c]) {
		          // In V8, the first line is describing the message but other VMs don't.
		          // If we're about to return the first line, and the control is also on the same
		          // line, that's a pretty good indicator that our sample threw at same line as
		          // the control. I.e. before we entered the sample frame. So we ignore this result.
		          // This can happen if you passed a class to function component, or non-function.
		          if (s !== 1 || c !== 1) {
		            do {
		              s--;
		              c--; // We may still have similar intermediate frames from the construct call.
		              // The next one that isn't the same should be our match though.

		              if (c < 0 || sampleLines[s] !== controlLines[c]) {
		                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
		                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
		                // but we have a user-provided "displayName"
		                // splice it in to make the stack more readable.


		                if (fn.displayName && _frame.includes('<anonymous>')) {
		                  _frame = _frame.replace('<anonymous>', fn.displayName);
		                }

		                {
		                  if (typeof fn === 'function') {
		                    componentFrameCache.set(fn, _frame);
		                  }
		                } // Return the line we found.


		                return _frame;
		              }
		            } while (s >= 1 && c >= 0);
		          }

		          break;
		        }
		      }
		    }
		  } finally {
		    reentry = false;

		    {
		      ReactCurrentDispatcher.current = previousDispatcher;
		      reenableLogs();
		    }

		    Error.prepareStackTrace = previousPrepareStackTrace;
		  } // Fallback to just using the name if we couldn't make it throw.


		  var name = fn ? fn.displayName || fn.name : '';
		  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

		  {
		    if (typeof fn === 'function') {
		      componentFrameCache.set(fn, syntheticFrame);
		    }
		  }

		  return syntheticFrame;
		}

		function describeClassComponentFrame(ctor, source, ownerFn) {
		  {
		    return describeNativeComponentFrame(ctor, true);
		  }
		}
		function describeFunctionComponentFrame(fn, source, ownerFn) {
		  {
		    return describeNativeComponentFrame(fn, false);
		  }
		}

		function shouldConstruct(Component) {
		  var prototype = Component.prototype;
		  return !!(prototype && prototype.isReactComponent);
		}

		function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

		  if (type == null) {
		    return '';
		  }

		  if (typeof type === 'function') {
		    {
		      return describeNativeComponentFrame(type, shouldConstruct(type));
		    }
		  }

		  if (typeof type === 'string') {
		    return describeBuiltInComponentFrame(type);
		  }

		  switch (type) {
		    case REACT_SUSPENSE_TYPE:
		      return describeBuiltInComponentFrame('Suspense');

		    case REACT_SUSPENSE_LIST_TYPE:
		      return describeBuiltInComponentFrame('SuspenseList');
		  }

		  if (typeof type === 'object') {
		    switch (type.$$typeof) {
		      case REACT_FORWARD_REF_TYPE:
		        return describeFunctionComponentFrame(type.render);

		      case REACT_MEMO_TYPE:
		        // Memo may contain any component type so we recursively resolve it.
		        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

		      case REACT_LAZY_TYPE:
		        {
		          var lazyComponent = type;
		          var payload = lazyComponent._payload;
		          var init = lazyComponent._init;

		          try {
		            // Lazy may contain any component type so we recursively resolve it.
		            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
		          } catch (x) {}
		        }
		    }
		  }

		  return '';
		}

		function describeFiber(fiber) {
		  fiber._debugOwner ? fiber._debugOwner.type : null ;
		  fiber._debugSource ;

		  switch (fiber.tag) {
		    case HostComponent:
		      return describeBuiltInComponentFrame(fiber.type);

		    case LazyComponent:
		      return describeBuiltInComponentFrame('Lazy');

		    case SuspenseComponent:
		      return describeBuiltInComponentFrame('Suspense');

		    case SuspenseListComponent:
		      return describeBuiltInComponentFrame('SuspenseList');

		    case FunctionComponent:
		    case IndeterminateComponent:
		    case SimpleMemoComponent:
		      return describeFunctionComponentFrame(fiber.type);

		    case ForwardRef:
		      return describeFunctionComponentFrame(fiber.type.render);

		    case ClassComponent:
		      return describeClassComponentFrame(fiber.type);

		    default:
		      return '';
		  }
		}

		function getStackByFiberInDevAndProd(workInProgress) {
		  try {
		    var info = '';
		    var node = workInProgress;

		    do {
		      info += describeFiber(node);
		      node = node.return;
		    } while (node);

		    return info;
		  } catch (x) {
		    return '\nError generating stack: ' + x.message + '\n' + x.stack;
		  }
		}

		function getWrappedName(outerType, innerType, wrapperName) {
		  var displayName = outerType.displayName;

		  if (displayName) {
		    return displayName;
		  }

		  var functionName = innerType.displayName || innerType.name || '';
		  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
		} // Keep in sync with react-reconciler/getComponentNameFromFiber


		function getContextName(type) {
		  return type.displayName || 'Context';
		} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


		function getComponentNameFromType(type) {
		  if (type == null) {
		    // Host root, text node or just invalid type.
		    return null;
		  }

		  {
		    if (typeof type.tag === 'number') {
		      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
		    }
		  }

		  if (typeof type === 'function') {
		    return type.displayName || type.name || null;
		  }

		  if (typeof type === 'string') {
		    return type;
		  }

		  switch (type) {
		    case REACT_FRAGMENT_TYPE:
		      return 'Fragment';

		    case REACT_PORTAL_TYPE:
		      return 'Portal';

		    case REACT_PROFILER_TYPE:
		      return 'Profiler';

		    case REACT_STRICT_MODE_TYPE:
		      return 'StrictMode';

		    case REACT_SUSPENSE_TYPE:
		      return 'Suspense';

		    case REACT_SUSPENSE_LIST_TYPE:
		      return 'SuspenseList';

		  }

		  if (typeof type === 'object') {
		    switch (type.$$typeof) {
		      case REACT_CONTEXT_TYPE:
		        var context = type;
		        return getContextName(context) + '.Consumer';

		      case REACT_PROVIDER_TYPE:
		        var provider = type;
		        return getContextName(provider._context) + '.Provider';

		      case REACT_FORWARD_REF_TYPE:
		        return getWrappedName(type, type.render, 'ForwardRef');

		      case REACT_MEMO_TYPE:
		        var outerName = type.displayName || null;

		        if (outerName !== null) {
		          return outerName;
		        }

		        return getComponentNameFromType(type.type) || 'Memo';

		      case REACT_LAZY_TYPE:
		        {
		          var lazyComponent = type;
		          var payload = lazyComponent._payload;
		          var init = lazyComponent._init;

		          try {
		            return getComponentNameFromType(init(payload));
		          } catch (x) {
		            return null;
		          }
		        }

		      // eslint-disable-next-line no-fallthrough
		    }
		  }

		  return null;
		}

		function getWrappedName$1(outerType, innerType, wrapperName) {
		  var functionName = innerType.displayName || innerType.name || '';
		  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
		} // Keep in sync with shared/getComponentNameFromType


		function getContextName$1(type) {
		  return type.displayName || 'Context';
		}

		function getComponentNameFromFiber(fiber) {
		  var tag = fiber.tag,
		      type = fiber.type;

		  switch (tag) {
		    case CacheComponent:
		      return 'Cache';

		    case ContextConsumer:
		      var context = type;
		      return getContextName$1(context) + '.Consumer';

		    case ContextProvider:
		      var provider = type;
		      return getContextName$1(provider._context) + '.Provider';

		    case DehydratedFragment:
		      return 'DehydratedFragment';

		    case ForwardRef:
		      return getWrappedName$1(type, type.render, 'ForwardRef');

		    case Fragment:
		      return 'Fragment';

		    case HostComponent:
		      // Host component type is the display name (e.g. "div", "View")
		      return type;

		    case HostPortal:
		      return 'Portal';

		    case HostRoot:
		      return 'Root';

		    case HostText:
		      return 'Text';

		    case LazyComponent:
		      // Name comes from the type in this case; we don't have a tag.
		      return getComponentNameFromType(type);

		    case Mode:
		      if (type === REACT_STRICT_MODE_TYPE) {
		        // Don't be less specific than shared/getComponentNameFromType
		        return 'StrictMode';
		      }

		      return 'Mode';

		    case OffscreenComponent:
		      return 'Offscreen';

		    case Profiler:
		      return 'Profiler';

		    case ScopeComponent:
		      return 'Scope';

		    case SuspenseComponent:
		      return 'Suspense';

		    case SuspenseListComponent:
		      return 'SuspenseList';

		    case TracingMarkerComponent:
		      return 'TracingMarker';
		    // The display name for this tags come from the user-provided type:

		    case ClassComponent:
		    case FunctionComponent:
		    case IncompleteClassComponent:
		    case IndeterminateComponent:
		    case MemoComponent:
		    case SimpleMemoComponent:
		      if (typeof type === 'function') {
		        return type.displayName || type.name || null;
		      }

		      if (typeof type === 'string') {
		        return type;
		      }

		      break;

		  }

		  return null;
		}

		var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
		var current = null;
		var isRendering = false;
		function getCurrentFiberOwnerNameInDevOrNull() {
		  {
		    if (current === null) {
		      return null;
		    }

		    var owner = current._debugOwner;

		    if (owner !== null && typeof owner !== 'undefined') {
		      return getComponentNameFromFiber(owner);
		    }
		  }

		  return null;
		}

		function getCurrentFiberStackInDev() {
		  {
		    if (current === null) {
		      return '';
		    } // Safe because if current fiber exists, we are reconciling,
		    // and it is guaranteed to be the work-in-progress version.


		    return getStackByFiberInDevAndProd(current);
		  }
		}

		function resetCurrentFiber() {
		  {
		    ReactDebugCurrentFrame.getCurrentStack = null;
		    current = null;
		    isRendering = false;
		  }
		}
		function setCurrentFiber(fiber) {
		  {
		    ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
		    current = fiber;
		    isRendering = false;
		  }
		}
		function getCurrentFiber() {
		  {
		    return current;
		  }
		}
		function setIsRendering(rendering) {
		  {
		    isRendering = rendering;
		  }
		}

		// Flow does not allow string concatenation of most non-string types. To work
		// around this limitation, we use an opaque type that can only be obtained by
		// passing the value through getToStringValue first.
		function toString(value) {
		  // The coercion safety check is performed in getToStringValue().
		  // eslint-disable-next-line react-internal/safe-string-coercion
		  return '' + value;
		}
		function getToStringValue(value) {
		  switch (typeof value) {
		    case 'boolean':
		    case 'number':
		    case 'string':
		    case 'undefined':
		      return value;

		    case 'object':
		      {
		        checkFormFieldValueStringCoercion(value);
		      }

		      return value;

		    default:
		      // function, symbol are assigned as empty strings
		      return '';
		  }
		}

		var hasReadOnlyValue = {
		  button: true,
		  checkbox: true,
		  image: true,
		  hidden: true,
		  radio: true,
		  reset: true,
		  submit: true
		};
		function checkControlledValueProps(tagName, props) {
		  {
		    if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
		      error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
		    }

		    if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
		      error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
		    }
		  }
		}

		function isCheckable(elem) {
		  var type = elem.type;
		  var nodeName = elem.nodeName;
		  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
		}

		function getTracker(node) {
		  return node._valueTracker;
		}

		function detachTracker(node) {
		  node._valueTracker = null;
		}

		function getValueFromNode(node) {
		  var value = '';

		  if (!node) {
		    return value;
		  }

		  if (isCheckable(node)) {
		    value = node.checked ? 'true' : 'false';
		  } else {
		    value = node.value;
		  }

		  return value;
		}

		function trackValueOnNode(node) {
		  var valueField = isCheckable(node) ? 'checked' : 'value';
		  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

		  {
		    checkFormFieldValueStringCoercion(node[valueField]);
		  }

		  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
		  // and don't track value will cause over reporting of changes,
		  // but it's better then a hard failure
		  // (needed for certain tests that spyOn input values and Safari)

		  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
		    return;
		  }

		  var get = descriptor.get,
		      set = descriptor.set;
		  Object.defineProperty(node, valueField, {
		    configurable: true,
		    get: function () {
		      return get.call(this);
		    },
		    set: function (value) {
		      {
		        checkFormFieldValueStringCoercion(value);
		      }

		      currentValue = '' + value;
		      set.call(this, value);
		    }
		  }); // We could've passed this the first time
		  // but it triggers a bug in IE11 and Edge 14/15.
		  // Calling defineProperty() again should be equivalent.
		  // https://github.com/facebook/react/issues/11768

		  Object.defineProperty(node, valueField, {
		    enumerable: descriptor.enumerable
		  });
		  var tracker = {
		    getValue: function () {
		      return currentValue;
		    },
		    setValue: function (value) {
		      {
		        checkFormFieldValueStringCoercion(value);
		      }

		      currentValue = '' + value;
		    },
		    stopTracking: function () {
		      detachTracker(node);
		      delete node[valueField];
		    }
		  };
		  return tracker;
		}

		function track(node) {
		  if (getTracker(node)) {
		    return;
		  } // TODO: Once it's just Fiber we can move this to node._wrapperState


		  node._valueTracker = trackValueOnNode(node);
		}
		function updateValueIfChanged(node) {
		  if (!node) {
		    return false;
		  }

		  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
		  // that trying again will succeed

		  if (!tracker) {
		    return true;
		  }

		  var lastValue = tracker.getValue();
		  var nextValue = getValueFromNode(node);

		  if (nextValue !== lastValue) {
		    tracker.setValue(nextValue);
		    return true;
		  }

		  return false;
		}

		function getActiveElement(doc) {
		  doc = doc || (typeof document !== 'undefined' ? document : undefined);

		  if (typeof doc === 'undefined') {
		    return null;
		  }

		  try {
		    return doc.activeElement || doc.body;
		  } catch (e) {
		    return doc.body;
		  }
		}

		var didWarnValueDefaultValue = false;
		var didWarnCheckedDefaultChecked = false;
		var didWarnControlledToUncontrolled = false;
		var didWarnUncontrolledToControlled = false;

		function isControlled(props) {
		  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
		  return usesChecked ? props.checked != null : props.value != null;
		}
		/**
		 * Implements an <input> host component that allows setting these optional
		 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
		 *
		 * If `checked` or `value` are not supplied (or null/undefined), user actions
		 * that affect the checked state or value will trigger updates to the element.
		 *
		 * If they are supplied (and not null/undefined), the rendered element will not
		 * trigger updates to the element. Instead, the props must change in order for
		 * the rendered element to be updated.
		 *
		 * The rendered element will be initialized as unchecked (or `defaultChecked`)
		 * with an empty value (or `defaultValue`).
		 *
		 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
		 */


		function getHostProps(element, props) {
		  var node = element;
		  var checked = props.checked;
		  var hostProps = assign({}, props, {
		    defaultChecked: undefined,
		    defaultValue: undefined,
		    value: undefined,
		    checked: checked != null ? checked : node._wrapperState.initialChecked
		  });
		  return hostProps;
		}
		function initWrapperState(element, props) {
		  {
		    checkControlledValueProps('input', props);

		    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
		      error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

		      didWarnCheckedDefaultChecked = true;
		    }

		    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
		      error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

		      didWarnValueDefaultValue = true;
		    }
		  }

		  var node = element;
		  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
		  node._wrapperState = {
		    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
		    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
		    controlled: isControlled(props)
		  };
		}
		function updateChecked(element, props) {
		  var node = element;
		  var checked = props.checked;

		  if (checked != null) {
		    setValueForProperty(node, 'checked', checked, false);
		  }
		}
		function updateWrapper(element, props) {
		  var node = element;

		  {
		    var controlled = isControlled(props);

		    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
		      error('A component is changing an uncontrolled input to be controlled. ' + 'This is likely caused by the value changing from undefined to ' + 'a defined value, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

		      didWarnUncontrolledToControlled = true;
		    }

		    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
		      error('A component is changing a controlled input to be uncontrolled. ' + 'This is likely caused by the value changing from a defined to ' + 'undefined, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

		      didWarnControlledToUncontrolled = true;
		    }
		  }

		  updateChecked(element, props);
		  var value = getToStringValue(props.value);
		  var type = props.type;

		  if (value != null) {
		    if (type === 'number') {
		      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
		      // eslint-disable-next-line
		      node.value != value) {
		        node.value = toString(value);
		      }
		    } else if (node.value !== toString(value)) {
		      node.value = toString(value);
		    }
		  } else if (type === 'submit' || type === 'reset') {
		    // Submit/reset inputs need the attribute removed completely to avoid
		    // blank-text buttons.
		    node.removeAttribute('value');
		    return;
		  }

		  {
		    // When syncing the value attribute, the value comes from a cascade of
		    // properties:
		    //  1. The value React property
		    //  2. The defaultValue React property
		    //  3. Otherwise there should be no change
		    if (props.hasOwnProperty('value')) {
		      setDefaultValue(node, props.type, value);
		    } else if (props.hasOwnProperty('defaultValue')) {
		      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
		    }
		  }

		  {
		    // When syncing the checked attribute, it only changes when it needs
		    // to be removed, such as transitioning from a checkbox into a text input
		    if (props.checked == null && props.defaultChecked != null) {
		      node.defaultChecked = !!props.defaultChecked;
		    }
		  }
		}
		function postMountWrapper(element, props, isHydrating) {
		  var node = element; // Do not assign value if it is already set. This prevents user text input
		  // from being lost during SSR hydration.

		  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
		    var type = props.type;
		    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
		    // default value provided by the browser. See: #12872

		    if (isButton && (props.value === undefined || props.value === null)) {
		      return;
		    }

		    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
		    // from being lost during SSR hydration.

		    if (!isHydrating) {
		      {
		        // When syncing the value attribute, the value property should use
		        // the wrapperState._initialValue property. This uses:
		        //
		        //   1. The value React property when present
		        //   2. The defaultValue React property when present
		        //   3. An empty string
		        if (initialValue !== node.value) {
		          node.value = initialValue;
		        }
		      }
		    }

		    {
		      // Otherwise, the value attribute is synchronized to the property,
		      // so we assign defaultValue to the same thing as the value property
		      // assignment step above.
		      node.defaultValue = initialValue;
		    }
		  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
		  // this is needed to work around a chrome bug where setting defaultChecked
		  // will sometimes influence the value of checked (even after detachment).
		  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
		  // We need to temporarily unset name to avoid disrupting radio button groups.


		  var name = node.name;

		  if (name !== '') {
		    node.name = '';
		  }

		  {
		    // When syncing the checked attribute, both the checked property and
		    // attribute are assigned at the same time using defaultChecked. This uses:
		    //
		    //   1. The checked React property when present
		    //   2. The defaultChecked React property when present
		    //   3. Otherwise, false
		    node.defaultChecked = !node.defaultChecked;
		    node.defaultChecked = !!node._wrapperState.initialChecked;
		  }

		  if (name !== '') {
		    node.name = name;
		  }
		}
		function restoreControlledState(element, props) {
		  var node = element;
		  updateWrapper(node, props);
		  updateNamedCousins(node, props);
		}

		function updateNamedCousins(rootNode, props) {
		  var name = props.name;

		  if (props.type === 'radio' && name != null) {
		    var queryRoot = rootNode;

		    while (queryRoot.parentNode) {
		      queryRoot = queryRoot.parentNode;
		    } // If `rootNode.form` was non-null, then we could try `form.elements`,
		    // but that sometimes behaves strangely in IE8. We could also try using
		    // `form.getElementsByName`, but that will only return direct children
		    // and won't include inputs that use the HTML5 `form=` attribute. Since
		    // the input might not even be in a form. It might not even be in the
		    // document. Let's just use the local `querySelectorAll` to ensure we don't
		    // miss anything.


		    {
		      checkAttributeStringCoercion(name, 'name');
		    }

		    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

		    for (var i = 0; i < group.length; i++) {
		      var otherNode = group[i];

		      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
		        continue;
		      } // This will throw if radio buttons rendered by different copies of React
		      // and the same name are rendered into the same form (same as #1939).
		      // That's probably okay; we don't support it just as we don't support
		      // mixing React radio buttons with non-React ones.


		      var otherProps = getFiberCurrentPropsFromNode(otherNode);

		      if (!otherProps) {
		        throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.');
		      } // We need update the tracked value on the named cousin since the value
		      // was changed but the input saw no event or value set


		      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
		      // was previously checked to update will cause it to be come re-checked
		      // as appropriate.

		      updateWrapper(otherNode, otherProps);
		    }
		  }
		} // In Chrome, assigning defaultValue to certain input types triggers input validation.
		// For number inputs, the display value loses trailing decimal points. For email inputs,
		// Chrome raises "The specified value <x> is not a valid email address".
		//
		// Here we check to see if the defaultValue has actually changed, avoiding these problems
		// when the user is inputting text
		//
		// https://github.com/facebook/react/issues/7253


		function setDefaultValue(node, type, value) {
		  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
		  type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
		    if (value == null) {
		      node.defaultValue = toString(node._wrapperState.initialValue);
		    } else if (node.defaultValue !== toString(value)) {
		      node.defaultValue = toString(value);
		    }
		  }
		}

		var didWarnSelectedSetOnOption = false;
		var didWarnInvalidChild = false;
		var didWarnInvalidInnerHTML = false;
		/**
		 * Implements an <option> host component that warns when `selected` is set.
		 */

		function validateProps(element, props) {
		  {
		    // If a value is not provided, then the children must be simple.
		    if (props.value == null) {
		      if (typeof props.children === 'object' && props.children !== null) {
		        React.Children.forEach(props.children, function (child) {
		          if (child == null) {
		            return;
		          }

		          if (typeof child === 'string' || typeof child === 'number') {
		            return;
		          }

		          if (!didWarnInvalidChild) {
		            didWarnInvalidChild = true;

		            error('Cannot infer the option value of complex children. ' + 'Pass a `value` prop or use a plain string as children to <option>.');
		          }
		        });
		      } else if (props.dangerouslySetInnerHTML != null) {
		        if (!didWarnInvalidInnerHTML) {
		          didWarnInvalidInnerHTML = true;

		          error('Pass a `value` prop if you set dangerouslyInnerHTML so React knows ' + 'which value should be selected.');
		        }
		      }
		    } // TODO: Remove support for `selected` in <option>.


		    if (props.selected != null && !didWarnSelectedSetOnOption) {
		      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');

		      didWarnSelectedSetOnOption = true;
		    }
		  }
		}
		function postMountWrapper$1(element, props) {
		  // value="" should make a value attribute (#6219)
		  if (props.value != null) {
		    element.setAttribute('value', toString(getToStringValue(props.value)));
		  }
		}

		var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

		function isArray(a) {
		  return isArrayImpl(a);
		}

		var didWarnValueDefaultValue$1;

		{
		  didWarnValueDefaultValue$1 = false;
		}

		function getDeclarationErrorAddendum() {
		  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

		  if (ownerName) {
		    return '\n\nCheck the render method of `' + ownerName + '`.';
		  }

		  return '';
		}

		var valuePropNames = ['value', 'defaultValue'];
		/**
		 * Validation function for `value` and `defaultValue`.
		 */

		function checkSelectPropTypes(props) {
		  {
		    checkControlledValueProps('select', props);

		    for (var i = 0; i < valuePropNames.length; i++) {
		      var propName = valuePropNames[i];

		      if (props[propName] == null) {
		        continue;
		      }

		      var propNameIsArray = isArray(props[propName]);

		      if (props.multiple && !propNameIsArray) {
		        error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
		      } else if (!props.multiple && propNameIsArray) {
		        error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
		      }
		    }
		  }
		}

		function updateOptions(node, multiple, propValue, setDefaultSelected) {
		  var options = node.options;

		  if (multiple) {
		    var selectedValues = propValue;
		    var selectedValue = {};

		    for (var i = 0; i < selectedValues.length; i++) {
		      // Prefix to avoid chaos with special keys.
		      selectedValue['$' + selectedValues[i]] = true;
		    }

		    for (var _i = 0; _i < options.length; _i++) {
		      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

		      if (options[_i].selected !== selected) {
		        options[_i].selected = selected;
		      }

		      if (selected && setDefaultSelected) {
		        options[_i].defaultSelected = true;
		      }
		    }
		  } else {
		    // Do not set `select.value` as exact behavior isn't consistent across all
		    // browsers for all cases.
		    var _selectedValue = toString(getToStringValue(propValue));

		    var defaultSelected = null;

		    for (var _i2 = 0; _i2 < options.length; _i2++) {
		      if (options[_i2].value === _selectedValue) {
		        options[_i2].selected = true;

		        if (setDefaultSelected) {
		          options[_i2].defaultSelected = true;
		        }

		        return;
		      }

		      if (defaultSelected === null && !options[_i2].disabled) {
		        defaultSelected = options[_i2];
		      }
		    }

		    if (defaultSelected !== null) {
		      defaultSelected.selected = true;
		    }
		  }
		}
		/**
		 * Implements a <select> host component that allows optionally setting the
		 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
		 * stringable. If `multiple` is true, the prop must be an array of stringables.
		 *
		 * If `value` is not supplied (or null/undefined), user actions that change the
		 * selected option will trigger updates to the rendered options.
		 *
		 * If it is supplied (and not null/undefined), the rendered options will not
		 * update in response to user actions. Instead, the `value` prop must change in
		 * order for the rendered options to update.
		 *
		 * If `defaultValue` is provided, any options with the supplied values will be
		 * selected.
		 */


		function getHostProps$1(element, props) {
		  return assign({}, props, {
		    value: undefined
		  });
		}
		function initWrapperState$1(element, props) {
		  var node = element;

		  {
		    checkSelectPropTypes(props);
		  }

		  node._wrapperState = {
		    wasMultiple: !!props.multiple
		  };

		  {
		    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
		      error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');

		      didWarnValueDefaultValue$1 = true;
		    }
		  }
		}
		function postMountWrapper$2(element, props) {
		  var node = element;
		  node.multiple = !!props.multiple;
		  var value = props.value;

		  if (value != null) {
		    updateOptions(node, !!props.multiple, value, false);
		  } else if (props.defaultValue != null) {
		    updateOptions(node, !!props.multiple, props.defaultValue, true);
		  }
		}
		function postUpdateWrapper(element, props) {
		  var node = element;
		  var wasMultiple = node._wrapperState.wasMultiple;
		  node._wrapperState.wasMultiple = !!props.multiple;
		  var value = props.value;

		  if (value != null) {
		    updateOptions(node, !!props.multiple, value, false);
		  } else if (wasMultiple !== !!props.multiple) {
		    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
		    if (props.defaultValue != null) {
		      updateOptions(node, !!props.multiple, props.defaultValue, true);
		    } else {
		      // Revert the select back to its default unselected state.
		      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
		    }
		  }
		}
		function restoreControlledState$1(element, props) {
		  var node = element;
		  var value = props.value;

		  if (value != null) {
		    updateOptions(node, !!props.multiple, value, false);
		  }
		}

		var didWarnValDefaultVal = false;

		/**
		 * Implements a <textarea> host component that allows setting `value`, and
		 * `defaultValue`. This differs from the traditional DOM API because value is
		 * usually set as PCDATA children.
		 *
		 * If `value` is not supplied (or null/undefined), user actions that affect the
		 * value will trigger updates to the element.
		 *
		 * If `value` is supplied (and not null/undefined), the rendered element will
		 * not trigger updates to the element. Instead, the `value` prop must change in
		 * order for the rendered element to be updated.
		 *
		 * The rendered element will be initialized with an empty value, the prop
		 * `defaultValue` if specified, or the children content (deprecated).
		 */
		function getHostProps$2(element, props) {
		  var node = element;

		  if (props.dangerouslySetInnerHTML != null) {
		    throw new Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.');
		  } // Always set children to the same thing. In IE9, the selection range will
		  // get reset if `textContent` is mutated.  We could add a check in setTextContent
		  // to only set the value if/when the value differs from the node value (which would
		  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
		  // solution. The value can be a boolean or object so that's why it's forced
		  // to be a string.


		  var hostProps = assign({}, props, {
		    value: undefined,
		    defaultValue: undefined,
		    children: toString(node._wrapperState.initialValue)
		  });

		  return hostProps;
		}
		function initWrapperState$2(element, props) {
		  var node = element;

		  {
		    checkControlledValueProps('textarea', props);

		    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
		      error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');

		      didWarnValDefaultVal = true;
		    }
		  }

		  var initialValue = props.value; // Only bother fetching default value if we're going to use it

		  if (initialValue == null) {
		    var children = props.children,
		        defaultValue = props.defaultValue;

		    if (children != null) {
		      {
		        error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
		      }

		      {
		        if (defaultValue != null) {
		          throw new Error('If you supply `defaultValue` on a <textarea>, do not pass children.');
		        }

		        if (isArray(children)) {
		          if (children.length > 1) {
		            throw new Error('<textarea> can only have at most one child.');
		          }

		          children = children[0];
		        }

		        defaultValue = children;
		      }
		    }

		    if (defaultValue == null) {
		      defaultValue = '';
		    }

		    initialValue = defaultValue;
		  }

		  node._wrapperState = {
		    initialValue: getToStringValue(initialValue)
		  };
		}
		function updateWrapper$1(element, props) {
		  var node = element;
		  var value = getToStringValue(props.value);
		  var defaultValue = getToStringValue(props.defaultValue);

		  if (value != null) {
		    // Cast `value` to a string to ensure the value is set correctly. While
		    // browsers typically do this as necessary, jsdom doesn't.
		    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

		    if (newValue !== node.value) {
		      node.value = newValue;
		    }

		    if (props.defaultValue == null && node.defaultValue !== newValue) {
		      node.defaultValue = newValue;
		    }
		  }

		  if (defaultValue != null) {
		    node.defaultValue = toString(defaultValue);
		  }
		}
		function postMountWrapper$3(element, props) {
		  var node = element; // This is in postMount because we need access to the DOM node, which is not
		  // available until after the component has mounted.

		  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
		  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
		  // will populate textContent as well.
		  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

		  if (textContent === node._wrapperState.initialValue) {
		    if (textContent !== '' && textContent !== null) {
		      node.value = textContent;
		    }
		  }
		}
		function restoreControlledState$2(element, props) {
		  // DOM component is still mounted; update
		  updateWrapper$1(element, props);
		}

		var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
		var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
		var SVG_NAMESPACE = 'http://www.w3.org/2000/svg'; // Assumes there is no parent namespace.

		function getIntrinsicNamespace(type) {
		  switch (type) {
		    case 'svg':
		      return SVG_NAMESPACE;

		    case 'math':
		      return MATH_NAMESPACE;

		    default:
		      return HTML_NAMESPACE;
		  }
		}
		function getChildNamespace(parentNamespace, type) {
		  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
		    // No (or default) parent namespace: potential entry point.
		    return getIntrinsicNamespace(type);
		  }

		  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
		    // We're leaving SVG.
		    return HTML_NAMESPACE;
		  } // By default, pass namespace below.


		  return parentNamespace;
		}

		/* globals MSApp */

		/**
		 * Create a function which has 'unsafe' privileges (required by windows8 apps)
		 */
		var createMicrosoftUnsafeLocalFunction = function (func) {
		  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
		    return function (arg0, arg1, arg2, arg3) {
		      MSApp.execUnsafeLocalFunction(function () {
		        return func(arg0, arg1, arg2, arg3);
		      });
		    };
		  } else {
		    return func;
		  }
		};

		var reusableSVGContainer;
		/**
		 * Set the innerHTML property of a node
		 *
		 * @param {DOMElement} node
		 * @param {string} html
		 * @internal
		 */

		var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
		  if (node.namespaceURI === SVG_NAMESPACE) {

		    if (!('innerHTML' in node)) {
		      // IE does not have innerHTML for SVG nodes, so instead we inject the
		      // new markup in a temp node and then move the child nodes across into
		      // the target node
		      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
		      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
		      var svgNode = reusableSVGContainer.firstChild;

		      while (node.firstChild) {
		        node.removeChild(node.firstChild);
		      }

		      while (svgNode.firstChild) {
		        node.appendChild(svgNode.firstChild);
		      }

		      return;
		    }
		  }

		  node.innerHTML = html;
		});

		/**
		 * HTML nodeType values that represent the type of the node
		 */
		var ELEMENT_NODE = 1;
		var TEXT_NODE = 3;
		var COMMENT_NODE = 8;
		var DOCUMENT_NODE = 9;
		var DOCUMENT_FRAGMENT_NODE = 11;

		/**
		 * Set the textContent property of a node. For text updates, it's faster
		 * to set the `nodeValue` of the Text node directly instead of using
		 * `.textContent` which will remove the existing node and create a new one.
		 *
		 * @param {DOMElement} node
		 * @param {string} text
		 * @internal
		 */

		var setTextContent = function (node, text) {
		  if (text) {
		    var firstChild = node.firstChild;

		    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
		      firstChild.nodeValue = text;
		      return;
		    }
		  }

		  node.textContent = text;
		};

		// List derived from Gecko source code:
		// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
		var shorthandToLonghand = {
		  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
		  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
		  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
		  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
		  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
		  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
		  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
		  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
		  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
		  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
		  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
		  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
		  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
		  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
		  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
		  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
		  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
		  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
		  columns: ['columnCount', 'columnWidth'],
		  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
		  flexFlow: ['flexDirection', 'flexWrap'],
		  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
		  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
		  gap: ['columnGap', 'rowGap'],
		  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
		  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
		  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
		  gridColumnGap: ['columnGap'],
		  gridGap: ['columnGap', 'rowGap'],
		  gridRow: ['gridRowEnd', 'gridRowStart'],
		  gridRowGap: ['rowGap'],
		  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
		  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
		  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
		  marker: ['markerEnd', 'markerMid', 'markerStart'],
		  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
		  maskPosition: ['maskPositionX', 'maskPositionY'],
		  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
		  overflow: ['overflowX', 'overflowY'],
		  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
		  placeContent: ['alignContent', 'justifyContent'],
		  placeItems: ['alignItems', 'justifyItems'],
		  placeSelf: ['alignSelf', 'justifySelf'],
		  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
		  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
		  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
		  wordWrap: ['overflowWrap']
		};

		/**
		 * CSS properties which accept numbers but are not in units of "px".
		 */
		var isUnitlessNumber = {
		  animationIterationCount: true,
		  aspectRatio: true,
		  borderImageOutset: true,
		  borderImageSlice: true,
		  borderImageWidth: true,
		  boxFlex: true,
		  boxFlexGroup: true,
		  boxOrdinalGroup: true,
		  columnCount: true,
		  columns: true,
		  flex: true,
		  flexGrow: true,
		  flexPositive: true,
		  flexShrink: true,
		  flexNegative: true,
		  flexOrder: true,
		  gridArea: true,
		  gridRow: true,
		  gridRowEnd: true,
		  gridRowSpan: true,
		  gridRowStart: true,
		  gridColumn: true,
		  gridColumnEnd: true,
		  gridColumnSpan: true,
		  gridColumnStart: true,
		  fontWeight: true,
		  lineClamp: true,
		  lineHeight: true,
		  opacity: true,
		  order: true,
		  orphans: true,
		  tabSize: true,
		  widows: true,
		  zIndex: true,
		  zoom: true,
		  // SVG-related properties
		  fillOpacity: true,
		  floodOpacity: true,
		  stopOpacity: true,
		  strokeDasharray: true,
		  strokeDashoffset: true,
		  strokeMiterlimit: true,
		  strokeOpacity: true,
		  strokeWidth: true
		};
		/**
		 * @param {string} prefix vendor-specific prefix, eg: Webkit
		 * @param {string} key style name, eg: transitionDuration
		 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
		 * WebkitTransitionDuration
		 */

		function prefixKey(prefix, key) {
		  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
		}
		/**
		 * Support style names that may come passed in prefixed by adding permutations
		 * of vendor prefixes.
		 */


		var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
		// infinite loop, because it iterates over the newly added props too.

		Object.keys(isUnitlessNumber).forEach(function (prop) {
		  prefixes.forEach(function (prefix) {
		    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
		  });
		});

		/**
		 * Convert a value into the proper css writable value. The style name `name`
		 * should be logical (no hyphens), as specified
		 * in `CSSProperty.isUnitlessNumber`.
		 *
		 * @param {string} name CSS property name such as `topMargin`.
		 * @param {*} value CSS property value such as `10px`.
		 * @return {string} Normalized style value with dimensions applied.
		 */

		function dangerousStyleValue(name, value, isCustomProperty) {
		  // Note that we've removed escapeTextForBrowser() calls here since the
		  // whole string will be escaped when the attribute is injected into
		  // the markup. If you provide unsafe user data here they can inject
		  // arbitrary CSS which may be problematic (I couldn't repro this):
		  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
		  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
		  // This is not an XSS hole but instead a potential CSS injection issue
		  // which has lead to a greater discussion about how we're going to
		  // trust URLs moving forward. See #2115901
		  var isEmpty = value == null || typeof value === 'boolean' || value === '';

		  if (isEmpty) {
		    return '';
		  }

		  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
		    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
		  }

		  {
		    checkCSSPropertyStringCoercion(value, name);
		  }

		  return ('' + value).trim();
		}

		var uppercasePattern = /([A-Z])/g;
		var msPattern = /^ms-/;
		/**
		 * Hyphenates a camelcased CSS property name, for example:
		 *
		 *   > hyphenateStyleName('backgroundColor')
		 *   < "background-color"
		 *   > hyphenateStyleName('MozTransition')
		 *   < "-moz-transition"
		 *   > hyphenateStyleName('msTransition')
		 *   < "-ms-transition"
		 *
		 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
		 * is converted to `-ms-`.
		 */

		function hyphenateStyleName(name) {
		  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
		}

		var warnValidStyle = function () {};

		{
		  // 'msTransform' is correct, but the other prefixes should be capitalized
		  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
		  var msPattern$1 = /^-ms-/;
		  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

		  var badStyleValueWithSemicolonPattern = /;\s*$/;
		  var warnedStyleNames = {};
		  var warnedStyleValues = {};
		  var warnedForNaNValue = false;
		  var warnedForInfinityValue = false;

		  var camelize = function (string) {
		    return string.replace(hyphenPattern, function (_, character) {
		      return character.toUpperCase();
		    });
		  };

		  var warnHyphenatedStyleName = function (name) {
		    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
		      return;
		    }

		    warnedStyleNames[name] = true;

		    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
		    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
		    // is converted to lowercase `ms`.
		    camelize(name.replace(msPattern$1, 'ms-')));
		  };

		  var warnBadVendoredStyleName = function (name) {
		    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
		      return;
		    }

		    warnedStyleNames[name] = true;

		    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
		  };

		  var warnStyleValueWithSemicolon = function (name, value) {
		    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
		      return;
		    }

		    warnedStyleValues[value] = true;

		    error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
		  };

		  var warnStyleValueIsNaN = function (name, value) {
		    if (warnedForNaNValue) {
		      return;
		    }

		    warnedForNaNValue = true;

		    error('`NaN` is an invalid value for the `%s` css style property.', name);
		  };

		  var warnStyleValueIsInfinity = function (name, value) {
		    if (warnedForInfinityValue) {
		      return;
		    }

		    warnedForInfinityValue = true;

		    error('`Infinity` is an invalid value for the `%s` css style property.', name);
		  };

		  warnValidStyle = function (name, value) {
		    if (name.indexOf('-') > -1) {
		      warnHyphenatedStyleName(name);
		    } else if (badVendoredStyleNamePattern.test(name)) {
		      warnBadVendoredStyleName(name);
		    } else if (badStyleValueWithSemicolonPattern.test(value)) {
		      warnStyleValueWithSemicolon(name, value);
		    }

		    if (typeof value === 'number') {
		      if (isNaN(value)) {
		        warnStyleValueIsNaN(name, value);
		      } else if (!isFinite(value)) {
		        warnStyleValueIsInfinity(name, value);
		      }
		    }
		  };
		}

		var warnValidStyle$1 = warnValidStyle;

		/**
		 * Operations for dealing with CSS properties.
		 */

		/**
		 * This creates a string that is expected to be equivalent to the style
		 * attribute generated by server-side rendering. It by-passes warnings and
		 * security checks so it's not safe to use this value for anything other than
		 * comparison. It is only used in DEV for SSR validation.
		 */

		function createDangerousStringForStyles(styles) {
		  {
		    var serialized = '';
		    var delimiter = '';

		    for (var styleName in styles) {
		      if (!styles.hasOwnProperty(styleName)) {
		        continue;
		      }

		      var styleValue = styles[styleName];

		      if (styleValue != null) {
		        var isCustomProperty = styleName.indexOf('--') === 0;
		        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
		        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
		        delimiter = ';';
		      }
		    }

		    return serialized || null;
		  }
		}
		/**
		 * Sets the value for multiple styles on a node.  If a value is specified as
		 * '' (empty string), the corresponding style property will be unset.
		 *
		 * @param {DOMElement} node
		 * @param {object} styles
		 */

		function setValueForStyles(node, styles) {
		  var style = node.style;

		  for (var styleName in styles) {
		    if (!styles.hasOwnProperty(styleName)) {
		      continue;
		    }

		    var isCustomProperty = styleName.indexOf('--') === 0;

		    {
		      if (!isCustomProperty) {
		        warnValidStyle$1(styleName, styles[styleName]);
		      }
		    }

		    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

		    if (styleName === 'float') {
		      styleName = 'cssFloat';
		    }

		    if (isCustomProperty) {
		      style.setProperty(styleName, styleValue);
		    } else {
		      style[styleName] = styleValue;
		    }
		  }
		}

		function isValueEmpty(value) {
		  return value == null || typeof value === 'boolean' || value === '';
		}
		/**
		 * Given {color: 'red', overflow: 'hidden'} returns {
		 *   color: 'color',
		 *   overflowX: 'overflow',
		 *   overflowY: 'overflow',
		 * }. This can be read as "the overflowY property was set by the overflow
		 * shorthand". That is, the values are the property that each was derived from.
		 */


		function expandShorthandMap(styles) {
		  var expanded = {};

		  for (var key in styles) {
		    var longhands = shorthandToLonghand[key] || [key];

		    for (var i = 0; i < longhands.length; i++) {
		      expanded[longhands[i]] = key;
		    }
		  }

		  return expanded;
		}
		/**
		 * When mixing shorthand and longhand property names, we warn during updates if
		 * we expect an incorrect result to occur. In particular, we warn for:
		 *
		 * Updating a shorthand property (longhand gets overwritten):
		 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
		 *   becomes .style.font = 'baz'
		 * Removing a shorthand property (longhand gets lost too):
		 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
		 *   becomes .style.font = ''
		 * Removing a longhand property (should revert to shorthand; doesn't):
		 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
		 *   becomes .style.fontVariant = ''
		 */


		function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
		  {
		    if (!nextStyles) {
		      return;
		    }

		    var expandedUpdates = expandShorthandMap(styleUpdates);
		    var expandedStyles = expandShorthandMap(nextStyles);
		    var warnedAbout = {};

		    for (var key in expandedUpdates) {
		      var originalKey = expandedUpdates[key];
		      var correctOriginalKey = expandedStyles[key];

		      if (correctOriginalKey && originalKey !== correctOriginalKey) {
		        var warningKey = originalKey + ',' + correctOriginalKey;

		        if (warnedAbout[warningKey]) {
		          continue;
		        }

		        warnedAbout[warningKey] = true;

		        error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
		      }
		    }
		  }
		}

		// For HTML, certain tags should omit their close tag. We keep a list for
		// those special-case tags.
		var omittedCloseTags = {
		  area: true,
		  base: true,
		  br: true,
		  col: true,
		  embed: true,
		  hr: true,
		  img: true,
		  input: true,
		  keygen: true,
		  link: true,
		  meta: true,
		  param: true,
		  source: true,
		  track: true,
		  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

		};

		// `omittedCloseTags` except that `menuitem` should still have its closing tag.

		var voidElementTags = assign({
		  menuitem: true
		}, omittedCloseTags);

		var HTML = '__html';

		function assertValidProps(tag, props) {
		  if (!props) {
		    return;
		  } // Note the use of `==` which checks for null or undefined.


		  if (voidElementTags[tag]) {
		    if (props.children != null || props.dangerouslySetInnerHTML != null) {
		      throw new Error(tag + " is a void element tag and must neither have `children` nor " + 'use `dangerouslySetInnerHTML`.');
		    }
		  }

		  if (props.dangerouslySetInnerHTML != null) {
		    if (props.children != null) {
		      throw new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');
		    }

		    if (typeof props.dangerouslySetInnerHTML !== 'object' || !(HTML in props.dangerouslySetInnerHTML)) {
		      throw new Error('`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://reactjs.org/link/dangerously-set-inner-html ' + 'for more information.');
		    }
		  }

		  {
		    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
		      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
		    }
		  }

		  if (props.style != null && typeof props.style !== 'object') {
		    throw new Error('The `style` prop expects a mapping from style properties to values, ' + "not a string. For example, style={{marginRight: spacing + 'em'}} when " + 'using JSX.');
		  }
		}

		function isCustomComponent(tagName, props) {
		  if (tagName.indexOf('-') === -1) {
		    return typeof props.is === 'string';
		  }

		  switch (tagName) {
		    // These are reserved SVG and MathML elements.
		    // We don't mind this list too much because we expect it to never grow.
		    // The alternative is to track the namespace in a few places which is convoluted.
		    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
		    case 'annotation-xml':
		    case 'color-profile':
		    case 'font-face':
		    case 'font-face-src':
		    case 'font-face-uri':
		    case 'font-face-format':
		    case 'font-face-name':
		    case 'missing-glyph':
		      return false;

		    default:
		      return true;
		  }
		}

		// When adding attributes to the HTML or SVG allowed attribute list, be sure to
		// also add them to this module to ensure casing and incorrect name
		// warnings.
		var possibleStandardNames = {
		  // HTML
		  accept: 'accept',
		  acceptcharset: 'acceptCharset',
		  'accept-charset': 'acceptCharset',
		  accesskey: 'accessKey',
		  action: 'action',
		  allowfullscreen: 'allowFullScreen',
		  alt: 'alt',
		  as: 'as',
		  async: 'async',
		  autocapitalize: 'autoCapitalize',
		  autocomplete: 'autoComplete',
		  autocorrect: 'autoCorrect',
		  autofocus: 'autoFocus',
		  autoplay: 'autoPlay',
		  autosave: 'autoSave',
		  capture: 'capture',
		  cellpadding: 'cellPadding',
		  cellspacing: 'cellSpacing',
		  challenge: 'challenge',
		  charset: 'charSet',
		  checked: 'checked',
		  children: 'children',
		  cite: 'cite',
		  class: 'className',
		  classid: 'classID',
		  classname: 'className',
		  cols: 'cols',
		  colspan: 'colSpan',
		  content: 'content',
		  contenteditable: 'contentEditable',
		  contextmenu: 'contextMenu',
		  controls: 'controls',
		  controlslist: 'controlsList',
		  coords: 'coords',
		  crossorigin: 'crossOrigin',
		  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
		  data: 'data',
		  datetime: 'dateTime',
		  default: 'default',
		  defaultchecked: 'defaultChecked',
		  defaultvalue: 'defaultValue',
		  defer: 'defer',
		  dir: 'dir',
		  disabled: 'disabled',
		  disablepictureinpicture: 'disablePictureInPicture',
		  disableremoteplayback: 'disableRemotePlayback',
		  download: 'download',
		  draggable: 'draggable',
		  enctype: 'encType',
		  enterkeyhint: 'enterKeyHint',
		  for: 'htmlFor',
		  form: 'form',
		  formmethod: 'formMethod',
		  formaction: 'formAction',
		  formenctype: 'formEncType',
		  formnovalidate: 'formNoValidate',
		  formtarget: 'formTarget',
		  frameborder: 'frameBorder',
		  headers: 'headers',
		  height: 'height',
		  hidden: 'hidden',
		  high: 'high',
		  href: 'href',
		  hreflang: 'hrefLang',
		  htmlfor: 'htmlFor',
		  httpequiv: 'httpEquiv',
		  'http-equiv': 'httpEquiv',
		  icon: 'icon',
		  id: 'id',
		  imagesizes: 'imageSizes',
		  imagesrcset: 'imageSrcSet',
		  innerhtml: 'innerHTML',
		  inputmode: 'inputMode',
		  integrity: 'integrity',
		  is: 'is',
		  itemid: 'itemID',
		  itemprop: 'itemProp',
		  itemref: 'itemRef',
		  itemscope: 'itemScope',
		  itemtype: 'itemType',
		  keyparams: 'keyParams',
		  keytype: 'keyType',
		  kind: 'kind',
		  label: 'label',
		  lang: 'lang',
		  list: 'list',
		  loop: 'loop',
		  low: 'low',
		  manifest: 'manifest',
		  marginwidth: 'marginWidth',
		  marginheight: 'marginHeight',
		  max: 'max',
		  maxlength: 'maxLength',
		  media: 'media',
		  mediagroup: 'mediaGroup',
		  method: 'method',
		  min: 'min',
		  minlength: 'minLength',
		  multiple: 'multiple',
		  muted: 'muted',
		  name: 'name',
		  nomodule: 'noModule',
		  nonce: 'nonce',
		  novalidate: 'noValidate',
		  open: 'open',
		  optimum: 'optimum',
		  pattern: 'pattern',
		  placeholder: 'placeholder',
		  playsinline: 'playsInline',
		  poster: 'poster',
		  preload: 'preload',
		  profile: 'profile',
		  radiogroup: 'radioGroup',
		  readonly: 'readOnly',
		  referrerpolicy: 'referrerPolicy',
		  rel: 'rel',
		  required: 'required',
		  reversed: 'reversed',
		  role: 'role',
		  rows: 'rows',
		  rowspan: 'rowSpan',
		  sandbox: 'sandbox',
		  scope: 'scope',
		  scoped: 'scoped',
		  scrolling: 'scrolling',
		  seamless: 'seamless',
		  selected: 'selected',
		  shape: 'shape',
		  size: 'size',
		  sizes: 'sizes',
		  span: 'span',
		  spellcheck: 'spellCheck',
		  src: 'src',
		  srcdoc: 'srcDoc',
		  srclang: 'srcLang',
		  srcset: 'srcSet',
		  start: 'start',
		  step: 'step',
		  style: 'style',
		  summary: 'summary',
		  tabindex: 'tabIndex',
		  target: 'target',
		  title: 'title',
		  type: 'type',
		  usemap: 'useMap',
		  value: 'value',
		  width: 'width',
		  wmode: 'wmode',
		  wrap: 'wrap',
		  // SVG
		  about: 'about',
		  accentheight: 'accentHeight',
		  'accent-height': 'accentHeight',
		  accumulate: 'accumulate',
		  additive: 'additive',
		  alignmentbaseline: 'alignmentBaseline',
		  'alignment-baseline': 'alignmentBaseline',
		  allowreorder: 'allowReorder',
		  alphabetic: 'alphabetic',
		  amplitude: 'amplitude',
		  arabicform: 'arabicForm',
		  'arabic-form': 'arabicForm',
		  ascent: 'ascent',
		  attributename: 'attributeName',
		  attributetype: 'attributeType',
		  autoreverse: 'autoReverse',
		  azimuth: 'azimuth',
		  basefrequency: 'baseFrequency',
		  baselineshift: 'baselineShift',
		  'baseline-shift': 'baselineShift',
		  baseprofile: 'baseProfile',
		  bbox: 'bbox',
		  begin: 'begin',
		  bias: 'bias',
		  by: 'by',
		  calcmode: 'calcMode',
		  capheight: 'capHeight',
		  'cap-height': 'capHeight',
		  clip: 'clip',
		  clippath: 'clipPath',
		  'clip-path': 'clipPath',
		  clippathunits: 'clipPathUnits',
		  cliprule: 'clipRule',
		  'clip-rule': 'clipRule',
		  color: 'color',
		  colorinterpolation: 'colorInterpolation',
		  'color-interpolation': 'colorInterpolation',
		  colorinterpolationfilters: 'colorInterpolationFilters',
		  'color-interpolation-filters': 'colorInterpolationFilters',
		  colorprofile: 'colorProfile',
		  'color-profile': 'colorProfile',
		  colorrendering: 'colorRendering',
		  'color-rendering': 'colorRendering',
		  contentscripttype: 'contentScriptType',
		  contentstyletype: 'contentStyleType',
		  cursor: 'cursor',
		  cx: 'cx',
		  cy: 'cy',
		  d: 'd',
		  datatype: 'datatype',
		  decelerate: 'decelerate',
		  descent: 'descent',
		  diffuseconstant: 'diffuseConstant',
		  direction: 'direction',
		  display: 'display',
		  divisor: 'divisor',
		  dominantbaseline: 'dominantBaseline',
		  'dominant-baseline': 'dominantBaseline',
		  dur: 'dur',
		  dx: 'dx',
		  dy: 'dy',
		  edgemode: 'edgeMode',
		  elevation: 'elevation',
		  enablebackground: 'enableBackground',
		  'enable-background': 'enableBackground',
		  end: 'end',
		  exponent: 'exponent',
		  externalresourcesrequired: 'externalResourcesRequired',
		  fill: 'fill',
		  fillopacity: 'fillOpacity',
		  'fill-opacity': 'fillOpacity',
		  fillrule: 'fillRule',
		  'fill-rule': 'fillRule',
		  filter: 'filter',
		  filterres: 'filterRes',
		  filterunits: 'filterUnits',
		  floodopacity: 'floodOpacity',
		  'flood-opacity': 'floodOpacity',
		  floodcolor: 'floodColor',
		  'flood-color': 'floodColor',
		  focusable: 'focusable',
		  fontfamily: 'fontFamily',
		  'font-family': 'fontFamily',
		  fontsize: 'fontSize',
		  'font-size': 'fontSize',
		  fontsizeadjust: 'fontSizeAdjust',
		  'font-size-adjust': 'fontSizeAdjust',
		  fontstretch: 'fontStretch',
		  'font-stretch': 'fontStretch',
		  fontstyle: 'fontStyle',
		  'font-style': 'fontStyle',
		  fontvariant: 'fontVariant',
		  'font-variant': 'fontVariant',
		  fontweight: 'fontWeight',
		  'font-weight': 'fontWeight',
		  format: 'format',
		  from: 'from',
		  fx: 'fx',
		  fy: 'fy',
		  g1: 'g1',
		  g2: 'g2',
		  glyphname: 'glyphName',
		  'glyph-name': 'glyphName',
		  glyphorientationhorizontal: 'glyphOrientationHorizontal',
		  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
		  glyphorientationvertical: 'glyphOrientationVertical',
		  'glyph-orientation-vertical': 'glyphOrientationVertical',
		  glyphref: 'glyphRef',
		  gradienttransform: 'gradientTransform',
		  gradientunits: 'gradientUnits',
		  hanging: 'hanging',
		  horizadvx: 'horizAdvX',
		  'horiz-adv-x': 'horizAdvX',
		  horizoriginx: 'horizOriginX',
		  'horiz-origin-x': 'horizOriginX',
		  ideographic: 'ideographic',
		  imagerendering: 'imageRendering',
		  'image-rendering': 'imageRendering',
		  in2: 'in2',
		  in: 'in',
		  inlist: 'inlist',
		  intercept: 'intercept',
		  k1: 'k1',
		  k2: 'k2',
		  k3: 'k3',
		  k4: 'k4',
		  k: 'k',
		  kernelmatrix: 'kernelMatrix',
		  kernelunitlength: 'kernelUnitLength',
		  kerning: 'kerning',
		  keypoints: 'keyPoints',
		  keysplines: 'keySplines',
		  keytimes: 'keyTimes',
		  lengthadjust: 'lengthAdjust',
		  letterspacing: 'letterSpacing',
		  'letter-spacing': 'letterSpacing',
		  lightingcolor: 'lightingColor',
		  'lighting-color': 'lightingColor',
		  limitingconeangle: 'limitingConeAngle',
		  local: 'local',
		  markerend: 'markerEnd',
		  'marker-end': 'markerEnd',
		  markerheight: 'markerHeight',
		  markermid: 'markerMid',
		  'marker-mid': 'markerMid',
		  markerstart: 'markerStart',
		  'marker-start': 'markerStart',
		  markerunits: 'markerUnits',
		  markerwidth: 'markerWidth',
		  mask: 'mask',
		  maskcontentunits: 'maskContentUnits',
		  maskunits: 'maskUnits',
		  mathematical: 'mathematical',
		  mode: 'mode',
		  numoctaves: 'numOctaves',
		  offset: 'offset',
		  opacity: 'opacity',
		  operator: 'operator',
		  order: 'order',
		  orient: 'orient',
		  orientation: 'orientation',
		  origin: 'origin',
		  overflow: 'overflow',
		  overlineposition: 'overlinePosition',
		  'overline-position': 'overlinePosition',
		  overlinethickness: 'overlineThickness',
		  'overline-thickness': 'overlineThickness',
		  paintorder: 'paintOrder',
		  'paint-order': 'paintOrder',
		  panose1: 'panose1',
		  'panose-1': 'panose1',
		  pathlength: 'pathLength',
		  patterncontentunits: 'patternContentUnits',
		  patterntransform: 'patternTransform',
		  patternunits: 'patternUnits',
		  pointerevents: 'pointerEvents',
		  'pointer-events': 'pointerEvents',
		  points: 'points',
		  pointsatx: 'pointsAtX',
		  pointsaty: 'pointsAtY',
		  pointsatz: 'pointsAtZ',
		  prefix: 'prefix',
		  preservealpha: 'preserveAlpha',
		  preserveaspectratio: 'preserveAspectRatio',
		  primitiveunits: 'primitiveUnits',
		  property: 'property',
		  r: 'r',
		  radius: 'radius',
		  refx: 'refX',
		  refy: 'refY',
		  renderingintent: 'renderingIntent',
		  'rendering-intent': 'renderingIntent',
		  repeatcount: 'repeatCount',
		  repeatdur: 'repeatDur',
		  requiredextensions: 'requiredExtensions',
		  requiredfeatures: 'requiredFeatures',
		  resource: 'resource',
		  restart: 'restart',
		  result: 'result',
		  results: 'results',
		  rotate: 'rotate',
		  rx: 'rx',
		  ry: 'ry',
		  scale: 'scale',
		  security: 'security',
		  seed: 'seed',
		  shaperendering: 'shapeRendering',
		  'shape-rendering': 'shapeRendering',
		  slope: 'slope',
		  spacing: 'spacing',
		  specularconstant: 'specularConstant',
		  specularexponent: 'specularExponent',
		  speed: 'speed',
		  spreadmethod: 'spreadMethod',
		  startoffset: 'startOffset',
		  stddeviation: 'stdDeviation',
		  stemh: 'stemh',
		  stemv: 'stemv',
		  stitchtiles: 'stitchTiles',
		  stopcolor: 'stopColor',
		  'stop-color': 'stopColor',
		  stopopacity: 'stopOpacity',
		  'stop-opacity': 'stopOpacity',
		  strikethroughposition: 'strikethroughPosition',
		  'strikethrough-position': 'strikethroughPosition',
		  strikethroughthickness: 'strikethroughThickness',
		  'strikethrough-thickness': 'strikethroughThickness',
		  string: 'string',
		  stroke: 'stroke',
		  strokedasharray: 'strokeDasharray',
		  'stroke-dasharray': 'strokeDasharray',
		  strokedashoffset: 'strokeDashoffset',
		  'stroke-dashoffset': 'strokeDashoffset',
		  strokelinecap: 'strokeLinecap',
		  'stroke-linecap': 'strokeLinecap',
		  strokelinejoin: 'strokeLinejoin',
		  'stroke-linejoin': 'strokeLinejoin',
		  strokemiterlimit: 'strokeMiterlimit',
		  'stroke-miterlimit': 'strokeMiterlimit',
		  strokewidth: 'strokeWidth',
		  'stroke-width': 'strokeWidth',
		  strokeopacity: 'strokeOpacity',
		  'stroke-opacity': 'strokeOpacity',
		  suppresscontenteditablewarning: 'suppressContentEditableWarning',
		  suppresshydrationwarning: 'suppressHydrationWarning',
		  surfacescale: 'surfaceScale',
		  systemlanguage: 'systemLanguage',
		  tablevalues: 'tableValues',
		  targetx: 'targetX',
		  targety: 'targetY',
		  textanchor: 'textAnchor',
		  'text-anchor': 'textAnchor',
		  textdecoration: 'textDecoration',
		  'text-decoration': 'textDecoration',
		  textlength: 'textLength',
		  textrendering: 'textRendering',
		  'text-rendering': 'textRendering',
		  to: 'to',
		  transform: 'transform',
		  typeof: 'typeof',
		  u1: 'u1',
		  u2: 'u2',
		  underlineposition: 'underlinePosition',
		  'underline-position': 'underlinePosition',
		  underlinethickness: 'underlineThickness',
		  'underline-thickness': 'underlineThickness',
		  unicode: 'unicode',
		  unicodebidi: 'unicodeBidi',
		  'unicode-bidi': 'unicodeBidi',
		  unicoderange: 'unicodeRange',
		  'unicode-range': 'unicodeRange',
		  unitsperem: 'unitsPerEm',
		  'units-per-em': 'unitsPerEm',
		  unselectable: 'unselectable',
		  valphabetic: 'vAlphabetic',
		  'v-alphabetic': 'vAlphabetic',
		  values: 'values',
		  vectoreffect: 'vectorEffect',
		  'vector-effect': 'vectorEffect',
		  version: 'version',
		  vertadvy: 'vertAdvY',
		  'vert-adv-y': 'vertAdvY',
		  vertoriginx: 'vertOriginX',
		  'vert-origin-x': 'vertOriginX',
		  vertoriginy: 'vertOriginY',
		  'vert-origin-y': 'vertOriginY',
		  vhanging: 'vHanging',
		  'v-hanging': 'vHanging',
		  videographic: 'vIdeographic',
		  'v-ideographic': 'vIdeographic',
		  viewbox: 'viewBox',
		  viewtarget: 'viewTarget',
		  visibility: 'visibility',
		  vmathematical: 'vMathematical',
		  'v-mathematical': 'vMathematical',
		  vocab: 'vocab',
		  widths: 'widths',
		  wordspacing: 'wordSpacing',
		  'word-spacing': 'wordSpacing',
		  writingmode: 'writingMode',
		  'writing-mode': 'writingMode',
		  x1: 'x1',
		  x2: 'x2',
		  x: 'x',
		  xchannelselector: 'xChannelSelector',
		  xheight: 'xHeight',
		  'x-height': 'xHeight',
		  xlinkactuate: 'xlinkActuate',
		  'xlink:actuate': 'xlinkActuate',
		  xlinkarcrole: 'xlinkArcrole',
		  'xlink:arcrole': 'xlinkArcrole',
		  xlinkhref: 'xlinkHref',
		  'xlink:href': 'xlinkHref',
		  xlinkrole: 'xlinkRole',
		  'xlink:role': 'xlinkRole',
		  xlinkshow: 'xlinkShow',
		  'xlink:show': 'xlinkShow',
		  xlinktitle: 'xlinkTitle',
		  'xlink:title': 'xlinkTitle',
		  xlinktype: 'xlinkType',
		  'xlink:type': 'xlinkType',
		  xmlbase: 'xmlBase',
		  'xml:base': 'xmlBase',
		  xmllang: 'xmlLang',
		  'xml:lang': 'xmlLang',
		  xmlns: 'xmlns',
		  'xml:space': 'xmlSpace',
		  xmlnsxlink: 'xmlnsXlink',
		  'xmlns:xlink': 'xmlnsXlink',
		  xmlspace: 'xmlSpace',
		  y1: 'y1',
		  y2: 'y2',
		  y: 'y',
		  ychannelselector: 'yChannelSelector',
		  z: 'z',
		  zoomandpan: 'zoomAndPan'
		};

		var ariaProperties = {
		  'aria-current': 0,
		  // state
		  'aria-description': 0,
		  'aria-details': 0,
		  'aria-disabled': 0,
		  // state
		  'aria-hidden': 0,
		  // state
		  'aria-invalid': 0,
		  // state
		  'aria-keyshortcuts': 0,
		  'aria-label': 0,
		  'aria-roledescription': 0,
		  // Widget Attributes
		  'aria-autocomplete': 0,
		  'aria-checked': 0,
		  'aria-expanded': 0,
		  'aria-haspopup': 0,
		  'aria-level': 0,
		  'aria-modal': 0,
		  'aria-multiline': 0,
		  'aria-multiselectable': 0,
		  'aria-orientation': 0,
		  'aria-placeholder': 0,
		  'aria-pressed': 0,
		  'aria-readonly': 0,
		  'aria-required': 0,
		  'aria-selected': 0,
		  'aria-sort': 0,
		  'aria-valuemax': 0,
		  'aria-valuemin': 0,
		  'aria-valuenow': 0,
		  'aria-valuetext': 0,
		  // Live Region Attributes
		  'aria-atomic': 0,
		  'aria-busy': 0,
		  'aria-live': 0,
		  'aria-relevant': 0,
		  // Drag-and-Drop Attributes
		  'aria-dropeffect': 0,
		  'aria-grabbed': 0,
		  // Relationship Attributes
		  'aria-activedescendant': 0,
		  'aria-colcount': 0,
		  'aria-colindex': 0,
		  'aria-colspan': 0,
		  'aria-controls': 0,
		  'aria-describedby': 0,
		  'aria-errormessage': 0,
		  'aria-flowto': 0,
		  'aria-labelledby': 0,
		  'aria-owns': 0,
		  'aria-posinset': 0,
		  'aria-rowcount': 0,
		  'aria-rowindex': 0,
		  'aria-rowspan': 0,
		  'aria-setsize': 0
		};

		var warnedProperties = {};
		var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
		var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

		function validateProperty(tagName, name) {
		  {
		    if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
		      return true;
		    }

		    if (rARIACamel.test(name)) {
		      var ariaName = 'aria-' + name.slice(4).toLowerCase();
		      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
		      // DOM properties, then it is an invalid aria-* attribute.

		      if (correctName == null) {
		        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);

		        warnedProperties[name] = true;
		        return true;
		      } // aria-* attributes should be lowercase; suggest the lowercase version.


		      if (name !== correctName) {
		        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);

		        warnedProperties[name] = true;
		        return true;
		      }
		    }

		    if (rARIA.test(name)) {
		      var lowerCasedName = name.toLowerCase();
		      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
		      // DOM properties, then it is an invalid aria-* attribute.

		      if (standardName == null) {
		        warnedProperties[name] = true;
		        return false;
		      } // aria-* attributes should be lowercase; suggest the lowercase version.


		      if (name !== standardName) {
		        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);

		        warnedProperties[name] = true;
		        return true;
		      }
		    }
		  }

		  return true;
		}

		function warnInvalidARIAProps(type, props) {
		  {
		    var invalidProps = [];

		    for (var key in props) {
		      var isValid = validateProperty(type, key);

		      if (!isValid) {
		        invalidProps.push(key);
		      }
		    }

		    var unknownPropString = invalidProps.map(function (prop) {
		      return '`' + prop + '`';
		    }).join(', ');

		    if (invalidProps.length === 1) {
		      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
		    } else if (invalidProps.length > 1) {
		      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
		    }
		  }
		}

		function validateProperties(type, props) {
		  if (isCustomComponent(type, props)) {
		    return;
		  }

		  warnInvalidARIAProps(type, props);
		}

		var didWarnValueNull = false;
		function validateProperties$1(type, props) {
		  {
		    if (type !== 'input' && type !== 'textarea' && type !== 'select') {
		      return;
		    }

		    if (props != null && props.value === null && !didWarnValueNull) {
		      didWarnValueNull = true;

		      if (type === 'select' && props.multiple) {
		        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
		      } else {
		        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
		      }
		    }
		  }
		}

		var validateProperty$1 = function () {};

		{
		  var warnedProperties$1 = {};
		  var EVENT_NAME_REGEX = /^on./;
		  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
		  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
		  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

		  validateProperty$1 = function (tagName, name, value, eventRegistry) {
		    if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
		      return true;
		    }

		    var lowerCasedName = name.toLowerCase();

		    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
		      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');

		      warnedProperties$1[name] = true;
		      return true;
		    } // We can't rely on the event system being injected on the server.


		    if (eventRegistry != null) {
		      var registrationNameDependencies = eventRegistry.registrationNameDependencies,
		          possibleRegistrationNames = eventRegistry.possibleRegistrationNames;

		      if (registrationNameDependencies.hasOwnProperty(name)) {
		        return true;
		      }

		      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

		      if (registrationName != null) {
		        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);

		        warnedProperties$1[name] = true;
		        return true;
		      }

		      if (EVENT_NAME_REGEX.test(name)) {
		        error('Unknown event handler property `%s`. It will be ignored.', name);

		        warnedProperties$1[name] = true;
		        return true;
		      }
		    } else if (EVENT_NAME_REGEX.test(name)) {
		      // If no event plugins have been injected, we are in a server environment.
		      // So we can't tell if the event name is correct for sure, but we can filter
		      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
		      if (INVALID_EVENT_NAME_REGEX.test(name)) {
		        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
		      }

		      warnedProperties$1[name] = true;
		      return true;
		    } // Let the ARIA attribute hook validate ARIA attributes


		    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
		      return true;
		    }

		    if (lowerCasedName === 'innerhtml') {
		      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');

		      warnedProperties$1[name] = true;
		      return true;
		    }

		    if (lowerCasedName === 'aria') {
		      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');

		      warnedProperties$1[name] = true;
		      return true;
		    }

		    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
		      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);

		      warnedProperties$1[name] = true;
		      return true;
		    }

		    if (typeof value === 'number' && isNaN(value)) {
		      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);

		      warnedProperties$1[name] = true;
		      return true;
		    }

		    var propertyInfo = getPropertyInfo(name);
		    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

		    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
		      var standardName = possibleStandardNames[lowerCasedName];

		      if (standardName !== name) {
		        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);

		        warnedProperties$1[name] = true;
		        return true;
		      }
		    } else if (!isReserved && name !== lowerCasedName) {
		      // Unknown attributes should have lowercase casing since that's how they
		      // will be cased anyway with server rendering.
		      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);

		      warnedProperties$1[name] = true;
		      return true;
		    }

		    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
		      if (value) {
		        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
		      } else {
		        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
		      }

		      warnedProperties$1[name] = true;
		      return true;
		    } // Now that we've validated casing, do not validate
		    // data types for reserved props


		    if (isReserved) {
		      return true;
		    } // Warn when a known attribute is a bad type


		    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
		      warnedProperties$1[name] = true;
		      return false;
		    } // Warn when passing the strings 'false' or 'true' into a boolean prop


		    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
		      error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);

		      warnedProperties$1[name] = true;
		      return true;
		    }

		    return true;
		  };
		}

		var warnUnknownProperties = function (type, props, eventRegistry) {
		  {
		    var unknownProps = [];

		    for (var key in props) {
		      var isValid = validateProperty$1(type, key, props[key], eventRegistry);

		      if (!isValid) {
		        unknownProps.push(key);
		      }
		    }

		    var unknownPropString = unknownProps.map(function (prop) {
		      return '`' + prop + '`';
		    }).join(', ');

		    if (unknownProps.length === 1) {
		      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
		    } else if (unknownProps.length > 1) {
		      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
		    }
		  }
		};

		function validateProperties$2(type, props, eventRegistry) {
		  if (isCustomComponent(type, props)) {
		    return;
		  }

		  warnUnknownProperties(type, props, eventRegistry);
		}

		var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
		var IS_NON_DELEGATED = 1 << 1;
		var IS_CAPTURE_PHASE = 1 << 2;
		// set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
		// we call willDeferLaterForLegacyFBSupport, thus not bailing out
		// will result in endless cycles like an infinite loop.
		// We also don't want to defer during event replaying.

		var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;

		// This exists to avoid circular dependency between ReactDOMEventReplaying
		// and DOMPluginEventSystem.
		var currentReplayingEvent = null;
		function setReplayingEvent(event) {
		  {
		    if (currentReplayingEvent !== null) {
		      error('Expected currently replaying event to be null. This error ' + 'is likely caused by a bug in React. Please file an issue.');
		    }
		  }

		  currentReplayingEvent = event;
		}
		function resetReplayingEvent() {
		  {
		    if (currentReplayingEvent === null) {
		      error('Expected currently replaying event to not be null. This error ' + 'is likely caused by a bug in React. Please file an issue.');
		    }
		  }

		  currentReplayingEvent = null;
		}
		function isReplayingEvent(event) {
		  return event === currentReplayingEvent;
		}

		/**
		 * Gets the target node from a native browser event by accounting for
		 * inconsistencies in browser DOM APIs.
		 *
		 * @param {object} nativeEvent Native browser event.
		 * @return {DOMEventTarget} Target node.
		 */

		function getEventTarget(nativeEvent) {
		  // Fallback to nativeEvent.srcElement for IE9
		  // https://github.com/facebook/react/issues/12506
		  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

		  if (target.correspondingUseElement) {
		    target = target.correspondingUseElement;
		  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
		  // @see http://www.quirksmode.org/js/events_properties.html


		  return target.nodeType === TEXT_NODE ? target.parentNode : target;
		}

		var restoreImpl = null;
		var restoreTarget = null;
		var restoreQueue = null;

		function restoreStateOfTarget(target) {
		  // We perform this translation at the end of the event loop so that we
		  // always receive the correct fiber here
		  var internalInstance = getInstanceFromNode(target);

		  if (!internalInstance) {
		    // Unmounted
		    return;
		  }

		  if (typeof restoreImpl !== 'function') {
		    throw new Error('setRestoreImplementation() needs to be called to handle a target for controlled ' + 'events. This error is likely caused by a bug in React. Please file an issue.');
		  }

		  var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.

		  if (stateNode) {
		    var _props = getFiberCurrentPropsFromNode(stateNode);

		    restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
		  }
		}

		function setRestoreImplementation(impl) {
		  restoreImpl = impl;
		}
		function enqueueStateRestore(target) {
		  if (restoreTarget) {
		    if (restoreQueue) {
		      restoreQueue.push(target);
		    } else {
		      restoreQueue = [target];
		    }
		  } else {
		    restoreTarget = target;
		  }
		}
		function needsStateRestore() {
		  return restoreTarget !== null || restoreQueue !== null;
		}
		function restoreStateIfNeeded() {
		  if (!restoreTarget) {
		    return;
		  }

		  var target = restoreTarget;
		  var queuedTargets = restoreQueue;
		  restoreTarget = null;
		  restoreQueue = null;
		  restoreStateOfTarget(target);

		  if (queuedTargets) {
		    for (var i = 0; i < queuedTargets.length; i++) {
		      restoreStateOfTarget(queuedTargets[i]);
		    }
		  }
		}

		// the renderer. Such as when we're dispatching events or if third party
		// libraries need to call batchedUpdates. Eventually, this API will go away when
		// everything is batched by default. We'll then have a similar API to opt-out of
		// scheduled work and instead do synchronous work.
		// Defaults

		var batchedUpdatesImpl = function (fn, bookkeeping) {
		  return fn(bookkeeping);
		};

		var flushSyncImpl = function () {};

		var isInsideEventHandler = false;

		function finishEventHandler() {
		  // Here we wait until all updates have propagated, which is important
		  // when using controlled components within layers:
		  // https://github.com/facebook/react/issues/1698
		  // Then we restore state of any controlled component.
		  var controlledComponentsHavePendingUpdates = needsStateRestore();

		  if (controlledComponentsHavePendingUpdates) {
		    // If a controlled event was fired, we may need to restore the state of
		    // the DOM node back to the controlled value. This is necessary when React
		    // bails out of the update without touching the DOM.
		    // TODO: Restore state in the microtask, after the discrete updates flush,
		    // instead of early flushing them here.
		    flushSyncImpl();
		    restoreStateIfNeeded();
		  }
		}

		function batchedUpdates(fn, a, b) {
		  if (isInsideEventHandler) {
		    // If we are currently inside another batch, we need to wait until it
		    // fully completes before restoring state.
		    return fn(a, b);
		  }

		  isInsideEventHandler = true;

		  try {
		    return batchedUpdatesImpl(fn, a, b);
		  } finally {
		    isInsideEventHandler = false;
		    finishEventHandler();
		  }
		} // TODO: Replace with flushSync
		function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
		  batchedUpdatesImpl = _batchedUpdatesImpl;
		  flushSyncImpl = _flushSyncImpl;
		}

		function isInteractive(tag) {
		  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
		}

		function shouldPreventMouseEvent(name, type, props) {
		  switch (name) {
		    case 'onClick':
		    case 'onClickCapture':
		    case 'onDoubleClick':
		    case 'onDoubleClickCapture':
		    case 'onMouseDown':
		    case 'onMouseDownCapture':
		    case 'onMouseMove':
		    case 'onMouseMoveCapture':
		    case 'onMouseUp':
		    case 'onMouseUpCapture':
		    case 'onMouseEnter':
		      return !!(props.disabled && isInteractive(type));

		    default:
		      return false;
		  }
		}
		/**
		 * @param {object} inst The instance, which is the source of events.
		 * @param {string} registrationName Name of listener (e.g. `onClick`).
		 * @return {?function} The stored callback.
		 */


		function getListener(inst, registrationName) {
		  var stateNode = inst.stateNode;

		  if (stateNode === null) {
		    // Work in progress (ex: onload events in incremental mode).
		    return null;
		  }

		  var props = getFiberCurrentPropsFromNode(stateNode);

		  if (props === null) {
		    // Work in progress.
		    return null;
		  }

		  var listener = props[registrationName];

		  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
		    return null;
		  }

		  if (listener && typeof listener !== 'function') {
		    throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
		  }

		  return listener;
		}

		var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
		// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support

		if (canUseDOM) {
		  try {
		    var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value

		    Object.defineProperty(options, 'passive', {
		      get: function () {
		        passiveBrowserEventsSupported = true;
		      }
		    });
		    window.addEventListener('test', options, options);
		    window.removeEventListener('test', options, options);
		  } catch (e) {
		    passiveBrowserEventsSupported = false;
		  }
		}

		function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
		  var funcArgs = Array.prototype.slice.call(arguments, 3);

		  try {
		    func.apply(context, funcArgs);
		  } catch (error) {
		    this.onError(error);
		  }
		}

		var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;

		{
		  // In DEV mode, we swap out invokeGuardedCallback for a special version
		  // that plays more nicely with the browser's DevTools. The idea is to preserve
		  // "Pause on exceptions" behavior. Because React wraps all user-provided
		  // functions in invokeGuardedCallback, and the production version of
		  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
		  // like caught exceptions, and the DevTools won't pause unless the developer
		  // takes the extra step of enabling pause on caught exceptions. This is
		  // unintuitive, though, because even though React has caught the error, from
		  // the developer's perspective, the error is uncaught.
		  //
		  // To preserve the expected "Pause on exceptions" behavior, we don't use a
		  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
		  // DOM node, and call the user-provided callback from inside an event handler
		  // for that fake event. If the callback throws, the error is "captured" using
		  // a global event handler. But because the error happens in a different
		  // event loop context, it does not interrupt the normal program flow.
		  // Effectively, this gives us try-catch behavior without actually using
		  // try-catch. Neat!
		  // Check that the browser supports the APIs we need to implement our special
		  // DEV version of invokeGuardedCallback
		  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
		    var fakeNode = document.createElement('react');

		    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
		      // If document doesn't exist we know for sure we will crash in this method
		      // when we call document.createEvent(). However this can cause confusing
		      // errors: https://github.com/facebook/create-react-app/issues/3482
		      // So we preemptively throw with a better message instead.
		      if (typeof document === 'undefined' || document === null) {
		        throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');
		      }

		      var evt = document.createEvent('Event');
		      var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
		      // set this to true at the beginning, then set it to false right after
		      // calling the function. If the function errors, `didError` will never be
		      // set to false. This strategy works even if the browser is flaky and
		      // fails to call our global error handler, because it doesn't rely on
		      // the error event at all.

		      var didError = true; // Keeps track of the value of window.event so that we can reset it
		      // during the callback to let user code access window.event in the
		      // browsers that support it.

		      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
		      // dispatching: https://github.com/facebook/react/issues/13688

		      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

		      function restoreAfterDispatch() {
		        // We immediately remove the callback from event listeners so that
		        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
		        // nested call would trigger the fake event handlers of any call higher
		        // in the stack.
		        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
		        // window.event assignment in both IE <= 10 as they throw an error
		        // "Member not found" in strict mode, and in Firefox which does not
		        // support window.event.

		        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
		          window.event = windowEvent;
		        }
		      } // Create an event handler for our fake event. We will synchronously
		      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
		      // call the user-provided callback.


		      var funcArgs = Array.prototype.slice.call(arguments, 3);

		      function callCallback() {
		        didCall = true;
		        restoreAfterDispatch();
		        func.apply(context, funcArgs);
		        didError = false;
		      } // Create a global error event handler. We use this to capture the value
		      // that was thrown. It's possible that this error handler will fire more
		      // than once; for example, if non-React code also calls `dispatchEvent`
		      // and a handler for that event throws. We should be resilient to most of
		      // those cases. Even if our error event handler fires more than once, the
		      // last error event is always used. If the callback actually does error,
		      // we know that the last error event is the correct one, because it's not
		      // possible for anything else to have happened in between our callback
		      // erroring and the code that follows the `dispatchEvent` call below. If
		      // the callback doesn't error, but the error event was fired, we know to
		      // ignore it because `didError` will be false, as described above.


		      var error; // Use this to track whether the error event is ever called.

		      var didSetError = false;
		      var isCrossOriginError = false;

		      function handleWindowError(event) {
		        error = event.error;
		        didSetError = true;

		        if (error === null && event.colno === 0 && event.lineno === 0) {
		          isCrossOriginError = true;
		        }

		        if (event.defaultPrevented) {
		          // Some other error handler has prevented default.
		          // Browsers silence the error report if this happens.
		          // We'll remember this to later decide whether to log it or not.
		          if (error != null && typeof error === 'object') {
		            try {
		              error._suppressLogging = true;
		            } catch (inner) {// Ignore.
		            }
		          }
		        }
		      } // Create a fake event type.


		      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

		      window.addEventListener('error', handleWindowError);
		      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
		      // errors, it will trigger our global error handler.

		      evt.initEvent(evtType, false, false);
		      fakeNode.dispatchEvent(evt);

		      if (windowEventDescriptor) {
		        Object.defineProperty(window, 'event', windowEventDescriptor);
		      }

		      if (didCall && didError) {
		        if (!didSetError) {
		          // The callback errored, but the error event never fired.
		          // eslint-disable-next-line react-internal/prod-error-codes
		          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
		        } else if (isCrossOriginError) {
		          // eslint-disable-next-line react-internal/prod-error-codes
		          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');
		        }

		        this.onError(error);
		      } // Remove our event listeners


		      window.removeEventListener('error', handleWindowError);

		      if (!didCall) {
		        // Something went really wrong, and our event was not dispatched.
		        // https://github.com/facebook/react/issues/16734
		        // https://github.com/facebook/react/issues/16585
		        // Fall back to the production implementation.
		        restoreAfterDispatch();
		        return invokeGuardedCallbackProd.apply(this, arguments);
		      }
		    };
		  }
		}

		var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

		var hasError = false;
		var caughtError = null; // Used by event system to capture/rethrow the first error.

		var hasRethrowError = false;
		var rethrowError = null;
		var reporter = {
		  onError: function (error) {
		    hasError = true;
		    caughtError = error;
		  }
		};
		/**
		 * Call a function while guarding against errors that happens within it.
		 * Returns an error if it throws, otherwise null.
		 *
		 * In production, this is implemented using a try-catch. The reason we don't
		 * use a try-catch directly is so that we can swap out a different
		 * implementation in DEV mode.
		 *
		 * @param {String} name of the guard to use for logging or debugging
		 * @param {Function} func The function to invoke
		 * @param {*} context The context to use when calling the function
		 * @param {...*} args Arguments for function
		 */

		function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
		  hasError = false;
		  caughtError = null;
		  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
		}
		/**
		 * Same as invokeGuardedCallback, but instead of returning an error, it stores
		 * it in a global so it can be rethrown by `rethrowCaughtError` later.
		 * TODO: See if caughtError and rethrowError can be unified.
		 *
		 * @param {String} name of the guard to use for logging or debugging
		 * @param {Function} func The function to invoke
		 * @param {*} context The context to use when calling the function
		 * @param {...*} args Arguments for function
		 */

		function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
		  invokeGuardedCallback.apply(this, arguments);

		  if (hasError) {
		    var error = clearCaughtError();

		    if (!hasRethrowError) {
		      hasRethrowError = true;
		      rethrowError = error;
		    }
		  }
		}
		/**
		 * During execution of guarded functions we will capture the first error which
		 * we will rethrow to be handled by the top level error handler.
		 */

		function rethrowCaughtError() {
		  if (hasRethrowError) {
		    var error = rethrowError;
		    hasRethrowError = false;
		    rethrowError = null;
		    throw error;
		  }
		}
		function hasCaughtError() {
		  return hasError;
		}
		function clearCaughtError() {
		  if (hasError) {
		    var error = caughtError;
		    hasError = false;
		    caughtError = null;
		    return error;
		  } else {
		    throw new Error('clearCaughtError was called but no error was captured. This error ' + 'is likely caused by a bug in React. Please file an issue.');
		  }
		}

		/**
		 * `ReactInstanceMap` maintains a mapping from a public facing stateful
		 * instance (key) and the internal representation (value). This allows public
		 * methods to accept the user facing instance as an argument and map them back
		 * to internal methods.
		 *
		 * Note that this module is currently shared and assumed to be stateless.
		 * If this becomes an actual Map, that will break.
		 */
		function get(key) {
		  return key._reactInternals;
		}
		function has(key) {
		  return key._reactInternals !== undefined;
		}
		function set(key, value) {
		  key._reactInternals = value;
		}

		// Don't change these two values. They're used by React Dev Tools.
		var NoFlags =
		/*                      */
		0;
		var PerformedWork =
		/*                */
		1; // You can change the rest (and add more).

		var Placement =
		/*                    */
		2;
		var Update =
		/*                       */
		4;
		var ChildDeletion =
		/*                */
		16;
		var ContentReset =
		/*                 */
		32;
		var Callback =
		/*                     */
		64;
		var DidCapture =
		/*                   */
		128;
		var ForceClientRender =
		/*            */
		256;
		var Ref =
		/*                          */
		512;
		var Snapshot =
		/*                     */
		1024;
		var Passive =
		/*                      */
		2048;
		var Hydrating =
		/*                    */
		4096;
		var Visibility =
		/*                   */
		8192;
		var StoreConsistency =
		/*             */
		16384;
		var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)

		var HostEffectMask =
		/*               */
		32767; // These are not really side effects, but we still reuse this field.

		var Incomplete =
		/*                   */
		32768;
		var ShouldCapture =
		/*                */
		65536;
		var ForceUpdateForLegacySuspense =
		/* */
		131072;
		var Forked =
		/*                       */
		1048576; // Static tags describe aspects of a fiber that are not specific to a render,
		// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).
		// This enables us to defer more work in the unmount case,
		// since we can defer traversing the tree during layout to look for Passive effects,
		// and instead rely on the static flag as a signal that there may be cleanup work.

		var RefStatic =
		/*                    */
		2097152;
		var LayoutStatic =
		/*                 */
		4194304;
		var PassiveStatic =
		/*                */
		8388608; // These flags allow us to traverse to fibers that have effects on mount
		// without traversing the entire tree after every commit for
		// double invoking

		var MountLayoutDev =
		/*               */
		16777216;
		var MountPassiveDev =
		/*              */
		33554432; // Groups of flags that are used in the commit phase to skip over trees that
		// don't contain effects, by checking subtreeFlags.

		var BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility
		// flag logic (see #20043)
		Update | Snapshot | ( 0);
		var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
		var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask

		var PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.
		// This allows certain concepts to persist without recalculating them,
		// e.g. whether a subtree contains passive effects or portals.

		var StaticMask = LayoutStatic | PassiveStatic | RefStatic;

		var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
		function getNearestMountedFiber(fiber) {
		  var node = fiber;
		  var nearestMounted = fiber;

		  if (!fiber.alternate) {
		    // If there is no alternate, this might be a new tree that isn't inserted
		    // yet. If it is, then it will have a pending insertion effect on it.
		    var nextNode = node;

		    do {
		      node = nextNode;

		      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
		        // This is an insertion or in-progress hydration. The nearest possible
		        // mounted fiber is the parent but we need to continue to figure out
		        // if that one is still mounted.
		        nearestMounted = node.return;
		      }

		      nextNode = node.return;
		    } while (nextNode);
		  } else {
		    while (node.return) {
		      node = node.return;
		    }
		  }

		  if (node.tag === HostRoot) {
		    // TODO: Check if this was a nested HostRoot when used with
		    // renderContainerIntoSubtree.
		    return nearestMounted;
		  } // If we didn't hit the root, that means that we're in an disconnected tree
		  // that has been unmounted.


		  return null;
		}
		function getSuspenseInstanceFromFiber(fiber) {
		  if (fiber.tag === SuspenseComponent) {
		    var suspenseState = fiber.memoizedState;

		    if (suspenseState === null) {
		      var current = fiber.alternate;

		      if (current !== null) {
		        suspenseState = current.memoizedState;
		      }
		    }

		    if (suspenseState !== null) {
		      return suspenseState.dehydrated;
		    }
		  }

		  return null;
		}
		function getContainerFromFiber(fiber) {
		  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
		}
		function isFiberMounted(fiber) {
		  return getNearestMountedFiber(fiber) === fiber;
		}
		function isMounted(component) {
		  {
		    var owner = ReactCurrentOwner.current;

		    if (owner !== null && owner.tag === ClassComponent) {
		      var ownerFiber = owner;
		      var instance = ownerFiber.stateNode;

		      if (!instance._warnedAboutRefsInRender) {
		        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromFiber(ownerFiber) || 'A component');
		      }

		      instance._warnedAboutRefsInRender = true;
		    }
		  }

		  var fiber = get(component);

		  if (!fiber) {
		    return false;
		  }

		  return getNearestMountedFiber(fiber) === fiber;
		}

		function assertIsMounted(fiber) {
		  if (getNearestMountedFiber(fiber) !== fiber) {
		    throw new Error('Unable to find node on an unmounted component.');
		  }
		}

		function findCurrentFiberUsingSlowPath(fiber) {
		  var alternate = fiber.alternate;

		  if (!alternate) {
		    // If there is no alternate, then we only need to check if it is mounted.
		    var nearestMounted = getNearestMountedFiber(fiber);

		    if (nearestMounted === null) {
		      throw new Error('Unable to find node on an unmounted component.');
		    }

		    if (nearestMounted !== fiber) {
		      return null;
		    }

		    return fiber;
		  } // If we have two possible branches, we'll walk backwards up to the root
		  // to see what path the root points to. On the way we may hit one of the
		  // special cases and we'll deal with them.


		  var a = fiber;
		  var b = alternate;

		  while (true) {
		    var parentA = a.return;

		    if (parentA === null) {
		      // We're at the root.
		      break;
		    }

		    var parentB = parentA.alternate;

		    if (parentB === null) {
		      // There is no alternate. This is an unusual case. Currently, it only
		      // happens when a Suspense component is hidden. An extra fragment fiber
		      // is inserted in between the Suspense fiber and its children. Skip
		      // over this extra fragment fiber and proceed to the next parent.
		      var nextParent = parentA.return;

		      if (nextParent !== null) {
		        a = b = nextParent;
		        continue;
		      } // If there's no parent, we're at the root.


		      break;
		    } // If both copies of the parent fiber point to the same child, we can
		    // assume that the child is current. This happens when we bailout on low
		    // priority: the bailed out fiber's child reuses the current child.


		    if (parentA.child === parentB.child) {
		      var child = parentA.child;

		      while (child) {
		        if (child === a) {
		          // We've determined that A is the current branch.
		          assertIsMounted(parentA);
		          return fiber;
		        }

		        if (child === b) {
		          // We've determined that B is the current branch.
		          assertIsMounted(parentA);
		          return alternate;
		        }

		        child = child.sibling;
		      } // We should never have an alternate for any mounting node. So the only
		      // way this could possibly happen is if this was unmounted, if at all.


		      throw new Error('Unable to find node on an unmounted component.');
		    }

		    if (a.return !== b.return) {
		      // The return pointer of A and the return pointer of B point to different
		      // fibers. We assume that return pointers never criss-cross, so A must
		      // belong to the child set of A.return, and B must belong to the child
		      // set of B.return.
		      a = parentA;
		      b = parentB;
		    } else {
		      // The return pointers point to the same fiber. We'll have to use the
		      // default, slow path: scan the child sets of each parent alternate to see
		      // which child belongs to which set.
		      //
		      // Search parent A's child set
		      var didFindChild = false;
		      var _child = parentA.child;

		      while (_child) {
		        if (_child === a) {
		          didFindChild = true;
		          a = parentA;
		          b = parentB;
		          break;
		        }

		        if (_child === b) {
		          didFindChild = true;
		          b = parentA;
		          a = parentB;
		          break;
		        }

		        _child = _child.sibling;
		      }

		      if (!didFindChild) {
		        // Search parent B's child set
		        _child = parentB.child;

		        while (_child) {
		          if (_child === a) {
		            didFindChild = true;
		            a = parentB;
		            b = parentA;
		            break;
		          }

		          if (_child === b) {
		            didFindChild = true;
		            b = parentB;
		            a = parentA;
		            break;
		          }

		          _child = _child.sibling;
		        }

		        if (!didFindChild) {
		          throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');
		        }
		      }
		    }

		    if (a.alternate !== b) {
		      throw new Error("Return fibers should always be each others' alternates. " + 'This error is likely caused by a bug in React. Please file an issue.');
		    }
		  } // If the root is not a host container, we're in a disconnected tree. I.e.
		  // unmounted.


		  if (a.tag !== HostRoot) {
		    throw new Error('Unable to find node on an unmounted component.');
		  }

		  if (a.stateNode.current === a) {
		    // We've determined that A is the current branch.
		    return fiber;
		  } // Otherwise B has to be current branch.


		  return alternate;
		}
		function findCurrentHostFiber(parent) {
		  var currentParent = findCurrentFiberUsingSlowPath(parent);
		  return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
		}

		function findCurrentHostFiberImpl(node) {
		  // Next we'll drill down this component to find the first HostComponent/Text.
		  if (node.tag === HostComponent || node.tag === HostText) {
		    return node;
		  }

		  var child = node.child;

		  while (child !== null) {
		    var match = findCurrentHostFiberImpl(child);

		    if (match !== null) {
		      return match;
		    }

		    child = child.sibling;
		  }

		  return null;
		}

		function findCurrentHostFiberWithNoPortals(parent) {
		  var currentParent = findCurrentFiberUsingSlowPath(parent);
		  return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
		}

		function findCurrentHostFiberWithNoPortalsImpl(node) {
		  // Next we'll drill down this component to find the first HostComponent/Text.
		  if (node.tag === HostComponent || node.tag === HostText) {
		    return node;
		  }

		  var child = node.child;

		  while (child !== null) {
		    if (child.tag !== HostPortal) {
		      var match = findCurrentHostFiberWithNoPortalsImpl(child);

		      if (match !== null) {
		        return match;
		      }
		    }

		    child = child.sibling;
		  }

		  return null;
		}

		// This module only exists as an ESM wrapper around the external CommonJS
		var scheduleCallback = Scheduler.unstable_scheduleCallback;
		var cancelCallback = Scheduler.unstable_cancelCallback;
		var shouldYield = Scheduler.unstable_shouldYield;
		var requestPaint = Scheduler.unstable_requestPaint;
		var now = Scheduler.unstable_now;
		var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
		var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
		var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
		var NormalPriority = Scheduler.unstable_NormalPriority;
		var LowPriority = Scheduler.unstable_LowPriority;
		var IdlePriority = Scheduler.unstable_IdlePriority;
		// this doesn't actually exist on the scheduler, but it *does*
		// on scheduler/unstable_mock, which we'll need for internal testing
		var unstable_yieldValue = Scheduler.unstable_yieldValue;
		var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;

		var rendererID = null;
		var injectedHook = null;
		var injectedProfilingHooks = null;
		var hasLoggedError = false;
		var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
		function injectInternals(internals) {
		  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
		    // No DevTools
		    return false;
		  }

		  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

		  if (hook.isDisabled) {
		    // This isn't a real property on the hook, but it can be set to opt out
		    // of DevTools integration and associated warnings and logs.
		    // https://github.com/facebook/react/issues/3877
		    return true;
		  }

		  if (!hook.supportsFiber) {
		    {
		      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');
		    } // DevTools exists, even though it doesn't support Fiber.


		    return true;
		  }

		  try {
		    if (enableSchedulingProfiler) {
		      // Conditionally inject these hooks only if Timeline profiler is supported by this build.
		      // This gives DevTools a way to feature detect that isn't tied to version number
		      // (since profiling and timeline are controlled by different feature flags).
		      internals = assign({}, internals, {
		        getLaneLabelMap: getLaneLabelMap,
		        injectProfilingHooks: injectProfilingHooks
		      });
		    }

		    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

		    injectedHook = hook;
		  } catch (err) {
		    // Catch all errors because it is unsafe to throw during initialization.
		    {
		      error('React instrumentation encountered an error: %s.', err);
		    }
		  }

		  if (hook.checkDCE) {
		    // This is the real DevTools.
		    return true;
		  } else {
		    // This is likely a hook installed by Fast Refresh runtime.
		    return false;
		  }
		}
		function onScheduleRoot(root, children) {
		  {
		    if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {
		      try {
		        injectedHook.onScheduleFiberRoot(rendererID, root, children);
		      } catch (err) {
		        if ( !hasLoggedError) {
		          hasLoggedError = true;

		          error('React instrumentation encountered an error: %s', err);
		        }
		      }
		    }
		  }
		}
		function onCommitRoot(root, eventPriority) {
		  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {
		    try {
		      var didError = (root.current.flags & DidCapture) === DidCapture;

		      if (enableProfilerTimer) {
		        var schedulerPriority;

		        switch (eventPriority) {
		          case DiscreteEventPriority:
		            schedulerPriority = ImmediatePriority;
		            break;

		          case ContinuousEventPriority:
		            schedulerPriority = UserBlockingPriority;
		            break;

		          case DefaultEventPriority:
		            schedulerPriority = NormalPriority;
		            break;

		          case IdleEventPriority:
		            schedulerPriority = IdlePriority;
		            break;

		          default:
		            schedulerPriority = NormalPriority;
		            break;
		        }

		        injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);
		      }
		    } catch (err) {
		      {
		        if (!hasLoggedError) {
		          hasLoggedError = true;

		          error('React instrumentation encountered an error: %s', err);
		        }
		      }
		    }
		  }
		}
		function onPostCommitRoot(root) {
		  if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {
		    try {
		      injectedHook.onPostCommitFiberRoot(rendererID, root);
		    } catch (err) {
		      {
		        if (!hasLoggedError) {
		          hasLoggedError = true;

		          error('React instrumentation encountered an error: %s', err);
		        }
		      }
		    }
		  }
		}
		function onCommitUnmount(fiber) {
		  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {
		    try {
		      injectedHook.onCommitFiberUnmount(rendererID, fiber);
		    } catch (err) {
		      {
		        if (!hasLoggedError) {
		          hasLoggedError = true;

		          error('React instrumentation encountered an error: %s', err);
		        }
		      }
		    }
		  }
		}
		function setIsStrictModeForDevtools(newIsStrictMode) {
		  {
		    if (typeof unstable_yieldValue === 'function') {
		      // We're in a test because Scheduler.unstable_yieldValue only exists
		      // in SchedulerMock. To reduce the noise in strict mode tests,
		      // suppress warnings and disable scheduler yielding during the double render
		      unstable_setDisableYieldValue(newIsStrictMode);
		      setSuppressWarning(newIsStrictMode);
		    }

		    if (injectedHook && typeof injectedHook.setStrictMode === 'function') {
		      try {
		        injectedHook.setStrictMode(rendererID, newIsStrictMode);
		      } catch (err) {
		        {
		          if (!hasLoggedError) {
		            hasLoggedError = true;

		            error('React instrumentation encountered an error: %s', err);
		          }
		        }
		      }
		    }
		  }
		} // Profiler API hooks

		function injectProfilingHooks(profilingHooks) {
		  injectedProfilingHooks = profilingHooks;
		}

		function getLaneLabelMap() {
		  {
		    var map = new Map();
		    var lane = 1;

		    for (var index = 0; index < TotalLanes; index++) {
		      var label = getLabelForLane(lane);
		      map.set(lane, label);
		      lane *= 2;
		    }

		    return map;
		  }
		}

		function markCommitStarted(lanes) {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') {
		      injectedProfilingHooks.markCommitStarted(lanes);
		    }
		  }
		}
		function markCommitStopped() {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') {
		      injectedProfilingHooks.markCommitStopped();
		    }
		  }
		}
		function markComponentRenderStarted(fiber) {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') {
		      injectedProfilingHooks.markComponentRenderStarted(fiber);
		    }
		  }
		}
		function markComponentRenderStopped() {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') {
		      injectedProfilingHooks.markComponentRenderStopped();
		    }
		  }
		}
		function markComponentPassiveEffectMountStarted(fiber) {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') {
		      injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
		    }
		  }
		}
		function markComponentPassiveEffectMountStopped() {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') {
		      injectedProfilingHooks.markComponentPassiveEffectMountStopped();
		    }
		  }
		}
		function markComponentPassiveEffectUnmountStarted(fiber) {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') {
		      injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
		    }
		  }
		}
		function markComponentPassiveEffectUnmountStopped() {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') {
		      injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
		    }
		  }
		}
		function markComponentLayoutEffectMountStarted(fiber) {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') {
		      injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
		    }
		  }
		}
		function markComponentLayoutEffectMountStopped() {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') {
		      injectedProfilingHooks.markComponentLayoutEffectMountStopped();
		    }
		  }
		}
		function markComponentLayoutEffectUnmountStarted(fiber) {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') {
		      injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
		    }
		  }
		}
		function markComponentLayoutEffectUnmountStopped() {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') {
		      injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
		    }
		  }
		}
		function markComponentErrored(fiber, thrownValue, lanes) {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') {
		      injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
		    }
		  }
		}
		function markComponentSuspended(fiber, wakeable, lanes) {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') {
		      injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
		    }
		  }
		}
		function markLayoutEffectsStarted(lanes) {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') {
		      injectedProfilingHooks.markLayoutEffectsStarted(lanes);
		    }
		  }
		}
		function markLayoutEffectsStopped() {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') {
		      injectedProfilingHooks.markLayoutEffectsStopped();
		    }
		  }
		}
		function markPassiveEffectsStarted(lanes) {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') {
		      injectedProfilingHooks.markPassiveEffectsStarted(lanes);
		    }
		  }
		}
		function markPassiveEffectsStopped() {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') {
		      injectedProfilingHooks.markPassiveEffectsStopped();
		    }
		  }
		}
		function markRenderStarted(lanes) {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') {
		      injectedProfilingHooks.markRenderStarted(lanes);
		    }
		  }
		}
		function markRenderYielded() {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') {
		      injectedProfilingHooks.markRenderYielded();
		    }
		  }
		}
		function markRenderStopped() {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') {
		      injectedProfilingHooks.markRenderStopped();
		    }
		  }
		}
		function markRenderScheduled(lane) {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') {
		      injectedProfilingHooks.markRenderScheduled(lane);
		    }
		  }
		}
		function markForceUpdateScheduled(fiber, lane) {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') {
		      injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
		    }
		  }
		}
		function markStateUpdateScheduled(fiber, lane) {
		  {
		    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') {
		      injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
		    }
		  }
		}

		var NoMode =
		/*                         */
		0; // TODO: Remove ConcurrentMode by reading from the root tag instead

		var ConcurrentMode =
		/*                 */
		1;
		var ProfileMode =
		/*                    */
		2;
		var StrictLegacyMode =
		/*               */
		8;
		var StrictEffectsMode =
		/*              */
		16;

		// TODO: This is pretty well supported by browsers. Maybe we can drop it.
		var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.
		// Based on:
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

		var log = Math.log;
		var LN2 = Math.LN2;

		function clz32Fallback(x) {
		  var asUint = x >>> 0;

		  if (asUint === 0) {
		    return 32;
		  }

		  return 31 - (log(asUint) / LN2 | 0) | 0;
		}

		// If those values are changed that package should be rebuilt and redeployed.

		var TotalLanes = 31;
		var NoLanes =
		/*                        */
		0;
		var NoLane =
		/*                          */
		0;
		var SyncLane =
		/*                        */
		1;
		var InputContinuousHydrationLane =
		/*    */
		2;
		var InputContinuousLane =
		/*             */
		4;
		var DefaultHydrationLane =
		/*            */
		8;
		var DefaultLane =
		/*                     */
		16;
		var TransitionHydrationLane =
		/*                */
		32;
		var TransitionLanes =
		/*                       */
		4194240;
		var TransitionLane1 =
		/*                        */
		64;
		var TransitionLane2 =
		/*                        */
		128;
		var TransitionLane3 =
		/*                        */
		256;
		var TransitionLane4 =
		/*                        */
		512;
		var TransitionLane5 =
		/*                        */
		1024;
		var TransitionLane6 =
		/*                        */
		2048;
		var TransitionLane7 =
		/*                        */
		4096;
		var TransitionLane8 =
		/*                        */
		8192;
		var TransitionLane9 =
		/*                        */
		16384;
		var TransitionLane10 =
		/*                       */
		32768;
		var TransitionLane11 =
		/*                       */
		65536;
		var TransitionLane12 =
		/*                       */
		131072;
		var TransitionLane13 =
		/*                       */
		262144;
		var TransitionLane14 =
		/*                       */
		524288;
		var TransitionLane15 =
		/*                       */
		1048576;
		var TransitionLane16 =
		/*                       */
		2097152;
		var RetryLanes =
		/*                            */
		130023424;
		var RetryLane1 =
		/*                             */
		4194304;
		var RetryLane2 =
		/*                             */
		8388608;
		var RetryLane3 =
		/*                             */
		16777216;
		var RetryLane4 =
		/*                             */
		33554432;
		var RetryLane5 =
		/*                             */
		67108864;
		var SomeRetryLane = RetryLane1;
		var SelectiveHydrationLane =
		/*          */
		134217728;
		var NonIdleLanes =
		/*                          */
		268435455;
		var IdleHydrationLane =
		/*               */
		268435456;
		var IdleLane =
		/*                        */
		536870912;
		var OffscreenLane =
		/*                   */
		1073741824; // This function is used for the experimental timeline (react-devtools-timeline)
		// It should be kept in sync with the Lanes values above.

		function getLabelForLane(lane) {
		  {
		    if (lane & SyncLane) {
		      return 'Sync';
		    }

		    if (lane & InputContinuousHydrationLane) {
		      return 'InputContinuousHydration';
		    }

		    if (lane & InputContinuousLane) {
		      return 'InputContinuous';
		    }

		    if (lane & DefaultHydrationLane) {
		      return 'DefaultHydration';
		    }

		    if (lane & DefaultLane) {
		      return 'Default';
		    }

		    if (lane & TransitionHydrationLane) {
		      return 'TransitionHydration';
		    }

		    if (lane & TransitionLanes) {
		      return 'Transition';
		    }

		    if (lane & RetryLanes) {
		      return 'Retry';
		    }

		    if (lane & SelectiveHydrationLane) {
		      return 'SelectiveHydration';
		    }

		    if (lane & IdleHydrationLane) {
		      return 'IdleHydration';
		    }

		    if (lane & IdleLane) {
		      return 'Idle';
		    }

		    if (lane & OffscreenLane) {
		      return 'Offscreen';
		    }
		  }
		}
		var NoTimestamp = -1;
		var nextTransitionLane = TransitionLane1;
		var nextRetryLane = RetryLane1;

		function getHighestPriorityLanes(lanes) {
		  switch (getHighestPriorityLane(lanes)) {
		    case SyncLane:
		      return SyncLane;

		    case InputContinuousHydrationLane:
		      return InputContinuousHydrationLane;

		    case InputContinuousLane:
		      return InputContinuousLane;

		    case DefaultHydrationLane:
		      return DefaultHydrationLane;

		    case DefaultLane:
		      return DefaultLane;

		    case TransitionHydrationLane:
		      return TransitionHydrationLane;

		    case TransitionLane1:
		    case TransitionLane2:
		    case TransitionLane3:
		    case TransitionLane4:
		    case TransitionLane5:
		    case TransitionLane6:
		    case TransitionLane7:
		    case TransitionLane8:
		    case TransitionLane9:
		    case TransitionLane10:
		    case TransitionLane11:
		    case TransitionLane12:
		    case TransitionLane13:
		    case TransitionLane14:
		    case TransitionLane15:
		    case TransitionLane16:
		      return lanes & TransitionLanes;

		    case RetryLane1:
		    case RetryLane2:
		    case RetryLane3:
		    case RetryLane4:
		    case RetryLane5:
		      return lanes & RetryLanes;

		    case SelectiveHydrationLane:
		      return SelectiveHydrationLane;

		    case IdleHydrationLane:
		      return IdleHydrationLane;

		    case IdleLane:
		      return IdleLane;

		    case OffscreenLane:
		      return OffscreenLane;

		    default:
		      {
		        error('Should have found matching lanes. This is a bug in React.');
		      } // This shouldn't be reachable, but as a fallback, return the entire bitmask.


		      return lanes;
		  }
		}

		function getNextLanes(root, wipLanes) {
		  // Early bailout if there's no pending work left.
		  var pendingLanes = root.pendingLanes;

		  if (pendingLanes === NoLanes) {
		    return NoLanes;
		  }

		  var nextLanes = NoLanes;
		  var suspendedLanes = root.suspendedLanes;
		  var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,
		  // even if the work is suspended.

		  var nonIdlePendingLanes = pendingLanes & NonIdleLanes;

		  if (nonIdlePendingLanes !== NoLanes) {
		    var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;

		    if (nonIdleUnblockedLanes !== NoLanes) {
		      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
		    } else {
		      var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;

		      if (nonIdlePingedLanes !== NoLanes) {
		        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
		      }
		    }
		  } else {
		    // The only remaining work is Idle.
		    var unblockedLanes = pendingLanes & ~suspendedLanes;

		    if (unblockedLanes !== NoLanes) {
		      nextLanes = getHighestPriorityLanes(unblockedLanes);
		    } else {
		      if (pingedLanes !== NoLanes) {
		        nextLanes = getHighestPriorityLanes(pingedLanes);
		      }
		    }
		  }

		  if (nextLanes === NoLanes) {
		    // This should only be reachable if we're suspended
		    // TODO: Consider warning in this path if a fallback timer is not scheduled.
		    return NoLanes;
		  } // If we're already in the middle of a render, switching lanes will interrupt
		  // it and we'll lose our progress. We should only do this if the new lanes are
		  // higher priority.


		  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
		  // bother waiting until the root is complete.
		  (wipLanes & suspendedLanes) === NoLanes) {
		    var nextLane = getHighestPriorityLane(nextLanes);
		    var wipLane = getHighestPriorityLane(wipLanes);

		    if ( // Tests whether the next lane is equal or lower priority than the wip
		    // one. This works because the bits decrease in priority as you go left.
		    nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
		    // only difference between default updates and transition updates is that
		    // default updates do not support refresh transitions.
		    nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
		      // Keep working on the existing in-progress tree. Do not interrupt.
		      return wipLanes;
		    }
		  }

		  if ((nextLanes & InputContinuousLane) !== NoLanes) {
		    // When updates are sync by default, we entangle continuous priority updates
		    // and default updates, so they render in the same batch. The only reason
		    // they use separate lanes is because continuous updates should interrupt
		    // transitions, but default updates should not.
		    nextLanes |= pendingLanes & DefaultLane;
		  } // Check for entangled lanes and add them to the batch.
		  //
		  // A lane is said to be entangled with another when it's not allowed to render
		  // in a batch that does not also include the other lane. Typically we do this
		  // when multiple updates have the same source, and we only want to respond to
		  // the most recent event from that source.
		  //
		  // Note that we apply entanglements *after* checking for partial work above.
		  // This means that if a lane is entangled during an interleaved event while
		  // it's already rendering, we won't interrupt it. This is intentional, since
		  // entanglement is usually "best effort": we'll try our best to render the
		  // lanes in the same batch, but it's not worth throwing out partially
		  // completed work in order to do it.
		  // TODO: Reconsider this. The counter-argument is that the partial work
		  // represents an intermediate state, which we don't want to show to the user.
		  // And by spending extra time finishing it, we're increasing the amount of
		  // time it takes to show the final state, which is what they are actually
		  // waiting for.
		  //
		  // For those exceptions where entanglement is semantically important, like
		  // useMutableSource, we should ensure that there is no partial work at the
		  // time we apply the entanglement.


		  var entangledLanes = root.entangledLanes;

		  if (entangledLanes !== NoLanes) {
		    var entanglements = root.entanglements;
		    var lanes = nextLanes & entangledLanes;

		    while (lanes > 0) {
		      var index = pickArbitraryLaneIndex(lanes);
		      var lane = 1 << index;
		      nextLanes |= entanglements[index];
		      lanes &= ~lane;
		    }
		  }

		  return nextLanes;
		}
		function getMostRecentEventTime(root, lanes) {
		  var eventTimes = root.eventTimes;
		  var mostRecentEventTime = NoTimestamp;

		  while (lanes > 0) {
		    var index = pickArbitraryLaneIndex(lanes);
		    var lane = 1 << index;
		    var eventTime = eventTimes[index];

		    if (eventTime > mostRecentEventTime) {
		      mostRecentEventTime = eventTime;
		    }

		    lanes &= ~lane;
		  }

		  return mostRecentEventTime;
		}

		function computeExpirationTime(lane, currentTime) {
		  switch (lane) {
		    case SyncLane:
		    case InputContinuousHydrationLane:
		    case InputContinuousLane:
		      // User interactions should expire slightly more quickly.
		      //
		      // NOTE: This is set to the corresponding constant as in Scheduler.js.
		      // When we made it larger, a product metric in www regressed, suggesting
		      // there's a user interaction that's being starved by a series of
		      // synchronous updates. If that theory is correct, the proper solution is
		      // to fix the starvation. However, this scenario supports the idea that
		      // expiration times are an important safeguard when starvation
		      // does happen.
		      return currentTime + 250;

		    case DefaultHydrationLane:
		    case DefaultLane:
		    case TransitionHydrationLane:
		    case TransitionLane1:
		    case TransitionLane2:
		    case TransitionLane3:
		    case TransitionLane4:
		    case TransitionLane5:
		    case TransitionLane6:
		    case TransitionLane7:
		    case TransitionLane8:
		    case TransitionLane9:
		    case TransitionLane10:
		    case TransitionLane11:
		    case TransitionLane12:
		    case TransitionLane13:
		    case TransitionLane14:
		    case TransitionLane15:
		    case TransitionLane16:
		      return currentTime + 5000;

		    case RetryLane1:
		    case RetryLane2:
		    case RetryLane3:
		    case RetryLane4:
		    case RetryLane5:
		      // TODO: Retries should be allowed to expire if they are CPU bound for
		      // too long, but when I made this change it caused a spike in browser
		      // crashes. There must be some other underlying bug; not super urgent but
		      // ideally should figure out why and fix it. Unfortunately we don't have
		      // a repro for the crashes, only detected via production metrics.
		      return NoTimestamp;

		    case SelectiveHydrationLane:
		    case IdleHydrationLane:
		    case IdleLane:
		    case OffscreenLane:
		      // Anything idle priority or lower should never expire.
		      return NoTimestamp;

		    default:
		      {
		        error('Should have found matching lanes. This is a bug in React.');
		      }

		      return NoTimestamp;
		  }
		}

		function markStarvedLanesAsExpired(root, currentTime) {
		  // TODO: This gets called every time we yield. We can optimize by storing
		  // the earliest expiration time on the root. Then use that to quickly bail out
		  // of this function.
		  var pendingLanes = root.pendingLanes;
		  var suspendedLanes = root.suspendedLanes;
		  var pingedLanes = root.pingedLanes;
		  var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
		  // expiration time. If so, we'll assume the update is being starved and mark
		  // it as expired to force it to finish.

		  var lanes = pendingLanes;

		  while (lanes > 0) {
		    var index = pickArbitraryLaneIndex(lanes);
		    var lane = 1 << index;
		    var expirationTime = expirationTimes[index];

		    if (expirationTime === NoTimestamp) {
		      // Found a pending lane with no expiration time. If it's not suspended, or
		      // if it's pinged, assume it's CPU-bound. Compute a new expiration time
		      // using the current time.
		      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
		        // Assumes timestamps are monotonically increasing.
		        expirationTimes[index] = computeExpirationTime(lane, currentTime);
		      }
		    } else if (expirationTime <= currentTime) {
		      // This lane expired
		      root.expiredLanes |= lane;
		    }

		    lanes &= ~lane;
		  }
		} // This returns the highest priority pending lanes regardless of whether they
		// are suspended.

		function getHighestPriorityPendingLanes(root) {
		  return getHighestPriorityLanes(root.pendingLanes);
		}
		function getLanesToRetrySynchronouslyOnError(root) {
		  var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;

		  if (everythingButOffscreen !== NoLanes) {
		    return everythingButOffscreen;
		  }

		  if (everythingButOffscreen & OffscreenLane) {
		    return OffscreenLane;
		  }

		  return NoLanes;
		}
		function includesSyncLane(lanes) {
		  return (lanes & SyncLane) !== NoLanes;
		}
		function includesNonIdleWork(lanes) {
		  return (lanes & NonIdleLanes) !== NoLanes;
		}
		function includesOnlyRetries(lanes) {
		  return (lanes & RetryLanes) === lanes;
		}
		function includesOnlyNonUrgentLanes(lanes) {
		  var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
		  return (lanes & UrgentLanes) === NoLanes;
		}
		function includesOnlyTransitions(lanes) {
		  return (lanes & TransitionLanes) === lanes;
		}
		function includesBlockingLane(root, lanes) {

		  var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
		  return (lanes & SyncDefaultLanes) !== NoLanes;
		}
		function includesExpiredLane(root, lanes) {
		  // This is a separate check from includesBlockingLane because a lane can
		  // expire after a render has already started.
		  return (lanes & root.expiredLanes) !== NoLanes;
		}
		function isTransitionLane(lane) {
		  return (lane & TransitionLanes) !== NoLanes;
		}
		function claimNextTransitionLane() {
		  // Cycle through the lanes, assigning each new transition to the next lane.
		  // In most cases, this means every transition gets its own lane, until we
		  // run out of lanes and cycle back to the beginning.
		  var lane = nextTransitionLane;
		  nextTransitionLane <<= 1;

		  if ((nextTransitionLane & TransitionLanes) === NoLanes) {
		    nextTransitionLane = TransitionLane1;
		  }

		  return lane;
		}
		function claimNextRetryLane() {
		  var lane = nextRetryLane;
		  nextRetryLane <<= 1;

		  if ((nextRetryLane & RetryLanes) === NoLanes) {
		    nextRetryLane = RetryLane1;
		  }

		  return lane;
		}
		function getHighestPriorityLane(lanes) {
		  return lanes & -lanes;
		}
		function pickArbitraryLane(lanes) {
		  // This wrapper function gets inlined. Only exists so to communicate that it
		  // doesn't matter which bit is selected; you can pick any bit without
		  // affecting the algorithms where its used. Here I'm using
		  // getHighestPriorityLane because it requires the fewest operations.
		  return getHighestPriorityLane(lanes);
		}

		function pickArbitraryLaneIndex(lanes) {
		  return 31 - clz32(lanes);
		}

		function laneToIndex(lane) {
		  return pickArbitraryLaneIndex(lane);
		}

		function includesSomeLane(a, b) {
		  return (a & b) !== NoLanes;
		}
		function isSubsetOfLanes(set, subset) {
		  return (set & subset) === subset;
		}
		function mergeLanes(a, b) {
		  return a | b;
		}
		function removeLanes(set, subset) {
		  return set & ~subset;
		}
		function intersectLanes(a, b) {
		  return a & b;
		} // Seems redundant, but it changes the type from a single lane (used for
		// updates) to a group of lanes (used for flushing work).

		function laneToLanes(lane) {
		  return lane;
		}
		function higherPriorityLane(a, b) {
		  // This works because the bit ranges decrease in priority as you go left.
		  return a !== NoLane && a < b ? a : b;
		}
		function createLaneMap(initial) {
		  // Intentionally pushing one by one.
		  // https://v8.dev/blog/elements-kinds#avoid-creating-holes
		  var laneMap = [];

		  for (var i = 0; i < TotalLanes; i++) {
		    laneMap.push(initial);
		  }

		  return laneMap;
		}
		function markRootUpdated(root, updateLane, eventTime) {
		  root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update
		  // could unblock them. Clear the suspended lanes so that we can try rendering
		  // them again.
		  //
		  // TODO: We really only need to unsuspend only lanes that are in the
		  // `subtreeLanes` of the updated fiber, or the update lanes of the return
		  // path. This would exclude suspended updates in an unrelated sibling tree,
		  // since there's no way for this update to unblock it.
		  //
		  // We don't do this if the incoming update is idle, because we never process
		  // idle updates until after all the regular updates have finished; there's no
		  // way it could unblock a transition.

		  if (updateLane !== IdleLane) {
		    root.suspendedLanes = NoLanes;
		    root.pingedLanes = NoLanes;
		  }

		  var eventTimes = root.eventTimes;
		  var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
		  // recent event, and we assume time is monotonically increasing.

		  eventTimes[index] = eventTime;
		}
		function markRootSuspended(root, suspendedLanes) {
		  root.suspendedLanes |= suspendedLanes;
		  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.

		  var expirationTimes = root.expirationTimes;
		  var lanes = suspendedLanes;

		  while (lanes > 0) {
		    var index = pickArbitraryLaneIndex(lanes);
		    var lane = 1 << index;
		    expirationTimes[index] = NoTimestamp;
		    lanes &= ~lane;
		  }
		}
		function markRootPinged(root, pingedLanes, eventTime) {
		  root.pingedLanes |= root.suspendedLanes & pingedLanes;
		}
		function markRootFinished(root, remainingLanes) {
		  var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
		  root.pendingLanes = remainingLanes; // Let's try everything again

		  root.suspendedLanes = NoLanes;
		  root.pingedLanes = NoLanes;
		  root.expiredLanes &= remainingLanes;
		  root.mutableReadLanes &= remainingLanes;
		  root.entangledLanes &= remainingLanes;
		  var entanglements = root.entanglements;
		  var eventTimes = root.eventTimes;
		  var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work

		  var lanes = noLongerPendingLanes;

		  while (lanes > 0) {
		    var index = pickArbitraryLaneIndex(lanes);
		    var lane = 1 << index;
		    entanglements[index] = NoLanes;
		    eventTimes[index] = NoTimestamp;
		    expirationTimes[index] = NoTimestamp;
		    lanes &= ~lane;
		  }
		}
		function markRootEntangled(root, entangledLanes) {
		  // In addition to entangling each of the given lanes with each other, we also
		  // have to consider _transitive_ entanglements. For each lane that is already
		  // entangled with *any* of the given lanes, that lane is now transitively
		  // entangled with *all* the given lanes.
		  //
		  // Translated: If C is entangled with A, then entangling A with B also
		  // entangles C with B.
		  //
		  // If this is hard to grasp, it might help to intentionally break this
		  // function and look at the tests that fail in ReactTransition-test.js. Try
		  // commenting out one of the conditions below.
		  var rootEntangledLanes = root.entangledLanes |= entangledLanes;
		  var entanglements = root.entanglements;
		  var lanes = rootEntangledLanes;

		  while (lanes) {
		    var index = pickArbitraryLaneIndex(lanes);
		    var lane = 1 << index;

		    if ( // Is this one of the newly entangled lanes?
		    lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
		    entanglements[index] & entangledLanes) {
		      entanglements[index] |= entangledLanes;
		    }

		    lanes &= ~lane;
		  }
		}
		function getBumpedLaneForHydration(root, renderLanes) {
		  var renderLane = getHighestPriorityLane(renderLanes);
		  var lane;

		  switch (renderLane) {
		    case InputContinuousLane:
		      lane = InputContinuousHydrationLane;
		      break;

		    case DefaultLane:
		      lane = DefaultHydrationLane;
		      break;

		    case TransitionLane1:
		    case TransitionLane2:
		    case TransitionLane3:
		    case TransitionLane4:
		    case TransitionLane5:
		    case TransitionLane6:
		    case TransitionLane7:
		    case TransitionLane8:
		    case TransitionLane9:
		    case TransitionLane10:
		    case TransitionLane11:
		    case TransitionLane12:
		    case TransitionLane13:
		    case TransitionLane14:
		    case TransitionLane15:
		    case TransitionLane16:
		    case RetryLane1:
		    case RetryLane2:
		    case RetryLane3:
		    case RetryLane4:
		    case RetryLane5:
		      lane = TransitionHydrationLane;
		      break;

		    case IdleLane:
		      lane = IdleHydrationLane;
		      break;

		    default:
		      // Everything else is already either a hydration lane, or shouldn't
		      // be retried at a hydration lane.
		      lane = NoLane;
		      break;
		  } // Check if the lane we chose is suspended. If so, that indicates that we
		  // already attempted and failed to hydrate at that level. Also check if we're
		  // already rendering that lane, which is rare but could happen.


		  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {
		    // Give up trying to hydrate and fall back to client render.
		    return NoLane;
		  }

		  return lane;
		}
		function addFiberToLanesMap(root, fiber, lanes) {

		  if (!isDevToolsPresent) {
		    return;
		  }

		  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;

		  while (lanes > 0) {
		    var index = laneToIndex(lanes);
		    var lane = 1 << index;
		    var updaters = pendingUpdatersLaneMap[index];
		    updaters.add(fiber);
		    lanes &= ~lane;
		  }
		}
		function movePendingFibersToMemoized(root, lanes) {

		  if (!isDevToolsPresent) {
		    return;
		  }

		  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
		  var memoizedUpdaters = root.memoizedUpdaters;

		  while (lanes > 0) {
		    var index = laneToIndex(lanes);
		    var lane = 1 << index;
		    var updaters = pendingUpdatersLaneMap[index];

		    if (updaters.size > 0) {
		      updaters.forEach(function (fiber) {
		        var alternate = fiber.alternate;

		        if (alternate === null || !memoizedUpdaters.has(alternate)) {
		          memoizedUpdaters.add(fiber);
		        }
		      });
		      updaters.clear();
		    }

		    lanes &= ~lane;
		  }
		}
		function getTransitionsForLanes(root, lanes) {
		  {
		    return null;
		  }
		}

		var DiscreteEventPriority = SyncLane;
		var ContinuousEventPriority = InputContinuousLane;
		var DefaultEventPriority = DefaultLane;
		var IdleEventPriority = IdleLane;
		var currentUpdatePriority = NoLane;
		function getCurrentUpdatePriority() {
		  return currentUpdatePriority;
		}
		function setCurrentUpdatePriority(newPriority) {
		  currentUpdatePriority = newPriority;
		}
		function runWithPriority(priority, fn) {
		  var previousPriority = currentUpdatePriority;

		  try {
		    currentUpdatePriority = priority;
		    return fn();
		  } finally {
		    currentUpdatePriority = previousPriority;
		  }
		}
		function higherEventPriority(a, b) {
		  return a !== 0 && a < b ? a : b;
		}
		function lowerEventPriority(a, b) {
		  return a === 0 || a > b ? a : b;
		}
		function isHigherEventPriority(a, b) {
		  return a !== 0 && a < b;
		}
		function lanesToEventPriority(lanes) {
		  var lane = getHighestPriorityLane(lanes);

		  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
		    return DiscreteEventPriority;
		  }

		  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
		    return ContinuousEventPriority;
		  }

		  if (includesNonIdleWork(lane)) {
		    return DefaultEventPriority;
		  }

		  return IdleEventPriority;
		}

		// This is imported by the event replaying implementation in React DOM. It's
		// in a separate file to break a circular dependency between the renderer and
		// the reconciler.
		function isRootDehydrated(root) {
		  var currentState = root.current.memoizedState;
		  return currentState.isDehydrated;
		}

		var _attemptSynchronousHydration;

		function setAttemptSynchronousHydration(fn) {
		  _attemptSynchronousHydration = fn;
		}
		function attemptSynchronousHydration(fiber) {
		  _attemptSynchronousHydration(fiber);
		}
		var attemptContinuousHydration;
		function setAttemptContinuousHydration(fn) {
		  attemptContinuousHydration = fn;
		}
		var attemptHydrationAtCurrentPriority;
		function setAttemptHydrationAtCurrentPriority(fn) {
		  attemptHydrationAtCurrentPriority = fn;
		}
		var getCurrentUpdatePriority$1;
		function setGetCurrentUpdatePriority(fn) {
		  getCurrentUpdatePriority$1 = fn;
		}
		var attemptHydrationAtPriority;
		function setAttemptHydrationAtPriority(fn) {
		  attemptHydrationAtPriority = fn;
		} // TODO: Upgrade this definition once we're on a newer version of Flow that
		// has this definition built-in.

		var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

		var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
		// if the last target was dehydrated.

		var queuedFocus = null;
		var queuedDrag = null;
		var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

		var queuedPointers = new Map();
		var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

		var queuedExplicitHydrationTargets = [];
		var discreteReplayableEvents = ['mousedown', 'mouseup', 'touchcancel', 'touchend', 'touchstart', 'auxclick', 'dblclick', 'pointercancel', 'pointerdown', 'pointerup', 'dragend', 'dragstart', 'drop', 'compositionend', 'compositionstart', 'keydown', 'keypress', 'keyup', 'input', 'textInput', // Intentionally camelCase
		'copy', 'cut', 'paste', 'click', 'change', 'contextmenu', 'reset', 'submit'];
		function isDiscreteEventThatRequiresHydration(eventType) {
		  return discreteReplayableEvents.indexOf(eventType) > -1;
		}

		function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
		  return {
		    blockedOn: blockedOn,
		    domEventName: domEventName,
		    eventSystemFlags: eventSystemFlags,
		    nativeEvent: nativeEvent,
		    targetContainers: [targetContainer]
		  };
		}

		function clearIfContinuousEvent(domEventName, nativeEvent) {
		  switch (domEventName) {
		    case 'focusin':
		    case 'focusout':
		      queuedFocus = null;
		      break;

		    case 'dragenter':
		    case 'dragleave':
		      queuedDrag = null;
		      break;

		    case 'mouseover':
		    case 'mouseout':
		      queuedMouse = null;
		      break;

		    case 'pointerover':
		    case 'pointerout':
		      {
		        var pointerId = nativeEvent.pointerId;
		        queuedPointers.delete(pointerId);
		        break;
		      }

		    case 'gotpointercapture':
		    case 'lostpointercapture':
		      {
		        var _pointerId = nativeEvent.pointerId;
		        queuedPointerCaptures.delete(_pointerId);
		        break;
		      }
		  }
		}

		function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
		  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
		    var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);

		    if (blockedOn !== null) {
		      var _fiber2 = getInstanceFromNode(blockedOn);

		      if (_fiber2 !== null) {
		        // Attempt to increase the priority of this target.
		        attemptContinuousHydration(_fiber2);
		      }
		    }

		    return queuedEvent;
		  } // If we have already queued this exact event, then it's because
		  // the different event systems have different DOM event listeners.
		  // We can accumulate the flags, and the targetContainers, and
		  // store a single event to be replayed.


		  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
		  var targetContainers = existingQueuedEvent.targetContainers;

		  if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
		    targetContainers.push(targetContainer);
		  }

		  return existingQueuedEvent;
		}

		function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
		  // These set relatedTarget to null because the replayed event will be treated as if we
		  // moved from outside the window (no target) onto the target once it hydrates.
		  // Instead of mutating we could clone the event.
		  switch (domEventName) {
		    case 'focusin':
		      {
		        var focusEvent = nativeEvent;
		        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
		        return true;
		      }

		    case 'dragenter':
		      {
		        var dragEvent = nativeEvent;
		        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
		        return true;
		      }

		    case 'mouseover':
		      {
		        var mouseEvent = nativeEvent;
		        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
		        return true;
		      }

		    case 'pointerover':
		      {
		        var pointerEvent = nativeEvent;
		        var pointerId = pointerEvent.pointerId;
		        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
		        return true;
		      }

		    case 'gotpointercapture':
		      {
		        var _pointerEvent = nativeEvent;
		        var _pointerId2 = _pointerEvent.pointerId;
		        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
		        return true;
		      }
		  }

		  return false;
		} // Check if this target is unblocked. Returns true if it's unblocked.

		function attemptExplicitHydrationTarget(queuedTarget) {
		  // TODO: This function shares a lot of logic with findInstanceBlockingEvent.
		  // Try to unify them. It's a bit tricky since it would require two return
		  // values.
		  var targetInst = getClosestInstanceFromNode(queuedTarget.target);

		  if (targetInst !== null) {
		    var nearestMounted = getNearestMountedFiber(targetInst);

		    if (nearestMounted !== null) {
		      var tag = nearestMounted.tag;

		      if (tag === SuspenseComponent) {
		        var instance = getSuspenseInstanceFromFiber(nearestMounted);

		        if (instance !== null) {
		          // We're blocked on hydrating this boundary.
		          // Increase its priority.
		          queuedTarget.blockedOn = instance;
		          attemptHydrationAtPriority(queuedTarget.priority, function () {
		            attemptHydrationAtCurrentPriority(nearestMounted);
		          });
		          return;
		        }
		      } else if (tag === HostRoot) {
		        var root = nearestMounted.stateNode;

		        if (isRootDehydrated(root)) {
		          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
		          // a root other than sync.

		          return;
		        }
		      }
		    }
		  }

		  queuedTarget.blockedOn = null;
		}

		function queueExplicitHydrationTarget(target) {
		  // TODO: This will read the priority if it's dispatched by the React
		  // event system but not native events. Should read window.event.type, like
		  // we do for updates (getCurrentEventPriority).
		  var updatePriority = getCurrentUpdatePriority$1();
		  var queuedTarget = {
		    blockedOn: null,
		    target: target,
		    priority: updatePriority
		  };
		  var i = 0;

		  for (; i < queuedExplicitHydrationTargets.length; i++) {
		    // Stop once we hit the first target with lower priority than
		    if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
		      break;
		    }
		  }

		  queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);

		  if (i === 0) {
		    attemptExplicitHydrationTarget(queuedTarget);
		  }
		}

		function attemptReplayContinuousQueuedEvent(queuedEvent) {
		  if (queuedEvent.blockedOn !== null) {
		    return false;
		  }

		  var targetContainers = queuedEvent.targetContainers;

		  while (targetContainers.length > 0) {
		    var targetContainer = targetContainers[0];
		    var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);

		    if (nextBlockedOn === null) {
		      {
		        var nativeEvent = queuedEvent.nativeEvent;
		        var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
		        setReplayingEvent(nativeEventClone);
		        nativeEvent.target.dispatchEvent(nativeEventClone);
		        resetReplayingEvent();
		      }
		    } else {
		      // We're still blocked. Try again later.
		      var _fiber3 = getInstanceFromNode(nextBlockedOn);

		      if (_fiber3 !== null) {
		        attemptContinuousHydration(_fiber3);
		      }

		      queuedEvent.blockedOn = nextBlockedOn;
		      return false;
		    } // This target container was successfully dispatched. Try the next.


		    targetContainers.shift();
		  }

		  return true;
		}

		function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
		  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
		    map.delete(key);
		  }
		}

		function replayUnblockedEvents() {
		  hasScheduledReplayAttempt = false;


		  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
		    queuedFocus = null;
		  }

		  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
		    queuedDrag = null;
		  }

		  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
		    queuedMouse = null;
		  }

		  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
		  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
		}

		function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
		  if (queuedEvent.blockedOn === unblocked) {
		    queuedEvent.blockedOn = null;

		    if (!hasScheduledReplayAttempt) {
		      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
		      // now unblocked. This first might not actually be unblocked yet.
		      // We could check it early to avoid scheduling an unnecessary callback.

		      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
		    }
		  }
		}

		function retryIfBlockedOn(unblocked) {
		  // Mark anything that was blocked on this as no longer blocked
		  // and eligible for a replay.
		  if (queuedDiscreteEvents.length > 0) {
		    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
		    // worth it because we expect very few discrete events to queue up and once
		    // we are actually fully unblocked it will be fast to replay them.

		    for (var i = 1; i < queuedDiscreteEvents.length; i++) {
		      var queuedEvent = queuedDiscreteEvents[i];

		      if (queuedEvent.blockedOn === unblocked) {
		        queuedEvent.blockedOn = null;
		      }
		    }
		  }

		  if (queuedFocus !== null) {
		    scheduleCallbackIfUnblocked(queuedFocus, unblocked);
		  }

		  if (queuedDrag !== null) {
		    scheduleCallbackIfUnblocked(queuedDrag, unblocked);
		  }

		  if (queuedMouse !== null) {
		    scheduleCallbackIfUnblocked(queuedMouse, unblocked);
		  }

		  var unblock = function (queuedEvent) {
		    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
		  };

		  queuedPointers.forEach(unblock);
		  queuedPointerCaptures.forEach(unblock);

		  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
		    var queuedTarget = queuedExplicitHydrationTargets[_i];

		    if (queuedTarget.blockedOn === unblocked) {
		      queuedTarget.blockedOn = null;
		    }
		  }

		  while (queuedExplicitHydrationTargets.length > 0) {
		    var nextExplicitTarget = queuedExplicitHydrationTargets[0];

		    if (nextExplicitTarget.blockedOn !== null) {
		      // We're still blocked.
		      break;
		    } else {
		      attemptExplicitHydrationTarget(nextExplicitTarget);

		      if (nextExplicitTarget.blockedOn === null) {
		        // We're unblocked.
		        queuedExplicitHydrationTargets.shift();
		      }
		    }
		  }
		}

		var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig; // TODO: can we stop exporting these?

		var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
		// We'd like to remove this but it's not clear if this is safe.

		function setEnabled(enabled) {
		  _enabled = !!enabled;
		}
		function isEnabled() {
		  return _enabled;
		}
		function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
		  var eventPriority = getEventPriority(domEventName);
		  var listenerWrapper;

		  switch (eventPriority) {
		    case DiscreteEventPriority:
		      listenerWrapper = dispatchDiscreteEvent;
		      break;

		    case ContinuousEventPriority:
		      listenerWrapper = dispatchContinuousEvent;
		      break;

		    case DefaultEventPriority:
		    default:
		      listenerWrapper = dispatchEvent;
		      break;
		  }

		  return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
		}

		function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
		  var previousPriority = getCurrentUpdatePriority();
		  var prevTransition = ReactCurrentBatchConfig.transition;
		  ReactCurrentBatchConfig.transition = null;

		  try {
		    setCurrentUpdatePriority(DiscreteEventPriority);
		    dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
		  } finally {
		    setCurrentUpdatePriority(previousPriority);
		    ReactCurrentBatchConfig.transition = prevTransition;
		  }
		}

		function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
		  var previousPriority = getCurrentUpdatePriority();
		  var prevTransition = ReactCurrentBatchConfig.transition;
		  ReactCurrentBatchConfig.transition = null;

		  try {
		    setCurrentUpdatePriority(ContinuousEventPriority);
		    dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
		  } finally {
		    setCurrentUpdatePriority(previousPriority);
		    ReactCurrentBatchConfig.transition = prevTransition;
		  }
		}

		function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
		  if (!_enabled) {
		    return;
		  }

		  {
		    dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
		  }
		}

		function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
		  var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

		  if (blockedOn === null) {
		    dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
		    clearIfContinuousEvent(domEventName, nativeEvent);
		    return;
		  }

		  if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
		    nativeEvent.stopPropagation();
		    return;
		  } // We need to clear only if we didn't queue because
		  // queueing is accumulative.


		  clearIfContinuousEvent(domEventName, nativeEvent);

		  if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
		    while (blockedOn !== null) {
		      var fiber = getInstanceFromNode(blockedOn);

		      if (fiber !== null) {
		        attemptSynchronousHydration(fiber);
		      }

		      var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

		      if (nextBlockedOn === null) {
		        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
		      }

		      if (nextBlockedOn === blockedOn) {
		        break;
		      }

		      blockedOn = nextBlockedOn;
		    }

		    if (blockedOn !== null) {
		      nativeEvent.stopPropagation();
		    }

		    return;
		  } // This is not replayable so we'll invoke it but without a target,
		  // in case the event system needs to trace it.


		  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
		}

		var return_targetInst = null; // Returns a SuspenseInstance or Container if it's blocked.
		// The return_targetInst field above is conceptually part of the return value.

		function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
		  // TODO: Warn if _enabled is false.
		  return_targetInst = null;
		  var nativeEventTarget = getEventTarget(nativeEvent);
		  var targetInst = getClosestInstanceFromNode(nativeEventTarget);

		  if (targetInst !== null) {
		    var nearestMounted = getNearestMountedFiber(targetInst);

		    if (nearestMounted === null) {
		      // This tree has been unmounted already. Dispatch without a target.
		      targetInst = null;
		    } else {
		      var tag = nearestMounted.tag;

		      if (tag === SuspenseComponent) {
		        var instance = getSuspenseInstanceFromFiber(nearestMounted);

		        if (instance !== null) {
		          // Queue the event to be replayed later. Abort dispatching since we
		          // don't want this event dispatched twice through the event system.
		          // TODO: If this is the first discrete event in the queue. Schedule an increased
		          // priority for this boundary.
		          return instance;
		        } // This shouldn't happen, something went wrong but to avoid blocking
		        // the whole system, dispatch the event without a target.
		        // TODO: Warn.


		        targetInst = null;
		      } else if (tag === HostRoot) {
		        var root = nearestMounted.stateNode;

		        if (isRootDehydrated(root)) {
		          // If this happens during a replay something went wrong and it might block
		          // the whole system.
		          return getContainerFromFiber(nearestMounted);
		        }

		        targetInst = null;
		      } else if (nearestMounted !== targetInst) {
		        // If we get an event (ex: img onload) before committing that
		        // component's mount, ignore it for now (that is, treat it as if it was an
		        // event on a non-React tree). We might also consider queueing events and
		        // dispatching them after the mount.
		        targetInst = null;
		      }
		    }
		  }

		  return_targetInst = targetInst; // We're not blocked on anything.

		  return null;
		}
		function getEventPriority(domEventName) {
		  switch (domEventName) {
		    // Used by SimpleEventPlugin:
		    case 'cancel':
		    case 'click':
		    case 'close':
		    case 'contextmenu':
		    case 'copy':
		    case 'cut':
		    case 'auxclick':
		    case 'dblclick':
		    case 'dragend':
		    case 'dragstart':
		    case 'drop':
		    case 'focusin':
		    case 'focusout':
		    case 'input':
		    case 'invalid':
		    case 'keydown':
		    case 'keypress':
		    case 'keyup':
		    case 'mousedown':
		    case 'mouseup':
		    case 'paste':
		    case 'pause':
		    case 'play':
		    case 'pointercancel':
		    case 'pointerdown':
		    case 'pointerup':
		    case 'ratechange':
		    case 'reset':
		    case 'resize':
		    case 'seeked':
		    case 'submit':
		    case 'touchcancel':
		    case 'touchend':
		    case 'touchstart':
		    case 'volumechange': // Used by polyfills:
		    // eslint-disable-next-line no-fallthrough

		    case 'change':
		    case 'selectionchange':
		    case 'textInput':
		    case 'compositionstart':
		    case 'compositionend':
		    case 'compositionupdate': // Only enableCreateEventHandleAPI:
		    // eslint-disable-next-line no-fallthrough

		    case 'beforeblur':
		    case 'afterblur': // Not used by React but could be by user code:
		    // eslint-disable-next-line no-fallthrough

		    case 'beforeinput':
		    case 'blur':
		    case 'fullscreenchange':
		    case 'focus':
		    case 'hashchange':
		    case 'popstate':
		    case 'select':
		    case 'selectstart':
		      return DiscreteEventPriority;

		    case 'drag':
		    case 'dragenter':
		    case 'dragexit':
		    case 'dragleave':
		    case 'dragover':
		    case 'mousemove':
		    case 'mouseout':
		    case 'mouseover':
		    case 'pointermove':
		    case 'pointerout':
		    case 'pointerover':
		    case 'scroll':
		    case 'toggle':
		    case 'touchmove':
		    case 'wheel': // Not used by React but could be by user code:
		    // eslint-disable-next-line no-fallthrough

		    case 'mouseenter':
		    case 'mouseleave':
		    case 'pointerenter':
		    case 'pointerleave':
		      return ContinuousEventPriority;

		    case 'message':
		      {
		        // We might be in the Scheduler callback.
		        // Eventually this mechanism will be replaced by a check
		        // of the current priority on the native scheduler.
		        var schedulerPriority = getCurrentPriorityLevel();

		        switch (schedulerPriority) {
		          case ImmediatePriority:
		            return DiscreteEventPriority;

		          case UserBlockingPriority:
		            return ContinuousEventPriority;

		          case NormalPriority:
		          case LowPriority:
		            // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
		            return DefaultEventPriority;

		          case IdlePriority:
		            return IdleEventPriority;

		          default:
		            return DefaultEventPriority;
		        }
		      }

		    default:
		      return DefaultEventPriority;
		  }
		}

		function addEventBubbleListener(target, eventType, listener) {
		  target.addEventListener(eventType, listener, false);
		  return listener;
		}
		function addEventCaptureListener(target, eventType, listener) {
		  target.addEventListener(eventType, listener, true);
		  return listener;
		}
		function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
		  target.addEventListener(eventType, listener, {
		    capture: true,
		    passive: passive
		  });
		  return listener;
		}
		function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
		  target.addEventListener(eventType, listener, {
		    passive: passive
		  });
		  return listener;
		}

		/**
		 * These variables store information about text content of a target node,
		 * allowing comparison of content before and after a given event.
		 *
		 * Identify the node where selection currently begins, then observe
		 * both its text content and its current position in the DOM. Since the
		 * browser may natively replace the target node during composition, we can
		 * use its position to find its replacement.
		 *
		 *
		 */
		var root = null;
		var startText = null;
		var fallbackText = null;
		function initialize(nativeEventTarget) {
		  root = nativeEventTarget;
		  startText = getText();
		  return true;
		}
		function reset() {
		  root = null;
		  startText = null;
		  fallbackText = null;
		}
		function getData() {
		  if (fallbackText) {
		    return fallbackText;
		  }

		  var start;
		  var startValue = startText;
		  var startLength = startValue.length;
		  var end;
		  var endValue = getText();
		  var endLength = endValue.length;

		  for (start = 0; start < startLength; start++) {
		    if (startValue[start] !== endValue[start]) {
		      break;
		    }
		  }

		  var minEnd = startLength - start;

		  for (end = 1; end <= minEnd; end++) {
		    if (startValue[startLength - end] !== endValue[endLength - end]) {
		      break;
		    }
		  }

		  var sliceTail = end > 1 ? 1 - end : undefined;
		  fallbackText = endValue.slice(start, sliceTail);
		  return fallbackText;
		}
		function getText() {
		  if ('value' in root) {
		    return root.value;
		  }

		  return root.textContent;
		}

		/**
		 * `charCode` represents the actual "character code" and is safe to use with
		 * `String.fromCharCode`. As such, only keys that correspond to printable
		 * characters produce a valid `charCode`, the only exception to this is Enter.
		 * The Tab-key is considered non-printable and does not have a `charCode`,
		 * presumably because it does not produce a tab-character in browsers.
		 *
		 * @param {object} nativeEvent Native browser event.
		 * @return {number} Normalized `charCode` property.
		 */
		function getEventCharCode(nativeEvent) {
		  var charCode;
		  var keyCode = nativeEvent.keyCode;

		  if ('charCode' in nativeEvent) {
		    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

		    if (charCode === 0 && keyCode === 13) {
		      charCode = 13;
		    }
		  } else {
		    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
		    charCode = keyCode;
		  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
		  // report Enter as charCode 10 when ctrl is pressed.


		  if (charCode === 10) {
		    charCode = 13;
		  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
		  // Must not discard the (non-)printable Enter-key.


		  if (charCode >= 32 || charCode === 13) {
		    return charCode;
		  }

		  return 0;
		}

		function functionThatReturnsTrue() {
		  return true;
		}

		function functionThatReturnsFalse() {
		  return false;
		} // This is intentionally a factory so that we have different returned constructors.
		// If we had a single constructor, it would be megamorphic and engines would deopt.


		function createSyntheticEvent(Interface) {
		  /**
		   * Synthetic events are dispatched by event plugins, typically in response to a
		   * top-level event delegation handler.
		   *
		   * These systems should generally use pooling to reduce the frequency of garbage
		   * collection. The system should check `isPersistent` to determine whether the
		   * event should be released into the pool after being dispatched. Users that
		   * need a persisted event should invoke `persist`.
		   *
		   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
		   * normalizing browser quirks. Subclasses do not necessarily have to implement a
		   * DOM interface; custom application-specific events can also subclass this.
		   */
		  function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
		    this._reactName = reactName;
		    this._targetInst = targetInst;
		    this.type = reactEventType;
		    this.nativeEvent = nativeEvent;
		    this.target = nativeEventTarget;
		    this.currentTarget = null;

		    for (var _propName in Interface) {
		      if (!Interface.hasOwnProperty(_propName)) {
		        continue;
		      }

		      var normalize = Interface[_propName];

		      if (normalize) {
		        this[_propName] = normalize(nativeEvent);
		      } else {
		        this[_propName] = nativeEvent[_propName];
		      }
		    }

		    var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

		    if (defaultPrevented) {
		      this.isDefaultPrevented = functionThatReturnsTrue;
		    } else {
		      this.isDefaultPrevented = functionThatReturnsFalse;
		    }

		    this.isPropagationStopped = functionThatReturnsFalse;
		    return this;
		  }

		  assign(SyntheticBaseEvent.prototype, {
		    preventDefault: function () {
		      this.defaultPrevented = true;
		      var event = this.nativeEvent;

		      if (!event) {
		        return;
		      }

		      if (event.preventDefault) {
		        event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
		      } else if (typeof event.returnValue !== 'unknown') {
		        event.returnValue = false;
		      }

		      this.isDefaultPrevented = functionThatReturnsTrue;
		    },
		    stopPropagation: function () {
		      var event = this.nativeEvent;

		      if (!event) {
		        return;
		      }

		      if (event.stopPropagation) {
		        event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
		      } else if (typeof event.cancelBubble !== 'unknown') {
		        // The ChangeEventPlugin registers a "propertychange" event for
		        // IE. This event does not support bubbling or cancelling, and
		        // any references to cancelBubble throw "Member not found".  A
		        // typeof check of "unknown" circumvents this issue (and is also
		        // IE specific).
		        event.cancelBubble = true;
		      }

		      this.isPropagationStopped = functionThatReturnsTrue;
		    },

		    /**
		     * We release all dispatched `SyntheticEvent`s after each event loop, adding
		     * them back into the pool. This allows a way to hold onto a reference that
		     * won't be added back into the pool.
		     */
		    persist: function () {// Modern event system doesn't use pooling.
		    },

		    /**
		     * Checks if this event should be released back into the pool.
		     *
		     * @return {boolean} True if this should not be released, false otherwise.
		     */
		    isPersistent: functionThatReturnsTrue
		  });
		  return SyntheticBaseEvent;
		}
		/**
		 * @interface Event
		 * @see http://www.w3.org/TR/DOM-Level-3-Events/
		 */


		var EventInterface = {
		  eventPhase: 0,
		  bubbles: 0,
		  cancelable: 0,
		  timeStamp: function (event) {
		    return event.timeStamp || Date.now();
		  },
		  defaultPrevented: 0,
		  isTrusted: 0
		};
		var SyntheticEvent = createSyntheticEvent(EventInterface);

		var UIEventInterface = assign({}, EventInterface, {
		  view: 0,
		  detail: 0
		});

		var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
		var lastMovementX;
		var lastMovementY;
		var lastMouseEvent;

		function updateMouseMovementPolyfillState(event) {
		  if (event !== lastMouseEvent) {
		    if (lastMouseEvent && event.type === 'mousemove') {
		      lastMovementX = event.screenX - lastMouseEvent.screenX;
		      lastMovementY = event.screenY - lastMouseEvent.screenY;
		    } else {
		      lastMovementX = 0;
		      lastMovementY = 0;
		    }

		    lastMouseEvent = event;
		  }
		}
		/**
		 * @interface MouseEvent
		 * @see http://www.w3.org/TR/DOM-Level-3-Events/
		 */


		var MouseEventInterface = assign({}, UIEventInterface, {
		  screenX: 0,
		  screenY: 0,
		  clientX: 0,
		  clientY: 0,
		  pageX: 0,
		  pageY: 0,
		  ctrlKey: 0,
		  shiftKey: 0,
		  altKey: 0,
		  metaKey: 0,
		  getModifierState: getEventModifierState,
		  button: 0,
		  buttons: 0,
		  relatedTarget: function (event) {
		    if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
		    return event.relatedTarget;
		  },
		  movementX: function (event) {
		    if ('movementX' in event) {
		      return event.movementX;
		    }

		    updateMouseMovementPolyfillState(event);
		    return lastMovementX;
		  },
		  movementY: function (event) {
		    if ('movementY' in event) {
		      return event.movementY;
		    } // Don't need to call updateMouseMovementPolyfillState() here
		    // because it's guaranteed to have already run when movementX
		    // was copied.


		    return lastMovementY;
		  }
		});

		var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
		/**
		 * @interface DragEvent
		 * @see http://www.w3.org/TR/DOM-Level-3-Events/
		 */

		var DragEventInterface = assign({}, MouseEventInterface, {
		  dataTransfer: 0
		});

		var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
		/**
		 * @interface FocusEvent
		 * @see http://www.w3.org/TR/DOM-Level-3-Events/
		 */

		var FocusEventInterface = assign({}, UIEventInterface, {
		  relatedTarget: 0
		});

		var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
		/**
		 * @interface Event
		 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
		 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
		 */

		var AnimationEventInterface = assign({}, EventInterface, {
		  animationName: 0,
		  elapsedTime: 0,
		  pseudoElement: 0
		});

		var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
		/**
		 * @interface Event
		 * @see http://www.w3.org/TR/clipboard-apis/
		 */

		var ClipboardEventInterface = assign({}, EventInterface, {
		  clipboardData: function (event) {
		    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
		  }
		});

		var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
		/**
		 * @interface Event
		 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
		 */

		var CompositionEventInterface = assign({}, EventInterface, {
		  data: 0
		});

		var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
		/**
		 * @interface Event
		 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
		 *      /#events-inputevents
		 */
		// Happens to share the same list for now.

		var SyntheticInputEvent = SyntheticCompositionEvent;
		/**
		 * Normalization of deprecated HTML5 `key` values
		 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
		 */

		var normalizeKey = {
		  Esc: 'Escape',
		  Spacebar: ' ',
		  Left: 'ArrowLeft',
		  Up: 'ArrowUp',
		  Right: 'ArrowRight',
		  Down: 'ArrowDown',
		  Del: 'Delete',
		  Win: 'OS',
		  Menu: 'ContextMenu',
		  Apps: 'ContextMenu',
		  Scroll: 'ScrollLock',
		  MozPrintableKey: 'Unidentified'
		};
		/**
		 * Translation from legacy `keyCode` to HTML5 `key`
		 * Only special keys supported, all others depend on keyboard layout or browser
		 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
		 */

		var translateToKey = {
		  '8': 'Backspace',
		  '9': 'Tab',
		  '12': 'Clear',
		  '13': 'Enter',
		  '16': 'Shift',
		  '17': 'Control',
		  '18': 'Alt',
		  '19': 'Pause',
		  '20': 'CapsLock',
		  '27': 'Escape',
		  '32': ' ',
		  '33': 'PageUp',
		  '34': 'PageDown',
		  '35': 'End',
		  '36': 'Home',
		  '37': 'ArrowLeft',
		  '38': 'ArrowUp',
		  '39': 'ArrowRight',
		  '40': 'ArrowDown',
		  '45': 'Insert',
		  '46': 'Delete',
		  '112': 'F1',
		  '113': 'F2',
		  '114': 'F3',
		  '115': 'F4',
		  '116': 'F5',
		  '117': 'F6',
		  '118': 'F7',
		  '119': 'F8',
		  '120': 'F9',
		  '121': 'F10',
		  '122': 'F11',
		  '123': 'F12',
		  '144': 'NumLock',
		  '145': 'ScrollLock',
		  '224': 'Meta'
		};
		/**
		 * @param {object} nativeEvent Native browser event.
		 * @return {string} Normalized `key` property.
		 */

		function getEventKey(nativeEvent) {
		  if (nativeEvent.key) {
		    // Normalize inconsistent values reported by browsers due to
		    // implementations of a working draft specification.
		    // FireFox implements `key` but returns `MozPrintableKey` for all
		    // printable characters (normalized to `Unidentified`), ignore it.
		    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

		    if (key !== 'Unidentified') {
		      return key;
		    }
		  } // Browser does not implement `key`, polyfill as much of it as we can.


		  if (nativeEvent.type === 'keypress') {
		    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
		    // thus be captured by `keypress`, no other non-printable key should.

		    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
		  }

		  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
		    // While user keyboard layout determines the actual meaning of each
		    // `keyCode` value, almost all function keys have a universal value.
		    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
		  }

		  return '';
		}
		/**
		 * Translation from modifier key to the associated property in the event.
		 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
		 */


		var modifierKeyToProp = {
		  Alt: 'altKey',
		  Control: 'ctrlKey',
		  Meta: 'metaKey',
		  Shift: 'shiftKey'
		}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
		// getModifierState. If getModifierState is not supported, we map it to a set of
		// modifier keys exposed by the event. In this case, Lock-keys are not supported.

		function modifierStateGetter(keyArg) {
		  var syntheticEvent = this;
		  var nativeEvent = syntheticEvent.nativeEvent;

		  if (nativeEvent.getModifierState) {
		    return nativeEvent.getModifierState(keyArg);
		  }

		  var keyProp = modifierKeyToProp[keyArg];
		  return keyProp ? !!nativeEvent[keyProp] : false;
		}

		function getEventModifierState(nativeEvent) {
		  return modifierStateGetter;
		}
		/**
		 * @interface KeyboardEvent
		 * @see http://www.w3.org/TR/DOM-Level-3-Events/
		 */


		var KeyboardEventInterface = assign({}, UIEventInterface, {
		  key: getEventKey,
		  code: 0,
		  location: 0,
		  ctrlKey: 0,
		  shiftKey: 0,
		  altKey: 0,
		  metaKey: 0,
		  repeat: 0,
		  locale: 0,
		  getModifierState: getEventModifierState,
		  // Legacy Interface
		  charCode: function (event) {
		    // `charCode` is the result of a KeyPress event and represents the value of
		    // the actual printable character.
		    // KeyPress is deprecated, but its replacement is not yet final and not
		    // implemented in any major browser. Only KeyPress has charCode.
		    if (event.type === 'keypress') {
		      return getEventCharCode(event);
		    }

		    return 0;
		  },
		  keyCode: function (event) {
		    // `keyCode` is the result of a KeyDown/Up event and represents the value of
		    // physical keyboard key.
		    // The actual meaning of the value depends on the users' keyboard layout
		    // which cannot be detected. Assuming that it is a US keyboard layout
		    // provides a surprisingly accurate mapping for US and European users.
		    // Due to this, it is left to the user to implement at this time.
		    if (event.type === 'keydown' || event.type === 'keyup') {
		      return event.keyCode;
		    }

		    return 0;
		  },
		  which: function (event) {
		    // `which` is an alias for either `keyCode` or `charCode` depending on the
		    // type of the event.
		    if (event.type === 'keypress') {
		      return getEventCharCode(event);
		    }

		    if (event.type === 'keydown' || event.type === 'keyup') {
		      return event.keyCode;
		    }

		    return 0;
		  }
		});

		var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
		/**
		 * @interface PointerEvent
		 * @see http://www.w3.org/TR/pointerevents/
		 */

		var PointerEventInterface = assign({}, MouseEventInterface, {
		  pointerId: 0,
		  width: 0,
		  height: 0,
		  pressure: 0,
		  tangentialPressure: 0,
		  tiltX: 0,
		  tiltY: 0,
		  twist: 0,
		  pointerType: 0,
		  isPrimary: 0
		});

		var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
		/**
		 * @interface TouchEvent
		 * @see http://www.w3.org/TR/touch-events/
		 */

		var TouchEventInterface = assign({}, UIEventInterface, {
		  touches: 0,
		  targetTouches: 0,
		  changedTouches: 0,
		  altKey: 0,
		  metaKey: 0,
		  ctrlKey: 0,
		  shiftKey: 0,
		  getModifierState: getEventModifierState
		});

		var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
		/**
		 * @interface Event
		 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
		 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
		 */

		var TransitionEventInterface = assign({}, EventInterface, {
		  propertyName: 0,
		  elapsedTime: 0,
		  pseudoElement: 0
		});

		var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
		/**
		 * @interface WheelEvent
		 * @see http://www.w3.org/TR/DOM-Level-3-Events/
		 */

		var WheelEventInterface = assign({}, MouseEventInterface, {
		  deltaX: function (event) {
		    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
		    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
		  },
		  deltaY: function (event) {
		    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
		    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
		    'wheelDelta' in event ? -event.wheelDelta : 0;
		  },
		  deltaZ: 0,
		  // Browsers without "deltaMode" is reporting in raw wheel delta where one
		  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
		  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
		  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
		  deltaMode: 0
		});

		var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);

		var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

		var START_KEYCODE = 229;
		var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
		var documentMode = null;

		if (canUseDOM && 'documentMode' in document) {
		  documentMode = document.documentMode;
		} // Webkit offers a very useful `textInput` event that can be used to
		// directly represent `beforeInput`. The IE `textinput` event is not as
		// useful, so we don't use it.


		var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
		// by the native compositionend event may be incorrect. Japanese ideographic
		// spaces, for instance (\u3000) are not recorded correctly.

		var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
		var SPACEBAR_CODE = 32;
		var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

		function registerEvents() {
		  registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']);
		  registerTwoPhaseEvent('onCompositionEnd', ['compositionend', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
		  registerTwoPhaseEvent('onCompositionStart', ['compositionstart', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
		  registerTwoPhaseEvent('onCompositionUpdate', ['compositionupdate', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
		} // Track whether we've ever handled a keypress on the space key.


		var hasSpaceKeypress = false;
		/**
		 * Return whether a native keypress event is assumed to be a command.
		 * This is required because Firefox fires `keypress` events for key commands
		 * (cut, copy, select-all, etc.) even though no character is inserted.
		 */

		function isKeypressCommand(nativeEvent) {
		  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
		  !(nativeEvent.ctrlKey && nativeEvent.altKey);
		}
		/**
		 * Translate native top level events into event types.
		 */


		function getCompositionEventType(domEventName) {
		  switch (domEventName) {
		    case 'compositionstart':
		      return 'onCompositionStart';

		    case 'compositionend':
		      return 'onCompositionEnd';

		    case 'compositionupdate':
		      return 'onCompositionUpdate';
		  }
		}
		/**
		 * Does our fallback best-guess model think this event signifies that
		 * composition has begun?
		 */


		function isFallbackCompositionStart(domEventName, nativeEvent) {
		  return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
		}
		/**
		 * Does our fallback mode think that this event is the end of composition?
		 */


		function isFallbackCompositionEnd(domEventName, nativeEvent) {
		  switch (domEventName) {
		    case 'keyup':
		      // Command keys insert or clear IME input.
		      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

		    case 'keydown':
		      // Expect IME keyCode on each keydown. If we get any other
		      // code we must have exited earlier.
		      return nativeEvent.keyCode !== START_KEYCODE;

		    case 'keypress':
		    case 'mousedown':
		    case 'focusout':
		      // Events are not possible without cancelling IME.
		      return true;

		    default:
		      return false;
		  }
		}
		/**
		 * Google Input Tools provides composition data via a CustomEvent,
		 * with the `data` property populated in the `detail` object. If this
		 * is available on the event object, use it. If not, this is a plain
		 * composition event and we have nothing special to extract.
		 *
		 * @param {object} nativeEvent
		 * @return {?string}
		 */


		function getDataFromCustomEvent(nativeEvent) {
		  var detail = nativeEvent.detail;

		  if (typeof detail === 'object' && 'data' in detail) {
		    return detail.data;
		  }

		  return null;
		}
		/**
		 * Check if a composition event was triggered by Korean IME.
		 * Our fallback mode does not work well with IE's Korean IME,
		 * so just use native composition events when Korean IME is used.
		 * Although CompositionEvent.locale property is deprecated,
		 * it is available in IE, where our fallback mode is enabled.
		 *
		 * @param {object} nativeEvent
		 * @return {boolean}
		 */


		function isUsingKoreanIME(nativeEvent) {
		  return nativeEvent.locale === 'ko';
		} // Track the current IME composition status, if any.


		var isComposing = false;
		/**
		 * @return {?object} A SyntheticCompositionEvent.
		 */

		function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
		  var eventType;
		  var fallbackData;

		  if (canUseCompositionEvent) {
		    eventType = getCompositionEventType(domEventName);
		  } else if (!isComposing) {
		    if (isFallbackCompositionStart(domEventName, nativeEvent)) {
		      eventType = 'onCompositionStart';
		    }
		  } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
		    eventType = 'onCompositionEnd';
		  }

		  if (!eventType) {
		    return null;
		  }

		  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
		    // The current composition is stored statically and must not be
		    // overwritten while composition continues.
		    if (!isComposing && eventType === 'onCompositionStart') {
		      isComposing = initialize(nativeEventTarget);
		    } else if (eventType === 'onCompositionEnd') {
		      if (isComposing) {
		        fallbackData = getData();
		      }
		    }
		  }

		  var listeners = accumulateTwoPhaseListeners(targetInst, eventType);

		  if (listeners.length > 0) {
		    var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
		    dispatchQueue.push({
		      event: event,
		      listeners: listeners
		    });

		    if (fallbackData) {
		      // Inject data generated from fallback path into the synthetic event.
		      // This matches the property of native CompositionEventInterface.
		      event.data = fallbackData;
		    } else {
		      var customData = getDataFromCustomEvent(nativeEvent);

		      if (customData !== null) {
		        event.data = customData;
		      }
		    }
		  }
		}

		function getNativeBeforeInputChars(domEventName, nativeEvent) {
		  switch (domEventName) {
		    case 'compositionend':
		      return getDataFromCustomEvent(nativeEvent);

		    case 'keypress':
		      /**
		       * If native `textInput` events are available, our goal is to make
		       * use of them. However, there is a special case: the spacebar key.
		       * In Webkit, preventing default on a spacebar `textInput` event
		       * cancels character insertion, but it *also* causes the browser
		       * to fall back to its default spacebar behavior of scrolling the
		       * page.
		       *
		       * Tracking at:
		       * https://code.google.com/p/chromium/issues/detail?id=355103
		       *
		       * To avoid this issue, use the keypress event as if no `textInput`
		       * event is available.
		       */
		      var which = nativeEvent.which;

		      if (which !== SPACEBAR_CODE) {
		        return null;
		      }

		      hasSpaceKeypress = true;
		      return SPACEBAR_CHAR;

		    case 'textInput':
		      // Record the characters to be added to the DOM.
		      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
		      // it at the keypress level and bail immediately. Android Chrome
		      // doesn't give us keycodes, so we need to ignore it.

		      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
		        return null;
		      }

		      return chars;

		    default:
		      // For other native event types, do nothing.
		      return null;
		  }
		}
		/**
		 * For browsers that do not provide the `textInput` event, extract the
		 * appropriate string to use for SyntheticInputEvent.
		 */


		function getFallbackBeforeInputChars(domEventName, nativeEvent) {
		  // If we are currently composing (IME) and using a fallback to do so,
		  // try to extract the composed characters from the fallback object.
		  // If composition event is available, we extract a string only at
		  // compositionevent, otherwise extract it at fallback events.
		  if (isComposing) {
		    if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
		      var chars = getData();
		      reset();
		      isComposing = false;
		      return chars;
		    }

		    return null;
		  }

		  switch (domEventName) {
		    case 'paste':
		      // If a paste event occurs after a keypress, throw out the input
		      // chars. Paste events should not lead to BeforeInput events.
		      return null;

		    case 'keypress':
		      /**
		       * As of v27, Firefox may fire keypress events even when no character
		       * will be inserted. A few possibilities:
		       *
		       * - `which` is `0`. Arrow keys, Esc key, etc.
		       *
		       * - `which` is the pressed key code, but no char is available.
		       *   Ex: 'AltGr + d` in Polish. There is no modified character for
		       *   this key combination and no character is inserted into the
		       *   document, but FF fires the keypress for char code `100` anyway.
		       *   No `input` event will occur.
		       *
		       * - `which` is the pressed key code, but a command combination is
		       *   being used. Ex: `Cmd+C`. No character is inserted, and no
		       *   `input` event will occur.
		       */
		      if (!isKeypressCommand(nativeEvent)) {
		        // IE fires the `keypress` event when a user types an emoji via
		        // Touch keyboard of Windows.  In such a case, the `char` property
		        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
		        // is 2, the property `which` does not represent an emoji correctly.
		        // In such a case, we directly return the `char` property instead of
		        // using `which`.
		        if (nativeEvent.char && nativeEvent.char.length > 1) {
		          return nativeEvent.char;
		        } else if (nativeEvent.which) {
		          return String.fromCharCode(nativeEvent.which);
		        }
		      }

		      return null;

		    case 'compositionend':
		      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

		    default:
		      return null;
		  }
		}
		/**
		 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
		 * `textInput` or fallback behavior.
		 *
		 * @return {?object} A SyntheticInputEvent.
		 */


		function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
		  var chars;

		  if (canUseTextInputEvent) {
		    chars = getNativeBeforeInputChars(domEventName, nativeEvent);
		  } else {
		    chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
		  } // If no characters are being inserted, no BeforeInput event should
		  // be fired.


		  if (!chars) {
		    return null;
		  }

		  var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');

		  if (listeners.length > 0) {
		    var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
		    dispatchQueue.push({
		      event: event,
		      listeners: listeners
		    });
		    event.data = chars;
		  }
		}
		/**
		 * Create an `onBeforeInput` event to match
		 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
		 *
		 * This event plugin is based on the native `textInput` event
		 * available in Chrome, Safari, Opera, and IE. This event fires after
		 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
		 *
		 * `beforeInput` is spec'd but not implemented in any browsers, and
		 * the `input` event does not provide any useful information about what has
		 * actually been added, contrary to the spec. Thus, `textInput` is the best
		 * available event to identify the characters that have actually been inserted
		 * into the target node.
		 *
		 * This plugin is also responsible for emitting `composition` events, thus
		 * allowing us to share composition fallback code for both `beforeInput` and
		 * `composition` event types.
		 */


		function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
		  extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
		  extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
		}

		/**
		 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
		 */
		var supportedInputTypes = {
		  color: true,
		  date: true,
		  datetime: true,
		  'datetime-local': true,
		  email: true,
		  month: true,
		  number: true,
		  password: true,
		  range: true,
		  search: true,
		  tel: true,
		  text: true,
		  time: true,
		  url: true,
		  week: true
		};

		function isTextInputElement(elem) {
		  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

		  if (nodeName === 'input') {
		    return !!supportedInputTypes[elem.type];
		  }

		  if (nodeName === 'textarea') {
		    return true;
		  }

		  return false;
		}

		/**
		 * Checks if an event is supported in the current execution environment.
		 *
		 * NOTE: This will not work correctly for non-generic events such as `change`,
		 * `reset`, `load`, `error`, and `select`.
		 *
		 * Borrows from Modernizr.
		 *
		 * @param {string} eventNameSuffix Event name, e.g. "click".
		 * @return {boolean} True if the event is supported.
		 * @internal
		 * @license Modernizr 3.0.0pre (Custom Build) | MIT
		 */

		function isEventSupported(eventNameSuffix) {
		  if (!canUseDOM) {
		    return false;
		  }

		  var eventName = 'on' + eventNameSuffix;
		  var isSupported = (eventName in document);

		  if (!isSupported) {
		    var element = document.createElement('div');
		    element.setAttribute(eventName, 'return;');
		    isSupported = typeof element[eventName] === 'function';
		  }

		  return isSupported;
		}

		function registerEvents$1() {
		  registerTwoPhaseEvent('onChange', ['change', 'click', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'selectionchange']);
		}

		function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
		  // Flag this event loop as needing state restore.
		  enqueueStateRestore(target);
		  var listeners = accumulateTwoPhaseListeners(inst, 'onChange');

		  if (listeners.length > 0) {
		    var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
		    dispatchQueue.push({
		      event: event,
		      listeners: listeners
		    });
		  }
		}
		/**
		 * For IE shims
		 */


		var activeElement = null;
		var activeElementInst = null;
		/**
		 * SECTION: handle `change` event
		 */

		function shouldUseChangeEvent(elem) {
		  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
		  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
		}

		function manualDispatchChangeEvent(nativeEvent) {
		  var dispatchQueue = [];
		  createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
		  // other events and have it go through ReactBrowserEventEmitter. Since it
		  // doesn't, we manually listen for the events and so we have to enqueue and
		  // process the abstract event manually.
		  //
		  // Batching is necessary here in order to ensure that all event handlers run
		  // before the next rerender (including event handlers attached to ancestor
		  // elements instead of directly on the input). Without this, controlled
		  // components don't work properly in conjunction with event bubbling because
		  // the component is rerendered and the value reverted before all the event
		  // handlers can run. See https://github.com/facebook/react/issues/708.

		  batchedUpdates(runEventInBatch, dispatchQueue);
		}

		function runEventInBatch(dispatchQueue) {
		  processDispatchQueue(dispatchQueue, 0);
		}

		function getInstIfValueChanged(targetInst) {
		  var targetNode = getNodeFromInstance(targetInst);

		  if (updateValueIfChanged(targetNode)) {
		    return targetInst;
		  }
		}

		function getTargetInstForChangeEvent(domEventName, targetInst) {
		  if (domEventName === 'change') {
		    return targetInst;
		  }
		}
		/**
		 * SECTION: handle `input` event
		 */


		var isInputEventSupported = false;

		if (canUseDOM) {
		  // IE9 claims to support the input event but fails to trigger it when
		  // deleting text, so we ignore its input events.
		  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
		}
		/**
		 * (For IE <=9) Starts tracking propertychange events on the passed-in element
		 * and override the value property so that we can distinguish user events from
		 * value changes in JS.
		 */


		function startWatchingForValueChange(target, targetInst) {
		  activeElement = target;
		  activeElementInst = targetInst;
		  activeElement.attachEvent('onpropertychange', handlePropertyChange);
		}
		/**
		 * (For IE <=9) Removes the event listeners from the currently-tracked element,
		 * if any exists.
		 */


		function stopWatchingForValueChange() {
		  if (!activeElement) {
		    return;
		  }

		  activeElement.detachEvent('onpropertychange', handlePropertyChange);
		  activeElement = null;
		  activeElementInst = null;
		}
		/**
		 * (For IE <=9) Handles a propertychange event, sending a `change` event if
		 * the value of the active element has changed.
		 */


		function handlePropertyChange(nativeEvent) {
		  if (nativeEvent.propertyName !== 'value') {
		    return;
		  }

		  if (getInstIfValueChanged(activeElementInst)) {
		    manualDispatchChangeEvent(nativeEvent);
		  }
		}

		function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
		  if (domEventName === 'focusin') {
		    // In IE9, propertychange fires for most input events but is buggy and
		    // doesn't fire when text is deleted, but conveniently, selectionchange
		    // appears to fire in all of the remaining cases so we catch those and
		    // forward the event if the value has changed
		    // In either case, we don't want to call the event handler if the value
		    // is changed from JS so we redefine a setter for `.value` that updates
		    // our activeElementValue variable, allowing us to ignore those changes
		    //
		    // stopWatching() should be a noop here but we call it just in case we
		    // missed a blur event somehow.
		    stopWatchingForValueChange();
		    startWatchingForValueChange(target, targetInst);
		  } else if (domEventName === 'focusout') {
		    stopWatchingForValueChange();
		  }
		} // For IE8 and IE9.


		function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
		  if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') {
		    // On the selectionchange event, the target is just document which isn't
		    // helpful for us so just check activeElement instead.
		    //
		    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
		    // propertychange on the first input event after setting `value` from a
		    // script and fires only keydown, keypress, keyup. Catching keyup usually
		    // gets it and catching keydown lets us fire an event for the first
		    // keystroke if user does a key repeat (it'll be a little delayed: right
		    // before the second keystroke). Other input methods (e.g., paste) seem to
		    // fire selectionchange normally.
		    return getInstIfValueChanged(activeElementInst);
		  }
		}
		/**
		 * SECTION: handle `click` event
		 */


		function shouldUseClickEvent(elem) {
		  // Use the `click` event to detect changes to checkbox and radio inputs.
		  // This approach works across all browsers, whereas `change` does not fire
		  // until `blur` in IE8.
		  var nodeName = elem.nodeName;
		  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
		}

		function getTargetInstForClickEvent(domEventName, targetInst) {
		  if (domEventName === 'click') {
		    return getInstIfValueChanged(targetInst);
		  }
		}

		function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
		  if (domEventName === 'input' || domEventName === 'change') {
		    return getInstIfValueChanged(targetInst);
		  }
		}

		function handleControlledInputBlur(node) {
		  var state = node._wrapperState;

		  if (!state || !state.controlled || node.type !== 'number') {
		    return;
		  }

		  {
		    // If controlled, assign the value attribute to the current value on blur
		    setDefaultValue(node, 'number', node.value);
		  }
		}
		/**
		 * This plugin creates an `onChange` event that normalizes change events
		 * across form elements. This event fires at a time when it's possible to
		 * change the element's value without seeing a flicker.
		 *
		 * Supported elements are:
		 * - input (see `isTextInputElement`)
		 * - textarea
		 * - select
		 */


		function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
		  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
		  var getTargetInstFunc, handleEventFunc;

		  if (shouldUseChangeEvent(targetNode)) {
		    getTargetInstFunc = getTargetInstForChangeEvent;
		  } else if (isTextInputElement(targetNode)) {
		    if (isInputEventSupported) {
		      getTargetInstFunc = getTargetInstForInputOrChangeEvent;
		    } else {
		      getTargetInstFunc = getTargetInstForInputEventPolyfill;
		      handleEventFunc = handleEventsForInputEventPolyfill;
		    }
		  } else if (shouldUseClickEvent(targetNode)) {
		    getTargetInstFunc = getTargetInstForClickEvent;
		  }

		  if (getTargetInstFunc) {
		    var inst = getTargetInstFunc(domEventName, targetInst);

		    if (inst) {
		      createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
		      return;
		    }
		  }

		  if (handleEventFunc) {
		    handleEventFunc(domEventName, targetNode, targetInst);
		  } // When blurring, set the value attribute for number inputs


		  if (domEventName === 'focusout') {
		    handleControlledInputBlur(targetNode);
		  }
		}

		function registerEvents$2() {
		  registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);
		  registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);
		  registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);
		  registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);
		}
		/**
		 * For almost every interaction we care about, there will be both a top-level
		 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
		 * we do not extract duplicate events. However, moving the mouse into the
		 * browser from outside will not fire a `mouseout` event. In this case, we use
		 * the `mouseover` top-level event.
		 */


		function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
		  var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
		  var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';

		  if (isOverEvent && !isReplayingEvent(nativeEvent)) {
		    // If this is an over event with a target, we might have already dispatched
		    // the event in the out event of the other target. If this is replayed,
		    // then it's because we couldn't dispatch against this target previously
		    // so we have to do it now instead.
		    var related = nativeEvent.relatedTarget || nativeEvent.fromElement;

		    if (related) {
		      // If the related node is managed by React, we can assume that we have
		      // already dispatched the corresponding events during its mouseout.
		      if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
		        return;
		      }
		    }
		  }

		  if (!isOutEvent && !isOverEvent) {
		    // Must not be a mouse or pointer in or out - ignoring.
		    return;
		  }

		  var win; // TODO: why is this nullable in the types but we read from it?

		  if (nativeEventTarget.window === nativeEventTarget) {
		    // `nativeEventTarget` is probably a window object.
		    win = nativeEventTarget;
		  } else {
		    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
		    var doc = nativeEventTarget.ownerDocument;

		    if (doc) {
		      win = doc.defaultView || doc.parentWindow;
		    } else {
		      win = window;
		    }
		  }

		  var from;
		  var to;

		  if (isOutEvent) {
		    var _related = nativeEvent.relatedTarget || nativeEvent.toElement;

		    from = targetInst;
		    to = _related ? getClosestInstanceFromNode(_related) : null;

		    if (to !== null) {
		      var nearestMounted = getNearestMountedFiber(to);

		      if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
		        to = null;
		      }
		    }
		  } else {
		    // Moving to a node from outside the window.
		    from = null;
		    to = targetInst;
		  }

		  if (from === to) {
		    // Nothing pertains to our managed components.
		    return;
		  }

		  var SyntheticEventCtor = SyntheticMouseEvent;
		  var leaveEventType = 'onMouseLeave';
		  var enterEventType = 'onMouseEnter';
		  var eventTypePrefix = 'mouse';

		  if (domEventName === 'pointerout' || domEventName === 'pointerover') {
		    SyntheticEventCtor = SyntheticPointerEvent;
		    leaveEventType = 'onPointerLeave';
		    enterEventType = 'onPointerEnter';
		    eventTypePrefix = 'pointer';
		  }

		  var fromNode = from == null ? win : getNodeFromInstance(from);
		  var toNode = to == null ? win : getNodeFromInstance(to);
		  var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
		  leave.target = fromNode;
		  leave.relatedTarget = toNode;
		  var enter = null; // We should only process this nativeEvent if we are processing
		  // the first ancestor. Next time, we will ignore the event.

		  var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);

		  if (nativeTargetInst === targetInst) {
		    var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
		    enterEvent.target = toNode;
		    enterEvent.relatedTarget = fromNode;
		    enter = enterEvent;
		  }

		  accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
		}

		/**
		 * inlined Object.is polyfill to avoid requiring consumers ship their own
		 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
		 */
		function is(x, y) {
		  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
		  ;
		}

		var objectIs = typeof Object.is === 'function' ? Object.is : is;

		/**
		 * Performs equality by iterating through keys on an object and returning false
		 * when any key has values which are not strictly equal between the arguments.
		 * Returns true when the values of all keys are strictly equal.
		 */

		function shallowEqual(objA, objB) {
		  if (objectIs(objA, objB)) {
		    return true;
		  }

		  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
		    return false;
		  }

		  var keysA = Object.keys(objA);
		  var keysB = Object.keys(objB);

		  if (keysA.length !== keysB.length) {
		    return false;
		  } // Test for A's keys different from B.


		  for (var i = 0; i < keysA.length; i++) {
		    var currentKey = keysA[i];

		    if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
		      return false;
		    }
		  }

		  return true;
		}

		/**
		 * Given any node return the first leaf node without children.
		 *
		 * @param {DOMElement|DOMTextNode} node
		 * @return {DOMElement|DOMTextNode}
		 */

		function getLeafNode(node) {
		  while (node && node.firstChild) {
		    node = node.firstChild;
		  }

		  return node;
		}
		/**
		 * Get the next sibling within a container. This will walk up the
		 * DOM if a node's siblings have been exhausted.
		 *
		 * @param {DOMElement|DOMTextNode} node
		 * @return {?DOMElement|DOMTextNode}
		 */


		function getSiblingNode(node) {
		  while (node) {
		    if (node.nextSibling) {
		      return node.nextSibling;
		    }

		    node = node.parentNode;
		  }
		}
		/**
		 * Get object describing the nodes which contain characters at offset.
		 *
		 * @param {DOMElement|DOMTextNode} root
		 * @param {number} offset
		 * @return {?object}
		 */


		function getNodeForCharacterOffset(root, offset) {
		  var node = getLeafNode(root);
		  var nodeStart = 0;
		  var nodeEnd = 0;

		  while (node) {
		    if (node.nodeType === TEXT_NODE) {
		      nodeEnd = nodeStart + node.textContent.length;

		      if (nodeStart <= offset && nodeEnd >= offset) {
		        return {
		          node: node,
		          offset: offset - nodeStart
		        };
		      }

		      nodeStart = nodeEnd;
		    }

		    node = getLeafNode(getSiblingNode(node));
		  }
		}

		/**
		 * @param {DOMElement} outerNode
		 * @return {?object}
		 */

		function getOffsets(outerNode) {
		  var ownerDocument = outerNode.ownerDocument;
		  var win = ownerDocument && ownerDocument.defaultView || window;
		  var selection = win.getSelection && win.getSelection();

		  if (!selection || selection.rangeCount === 0) {
		    return null;
		  }

		  var anchorNode = selection.anchorNode,
		      anchorOffset = selection.anchorOffset,
		      focusNode = selection.focusNode,
		      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
		  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
		  // expose properties, triggering a "Permission denied error" if any of its
		  // properties are accessed. The only seemingly possible way to avoid erroring
		  // is to access a property that typically works for non-anonymous divs and
		  // catch any error that may otherwise arise. See
		  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

		  try {
		    /* eslint-disable no-unused-expressions */
		    anchorNode.nodeType;
		    focusNode.nodeType;
		    /* eslint-enable no-unused-expressions */
		  } catch (e) {
		    return null;
		  }

		  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
		}
		/**
		 * Returns {start, end} where `start` is the character/codepoint index of
		 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
		 * `end` is the index of (focusNode, focusOffset).
		 *
		 * Returns null if you pass in garbage input but we should probably just crash.
		 *
		 * Exported only for testing.
		 */

		function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
		  var length = 0;
		  var start = -1;
		  var end = -1;
		  var indexWithinAnchor = 0;
		  var indexWithinFocus = 0;
		  var node = outerNode;
		  var parentNode = null;

		  outer: while (true) {
		    var next = null;

		    while (true) {
		      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
		        start = length + anchorOffset;
		      }

		      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
		        end = length + focusOffset;
		      }

		      if (node.nodeType === TEXT_NODE) {
		        length += node.nodeValue.length;
		      }

		      if ((next = node.firstChild) === null) {
		        break;
		      } // Moving from `node` to its first child `next`.


		      parentNode = node;
		      node = next;
		    }

		    while (true) {
		      if (node === outerNode) {
		        // If `outerNode` has children, this is always the second time visiting
		        // it. If it has no children, this is still the first loop, and the only
		        // valid selection is anchorNode and focusNode both equal to this node
		        // and both offsets 0, in which case we will have handled above.
		        break outer;
		      }

		      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
		        start = length;
		      }

		      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
		        end = length;
		      }

		      if ((next = node.nextSibling) !== null) {
		        break;
		      }

		      node = parentNode;
		      parentNode = node.parentNode;
		    } // Moving from `node` to its next sibling `next`.


		    node = next;
		  }

		  if (start === -1 || end === -1) {
		    // This should never happen. (Would happen if the anchor/focus nodes aren't
		    // actually inside the passed-in node.)
		    return null;
		  }

		  return {
		    start: start,
		    end: end
		  };
		}
		/**
		 * In modern non-IE browsers, we can support both forward and backward
		 * selections.
		 *
		 * Note: IE10+ supports the Selection object, but it does not support
		 * the `extend` method, which means that even in modern IE, it's not possible
		 * to programmatically create a backward selection. Thus, for all IE
		 * versions, we use the old IE API to create our selections.
		 *
		 * @param {DOMElement|DOMTextNode} node
		 * @param {object} offsets
		 */

		function setOffsets(node, offsets) {
		  var doc = node.ownerDocument || document;
		  var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
		  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
		  // fails when pasting 100+ items)

		  if (!win.getSelection) {
		    return;
		  }

		  var selection = win.getSelection();
		  var length = node.textContent.length;
		  var start = Math.min(offsets.start, length);
		  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
		  // Flip backward selections, so we can set with a single range.

		  if (!selection.extend && start > end) {
		    var temp = end;
		    end = start;
		    start = temp;
		  }

		  var startMarker = getNodeForCharacterOffset(node, start);
		  var endMarker = getNodeForCharacterOffset(node, end);

		  if (startMarker && endMarker) {
		    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
		      return;
		    }

		    var range = doc.createRange();
		    range.setStart(startMarker.node, startMarker.offset);
		    selection.removeAllRanges();

		    if (start > end) {
		      selection.addRange(range);
		      selection.extend(endMarker.node, endMarker.offset);
		    } else {
		      range.setEnd(endMarker.node, endMarker.offset);
		      selection.addRange(range);
		    }
		  }
		}

		function isTextNode(node) {
		  return node && node.nodeType === TEXT_NODE;
		}

		function containsNode(outerNode, innerNode) {
		  if (!outerNode || !innerNode) {
		    return false;
		  } else if (outerNode === innerNode) {
		    return true;
		  } else if (isTextNode(outerNode)) {
		    return false;
		  } else if (isTextNode(innerNode)) {
		    return containsNode(outerNode, innerNode.parentNode);
		  } else if ('contains' in outerNode) {
		    return outerNode.contains(innerNode);
		  } else if (outerNode.compareDocumentPosition) {
		    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
		  } else {
		    return false;
		  }
		}

		function isInDocument(node) {
		  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
		}

		function isSameOriginFrame(iframe) {
		  try {
		    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
		    // to throw, e.g. if it has a cross-origin src attribute.
		    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
		    // iframe.contentDocument.defaultView;
		    // A safety way is to access one of the cross origin properties: Window or Location
		    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
		    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
		    return typeof iframe.contentWindow.location.href === 'string';
		  } catch (err) {
		    return false;
		  }
		}

		function getActiveElementDeep() {
		  var win = window;
		  var element = getActiveElement();

		  while (element instanceof win.HTMLIFrameElement) {
		    if (isSameOriginFrame(element)) {
		      win = element.contentWindow;
		    } else {
		      return element;
		    }

		    element = getActiveElement(win.document);
		  }

		  return element;
		}
		/**
		 * @ReactInputSelection: React input selection module. Based on Selection.js,
		 * but modified to be suitable for react and has a couple of bug fixes (doesn't
		 * assume buttons have range selections allowed).
		 * Input selection module for React.
		 */

		/**
		 * @hasSelectionCapabilities: we get the element types that support selection
		 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
		 * and `selectionEnd` rows.
		 */


		function hasSelectionCapabilities(elem) {
		  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
		  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
		}
		function getSelectionInformation() {
		  var focusedElem = getActiveElementDeep();
		  return {
		    focusedElem: focusedElem,
		    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
		  };
		}
		/**
		 * @restoreSelection: If any selection information was potentially lost,
		 * restore it. This is useful when performing operations that could remove dom
		 * nodes and place them back in, resulting in focus being lost.
		 */

		function restoreSelection(priorSelectionInformation) {
		  var curFocusedElem = getActiveElementDeep();
		  var priorFocusedElem = priorSelectionInformation.focusedElem;
		  var priorSelectionRange = priorSelectionInformation.selectionRange;

		  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
		    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
		      setSelection(priorFocusedElem, priorSelectionRange);
		    } // Focusing a node can change the scroll position, which is undesirable


		    var ancestors = [];
		    var ancestor = priorFocusedElem;

		    while (ancestor = ancestor.parentNode) {
		      if (ancestor.nodeType === ELEMENT_NODE) {
		        ancestors.push({
		          element: ancestor,
		          left: ancestor.scrollLeft,
		          top: ancestor.scrollTop
		        });
		      }
		    }

		    if (typeof priorFocusedElem.focus === 'function') {
		      priorFocusedElem.focus();
		    }

		    for (var i = 0; i < ancestors.length; i++) {
		      var info = ancestors[i];
		      info.element.scrollLeft = info.left;
		      info.element.scrollTop = info.top;
		    }
		  }
		}
		/**
		 * @getSelection: Gets the selection bounds of a focused textarea, input or
		 * contentEditable node.
		 * -@input: Look up selection bounds of this input
		 * -@return {start: selectionStart, end: selectionEnd}
		 */

		function getSelection(input) {
		  var selection;

		  if ('selectionStart' in input) {
		    // Modern browser with input or textarea.
		    selection = {
		      start: input.selectionStart,
		      end: input.selectionEnd
		    };
		  } else {
		    // Content editable or old IE textarea.
		    selection = getOffsets(input);
		  }

		  return selection || {
		    start: 0,
		    end: 0
		  };
		}
		/**
		 * @setSelection: Sets the selection bounds of a textarea or input and focuses
		 * the input.
		 * -@input     Set selection bounds of this input or textarea
		 * -@offsets   Object of same form that is returned from get*
		 */

		function setSelection(input, offsets) {
		  var start = offsets.start;
		  var end = offsets.end;

		  if (end === undefined) {
		    end = start;
		  }

		  if ('selectionStart' in input) {
		    input.selectionStart = start;
		    input.selectionEnd = Math.min(end, input.value.length);
		  } else {
		    setOffsets(input, offsets);
		  }
		}

		var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

		function registerEvents$3() {
		  registerTwoPhaseEvent('onSelect', ['focusout', 'contextmenu', 'dragend', 'focusin', 'keydown', 'keyup', 'mousedown', 'mouseup', 'selectionchange']);
		}

		var activeElement$1 = null;
		var activeElementInst$1 = null;
		var lastSelection = null;
		var mouseDown = false;
		/**
		 * Get an object which is a unique representation of the current selection.
		 *
		 * The return value will not be consistent across nodes or browsers, but
		 * two identical selections on the same node will return identical objects.
		 */

		function getSelection$1(node) {
		  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
		    return {
		      start: node.selectionStart,
		      end: node.selectionEnd
		    };
		  } else {
		    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
		    var selection = win.getSelection();
		    return {
		      anchorNode: selection.anchorNode,
		      anchorOffset: selection.anchorOffset,
		      focusNode: selection.focusNode,
		      focusOffset: selection.focusOffset
		    };
		  }
		}
		/**
		 * Get document associated with the event target.
		 */


		function getEventTargetDocument(eventTarget) {
		  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
		}
		/**
		 * Poll selection to see whether it's changed.
		 *
		 * @param {object} nativeEvent
		 * @param {object} nativeEventTarget
		 * @return {?SyntheticEvent}
		 */


		function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
		  // Ensure we have the right element, and that the user is not dragging a
		  // selection (this matches native `select` event behavior). In HTML5, select
		  // fires only on input and textarea thus if there's no focused element we
		  // won't dispatch.
		  var doc = getEventTargetDocument(nativeEventTarget);

		  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
		    return;
		  } // Only fire when selection has actually changed.


		  var currentSelection = getSelection$1(activeElement$1);

		  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
		    lastSelection = currentSelection;
		    var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');

		    if (listeners.length > 0) {
		      var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
		      dispatchQueue.push({
		        event: event,
		        listeners: listeners
		      });
		      event.target = activeElement$1;
		    }
		  }
		}
		/**
		 * This plugin creates an `onSelect` event that normalizes select events
		 * across form elements.
		 *
		 * Supported elements are:
		 * - input (see `isTextInputElement`)
		 * - textarea
		 * - contentEditable
		 *
		 * This differs from native browser implementations in the following ways:
		 * - Fires on contentEditable fields as well as inputs.
		 * - Fires for collapsed selection.
		 * - Fires after user input.
		 */


		function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
		  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;

		  switch (domEventName) {
		    // Track the input node that has focus.
		    case 'focusin':
		      if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
		        activeElement$1 = targetNode;
		        activeElementInst$1 = targetInst;
		        lastSelection = null;
		      }

		      break;

		    case 'focusout':
		      activeElement$1 = null;
		      activeElementInst$1 = null;
		      lastSelection = null;
		      break;
		    // Don't fire the event while the user is dragging. This matches the
		    // semantics of the native select event.

		    case 'mousedown':
		      mouseDown = true;
		      break;

		    case 'contextmenu':
		    case 'mouseup':
		    case 'dragend':
		      mouseDown = false;
		      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
		      break;
		    // Chrome and IE fire non-standard event when selection is changed (and
		    // sometimes when it hasn't). IE's event fires out of order with respect
		    // to key and input events on deletion, so we discard it.
		    //
		    // Firefox doesn't support selectionchange, so check selection status
		    // after each key entry. The selection changes after keydown and before
		    // keyup, but we check on keydown as well in the case of holding down a
		    // key, when multiple keydown events are fired but only one keyup is.
		    // This is also our approach for IE handling, for the reason above.

		    case 'selectionchange':
		      if (skipSelectionChangeEvent) {
		        break;
		      }

		    // falls through

		    case 'keydown':
		    case 'keyup':
		      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
		  }
		}

		/**
		 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
		 *
		 * @param {string} styleProp
		 * @param {string} eventName
		 * @returns {object}
		 */

		function makePrefixMap(styleProp, eventName) {
		  var prefixes = {};
		  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
		  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
		  prefixes['Moz' + styleProp] = 'moz' + eventName;
		  return prefixes;
		}
		/**
		 * A list of event names to a configurable list of vendor prefixes.
		 */


		var vendorPrefixes = {
		  animationend: makePrefixMap('Animation', 'AnimationEnd'),
		  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
		  animationstart: makePrefixMap('Animation', 'AnimationStart'),
		  transitionend: makePrefixMap('Transition', 'TransitionEnd')
		};
		/**
		 * Event names that have already been detected and prefixed (if applicable).
		 */

		var prefixedEventNames = {};
		/**
		 * Element to check for prefixes on.
		 */

		var style = {};
		/**
		 * Bootstrap if a DOM exists.
		 */

		if (canUseDOM) {
		  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
		  // the un-prefixed "animation" and "transition" properties are defined on the
		  // style object but the events that fire will still be prefixed, so we need
		  // to check if the un-prefixed events are usable, and if not remove them from the map.

		  if (!('AnimationEvent' in window)) {
		    delete vendorPrefixes.animationend.animation;
		    delete vendorPrefixes.animationiteration.animation;
		    delete vendorPrefixes.animationstart.animation;
		  } // Same as above


		  if (!('TransitionEvent' in window)) {
		    delete vendorPrefixes.transitionend.transition;
		  }
		}
		/**
		 * Attempts to determine the correct vendor prefixed event name.
		 *
		 * @param {string} eventName
		 * @returns {string}
		 */


		function getVendorPrefixedEventName(eventName) {
		  if (prefixedEventNames[eventName]) {
		    return prefixedEventNames[eventName];
		  } else if (!vendorPrefixes[eventName]) {
		    return eventName;
		  }

		  var prefixMap = vendorPrefixes[eventName];

		  for (var styleProp in prefixMap) {
		    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
		      return prefixedEventNames[eventName] = prefixMap[styleProp];
		    }
		  }

		  return eventName;
		}

		var ANIMATION_END = getVendorPrefixedEventName('animationend');
		var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
		var ANIMATION_START = getVendorPrefixedEventName('animationstart');
		var TRANSITION_END = getVendorPrefixedEventName('transitionend');

		var topLevelEventsToReactNames = new Map(); // NOTE: Capitalization is important in this list!
		//
		// E.g. it needs "pointerDown", not "pointerdown".
		// This is because we derive both React name ("onPointerDown")
		// and DOM name ("pointerdown") from the same list.
		//
		// Exceptions that don't match this convention are listed separately.
		//
		// prettier-ignore

		var simpleEventPluginEvents = ['abort', 'auxClick', 'cancel', 'canPlay', 'canPlayThrough', 'click', 'close', 'contextMenu', 'copy', 'cut', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'gotPointerCapture', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'lostPointerCapture', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'pointerCancel', 'pointerDown', 'pointerMove', 'pointerOut', 'pointerOver', 'pointerUp', 'progress', 'rateChange', 'reset', 'resize', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchStart', 'volumeChange', 'scroll', 'toggle', 'touchMove', 'waiting', 'wheel'];

		function registerSimpleEvent(domEventName, reactName) {
		  topLevelEventsToReactNames.set(domEventName, reactName);
		  registerTwoPhaseEvent(reactName, [domEventName]);
		}

		function registerSimpleEvents() {
		  for (var i = 0; i < simpleEventPluginEvents.length; i++) {
		    var eventName = simpleEventPluginEvents[i];
		    var domEventName = eventName.toLowerCase();
		    var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
		    registerSimpleEvent(domEventName, 'on' + capitalizedEvent);
		  } // Special cases where event names don't match.


		  registerSimpleEvent(ANIMATION_END, 'onAnimationEnd');
		  registerSimpleEvent(ANIMATION_ITERATION, 'onAnimationIteration');
		  registerSimpleEvent(ANIMATION_START, 'onAnimationStart');
		  registerSimpleEvent('dblclick', 'onDoubleClick');
		  registerSimpleEvent('focusin', 'onFocus');
		  registerSimpleEvent('focusout', 'onBlur');
		  registerSimpleEvent(TRANSITION_END, 'onTransitionEnd');
		}

		function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
		  var reactName = topLevelEventsToReactNames.get(domEventName);

		  if (reactName === undefined) {
		    return;
		  }

		  var SyntheticEventCtor = SyntheticEvent;
		  var reactEventType = domEventName;

		  switch (domEventName) {
		    case 'keypress':
		      // Firefox creates a keypress event for function keys too. This removes
		      // the unwanted keypress events. Enter is however both printable and
		      // non-printable. One would expect Tab to be as well (but it isn't).
		      if (getEventCharCode(nativeEvent) === 0) {
		        return;
		      }

		    /* falls through */

		    case 'keydown':
		    case 'keyup':
		      SyntheticEventCtor = SyntheticKeyboardEvent;
		      break;

		    case 'focusin':
		      reactEventType = 'focus';
		      SyntheticEventCtor = SyntheticFocusEvent;
		      break;

		    case 'focusout':
		      reactEventType = 'blur';
		      SyntheticEventCtor = SyntheticFocusEvent;
		      break;

		    case 'beforeblur':
		    case 'afterblur':
		      SyntheticEventCtor = SyntheticFocusEvent;
		      break;

		    case 'click':
		      // Firefox creates a click event on right mouse clicks. This removes the
		      // unwanted click events.
		      if (nativeEvent.button === 2) {
		        return;
		      }

		    /* falls through */

		    case 'auxclick':
		    case 'dblclick':
		    case 'mousedown':
		    case 'mousemove':
		    case 'mouseup': // TODO: Disabled elements should not respond to mouse events

		    /* falls through */

		    case 'mouseout':
		    case 'mouseover':
		    case 'contextmenu':
		      SyntheticEventCtor = SyntheticMouseEvent;
		      break;

		    case 'drag':
		    case 'dragend':
		    case 'dragenter':
		    case 'dragexit':
		    case 'dragleave':
		    case 'dragover':
		    case 'dragstart':
		    case 'drop':
		      SyntheticEventCtor = SyntheticDragEvent;
		      break;

		    case 'touchcancel':
		    case 'touchend':
		    case 'touchmove':
		    case 'touchstart':
		      SyntheticEventCtor = SyntheticTouchEvent;
		      break;

		    case ANIMATION_END:
		    case ANIMATION_ITERATION:
		    case ANIMATION_START:
		      SyntheticEventCtor = SyntheticAnimationEvent;
		      break;

		    case TRANSITION_END:
		      SyntheticEventCtor = SyntheticTransitionEvent;
		      break;

		    case 'scroll':
		      SyntheticEventCtor = SyntheticUIEvent;
		      break;

		    case 'wheel':
		      SyntheticEventCtor = SyntheticWheelEvent;
		      break;

		    case 'copy':
		    case 'cut':
		    case 'paste':
		      SyntheticEventCtor = SyntheticClipboardEvent;
		      break;

		    case 'gotpointercapture':
		    case 'lostpointercapture':
		    case 'pointercancel':
		    case 'pointerdown':
		    case 'pointermove':
		    case 'pointerout':
		    case 'pointerover':
		    case 'pointerup':
		      SyntheticEventCtor = SyntheticPointerEvent;
		      break;
		  }

		  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

		  {
		    // Some events don't bubble in the browser.
		    // In the past, React has always bubbled them, but this can be surprising.
		    // We're going to try aligning closer to the browser behavior by not bubbling
		    // them in React either. We'll start by not bubbling onScroll, and then expand.
		    var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
		    // nonDelegatedEvents list in DOMPluginEventSystem.
		    // Then we can remove this special list.
		    // This is a breaking change that can wait until React 18.
		    domEventName === 'scroll';

		    var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);

		    if (_listeners.length > 0) {
		      // Intentionally create event lazily.
		      var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);

		      dispatchQueue.push({
		        event: _event,
		        listeners: _listeners
		      });
		    }
		  }
		}

		// TODO: remove top-level side effect.
		registerSimpleEvents();
		registerEvents$2();
		registerEvents$1();
		registerEvents$3();
		registerEvents();

		function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
		  // TODO: we should remove the concept of a "SimpleEventPlugin".
		  // This is the basic functionality of the event system. All
		  // the other plugins are essentially polyfills. So the plugin
		  // should probably be inlined somewhere and have its logic
		  // be core the to event system. This would potentially allow
		  // us to ship builds of React without the polyfilled plugins below.
		  extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
		  var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
		  // event's native "bubble" phase, which means that we're
		  // not in the capture phase. That's because we emulate
		  // the capture phase here still. This is a trade-off,
		  // because in an ideal world we would not emulate and use
		  // the phases properly, like we do with the SimpleEvent
		  // plugin. However, the plugins below either expect
		  // emulation (EnterLeave) or use state localized to that
		  // plugin (BeforeInput, Change, Select). The state in
		  // these modules complicates things, as you'll essentially
		  // get the case where the capture phase event might change
		  // state, only for the following bubble event to come in
		  // later and not trigger anything as the state now
		  // invalidates the heuristics of the event plugin. We
		  // could alter all these plugins to work in such ways, but
		  // that might cause other unknown side-effects that we
		  // can't foresee right now.

		  if (shouldProcessPolyfillPlugins) {
		    extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
		    extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
		    extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
		    extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
		  }
		} // List of events that need to be individually attached to media elements.


		var mediaEventTypes = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'encrypted', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'resize', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting']; // We should not delegate these events to the container, but rather
		// set them on the actual target element itself. This is primarily
		// because these events do not consistently bubble in the DOM.

		var nonDelegatedEvents = new Set(['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(mediaEventTypes));

		function executeDispatch(event, listener, currentTarget) {
		  var type = event.type || 'unknown-event';
		  event.currentTarget = currentTarget;
		  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
		  event.currentTarget = null;
		}

		function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
		  var previousInstance;

		  if (inCapturePhase) {
		    for (var i = dispatchListeners.length - 1; i >= 0; i--) {
		      var _dispatchListeners$i = dispatchListeners[i],
		          instance = _dispatchListeners$i.instance,
		          currentTarget = _dispatchListeners$i.currentTarget,
		          listener = _dispatchListeners$i.listener;

		      if (instance !== previousInstance && event.isPropagationStopped()) {
		        return;
		      }

		      executeDispatch(event, listener, currentTarget);
		      previousInstance = instance;
		    }
		  } else {
		    for (var _i = 0; _i < dispatchListeners.length; _i++) {
		      var _dispatchListeners$_i = dispatchListeners[_i],
		          _instance = _dispatchListeners$_i.instance,
		          _currentTarget = _dispatchListeners$_i.currentTarget,
		          _listener = _dispatchListeners$_i.listener;

		      if (_instance !== previousInstance && event.isPropagationStopped()) {
		        return;
		      }

		      executeDispatch(event, _listener, _currentTarget);
		      previousInstance = _instance;
		    }
		  }
		}

		function processDispatchQueue(dispatchQueue, eventSystemFlags) {
		  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

		  for (var i = 0; i < dispatchQueue.length; i++) {
		    var _dispatchQueue$i = dispatchQueue[i],
		        event = _dispatchQueue$i.event,
		        listeners = _dispatchQueue$i.listeners;
		    processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
		  } // This would be a good time to rethrow if any of the event handlers threw.


		  rethrowCaughtError();
		}

		function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
		  var nativeEventTarget = getEventTarget(nativeEvent);
		  var dispatchQueue = [];
		  extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
		  processDispatchQueue(dispatchQueue, eventSystemFlags);
		}

		function listenToNonDelegatedEvent(domEventName, targetElement) {
		  {
		    if (!nonDelegatedEvents.has(domEventName)) {
		      error('Did not expect a listenToNonDelegatedEvent() call for "%s". ' + 'This is a bug in React. Please file an issue.', domEventName);
		    }
		  }

		  var isCapturePhaseListener = false;
		  var listenerSet = getEventListenerSet(targetElement);
		  var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);

		  if (!listenerSet.has(listenerSetKey)) {
		    addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
		    listenerSet.add(listenerSetKey);
		  }
		}
		function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
		  {
		    if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
		      error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. ' + 'This is a bug in React. Please file an issue.', domEventName);
		    }
		  }

		  var eventSystemFlags = 0;

		  if (isCapturePhaseListener) {
		    eventSystemFlags |= IS_CAPTURE_PHASE;
		  }

		  addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
		} // This is only used by createEventHandle when the
		var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
		function listenToAllSupportedEvents(rootContainerElement) {
		  if (!rootContainerElement[listeningMarker]) {
		    rootContainerElement[listeningMarker] = true;
		    allNativeEvents.forEach(function (domEventName) {
		      // We handle selectionchange separately because it
		      // doesn't bubble and needs to be on the document.
		      if (domEventName !== 'selectionchange') {
		        if (!nonDelegatedEvents.has(domEventName)) {
		          listenToNativeEvent(domEventName, false, rootContainerElement);
		        }

		        listenToNativeEvent(domEventName, true, rootContainerElement);
		      }
		    });
		    var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;

		    if (ownerDocument !== null) {
		      // The selectionchange event also needs deduplication
		      // but it is attached to the document.
		      if (!ownerDocument[listeningMarker]) {
		        ownerDocument[listeningMarker] = true;
		        listenToNativeEvent('selectionchange', false, ownerDocument);
		      }
		    }
		  }
		}

		function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
		  var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
		  // active and not passive.

		  var isPassiveListener = undefined;

		  if (passiveBrowserEventsSupported) {
		    // Browsers introduced an intervention, making these events
		    // passive by default on document. React doesn't bind them
		    // to document anymore, but changing this now would undo
		    // the performance wins from the change. So we emulate
		    // the existing behavior manually on the roots now.
		    // https://github.com/facebook/react/issues/19651
		    if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {
		      isPassiveListener = true;
		    }
		  }

		  targetContainer =  targetContainer;


		  if (isCapturePhaseListener) {
		    if (isPassiveListener !== undefined) {
		      addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
		    } else {
		      addEventCaptureListener(targetContainer, domEventName, listener);
		    }
		  } else {
		    if (isPassiveListener !== undefined) {
		      addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
		    } else {
		      addEventBubbleListener(targetContainer, domEventName, listener);
		    }
		  }
		}

		function isMatchingRootContainer(grandContainer, targetContainer) {
		  return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
		}

		function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
		  var ancestorInst = targetInst;

		  if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
		    var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we

		    if (targetInst !== null) {
		      // The below logic attempts to work out if we need to change
		      // the target fiber to a different ancestor. We had similar logic
		      // in the legacy event system, except the big difference between
		      // systems is that the modern event system now has an event listener
		      // attached to each React Root and React Portal Root. Together,
		      // the DOM nodes representing these roots are the "rootContainer".
		      // To figure out which ancestor instance we should use, we traverse
		      // up the fiber tree from the target instance and attempt to find
		      // root boundaries that match that of our current "rootContainer".
		      // If we find that "rootContainer", we find the parent fiber
		      // sub-tree for that root and make that our ancestor instance.
		      var node = targetInst;

		      mainLoop: while (true) {
		        if (node === null) {
		          return;
		        }

		        var nodeTag = node.tag;

		        if (nodeTag === HostRoot || nodeTag === HostPortal) {
		          var container = node.stateNode.containerInfo;

		          if (isMatchingRootContainer(container, targetContainerNode)) {
		            break;
		          }

		          if (nodeTag === HostPortal) {
		            // The target is a portal, but it's not the rootContainer we're looking for.
		            // Normally portals handle their own events all the way down to the root.
		            // So we should be able to stop now. However, we don't know if this portal
		            // was part of *our* root.
		            var grandNode = node.return;

		            while (grandNode !== null) {
		              var grandTag = grandNode.tag;

		              if (grandTag === HostRoot || grandTag === HostPortal) {
		                var grandContainer = grandNode.stateNode.containerInfo;

		                if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
		                  // This is the rootContainer we're looking for and we found it as
		                  // a parent of the Portal. That means we can ignore it because the
		                  // Portal will bubble through to us.
		                  return;
		                }
		              }

		              grandNode = grandNode.return;
		            }
		          } // Now we need to find it's corresponding host fiber in the other
		          // tree. To do this we can use getClosestInstanceFromNode, but we
		          // need to validate that the fiber is a host instance, otherwise
		          // we need to traverse up through the DOM till we find the correct
		          // node that is from the other tree.


		          while (container !== null) {
		            var parentNode = getClosestInstanceFromNode(container);

		            if (parentNode === null) {
		              return;
		            }

		            var parentTag = parentNode.tag;

		            if (parentTag === HostComponent || parentTag === HostText) {
		              node = ancestorInst = parentNode;
		              continue mainLoop;
		            }

		            container = container.parentNode;
		          }
		        }

		        node = node.return;
		      }
		    }
		  }

		  batchedUpdates(function () {
		    return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
		  });
		}

		function createDispatchListener(instance, listener, currentTarget) {
		  return {
		    instance: instance,
		    listener: listener,
		    currentTarget: currentTarget
		  };
		}

		function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
		  var captureName = reactName !== null ? reactName + 'Capture' : null;
		  var reactEventName = inCapturePhase ? captureName : reactName;
		  var listeners = [];
		  var instance = targetFiber;
		  var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.

		  while (instance !== null) {
		    var _instance2 = instance,
		        stateNode = _instance2.stateNode,
		        tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)

		    if (tag === HostComponent && stateNode !== null) {
		      lastHostComponent = stateNode; // createEventHandle listeners


		      if (reactEventName !== null) {
		        var listener = getListener(instance, reactEventName);

		        if (listener != null) {
		          listeners.push(createDispatchListener(instance, listener, lastHostComponent));
		        }
		      }
		    } // If we are only accumulating events for the target, then we don't
		    // continue to propagate through the React fiber tree to find other
		    // listeners.


		    if (accumulateTargetOnly) {
		      break;
		    } // If we are processing the onBeforeBlur event, then we need to take

		    instance = instance.return;
		  }

		  return listeners;
		} // We should only use this function for:
		// - BeforeInputEventPlugin
		// - ChangeEventPlugin
		// - SelectEventPlugin
		// This is because we only process these plugins
		// in the bubble phase, so we need to accumulate two
		// phase event listeners (via emulation).

		function accumulateTwoPhaseListeners(targetFiber, reactName) {
		  var captureName = reactName + 'Capture';
		  var listeners = [];
		  var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.

		  while (instance !== null) {
		    var _instance3 = instance,
		        stateNode = _instance3.stateNode,
		        tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)

		    if (tag === HostComponent && stateNode !== null) {
		      var currentTarget = stateNode;
		      var captureListener = getListener(instance, captureName);

		      if (captureListener != null) {
		        listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
		      }

		      var bubbleListener = getListener(instance, reactName);

		      if (bubbleListener != null) {
		        listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
		      }
		    }

		    instance = instance.return;
		  }

		  return listeners;
		}

		function getParent(inst) {
		  if (inst === null) {
		    return null;
		  }

		  do {
		    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
		    // That is depending on if we want nested subtrees (layers) to bubble
		    // events to their parent. We could also go through parentNode on the
		    // host node but that wouldn't work for React Native and doesn't let us
		    // do the portal feature.
		  } while (inst && inst.tag !== HostComponent);

		  if (inst) {
		    return inst;
		  }

		  return null;
		}
		/**
		 * Return the lowest common ancestor of A and B, or null if they are in
		 * different trees.
		 */


		function getLowestCommonAncestor(instA, instB) {
		  var nodeA = instA;
		  var nodeB = instB;
		  var depthA = 0;

		  for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
		    depthA++;
		  }

		  var depthB = 0;

		  for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
		    depthB++;
		  } // If A is deeper, crawl up.


		  while (depthA - depthB > 0) {
		    nodeA = getParent(nodeA);
		    depthA--;
		  } // If B is deeper, crawl up.


		  while (depthB - depthA > 0) {
		    nodeB = getParent(nodeB);
		    depthB--;
		  } // Walk in lockstep until we find a match.


		  var depth = depthA;

		  while (depth--) {
		    if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
		      return nodeA;
		    }

		    nodeA = getParent(nodeA);
		    nodeB = getParent(nodeB);
		  }

		  return null;
		}

		function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
		  var registrationName = event._reactName;
		  var listeners = [];
		  var instance = target;

		  while (instance !== null) {
		    if (instance === common) {
		      break;
		    }

		    var _instance4 = instance,
		        alternate = _instance4.alternate,
		        stateNode = _instance4.stateNode,
		        tag = _instance4.tag;

		    if (alternate !== null && alternate === common) {
		      break;
		    }

		    if (tag === HostComponent && stateNode !== null) {
		      var currentTarget = stateNode;

		      if (inCapturePhase) {
		        var captureListener = getListener(instance, registrationName);

		        if (captureListener != null) {
		          listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
		        }
		      } else if (!inCapturePhase) {
		        var bubbleListener = getListener(instance, registrationName);

		        if (bubbleListener != null) {
		          listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
		        }
		      }
		    }

		    instance = instance.return;
		  }

		  if (listeners.length !== 0) {
		    dispatchQueue.push({
		      event: event,
		      listeners: listeners
		    });
		  }
		} // We should only use this function for:
		// - EnterLeaveEventPlugin
		// This is because we only process this plugin
		// in the bubble phase, so we need to accumulate two
		// phase event listeners.


		function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
		  var common = from && to ? getLowestCommonAncestor(from, to) : null;

		  if (from !== null) {
		    accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
		  }

		  if (to !== null && enterEvent !== null) {
		    accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
		  }
		}
		function getListenerSetKey(domEventName, capture) {
		  return domEventName + "__" + (capture ? 'capture' : 'bubble');
		}

		var didWarnInvalidHydration = false;
		var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
		var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
		var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
		var AUTOFOCUS = 'autoFocus';
		var CHILDREN = 'children';
		var STYLE = 'style';
		var HTML$1 = '__html';
		var warnedUnknownTags;
		var validatePropertiesInDevelopment;
		var warnForPropDifference;
		var warnForExtraAttributes;
		var warnForInvalidEventListener;
		var canDiffStyleForHydrationWarning;
		var normalizeHTML;

		{
		  warnedUnknownTags = {
		    // There are working polyfills for <dialog>. Let people use it.
		    dialog: true,
		    // Electron ships a custom <webview> tag to display external web content in
		    // an isolated frame and process.
		    // This tag is not present in non Electron environments such as JSDom which
		    // is often used for testing purposes.
		    // @see https://electronjs.org/docs/api/webview-tag
		    webview: true
		  };

		  validatePropertiesInDevelopment = function (type, props) {
		    validateProperties(type, props);
		    validateProperties$1(type, props);
		    validateProperties$2(type, props, {
		      registrationNameDependencies: registrationNameDependencies,
		      possibleRegistrationNames: possibleRegistrationNames
		    });
		  }; // IE 11 parses & normalizes the style attribute as opposed to other
		  // browsers. It adds spaces and sorts the properties in some
		  // non-alphabetical order. Handling that would require sorting CSS
		  // properties in the client & server versions or applying
		  // `expectedStyle` to a temporary DOM node to read its `style` attribute
		  // normalized. Since it only affects IE, we're skipping style warnings
		  // in that browser completely in favor of doing all that work.
		  // See https://github.com/facebook/react/issues/11807


		  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;

		  warnForPropDifference = function (propName, serverValue, clientValue) {
		    if (didWarnInvalidHydration) {
		      return;
		    }

		    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
		    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

		    if (normalizedServerValue === normalizedClientValue) {
		      return;
		    }

		    didWarnInvalidHydration = true;

		    error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
		  };

		  warnForExtraAttributes = function (attributeNames) {
		    if (didWarnInvalidHydration) {
		      return;
		    }

		    didWarnInvalidHydration = true;
		    var names = [];
		    attributeNames.forEach(function (name) {
		      names.push(name);
		    });

		    error('Extra attributes from the server: %s', names);
		  };

		  warnForInvalidEventListener = function (registrationName, listener) {
		    if (listener === false) {
		      error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
		    } else {
		      error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
		    }
		  }; // Parse the HTML and read it back to normalize the HTML string so that it
		  // can be used for comparison.


		  normalizeHTML = function (parent, html) {
		    // We could have created a separate document here to avoid
		    // re-initializing custom elements if they exist. But this breaks
		    // how <noscript> is being handled. So we use the same document.
		    // See the discussion in https://github.com/facebook/react/pull/11157.
		    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
		    testElement.innerHTML = html;
		    return testElement.innerHTML;
		  };
		} // HTML parsing normalizes CR and CRLF to LF.
		// It also can turn \u0000 into \uFFFD inside attributes.
		// https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
		// If we have a mismatch, it might be caused by that.
		// We will still patch up in this case but not fire the warning.


		var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
		var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

		function normalizeMarkupForTextOrAttribute(markup) {
		  {
		    checkHtmlStringCoercion(markup);
		  }

		  var markupString = typeof markup === 'string' ? markup : '' + markup;
		  return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
		}

		function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
		  var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
		  var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

		  if (normalizedServerText === normalizedClientText) {
		    return;
		  }

		  if (shouldWarnDev) {
		    {
		      if (!didWarnInvalidHydration) {
		        didWarnInvalidHydration = true;

		        error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
		      }
		    }
		  }

		  if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
		    // In concurrent roots, we throw when there's a text mismatch and revert to
		    // client rendering, up to the nearest Suspense boundary.
		    throw new Error('Text content does not match server-rendered HTML.');
		  }
		}

		function getOwnerDocumentFromRootContainer(rootContainerElement) {
		  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
		}

		function noop() {}

		function trapClickOnNonInteractiveElement(node) {
		  // Mobile Safari does not fire properly bubble click events on
		  // non-interactive elements, which means delegated click listeners do not
		  // fire. The workaround for this bug involves attaching an empty click
		  // listener on the target node.
		  // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
		  // Just set it using the onclick property so that we don't have to manage any
		  // bookkeeping for it. Not sure if we need to clear it when the listener is
		  // removed.
		  // TODO: Only do this for the relevant Safaris maybe?
		  node.onclick = noop;
		}

		function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
		  for (var propKey in nextProps) {
		    if (!nextProps.hasOwnProperty(propKey)) {
		      continue;
		    }

		    var nextProp = nextProps[propKey];

		    if (propKey === STYLE) {
		      {
		        if (nextProp) {
		          // Freeze the next style object so that we can assume it won't be
		          // mutated. We have already warned for this in the past.
		          Object.freeze(nextProp);
		        }
		      } // Relies on `updateStylesByID` not mutating `styleUpdates`.


		      setValueForStyles(domElement, nextProp);
		    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
		      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

		      if (nextHtml != null) {
		        setInnerHTML(domElement, nextHtml);
		      }
		    } else if (propKey === CHILDREN) {
		      if (typeof nextProp === 'string') {
		        // Avoid setting initial textContent when the text is empty. In IE11 setting
		        // textContent on a <textarea> will cause the placeholder to not
		        // show within the <textarea> until it has been focused and blurred again.
		        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
		        var canSetTextContent = tag !== 'textarea' || nextProp !== '';

		        if (canSetTextContent) {
		          setTextContent(domElement, nextProp);
		        }
		      } else if (typeof nextProp === 'number') {
		        setTextContent(domElement, '' + nextProp);
		      }
		    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
		      if (nextProp != null) {
		        if ( typeof nextProp !== 'function') {
		          warnForInvalidEventListener(propKey, nextProp);
		        }

		        if (propKey === 'onScroll') {
		          listenToNonDelegatedEvent('scroll', domElement);
		        }
		      }
		    } else if (nextProp != null) {
		      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
		    }
		  }
		}

		function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
		  // TODO: Handle wasCustomComponentTag
		  for (var i = 0; i < updatePayload.length; i += 2) {
		    var propKey = updatePayload[i];
		    var propValue = updatePayload[i + 1];

		    if (propKey === STYLE) {
		      setValueForStyles(domElement, propValue);
		    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
		      setInnerHTML(domElement, propValue);
		    } else if (propKey === CHILDREN) {
		      setTextContent(domElement, propValue);
		    } else {
		      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
		    }
		  }
		}

		function createElement(type, props, rootContainerElement, parentNamespace) {
		  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
		  // tags get no namespace.

		  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
		  var domElement;
		  var namespaceURI = parentNamespace;

		  if (namespaceURI === HTML_NAMESPACE) {
		    namespaceURI = getIntrinsicNamespace(type);
		  }

		  if (namespaceURI === HTML_NAMESPACE) {
		    {
		      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
		      // allow <SVG> or <mATH>.

		      if (!isCustomComponentTag && type !== type.toLowerCase()) {
		        error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
		      }
		    }

		    if (type === 'script') {
		      // Create the script via .innerHTML so its "parser-inserted" flag is
		      // set to true and it does not execute
		      var div = ownerDocument.createElement('div');

		      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
		      // This is guaranteed to yield a script element.

		      var firstChild = div.firstChild;
		      domElement = div.removeChild(firstChild);
		    } else if (typeof props.is === 'string') {
		      // $FlowIssue `createElement` should be updated for Web Components
		      domElement = ownerDocument.createElement(type, {
		        is: props.is
		      });
		    } else {
		      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
		      // See discussion in https://github.com/facebook/react/pull/6896
		      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
		      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
		      // attributes on `select`s needs to be added before `option`s are inserted.
		      // This prevents:
		      // - a bug where the `select` does not scroll to the correct option because singular
		      //  `select` elements automatically pick the first item #13222
		      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
		      // See https://github.com/facebook/react/issues/13222
		      // and https://github.com/facebook/react/issues/14239

		      if (type === 'select') {
		        var node = domElement;

		        if (props.multiple) {
		          node.multiple = true;
		        } else if (props.size) {
		          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
		          // it is possible that no option is selected.
		          //
		          // This is only necessary when a select in "single selection mode".
		          node.size = props.size;
		        }
		      }
		    }
		  } else {
		    domElement = ownerDocument.createElementNS(namespaceURI, type);
		  }

		  {
		    if (namespaceURI === HTML_NAMESPACE) {
		      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !hasOwnProperty.call(warnedUnknownTags, type)) {
		        warnedUnknownTags[type] = true;

		        error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
		      }
		    }
		  }

		  return domElement;
		}
		function createTextNode(text, rootContainerElement) {
		  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
		}
		function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
		  var isCustomComponentTag = isCustomComponent(tag, rawProps);

		  {
		    validatePropertiesInDevelopment(tag, rawProps);
		  } // TODO: Make sure that we check isMounted before firing any of these events.


		  var props;

		  switch (tag) {
		    case 'dialog':
		      listenToNonDelegatedEvent('cancel', domElement);
		      listenToNonDelegatedEvent('close', domElement);
		      props = rawProps;
		      break;

		    case 'iframe':
		    case 'object':
		    case 'embed':
		      // We listen to this event in case to ensure emulated bubble
		      // listeners still fire for the load event.
		      listenToNonDelegatedEvent('load', domElement);
		      props = rawProps;
		      break;

		    case 'video':
		    case 'audio':
		      // We listen to these events in case to ensure emulated bubble
		      // listeners still fire for all the media events.
		      for (var i = 0; i < mediaEventTypes.length; i++) {
		        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
		      }

		      props = rawProps;
		      break;

		    case 'source':
		      // We listen to this event in case to ensure emulated bubble
		      // listeners still fire for the error event.
		      listenToNonDelegatedEvent('error', domElement);
		      props = rawProps;
		      break;

		    case 'img':
		    case 'image':
		    case 'link':
		      // We listen to these events in case to ensure emulated bubble
		      // listeners still fire for error and load events.
		      listenToNonDelegatedEvent('error', domElement);
		      listenToNonDelegatedEvent('load', domElement);
		      props = rawProps;
		      break;

		    case 'details':
		      // We listen to this event in case to ensure emulated bubble
		      // listeners still fire for the toggle event.
		      listenToNonDelegatedEvent('toggle', domElement);
		      props = rawProps;
		      break;

		    case 'input':
		      initWrapperState(domElement, rawProps);
		      props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
		      // listeners still fire for the invalid event.

		      listenToNonDelegatedEvent('invalid', domElement);
		      break;

		    case 'option':
		      validateProps(domElement, rawProps);
		      props = rawProps;
		      break;

		    case 'select':
		      initWrapperState$1(domElement, rawProps);
		      props = getHostProps$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
		      // listeners still fire for the invalid event.

		      listenToNonDelegatedEvent('invalid', domElement);
		      break;

		    case 'textarea':
		      initWrapperState$2(domElement, rawProps);
		      props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
		      // listeners still fire for the invalid event.

		      listenToNonDelegatedEvent('invalid', domElement);
		      break;

		    default:
		      props = rawProps;
		  }

		  assertValidProps(tag, props);
		  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

		  switch (tag) {
		    case 'input':
		      // TODO: Make sure we check if this is still unmounted or do any clean
		      // up necessary since we never stop tracking anymore.
		      track(domElement);
		      postMountWrapper(domElement, rawProps, false);
		      break;

		    case 'textarea':
		      // TODO: Make sure we check if this is still unmounted or do any clean
		      // up necessary since we never stop tracking anymore.
		      track(domElement);
		      postMountWrapper$3(domElement);
		      break;

		    case 'option':
		      postMountWrapper$1(domElement, rawProps);
		      break;

		    case 'select':
		      postMountWrapper$2(domElement, rawProps);
		      break;

		    default:
		      if (typeof props.onClick === 'function') {
		        // TODO: This cast may not be sound for SVG, MathML or custom elements.
		        trapClickOnNonInteractiveElement(domElement);
		      }

		      break;
		  }
		} // Calculate the diff between the two objects.

		function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
		  {
		    validatePropertiesInDevelopment(tag, nextRawProps);
		  }

		  var updatePayload = null;
		  var lastProps;
		  var nextProps;

		  switch (tag) {
		    case 'input':
		      lastProps = getHostProps(domElement, lastRawProps);
		      nextProps = getHostProps(domElement, nextRawProps);
		      updatePayload = [];
		      break;

		    case 'select':
		      lastProps = getHostProps$1(domElement, lastRawProps);
		      nextProps = getHostProps$1(domElement, nextRawProps);
		      updatePayload = [];
		      break;

		    case 'textarea':
		      lastProps = getHostProps$2(domElement, lastRawProps);
		      nextProps = getHostProps$2(domElement, nextRawProps);
		      updatePayload = [];
		      break;

		    default:
		      lastProps = lastRawProps;
		      nextProps = nextRawProps;

		      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
		        // TODO: This cast may not be sound for SVG, MathML or custom elements.
		        trapClickOnNonInteractiveElement(domElement);
		      }

		      break;
		  }

		  assertValidProps(tag, nextProps);
		  var propKey;
		  var styleName;
		  var styleUpdates = null;

		  for (propKey in lastProps) {
		    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
		      continue;
		    }

		    if (propKey === STYLE) {
		      var lastStyle = lastProps[propKey];

		      for (styleName in lastStyle) {
		        if (lastStyle.hasOwnProperty(styleName)) {
		          if (!styleUpdates) {
		            styleUpdates = {};
		          }

		          styleUpdates[styleName] = '';
		        }
		      }
		    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
		      // This is a special case. If any listener updates we need to ensure
		      // that the "current" fiber pointer gets updated so we need a commit
		      // to update this element.
		      if (!updatePayload) {
		        updatePayload = [];
		      }
		    } else {
		      // For all other deleted properties we add it to the queue. We use
		      // the allowed property list in the commit phase instead.
		      (updatePayload = updatePayload || []).push(propKey, null);
		    }
		  }

		  for (propKey in nextProps) {
		    var nextProp = nextProps[propKey];
		    var lastProp = lastProps != null ? lastProps[propKey] : undefined;

		    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
		      continue;
		    }

		    if (propKey === STYLE) {
		      {
		        if (nextProp) {
		          // Freeze the next style object so that we can assume it won't be
		          // mutated. We have already warned for this in the past.
		          Object.freeze(nextProp);
		        }
		      }

		      if (lastProp) {
		        // Unset styles on `lastProp` but not on `nextProp`.
		        for (styleName in lastProp) {
		          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
		            if (!styleUpdates) {
		              styleUpdates = {};
		            }

		            styleUpdates[styleName] = '';
		          }
		        } // Update styles that changed since `lastProp`.


		        for (styleName in nextProp) {
		          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
		            if (!styleUpdates) {
		              styleUpdates = {};
		            }

		            styleUpdates[styleName] = nextProp[styleName];
		          }
		        }
		      } else {
		        // Relies on `updateStylesByID` not mutating `styleUpdates`.
		        if (!styleUpdates) {
		          if (!updatePayload) {
		            updatePayload = [];
		          }

		          updatePayload.push(propKey, styleUpdates);
		        }

		        styleUpdates = nextProp;
		      }
		    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
		      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
		      var lastHtml = lastProp ? lastProp[HTML$1] : undefined;

		      if (nextHtml != null) {
		        if (lastHtml !== nextHtml) {
		          (updatePayload = updatePayload || []).push(propKey, nextHtml);
		        }
		      }
		    } else if (propKey === CHILDREN) {
		      if (typeof nextProp === 'string' || typeof nextProp === 'number') {
		        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
		      }
		    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
		      if (nextProp != null) {
		        // We eagerly listen to this even though we haven't committed yet.
		        if ( typeof nextProp !== 'function') {
		          warnForInvalidEventListener(propKey, nextProp);
		        }

		        if (propKey === 'onScroll') {
		          listenToNonDelegatedEvent('scroll', domElement);
		        }
		      }

		      if (!updatePayload && lastProp !== nextProp) {
		        // This is a special case. If any listener updates we need to ensure
		        // that the "current" props pointer gets updated so we need a commit
		        // to update this element.
		        updatePayload = [];
		      }
		    } else {
		      // For any other property we always add it to the queue and then we
		      // filter it out using the allowed property list during the commit.
		      (updatePayload = updatePayload || []).push(propKey, nextProp);
		    }
		  }

		  if (styleUpdates) {
		    {
		      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
		    }

		    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
		  }

		  return updatePayload;
		} // Apply the diff.

		function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
		  // Update checked *before* name.
		  // In the middle of an update, it is possible to have multiple checked.
		  // When a checked radio tries to change name, browser makes another radio's checked false.
		  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
		    updateChecked(domElement, nextRawProps);
		  }

		  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
		  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

		  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
		  // changed.

		  switch (tag) {
		    case 'input':
		      // Update the wrapper around inputs *after* updating props. This has to
		      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
		      // raise warnings and prevent the new value from being assigned.
		      updateWrapper(domElement, nextRawProps);
		      break;

		    case 'textarea':
		      updateWrapper$1(domElement, nextRawProps);
		      break;

		    case 'select':
		      // <select> value update needs to occur after <option> children
		      // reconciliation
		      postUpdateWrapper(domElement, nextRawProps);
		      break;
		  }
		}

		function getPossibleStandardName(propName) {
		  {
		    var lowerCasedName = propName.toLowerCase();

		    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
		      return null;
		    }

		    return possibleStandardNames[lowerCasedName] || null;
		  }
		}

		function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
		  var isCustomComponentTag;
		  var extraAttributeNames;

		  {
		    isCustomComponentTag = isCustomComponent(tag, rawProps);
		    validatePropertiesInDevelopment(tag, rawProps);
		  } // TODO: Make sure that we check isMounted before firing any of these events.


		  switch (tag) {
		    case 'dialog':
		      listenToNonDelegatedEvent('cancel', domElement);
		      listenToNonDelegatedEvent('close', domElement);
		      break;

		    case 'iframe':
		    case 'object':
		    case 'embed':
		      // We listen to this event in case to ensure emulated bubble
		      // listeners still fire for the load event.
		      listenToNonDelegatedEvent('load', domElement);
		      break;

		    case 'video':
		    case 'audio':
		      // We listen to these events in case to ensure emulated bubble
		      // listeners still fire for all the media events.
		      for (var i = 0; i < mediaEventTypes.length; i++) {
		        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
		      }

		      break;

		    case 'source':
		      // We listen to this event in case to ensure emulated bubble
		      // listeners still fire for the error event.
		      listenToNonDelegatedEvent('error', domElement);
		      break;

		    case 'img':
		    case 'image':
		    case 'link':
		      // We listen to these events in case to ensure emulated bubble
		      // listeners still fire for error and load events.
		      listenToNonDelegatedEvent('error', domElement);
		      listenToNonDelegatedEvent('load', domElement);
		      break;

		    case 'details':
		      // We listen to this event in case to ensure emulated bubble
		      // listeners still fire for the toggle event.
		      listenToNonDelegatedEvent('toggle', domElement);
		      break;

		    case 'input':
		      initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
		      // listeners still fire for the invalid event.

		      listenToNonDelegatedEvent('invalid', domElement);
		      break;

		    case 'option':
		      validateProps(domElement, rawProps);
		      break;

		    case 'select':
		      initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
		      // listeners still fire for the invalid event.

		      listenToNonDelegatedEvent('invalid', domElement);
		      break;

		    case 'textarea':
		      initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
		      // listeners still fire for the invalid event.

		      listenToNonDelegatedEvent('invalid', domElement);
		      break;
		  }

		  assertValidProps(tag, rawProps);

		  {
		    extraAttributeNames = new Set();
		    var attributes = domElement.attributes;

		    for (var _i = 0; _i < attributes.length; _i++) {
		      var name = attributes[_i].name.toLowerCase();

		      switch (name) {
		        // Controlled attributes are not validated
		        // TODO: Only ignore them on controlled tags.
		        case 'value':
		          break;

		        case 'checked':
		          break;

		        case 'selected':
		          break;

		        default:
		          // Intentionally use the original name.
		          // See discussion in https://github.com/facebook/react/pull/10676.
		          extraAttributeNames.add(attributes[_i].name);
		      }
		    }
		  }

		  var updatePayload = null;

		  for (var propKey in rawProps) {
		    if (!rawProps.hasOwnProperty(propKey)) {
		      continue;
		    }

		    var nextProp = rawProps[propKey];

		    if (propKey === CHILDREN) {
		      // For text content children we compare against textContent. This
		      // might match additional HTML that is hidden when we read it using
		      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
		      // satisfies our requirement. Our requirement is not to produce perfect
		      // HTML and attributes. Ideally we should preserve structure but it's
		      // ok not to if the visible content is still enough to indicate what
		      // even listeners these nodes might be wired up to.
		      // TODO: Warn if there is more than a single textNode as a child.
		      // TODO: Should we use domElement.firstChild.nodeValue to compare?
		      if (typeof nextProp === 'string') {
		        if (domElement.textContent !== nextProp) {
		          if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
		            checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
		          }

		          updatePayload = [CHILDREN, nextProp];
		        }
		      } else if (typeof nextProp === 'number') {
		        if (domElement.textContent !== '' + nextProp) {
		          if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
		            checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
		          }

		          updatePayload = [CHILDREN, '' + nextProp];
		        }
		      }
		    } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
		      if (nextProp != null) {
		        if ( typeof nextProp !== 'function') {
		          warnForInvalidEventListener(propKey, nextProp);
		        }

		        if (propKey === 'onScroll') {
		          listenToNonDelegatedEvent('scroll', domElement);
		        }
		      }
		    } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
		    typeof isCustomComponentTag === 'boolean') {
		      // Validate that the properties correspond to their expected values.
		      var serverValue = void 0;
		      var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);

		      if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
		      // TODO: Only ignore them on controlled tags.
		      propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
		        var serverHTML = domElement.innerHTML;
		        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

		        if (nextHtml != null) {
		          var expectedHTML = normalizeHTML(domElement, nextHtml);

		          if (expectedHTML !== serverHTML) {
		            warnForPropDifference(propKey, serverHTML, expectedHTML);
		          }
		        }
		      } else if (propKey === STYLE) {
		        // $FlowFixMe - Should be inferred as not undefined.
		        extraAttributeNames.delete(propKey);

		        if (canDiffStyleForHydrationWarning) {
		          var expectedStyle = createDangerousStringForStyles(nextProp);
		          serverValue = domElement.getAttribute('style');

		          if (expectedStyle !== serverValue) {
		            warnForPropDifference(propKey, serverValue, expectedStyle);
		          }
		        }
		      } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
		        // $FlowFixMe - Should be inferred as not undefined.
		        extraAttributeNames.delete(propKey.toLowerCase());
		        serverValue = getValueForAttribute(domElement, propKey, nextProp);

		        if (nextProp !== serverValue) {
		          warnForPropDifference(propKey, serverValue, nextProp);
		        }
		      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
		        var isMismatchDueToBadCasing = false;

		        if (propertyInfo !== null) {
		          // $FlowFixMe - Should be inferred as not undefined.
		          extraAttributeNames.delete(propertyInfo.attributeName);
		          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
		        } else {
		          var ownNamespace = parentNamespace;

		          if (ownNamespace === HTML_NAMESPACE) {
		            ownNamespace = getIntrinsicNamespace(tag);
		          }

		          if (ownNamespace === HTML_NAMESPACE) {
		            // $FlowFixMe - Should be inferred as not undefined.
		            extraAttributeNames.delete(propKey.toLowerCase());
		          } else {
		            var standardName = getPossibleStandardName(propKey);

		            if (standardName !== null && standardName !== propKey) {
		              // If an SVG prop is supplied with bad casing, it will
		              // be successfully parsed from HTML, but will produce a mismatch
		              // (and would be incorrectly rendered on the client).
		              // However, we already warn about bad casing elsewhere.
		              // So we'll skip the misleading extra mismatch warning in this case.
		              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

		              extraAttributeNames.delete(standardName);
		            } // $FlowFixMe - Should be inferred as not undefined.


		            extraAttributeNames.delete(propKey);
		          }

		          serverValue = getValueForAttribute(domElement, propKey, nextProp);
		        }

		        var dontWarnCustomElement = enableCustomElementPropertySupport  ;

		        if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
		          warnForPropDifference(propKey, serverValue, nextProp);
		        }
		      }
		    }
		  }

		  {
		    if (shouldWarnDev) {
		      if ( // $FlowFixMe - Should be inferred as not undefined.
		      extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
		        // $FlowFixMe - Should be inferred as not undefined.
		        warnForExtraAttributes(extraAttributeNames);
		      }
		    }
		  }

		  switch (tag) {
		    case 'input':
		      // TODO: Make sure we check if this is still unmounted or do any clean
		      // up necessary since we never stop tracking anymore.
		      track(domElement);
		      postMountWrapper(domElement, rawProps, true);
		      break;

		    case 'textarea':
		      // TODO: Make sure we check if this is still unmounted or do any clean
		      // up necessary since we never stop tracking anymore.
		      track(domElement);
		      postMountWrapper$3(domElement);
		      break;

		    case 'select':
		    case 'option':
		      // For input and textarea we current always set the value property at
		      // post mount to force it to diverge from attributes. However, for
		      // option and select we don't quite do the same thing and select
		      // is not resilient to the DOM state changing so we don't do that here.
		      // TODO: Consider not doing this for input and textarea.
		      break;

		    default:
		      if (typeof rawProps.onClick === 'function') {
		        // TODO: This cast may not be sound for SVG, MathML or custom elements.
		        trapClickOnNonInteractiveElement(domElement);
		      }

		      break;
		  }

		  return updatePayload;
		}
		function diffHydratedText(textNode, text, isConcurrentMode) {
		  var isDifferent = textNode.nodeValue !== text;
		  return isDifferent;
		}
		function warnForDeletedHydratableElement(parentNode, child) {
		  {
		    if (didWarnInvalidHydration) {
		      return;
		    }

		    didWarnInvalidHydration = true;

		    error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
		  }
		}
		function warnForDeletedHydratableText(parentNode, child) {
		  {
		    if (didWarnInvalidHydration) {
		      return;
		    }

		    didWarnInvalidHydration = true;

		    error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
		  }
		}
		function warnForInsertedHydratedElement(parentNode, tag, props) {
		  {
		    if (didWarnInvalidHydration) {
		      return;
		    }

		    didWarnInvalidHydration = true;

		    error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
		  }
		}
		function warnForInsertedHydratedText(parentNode, text) {
		  {
		    if (text === '') {
		      // We expect to insert empty text nodes since they're not represented in
		      // the HTML.
		      // TODO: Remove this special case if we can just avoid inserting empty
		      // text nodes.
		      return;
		    }

		    if (didWarnInvalidHydration) {
		      return;
		    }

		    didWarnInvalidHydration = true;

		    error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
		  }
		}
		function restoreControlledState$3(domElement, tag, props) {
		  switch (tag) {
		    case 'input':
		      restoreControlledState(domElement, props);
		      return;

		    case 'textarea':
		      restoreControlledState$2(domElement, props);
		      return;

		    case 'select':
		      restoreControlledState$1(domElement, props);
		      return;
		  }
		}

		var validateDOMNesting = function () {};

		var updatedAncestorInfo = function () {};

		{
		  // This validation code was written based on the HTML5 parsing spec:
		  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
		  //
		  // Note: this does not catch all invalid nesting, nor does it try to (as it's
		  // not clear what practical benefit doing so provides); instead, we warn only
		  // for cases where the parser will give a parse tree differing from what React
		  // intended. For example, <b><div></div></b> is invalid but we don't warn
		  // because it still parses correctly; we do warn for other cases like nested
		  // <p> tags where the beginning of the second element implicitly closes the
		  // first, causing a confusing mess.
		  // https://html.spec.whatwg.org/multipage/syntax.html#special
		  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

		  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
		  // TODO: Distinguish by namespace here -- for <title>, including it here
		  // errs on the side of fewer warnings
		  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

		  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

		  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
		  var emptyAncestorInfo = {
		    current: null,
		    formTag: null,
		    aTagInScope: null,
		    buttonTagInScope: null,
		    nobrTagInScope: null,
		    pTagInButtonScope: null,
		    listItemTagAutoclosing: null,
		    dlItemTagAutoclosing: null
		  };

		  updatedAncestorInfo = function (oldInfo, tag) {
		    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);

		    var info = {
		      tag: tag
		    };

		    if (inScopeTags.indexOf(tag) !== -1) {
		      ancestorInfo.aTagInScope = null;
		      ancestorInfo.buttonTagInScope = null;
		      ancestorInfo.nobrTagInScope = null;
		    }

		    if (buttonScopeTags.indexOf(tag) !== -1) {
		      ancestorInfo.pTagInButtonScope = null;
		    } // See rules for 'li', 'dd', 'dt' start tags in
		    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


		    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
		      ancestorInfo.listItemTagAutoclosing = null;
		      ancestorInfo.dlItemTagAutoclosing = null;
		    }

		    ancestorInfo.current = info;

		    if (tag === 'form') {
		      ancestorInfo.formTag = info;
		    }

		    if (tag === 'a') {
		      ancestorInfo.aTagInScope = info;
		    }

		    if (tag === 'button') {
		      ancestorInfo.buttonTagInScope = info;
		    }

		    if (tag === 'nobr') {
		      ancestorInfo.nobrTagInScope = info;
		    }

		    if (tag === 'p') {
		      ancestorInfo.pTagInButtonScope = info;
		    }

		    if (tag === 'li') {
		      ancestorInfo.listItemTagAutoclosing = info;
		    }

		    if (tag === 'dd' || tag === 'dt') {
		      ancestorInfo.dlItemTagAutoclosing = info;
		    }

		    return ancestorInfo;
		  };
		  /**
		   * Returns whether
		   */


		  var isTagValidWithParent = function (tag, parentTag) {
		    // First, let's check if we're in an unusual parsing mode...
		    switch (parentTag) {
		      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
		      case 'select':
		        return tag === 'option' || tag === 'optgroup' || tag === '#text';

		      case 'optgroup':
		        return tag === 'option' || tag === '#text';
		      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
		      // but

		      case 'option':
		        return tag === '#text';
		      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
		      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
		      // No special behavior since these rules fall back to "in body" mode for
		      // all except special table nodes which cause bad parsing behavior anyway.
		      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

		      case 'tr':
		        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
		      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

		      case 'tbody':
		      case 'thead':
		      case 'tfoot':
		        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
		      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

		      case 'colgroup':
		        return tag === 'col' || tag === 'template';
		      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

		      case 'table':
		        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
		      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

		      case 'head':
		        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
		      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

		      case 'html':
		        return tag === 'head' || tag === 'body' || tag === 'frameset';

		      case 'frameset':
		        return tag === 'frame';

		      case '#document':
		        return tag === 'html';
		    } // Probably in the "in body" parsing mode, so we outlaw only tag combos
		    // where the parsing rules cause implicit opens or closes to be added.
		    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


		    switch (tag) {
		      case 'h1':
		      case 'h2':
		      case 'h3':
		      case 'h4':
		      case 'h5':
		      case 'h6':
		        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

		      case 'rp':
		      case 'rt':
		        return impliedEndTags.indexOf(parentTag) === -1;

		      case 'body':
		      case 'caption':
		      case 'col':
		      case 'colgroup':
		      case 'frameset':
		      case 'frame':
		      case 'head':
		      case 'html':
		      case 'tbody':
		      case 'td':
		      case 'tfoot':
		      case 'th':
		      case 'thead':
		      case 'tr':
		        // These tags are only valid with a few parents that have special child
		        // parsing rules -- if we're down here, then none of those matched and
		        // so we allow it only if we don't know what the parent is, as all other
		        // cases are invalid.
		        return parentTag == null;
		    }

		    return true;
		  };
		  /**
		   * Returns whether
		   */


		  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
		    switch (tag) {
		      case 'address':
		      case 'article':
		      case 'aside':
		      case 'blockquote':
		      case 'center':
		      case 'details':
		      case 'dialog':
		      case 'dir':
		      case 'div':
		      case 'dl':
		      case 'fieldset':
		      case 'figcaption':
		      case 'figure':
		      case 'footer':
		      case 'header':
		      case 'hgroup':
		      case 'main':
		      case 'menu':
		      case 'nav':
		      case 'ol':
		      case 'p':
		      case 'section':
		      case 'summary':
		      case 'ul':
		      case 'pre':
		      case 'listing':
		      case 'table':
		      case 'hr':
		      case 'xmp':
		      case 'h1':
		      case 'h2':
		      case 'h3':
		      case 'h4':
		      case 'h5':
		      case 'h6':
		        return ancestorInfo.pTagInButtonScope;

		      case 'form':
		        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

		      case 'li':
		        return ancestorInfo.listItemTagAutoclosing;

		      case 'dd':
		      case 'dt':
		        return ancestorInfo.dlItemTagAutoclosing;

		      case 'button':
		        return ancestorInfo.buttonTagInScope;

		      case 'a':
		        // Spec says something about storing a list of markers, but it sounds
		        // equivalent to this check.
		        return ancestorInfo.aTagInScope;

		      case 'nobr':
		        return ancestorInfo.nobrTagInScope;
		    }

		    return null;
		  };

		  var didWarn$1 = {};

		  validateDOMNesting = function (childTag, childText, ancestorInfo) {
		    ancestorInfo = ancestorInfo || emptyAncestorInfo;
		    var parentInfo = ancestorInfo.current;
		    var parentTag = parentInfo && parentInfo.tag;

		    if (childText != null) {
		      if (childTag != null) {
		        error('validateDOMNesting: when childText is passed, childTag should be null');
		      }

		      childTag = '#text';
		    }

		    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
		    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
		    var invalidParentOrAncestor = invalidParent || invalidAncestor;

		    if (!invalidParentOrAncestor) {
		      return;
		    }

		    var ancestorTag = invalidParentOrAncestor.tag;
		    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;

		    if (didWarn$1[warnKey]) {
		      return;
		    }

		    didWarn$1[warnKey] = true;
		    var tagDisplayName = childTag;
		    var whitespaceInfo = '';

		    if (childTag === '#text') {
		      if (/\S/.test(childText)) {
		        tagDisplayName = 'Text nodes';
		      } else {
		        tagDisplayName = 'Whitespace text nodes';
		        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
		      }
		    } else {
		      tagDisplayName = '<' + childTag + '>';
		    }

		    if (invalidParent) {
		      var info = '';

		      if (ancestorTag === 'table' && childTag === 'tr') {
		        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
		      }

		      error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
		    } else {
		      error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
		    }
		  };
		}

		var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
		var SUSPENSE_START_DATA = '$';
		var SUSPENSE_END_DATA = '/$';
		var SUSPENSE_PENDING_START_DATA = '$?';
		var SUSPENSE_FALLBACK_START_DATA = '$!';
		var STYLE$1 = 'style';
		var eventsEnabled = null;
		var selectionInformation = null;
		function getRootHostContext(rootContainerInstance) {
		  var type;
		  var namespace;
		  var nodeType = rootContainerInstance.nodeType;

		  switch (nodeType) {
		    case DOCUMENT_NODE:
		    case DOCUMENT_FRAGMENT_NODE:
		      {
		        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
		        var root = rootContainerInstance.documentElement;
		        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
		        break;
		      }

		    default:
		      {
		        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
		        var ownNamespace = container.namespaceURI || null;
		        type = container.tagName;
		        namespace = getChildNamespace(ownNamespace, type);
		        break;
		      }
		  }

		  {
		    var validatedTag = type.toLowerCase();
		    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
		    return {
		      namespace: namespace,
		      ancestorInfo: ancestorInfo
		    };
		  }
		}
		function getChildHostContext(parentHostContext, type, rootContainerInstance) {
		  {
		    var parentHostContextDev = parentHostContext;
		    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
		    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
		    return {
		      namespace: namespace,
		      ancestorInfo: ancestorInfo
		    };
		  }
		}
		function getPublicInstance(instance) {
		  return instance;
		}
		function prepareForCommit(containerInfo) {
		  eventsEnabled = isEnabled();
		  selectionInformation = getSelectionInformation();
		  var activeInstance = null;

		  setEnabled(false);
		  return activeInstance;
		}
		function resetAfterCommit(containerInfo) {
		  restoreSelection(selectionInformation);
		  setEnabled(eventsEnabled);
		  eventsEnabled = null;
		  selectionInformation = null;
		}
		function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
		  var parentNamespace;

		  {
		    // TODO: take namespace into account when validating.
		    var hostContextDev = hostContext;
		    validateDOMNesting(type, null, hostContextDev.ancestorInfo);

		    if (typeof props.children === 'string' || typeof props.children === 'number') {
		      var string = '' + props.children;
		      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
		      validateDOMNesting(null, string, ownAncestorInfo);
		    }

		    parentNamespace = hostContextDev.namespace;
		  }

		  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
		  precacheFiberNode(internalInstanceHandle, domElement);
		  updateFiberProps(domElement, props);
		  return domElement;
		}
		function appendInitialChild(parentInstance, child) {
		  parentInstance.appendChild(child);
		}
		function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
		  setInitialProperties(domElement, type, props, rootContainerInstance);

		  switch (type) {
		    case 'button':
		    case 'input':
		    case 'select':
		    case 'textarea':
		      return !!props.autoFocus;

		    case 'img':
		      return true;

		    default:
		      return false;
		  }
		}
		function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
		  {
		    var hostContextDev = hostContext;

		    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
		      var string = '' + newProps.children;
		      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
		      validateDOMNesting(null, string, ownAncestorInfo);
		    }
		  }

		  return diffProperties(domElement, type, oldProps, newProps);
		}
		function shouldSetTextContent(type, props) {
		  return type === 'textarea' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
		}
		function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
		  {
		    var hostContextDev = hostContext;
		    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
		  }

		  var textNode = createTextNode(text, rootContainerInstance);
		  precacheFiberNode(internalInstanceHandle, textNode);
		  return textNode;
		}
		function getCurrentEventPriority() {
		  var currentEvent = window.event;

		  if (currentEvent === undefined) {
		    return DefaultEventPriority;
		  }

		  return getEventPriority(currentEvent.type);
		}
		// if a component just imports ReactDOM (e.g. for findDOMNode).
		// Some environments might not have setTimeout or clearTimeout.

		var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
		var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
		var noTimeout = -1;
		var localPromise = typeof Promise === 'function' ? Promise : undefined; // -------------------
		var scheduleMicrotask = typeof queueMicrotask === 'function' ? queueMicrotask : typeof localPromise !== 'undefined' ? function (callback) {
		  return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
		} : scheduleTimeout; // TODO: Determine the best fallback here.

		function handleErrorInNextTick(error) {
		  setTimeout(function () {
		    throw error;
		  });
		} // -------------------
		function commitMount(domElement, type, newProps, internalInstanceHandle) {
		  // Despite the naming that might imply otherwise, this method only
		  // fires if there is an `Update` effect scheduled during mounting.
		  // This happens if `finalizeInitialChildren` returns `true` (which it
		  // does to implement the `autoFocus` attribute on the client). But
		  // there are also other cases when this might happen (such as patching
		  // up text content during hydration mismatch). So we'll check this again.
		  switch (type) {
		    case 'button':
		    case 'input':
		    case 'select':
		    case 'textarea':
		      if (newProps.autoFocus) {
		        domElement.focus();
		      }

		      return;

		    case 'img':
		      {
		        if (newProps.src) {
		          domElement.src = newProps.src;
		        }

		        return;
		      }
		  }
		}
		function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
		  // Apply the diff to the DOM node.
		  updateProperties(domElement, updatePayload, type, oldProps, newProps); // Update the props handle so that we know which props are the ones with
		  // with current event handlers.

		  updateFiberProps(domElement, newProps);
		}
		function resetTextContent(domElement) {
		  setTextContent(domElement, '');
		}
		function commitTextUpdate(textInstance, oldText, newText) {
		  textInstance.nodeValue = newText;
		}
		function appendChild(parentInstance, child) {
		  parentInstance.appendChild(child);
		}
		function appendChildToContainer(container, child) {
		  var parentNode;

		  if (container.nodeType === COMMENT_NODE) {
		    parentNode = container.parentNode;
		    parentNode.insertBefore(child, container);
		  } else {
		    parentNode = container;
		    parentNode.appendChild(child);
		  } // This container might be used for a portal.
		  // If something inside a portal is clicked, that click should bubble
		  // through the React tree. However, on Mobile Safari the click would
		  // never bubble through the *DOM* tree unless an ancestor with onclick
		  // event exists. So we wouldn't see it and dispatch it.
		  // This is why we ensure that non React root containers have inline onclick
		  // defined.
		  // https://github.com/facebook/react/issues/11918


		  var reactRootContainer = container._reactRootContainer;

		  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
		    // TODO: This cast may not be sound for SVG, MathML or custom elements.
		    trapClickOnNonInteractiveElement(parentNode);
		  }
		}
		function insertBefore(parentInstance, child, beforeChild) {
		  parentInstance.insertBefore(child, beforeChild);
		}
		function insertInContainerBefore(container, child, beforeChild) {
		  if (container.nodeType === COMMENT_NODE) {
		    container.parentNode.insertBefore(child, beforeChild);
		  } else {
		    container.insertBefore(child, beforeChild);
		  }
		}

		function removeChild(parentInstance, child) {
		  parentInstance.removeChild(child);
		}
		function removeChildFromContainer(container, child) {
		  if (container.nodeType === COMMENT_NODE) {
		    container.parentNode.removeChild(child);
		  } else {
		    container.removeChild(child);
		  }
		}
		function clearSuspenseBoundary(parentInstance, suspenseInstance) {
		  var node = suspenseInstance; // Delete all nodes within this suspense boundary.
		  // There might be nested nodes so we need to keep track of how
		  // deep we are and only break out when we're back on top.

		  var depth = 0;

		  do {
		    var nextNode = node.nextSibling;
		    parentInstance.removeChild(node);

		    if (nextNode && nextNode.nodeType === COMMENT_NODE) {
		      var data = nextNode.data;

		      if (data === SUSPENSE_END_DATA) {
		        if (depth === 0) {
		          parentInstance.removeChild(nextNode); // Retry if any event replaying was blocked on this.

		          retryIfBlockedOn(suspenseInstance);
		          return;
		        } else {
		          depth--;
		        }
		      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
		        depth++;
		      }
		    }

		    node = nextNode;
		  } while (node); // TODO: Warn, we didn't find the end comment boundary.
		  // Retry if any event replaying was blocked on this.


		  retryIfBlockedOn(suspenseInstance);
		}
		function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
		  if (container.nodeType === COMMENT_NODE) {
		    clearSuspenseBoundary(container.parentNode, suspenseInstance);
		  } else if (container.nodeType === ELEMENT_NODE) {
		    clearSuspenseBoundary(container, suspenseInstance);
		  } // Retry if any event replaying was blocked on this.


		  retryIfBlockedOn(container);
		}
		function hideInstance(instance) {
		  // TODO: Does this work for all element types? What about MathML? Should we
		  // pass host context to this method?
		  instance = instance;
		  var style = instance.style;

		  if (typeof style.setProperty === 'function') {
		    style.setProperty('display', 'none', 'important');
		  } else {
		    style.display = 'none';
		  }
		}
		function hideTextInstance(textInstance) {
		  textInstance.nodeValue = '';
		}
		function unhideInstance(instance, props) {
		  instance = instance;
		  var styleProp = props[STYLE$1];
		  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
		  instance.style.display = dangerousStyleValue('display', display);
		}
		function unhideTextInstance(textInstance, text) {
		  textInstance.nodeValue = text;
		}
		function clearContainer(container) {
		  if (container.nodeType === ELEMENT_NODE) {
		    container.textContent = '';
		  } else if (container.nodeType === DOCUMENT_NODE) {
		    if (container.documentElement) {
		      container.removeChild(container.documentElement);
		    }
		  }
		} // -------------------
		function canHydrateInstance(instance, type, props) {
		  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
		    return null;
		  } // This has now been refined to an element node.


		  return instance;
		}
		function canHydrateTextInstance(instance, text) {
		  if (text === '' || instance.nodeType !== TEXT_NODE) {
		    // Empty strings are not parsed by HTML so there won't be a correct match here.
		    return null;
		  } // This has now been refined to a text node.


		  return instance;
		}
		function canHydrateSuspenseInstance(instance) {
		  if (instance.nodeType !== COMMENT_NODE) {
		    // Empty strings are not parsed by HTML so there won't be a correct match here.
		    return null;
		  } // This has now been refined to a suspense node.


		  return instance;
		}
		function isSuspenseInstancePending(instance) {
		  return instance.data === SUSPENSE_PENDING_START_DATA;
		}
		function isSuspenseInstanceFallback(instance) {
		  return instance.data === SUSPENSE_FALLBACK_START_DATA;
		}
		function getSuspenseInstanceFallbackErrorDetails(instance) {
		  var dataset = instance.nextSibling && instance.nextSibling.dataset;
		  var digest, message, stack;

		  if (dataset) {
		    digest = dataset.dgst;

		    {
		      message = dataset.msg;
		      stack = dataset.stck;
		    }
		  }

		  {
		    return {
		      message: message,
		      digest: digest,
		      stack: stack
		    };
		  } // let value = {message: undefined, hash: undefined};
		  // const nextSibling = instance.nextSibling;
		  // if (nextSibling) {
		  //   const dataset = ((nextSibling: any): HTMLTemplateElement).dataset;
		  //   value.message = dataset.msg;
		  //   value.hash = dataset.hash;
		  //   if (true) {
		  //     value.stack = dataset.stack;
		  //   }
		  // }
		  // return value;

		}
		function registerSuspenseInstanceRetry(instance, callback) {
		  instance._reactRetry = callback;
		}

		function getNextHydratable(node) {
		  // Skip non-hydratable nodes.
		  for (; node != null; node = node.nextSibling) {
		    var nodeType = node.nodeType;

		    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
		      break;
		    }

		    if (nodeType === COMMENT_NODE) {
		      var nodeData = node.data;

		      if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
		        break;
		      }

		      if (nodeData === SUSPENSE_END_DATA) {
		        return null;
		      }
		    }
		  }

		  return node;
		}

		function getNextHydratableSibling(instance) {
		  return getNextHydratable(instance.nextSibling);
		}
		function getFirstHydratableChild(parentInstance) {
		  return getNextHydratable(parentInstance.firstChild);
		}
		function getFirstHydratableChildWithinContainer(parentContainer) {
		  return getNextHydratable(parentContainer.firstChild);
		}
		function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
		  return getNextHydratable(parentInstance.nextSibling);
		}
		function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
		  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
		  // get attached.

		  updateFiberProps(instance, props);
		  var parentNamespace;

		  {
		    var hostContextDev = hostContext;
		    parentNamespace = hostContextDev.namespace;
		  } // TODO: Temporary hack to check if we're in a concurrent root. We can delete
		  // when the legacy root API is removed.


		  var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
		  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
		}
		function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
		  precacheFiberNode(internalInstanceHandle, textInstance); // TODO: Temporary hack to check if we're in a concurrent root. We can delete
		  // when the legacy root API is removed.

		  (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
		  return diffHydratedText(textInstance, text);
		}
		function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
		  precacheFiberNode(internalInstanceHandle, suspenseInstance);
		}
		function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
		  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
		  // There might be nested nodes so we need to keep track of how
		  // deep we are and only break out when we're back on top.

		  var depth = 0;

		  while (node) {
		    if (node.nodeType === COMMENT_NODE) {
		      var data = node.data;

		      if (data === SUSPENSE_END_DATA) {
		        if (depth === 0) {
		          return getNextHydratableSibling(node);
		        } else {
		          depth--;
		        }
		      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
		        depth++;
		      }
		    }

		    node = node.nextSibling;
		  } // TODO: Warn, we didn't find the end comment boundary.


		  return null;
		} // Returns the SuspenseInstance if this node is a direct child of a
		// SuspenseInstance. I.e. if its previous sibling is a Comment with
		// SUSPENSE_x_START_DATA. Otherwise, null.

		function getParentSuspenseInstance(targetInstance) {
		  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
		  // There might be nested nodes so we need to keep track of how
		  // deep we are and only break out when we're back on top.

		  var depth = 0;

		  while (node) {
		    if (node.nodeType === COMMENT_NODE) {
		      var data = node.data;

		      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
		        if (depth === 0) {
		          return node;
		        } else {
		          depth--;
		        }
		      } else if (data === SUSPENSE_END_DATA) {
		        depth++;
		      }
		    }

		    node = node.previousSibling;
		  }

		  return null;
		}
		function commitHydratedContainer(container) {
		  // Retry if any event replaying was blocked on this.
		  retryIfBlockedOn(container);
		}
		function commitHydratedSuspenseInstance(suspenseInstance) {
		  // Retry if any event replaying was blocked on this.
		  retryIfBlockedOn(suspenseInstance);
		}
		function shouldDeleteUnhydratedTailInstances(parentType) {
		  return parentType !== 'head' && parentType !== 'body';
		}
		function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
		  var shouldWarnDev = true;
		  checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
		}
		function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
		  if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
		    var shouldWarnDev = true;
		    checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
		  }
		}
		function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
		  {
		    if (instance.nodeType === ELEMENT_NODE) {
		      warnForDeletedHydratableElement(parentContainer, instance);
		    } else if (instance.nodeType === COMMENT_NODE) ; else {
		      warnForDeletedHydratableText(parentContainer, instance);
		    }
		  }
		}
		function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
		  {
		    // $FlowFixMe: Only Element or Document can be parent nodes.
		    var parentNode = parentInstance.parentNode;

		    if (parentNode !== null) {
		      if (instance.nodeType === ELEMENT_NODE) {
		        warnForDeletedHydratableElement(parentNode, instance);
		      } else if (instance.nodeType === COMMENT_NODE) ; else {
		        warnForDeletedHydratableText(parentNode, instance);
		      }
		    }
		  }
		}
		function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
		  {
		    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
		      if (instance.nodeType === ELEMENT_NODE) {
		        warnForDeletedHydratableElement(parentInstance, instance);
		      } else if (instance.nodeType === COMMENT_NODE) ; else {
		        warnForDeletedHydratableText(parentInstance, instance);
		      }
		    }
		  }
		}
		function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
		  {
		    warnForInsertedHydratedElement(parentContainer, type);
		  }
		}
		function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
		  {
		    warnForInsertedHydratedText(parentContainer, text);
		  }
		}
		function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
		  {
		    // $FlowFixMe: Only Element or Document can be parent nodes.
		    var parentNode = parentInstance.parentNode;
		    if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
		  }
		}
		function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
		  {
		    // $FlowFixMe: Only Element or Document can be parent nodes.
		    var parentNode = parentInstance.parentNode;
		    if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
		  }
		}
		function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
		  {
		    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
		      warnForInsertedHydratedElement(parentInstance, type);
		    }
		  }
		}
		function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
		  {
		    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
		      warnForInsertedHydratedText(parentInstance, text);
		    }
		  }
		}
		function errorHydratingContainer(parentContainer) {
		  {
		    // TODO: This gets logged by onRecoverableError, too, so we should be
		    // able to remove it.
		    error('An error occurred during hydration. The server HTML was replaced with client content in <%s>.', parentContainer.nodeName.toLowerCase());
		  }
		}
		function preparePortalMount(portalInstance) {
		  listenToAllSupportedEvents(portalInstance);
		}

		var randomKey = Math.random().toString(36).slice(2);
		var internalInstanceKey = '__reactFiber$' + randomKey;
		var internalPropsKey = '__reactProps$' + randomKey;
		var internalContainerInstanceKey = '__reactContainer$' + randomKey;
		var internalEventHandlersKey = '__reactEvents$' + randomKey;
		var internalEventHandlerListenersKey = '__reactListeners$' + randomKey;
		var internalEventHandlesSetKey = '__reactHandles$' + randomKey;
		function detachDeletedInstance(node) {
		  // TODO: This function is only called on host components. I don't think all of
		  // these fields are relevant.
		  delete node[internalInstanceKey];
		  delete node[internalPropsKey];
		  delete node[internalEventHandlersKey];
		  delete node[internalEventHandlerListenersKey];
		  delete node[internalEventHandlesSetKey];
		}
		function precacheFiberNode(hostInst, node) {
		  node[internalInstanceKey] = hostInst;
		}
		function markContainerAsRoot(hostRoot, node) {
		  node[internalContainerInstanceKey] = hostRoot;
		}
		function unmarkContainerAsRoot(node) {
		  node[internalContainerInstanceKey] = null;
		}
		function isContainerMarkedAsRoot(node) {
		  return !!node[internalContainerInstanceKey];
		} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
		// If the target node is part of a hydrated or not yet rendered subtree, then
		// this may also return a SuspenseComponent or HostRoot to indicate that.
		// Conceptually the HostRoot fiber is a child of the Container node. So if you
		// pass the Container node as the targetNode, you will not actually get the
		// HostRoot back. To get to the HostRoot, you need to pass a child of it.
		// The same thing applies to Suspense boundaries.

		function getClosestInstanceFromNode(targetNode) {
		  var targetInst = targetNode[internalInstanceKey];

		  if (targetInst) {
		    // Don't return HostRoot or SuspenseComponent here.
		    return targetInst;
		  } // If the direct event target isn't a React owned DOM node, we need to look
		  // to see if one of its parents is a React owned DOM node.


		  var parentNode = targetNode.parentNode;

		  while (parentNode) {
		    // We'll check if this is a container root that could include
		    // React nodes in the future. We need to check this first because
		    // if we're a child of a dehydrated container, we need to first
		    // find that inner container before moving on to finding the parent
		    // instance. Note that we don't check this field on  the targetNode
		    // itself because the fibers are conceptually between the container
		    // node and the first child. It isn't surrounding the container node.
		    // If it's not a container, we check if it's an instance.
		    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

		    if (targetInst) {
		      // Since this wasn't the direct target of the event, we might have
		      // stepped past dehydrated DOM nodes to get here. However they could
		      // also have been non-React nodes. We need to answer which one.
		      // If we the instance doesn't have any children, then there can't be
		      // a nested suspense boundary within it. So we can use this as a fast
		      // bailout. Most of the time, when people add non-React children to
		      // the tree, it is using a ref to a child-less DOM node.
		      // Normally we'd only need to check one of the fibers because if it
		      // has ever gone from having children to deleting them or vice versa
		      // it would have deleted the dehydrated boundary nested inside already.
		      // However, since the HostRoot starts out with an alternate it might
		      // have one on the alternate so we need to check in case this was a
		      // root.
		      var alternate = targetInst.alternate;

		      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
		        // Next we need to figure out if the node that skipped past is
		        // nested within a dehydrated boundary and if so, which one.
		        var suspenseInstance = getParentSuspenseInstance(targetNode);

		        while (suspenseInstance !== null) {
		          // We found a suspense instance. That means that we haven't
		          // hydrated it yet. Even though we leave the comments in the
		          // DOM after hydrating, and there are boundaries in the DOM
		          // that could already be hydrated, we wouldn't have found them
		          // through this pass since if the target is hydrated it would
		          // have had an internalInstanceKey on it.
		          // Let's get the fiber associated with the SuspenseComponent
		          // as the deepest instance.
		          var targetSuspenseInst = suspenseInstance[internalInstanceKey];

		          if (targetSuspenseInst) {
		            return targetSuspenseInst;
		          } // If we don't find a Fiber on the comment, it might be because
		          // we haven't gotten to hydrate it yet. There might still be a
		          // parent boundary that hasn't above this one so we need to find
		          // the outer most that is known.


		          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
		          // host component also hasn't hydrated yet. We can return it
		          // below since it will bail out on the isMounted check later.
		        }
		      }

		      return targetInst;
		    }

		    targetNode = parentNode;
		    parentNode = targetNode.parentNode;
		  }

		  return null;
		}
		/**
		 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
		 * instance, or null if the node was not rendered by this React.
		 */

		function getInstanceFromNode(node) {
		  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

		  if (inst) {
		    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
		      return inst;
		    } else {
		      return null;
		    }
		  }

		  return null;
		}
		/**
		 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
		 * DOM node.
		 */

		function getNodeFromInstance(inst) {
		  if (inst.tag === HostComponent || inst.tag === HostText) {
		    // In Fiber this, is just the state node right now. We assume it will be
		    // a host component or host text.
		    return inst.stateNode;
		  } // Without this first invariant, passing a non-DOM-component triggers the next
		  // invariant for a missing parent, which is super confusing.


		  throw new Error('getNodeFromInstance: Invalid argument.');
		}
		function getFiberCurrentPropsFromNode(node) {
		  return node[internalPropsKey] || null;
		}
		function updateFiberProps(node, props) {
		  node[internalPropsKey] = props;
		}
		function getEventListenerSet(node) {
		  var elementListenerSet = node[internalEventHandlersKey];

		  if (elementListenerSet === undefined) {
		    elementListenerSet = node[internalEventHandlersKey] = new Set();
		  }

		  return elementListenerSet;
		}

		var loggedTypeFailures = {};
		var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

		function setCurrentlyValidatingElement(element) {
		  {
		    if (element) {
		      var owner = element._owner;
		      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
		      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
		    } else {
		      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
		    }
		  }
		}

		function checkPropTypes(typeSpecs, values, location, componentName, element) {
		  {
		    // $FlowFixMe This is okay but Flow doesn't know it.
		    var has = Function.call.bind(hasOwnProperty);

		    for (var typeSpecName in typeSpecs) {
		      if (has(typeSpecs, typeSpecName)) {
		        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
		        // fail the render phase where it didn't fail before. So we log it.
		        // After these have been cleaned up, we'll let them throw.

		        try {
		          // This is intentionally an invariant that gets caught. It's the same
		          // behavior as without this statement except with a better message.
		          if (typeof typeSpecs[typeSpecName] !== 'function') {
		            // eslint-disable-next-line react-internal/prod-error-codes
		            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
		            err.name = 'Invariant Violation';
		            throw err;
		          }

		          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
		        } catch (ex) {
		          error$1 = ex;
		        }

		        if (error$1 && !(error$1 instanceof Error)) {
		          setCurrentlyValidatingElement(element);

		          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

		          setCurrentlyValidatingElement(null);
		        }

		        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
		          // Only monitor this failure once because there tends to be a lot of the
		          // same error.
		          loggedTypeFailures[error$1.message] = true;
		          setCurrentlyValidatingElement(element);

		          error('Failed %s type: %s', location, error$1.message);

		          setCurrentlyValidatingElement(null);
		        }
		      }
		    }
		  }
		}

		var valueStack = [];
		var fiberStack;

		{
		  fiberStack = [];
		}

		var index = -1;

		function createCursor(defaultValue) {
		  return {
		    current: defaultValue
		  };
		}

		function pop(cursor, fiber) {
		  if (index < 0) {
		    {
		      error('Unexpected pop.');
		    }

		    return;
		  }

		  {
		    if (fiber !== fiberStack[index]) {
		      error('Unexpected Fiber popped.');
		    }
		  }

		  cursor.current = valueStack[index];
		  valueStack[index] = null;

		  {
		    fiberStack[index] = null;
		  }

		  index--;
		}

		function push(cursor, value, fiber) {
		  index++;
		  valueStack[index] = cursor.current;

		  {
		    fiberStack[index] = fiber;
		  }

		  cursor.current = value;
		}

		var warnedAboutMissingGetChildContext;

		{
		  warnedAboutMissingGetChildContext = {};
		}

		var emptyContextObject = {};

		{
		  Object.freeze(emptyContextObject);
		} // A cursor to the current merged context object on the stack.


		var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

		var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
		// We use this to get access to the parent context after we have already
		// pushed the next context provider, and now need to merge their contexts.

		var previousContext = emptyContextObject;

		function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
		  {
		    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
		      // If the fiber is a context provider itself, when we read its context
		      // we may have already pushed its own child context on the stack. A context
		      // provider should not "see" its own child context. Therefore we read the
		      // previous (parent) context instead for a context provider.
		      return previousContext;
		    }

		    return contextStackCursor.current;
		  }
		}

		function cacheContext(workInProgress, unmaskedContext, maskedContext) {
		  {
		    var instance = workInProgress.stateNode;
		    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
		    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
		  }
		}

		function getMaskedContext(workInProgress, unmaskedContext) {
		  {
		    var type = workInProgress.type;
		    var contextTypes = type.contextTypes;

		    if (!contextTypes) {
		      return emptyContextObject;
		    } // Avoid recreating masked context unless unmasked context has changed.
		    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
		    // This may trigger infinite loops if componentWillReceiveProps calls setState.


		    var instance = workInProgress.stateNode;

		    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
		      return instance.__reactInternalMemoizedMaskedChildContext;
		    }

		    var context = {};

		    for (var key in contextTypes) {
		      context[key] = unmaskedContext[key];
		    }

		    {
		      var name = getComponentNameFromFiber(workInProgress) || 'Unknown';
		      checkPropTypes(contextTypes, context, 'context', name);
		    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
		    // Context is created before the class component is instantiated so check for instance.


		    if (instance) {
		      cacheContext(workInProgress, unmaskedContext, context);
		    }

		    return context;
		  }
		}

		function hasContextChanged() {
		  {
		    return didPerformWorkStackCursor.current;
		  }
		}

		function isContextProvider(type) {
		  {
		    var childContextTypes = type.childContextTypes;
		    return childContextTypes !== null && childContextTypes !== undefined;
		  }
		}

		function popContext(fiber) {
		  {
		    pop(didPerformWorkStackCursor, fiber);
		    pop(contextStackCursor, fiber);
		  }
		}

		function popTopLevelContextObject(fiber) {
		  {
		    pop(didPerformWorkStackCursor, fiber);
		    pop(contextStackCursor, fiber);
		  }
		}

		function pushTopLevelContextObject(fiber, context, didChange) {
		  {
		    if (contextStackCursor.current !== emptyContextObject) {
		      throw new Error('Unexpected context found on stack. ' + 'This error is likely caused by a bug in React. Please file an issue.');
		    }

		    push(contextStackCursor, context, fiber);
		    push(didPerformWorkStackCursor, didChange, fiber);
		  }
		}

		function processChildContext(fiber, type, parentContext) {
		  {
		    var instance = fiber.stateNode;
		    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
		    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

		    if (typeof instance.getChildContext !== 'function') {
		      {
		        var componentName = getComponentNameFromFiber(fiber) || 'Unknown';

		        if (!warnedAboutMissingGetChildContext[componentName]) {
		          warnedAboutMissingGetChildContext[componentName] = true;

		          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
		        }
		      }

		      return parentContext;
		    }

		    var childContext = instance.getChildContext();

		    for (var contextKey in childContext) {
		      if (!(contextKey in childContextTypes)) {
		        throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
		      }
		    }

		    {
		      var name = getComponentNameFromFiber(fiber) || 'Unknown';
		      checkPropTypes(childContextTypes, childContext, 'child context', name);
		    }

		    return assign({}, parentContext, childContext);
		  }
		}

		function pushContextProvider(workInProgress) {
		  {
		    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
		    // If the instance does not exist yet, we will push null at first,
		    // and replace it on the stack later when invalidating the context.

		    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
		    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

		    previousContext = contextStackCursor.current;
		    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
		    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
		    return true;
		  }
		}

		function invalidateContextProvider(workInProgress, type, didChange) {
		  {
		    var instance = workInProgress.stateNode;

		    if (!instance) {
		      throw new Error('Expected to have an instance by this point. ' + 'This error is likely caused by a bug in React. Please file an issue.');
		    }

		    if (didChange) {
		      // Merge parent and own context.
		      // Skip this if we're not updating due to sCU.
		      // This avoids unnecessarily recomputing memoized values.
		      var mergedContext = processChildContext(workInProgress, type, previousContext);
		      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
		      // It is important to unwind the context in the reverse order.

		      pop(didPerformWorkStackCursor, workInProgress);
		      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

		      push(contextStackCursor, mergedContext, workInProgress);
		      push(didPerformWorkStackCursor, didChange, workInProgress);
		    } else {
		      pop(didPerformWorkStackCursor, workInProgress);
		      push(didPerformWorkStackCursor, didChange, workInProgress);
		    }
		  }
		}

		function findCurrentUnmaskedContext(fiber) {
		  {
		    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
		    // makes sense elsewhere
		    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
		      throw new Error('Expected subtree parent to be a mounted class component. ' + 'This error is likely caused by a bug in React. Please file an issue.');
		    }

		    var node = fiber;

		    do {
		      switch (node.tag) {
		        case HostRoot:
		          return node.stateNode.context;

		        case ClassComponent:
		          {
		            var Component = node.type;

		            if (isContextProvider(Component)) {
		              return node.stateNode.__reactInternalMemoizedMergedChildContext;
		            }

		            break;
		          }
		      }

		      node = node.return;
		    } while (node !== null);

		    throw new Error('Found unexpected detached subtree parent. ' + 'This error is likely caused by a bug in React. Please file an issue.');
		  }
		}

		var LegacyRoot = 0;
		var ConcurrentRoot = 1;

		var syncQueue = null;
		var includesLegacySyncCallbacks = false;
		var isFlushingSyncQueue = false;
		function scheduleSyncCallback(callback) {
		  // Push this callback into an internal queue. We'll flush these either in
		  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
		  if (syncQueue === null) {
		    syncQueue = [callback];
		  } else {
		    // Push onto existing queue. Don't need to schedule a callback because
		    // we already scheduled one when we created the queue.
		    syncQueue.push(callback);
		  }
		}
		function scheduleLegacySyncCallback(callback) {
		  includesLegacySyncCallbacks = true;
		  scheduleSyncCallback(callback);
		}
		function flushSyncCallbacksOnlyInLegacyMode() {
		  // Only flushes the queue if there's a legacy sync callback scheduled.
		  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So
		  // it might make more sense for the queue to be a list of roots instead of a
		  // list of generic callbacks. Then we can have two: one for legacy roots, one
		  // for concurrent roots. And this method would only flush the legacy ones.
		  if (includesLegacySyncCallbacks) {
		    flushSyncCallbacks();
		  }
		}
		function flushSyncCallbacks() {
		  if (!isFlushingSyncQueue && syncQueue !== null) {
		    // Prevent re-entrance.
		    isFlushingSyncQueue = true;
		    var i = 0;
		    var previousUpdatePriority = getCurrentUpdatePriority();

		    try {
		      var isSync = true;
		      var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this
		      // queue is in the render or commit phases.

		      setCurrentUpdatePriority(DiscreteEventPriority);

		      for (; i < queue.length; i++) {
		        var callback = queue[i];

		        do {
		          callback = callback(isSync);
		        } while (callback !== null);
		      }

		      syncQueue = null;
		      includesLegacySyncCallbacks = false;
		    } catch (error) {
		      // If something throws, leave the remaining callbacks on the queue.
		      if (syncQueue !== null) {
		        syncQueue = syncQueue.slice(i + 1);
		      } // Resume flushing in the next tick


		      scheduleCallback(ImmediatePriority, flushSyncCallbacks);
		      throw error;
		    } finally {
		      setCurrentUpdatePriority(previousUpdatePriority);
		      isFlushingSyncQueue = false;
		    }
		  }

		  return null;
		}

		// TODO: Use the unified fiber stack module instead of this local one?
		// Intentionally not using it yet to derisk the initial implementation, because
		// the way we push/pop these values is a bit unusual. If there's a mistake, I'd
		// rather the ids be wrong than crash the whole reconciler.
		var forkStack = [];
		var forkStackIndex = 0;
		var treeForkProvider = null;
		var treeForkCount = 0;
		var idStack = [];
		var idStackIndex = 0;
		var treeContextProvider = null;
		var treeContextId = 1;
		var treeContextOverflow = '';
		function isForkedChild(workInProgress) {
		  warnIfNotHydrating();
		  return (workInProgress.flags & Forked) !== NoFlags;
		}
		function getForksAtLevel(workInProgress) {
		  warnIfNotHydrating();
		  return treeForkCount;
		}
		function getTreeId() {
		  var overflow = treeContextOverflow;
		  var idWithLeadingBit = treeContextId;
		  var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
		  return id.toString(32) + overflow;
		}
		function pushTreeFork(workInProgress, totalChildren) {
		  // This is called right after we reconcile an array (or iterator) of child
		  // fibers, because that's the only place where we know how many children in
		  // the whole set without doing extra work later, or storing addtional
		  // information on the fiber.
		  //
		  // That's why this function is separate from pushTreeId — it's called during
		  // the render phase of the fork parent, not the child, which is where we push
		  // the other context values.
		  //
		  // In the Fizz implementation this is much simpler because the child is
		  // rendered in the same callstack as the parent.
		  //
		  // It might be better to just add a `forks` field to the Fiber type. It would
		  // make this module simpler.
		  warnIfNotHydrating();
		  forkStack[forkStackIndex++] = treeForkCount;
		  forkStack[forkStackIndex++] = treeForkProvider;
		  treeForkProvider = workInProgress;
		  treeForkCount = totalChildren;
		}
		function pushTreeId(workInProgress, totalChildren, index) {
		  warnIfNotHydrating();
		  idStack[idStackIndex++] = treeContextId;
		  idStack[idStackIndex++] = treeContextOverflow;
		  idStack[idStackIndex++] = treeContextProvider;
		  treeContextProvider = workInProgress;
		  var baseIdWithLeadingBit = treeContextId;
		  var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part
		  // of the id; we use it to account for leading 0s.

		  var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
		  var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
		  var slot = index + 1;
		  var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into
		  // consideration the leading 1 we use to mark the end of the sequence.

		  if (length > 30) {
		    // We overflowed the bitwise-safe range. Fall back to slower algorithm.
		    // This branch assumes the length of the base id is greater than 5; it won't
		    // work for smaller ids, because you need 5 bits per character.
		    //
		    // We encode the id in multiple steps: first the base id, then the
		    // remaining digits.
		    //
		    // Each 5 bit sequence corresponds to a single base 32 character. So for
		    // example, if the current id is 23 bits long, we can convert 20 of those
		    // bits into a string of 4 characters, with 3 bits left over.
		    //
		    // First calculate how many bits in the base id represent a complete
		    // sequence of characters.
		    var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.

		    var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.

		    var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.

		    var restOfBaseId = baseId >> numberOfOverflowBits;
		    var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because
		    // we made more room, this time it won't overflow.

		    var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
		    var restOfNewBits = slot << restOfBaseLength;
		    var id = restOfNewBits | restOfBaseId;
		    var overflow = newOverflow + baseOverflow;
		    treeContextId = 1 << restOfLength | id;
		    treeContextOverflow = overflow;
		  } else {
		    // Normal path
		    var newBits = slot << baseLength;

		    var _id = newBits | baseId;

		    var _overflow = baseOverflow;
		    treeContextId = 1 << length | _id;
		    treeContextOverflow = _overflow;
		  }
		}
		function pushMaterializedTreeId(workInProgress) {
		  warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear
		  // in its children.

		  var returnFiber = workInProgress.return;

		  if (returnFiber !== null) {
		    var numberOfForks = 1;
		    var slotIndex = 0;
		    pushTreeFork(workInProgress, numberOfForks);
		    pushTreeId(workInProgress, numberOfForks, slotIndex);
		  }
		}

		function getBitLength(number) {
		  return 32 - clz32(number);
		}

		function getLeadingBit(id) {
		  return 1 << getBitLength(id) - 1;
		}

		function popTreeContext(workInProgress) {
		  // Restore the previous values.
		  // This is a bit more complicated than other context-like modules in Fiber
		  // because the same Fiber may appear on the stack multiple times and for
		  // different reasons. We have to keep popping until the work-in-progress is
		  // no longer at the top of the stack.
		  while (workInProgress === treeForkProvider) {
		    treeForkProvider = forkStack[--forkStackIndex];
		    forkStack[forkStackIndex] = null;
		    treeForkCount = forkStack[--forkStackIndex];
		    forkStack[forkStackIndex] = null;
		  }

		  while (workInProgress === treeContextProvider) {
		    treeContextProvider = idStack[--idStackIndex];
		    idStack[idStackIndex] = null;
		    treeContextOverflow = idStack[--idStackIndex];
		    idStack[idStackIndex] = null;
		    treeContextId = idStack[--idStackIndex];
		    idStack[idStackIndex] = null;
		  }
		}
		function getSuspendedTreeContext() {
		  warnIfNotHydrating();

		  if (treeContextProvider !== null) {
		    return {
		      id: treeContextId,
		      overflow: treeContextOverflow
		    };
		  } else {
		    return null;
		  }
		}
		function restoreSuspendedTreeContext(workInProgress, suspendedContext) {
		  warnIfNotHydrating();
		  idStack[idStackIndex++] = treeContextId;
		  idStack[idStackIndex++] = treeContextOverflow;
		  idStack[idStackIndex++] = treeContextProvider;
		  treeContextId = suspendedContext.id;
		  treeContextOverflow = suspendedContext.overflow;
		  treeContextProvider = workInProgress;
		}

		function warnIfNotHydrating() {
		  {
		    if (!getIsHydrating()) {
		      error('Expected to be hydrating. This is a bug in React. Please file ' + 'an issue.');
		    }
		  }
		}

		// This may have been an insertion or a hydration.

		var hydrationParentFiber = null;
		var nextHydratableInstance = null;
		var isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches
		// due to earlier mismatches or a suspended fiber.

		var didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary

		var hydrationErrors = null;

		function warnIfHydrating() {
		  {
		    if (isHydrating) {
		      error('We should not be hydrating here. This is a bug in React. Please file a bug.');
		    }
		  }
		}

		function markDidThrowWhileHydratingDEV() {
		  {
		    didSuspendOrErrorDEV = true;
		  }
		}
		function didSuspendOrErrorWhileHydratingDEV() {
		  {
		    return didSuspendOrErrorDEV;
		  }
		}

		function enterHydrationState(fiber) {

		  var parentInstance = fiber.stateNode.containerInfo;
		  nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
		  hydrationParentFiber = fiber;
		  isHydrating = true;
		  hydrationErrors = null;
		  didSuspendOrErrorDEV = false;
		  return true;
		}

		function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {

		  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
		  hydrationParentFiber = fiber;
		  isHydrating = true;
		  hydrationErrors = null;
		  didSuspendOrErrorDEV = false;

		  if (treeContext !== null) {
		    restoreSuspendedTreeContext(fiber, treeContext);
		  }

		  return true;
		}

		function warnUnhydratedInstance(returnFiber, instance) {
		  {
		    switch (returnFiber.tag) {
		      case HostRoot:
		        {
		          didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
		          break;
		        }

		      case HostComponent:
		        {
		          var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
		          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, // TODO: Delete this argument when we remove the legacy root API.
		          isConcurrentMode);
		          break;
		        }

		      case SuspenseComponent:
		        {
		          var suspenseState = returnFiber.memoizedState;
		          if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
		          break;
		        }
		    }
		  }
		}

		function deleteHydratableInstance(returnFiber, instance) {
		  warnUnhydratedInstance(returnFiber, instance);
		  var childToDelete = createFiberFromHostInstanceForDeletion();
		  childToDelete.stateNode = instance;
		  childToDelete.return = returnFiber;
		  var deletions = returnFiber.deletions;

		  if (deletions === null) {
		    returnFiber.deletions = [childToDelete];
		    returnFiber.flags |= ChildDeletion;
		  } else {
		    deletions.push(childToDelete);
		  }
		}

		function warnNonhydratedInstance(returnFiber, fiber) {
		  {
		    if (didSuspendOrErrorDEV) {
		      // Inside a boundary that already suspended. We're currently rendering the
		      // siblings of a suspended node. The mismatch may be due to the missing
		      // data, so it's probably a false positive.
		      return;
		    }

		    switch (returnFiber.tag) {
		      case HostRoot:
		        {
		          var parentContainer = returnFiber.stateNode.containerInfo;

		          switch (fiber.tag) {
		            case HostComponent:
		              var type = fiber.type;
		              fiber.pendingProps;
		              didNotFindHydratableInstanceWithinContainer(parentContainer, type);
		              break;

		            case HostText:
		              var text = fiber.pendingProps;
		              didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
		              break;
		          }

		          break;
		        }

		      case HostComponent:
		        {
		          var parentType = returnFiber.type;
		          var parentProps = returnFiber.memoizedProps;
		          var parentInstance = returnFiber.stateNode;

		          switch (fiber.tag) {
		            case HostComponent:
		              {
		                var _type = fiber.type;
		                var _props = fiber.pendingProps;
		                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
		                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, // TODO: Delete this argument when we remove the legacy root API.
		                isConcurrentMode);
		                break;
		              }

		            case HostText:
		              {
		                var _text = fiber.pendingProps;

		                var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;

		                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, // TODO: Delete this argument when we remove the legacy root API.
		                _isConcurrentMode);
		                break;
		              }
		          }

		          break;
		        }

		      case SuspenseComponent:
		        {
		          var suspenseState = returnFiber.memoizedState;
		          var _parentInstance = suspenseState.dehydrated;
		          if (_parentInstance !== null) switch (fiber.tag) {
		            case HostComponent:
		              var _type2 = fiber.type;
		              fiber.pendingProps;
		              didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
		              break;

		            case HostText:
		              var _text2 = fiber.pendingProps;
		              didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
		              break;
		          }
		          break;
		        }

		      default:
		        return;
		    }
		  }
		}

		function insertNonHydratedInstance(returnFiber, fiber) {
		  fiber.flags = fiber.flags & ~Hydrating | Placement;
		  warnNonhydratedInstance(returnFiber, fiber);
		}

		function tryHydrate(fiber, nextInstance) {
		  switch (fiber.tag) {
		    case HostComponent:
		      {
		        var type = fiber.type;
		        fiber.pendingProps;
		        var instance = canHydrateInstance(nextInstance, type);

		        if (instance !== null) {
		          fiber.stateNode = instance;
		          hydrationParentFiber = fiber;
		          nextHydratableInstance = getFirstHydratableChild(instance);
		          return true;
		        }

		        return false;
		      }

		    case HostText:
		      {
		        var text = fiber.pendingProps;
		        var textInstance = canHydrateTextInstance(nextInstance, text);

		        if (textInstance !== null) {
		          fiber.stateNode = textInstance;
		          hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.

		          nextHydratableInstance = null;
		          return true;
		        }

		        return false;
		      }

		    case SuspenseComponent:
		      {
		        var suspenseInstance = canHydrateSuspenseInstance(nextInstance);

		        if (suspenseInstance !== null) {
		          var suspenseState = {
		            dehydrated: suspenseInstance,
		            treeContext: getSuspendedTreeContext(),
		            retryLane: OffscreenLane
		          };
		          fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.
		          // This simplifies the code for getHostSibling and deleting nodes,
		          // since it doesn't have to consider all Suspense boundaries and
		          // check if they're dehydrated ones or not.

		          var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
		          dehydratedFragment.return = fiber;
		          fiber.child = dehydratedFragment;
		          hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into
		          // it during the first pass. Instead, we'll reenter it later.

		          nextHydratableInstance = null;
		          return true;
		        }

		        return false;
		      }

		    default:
		      return false;
		  }
		}

		function shouldClientRenderOnMismatch(fiber) {
		  return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
		}

		function throwOnHydrationMismatch(fiber) {
		  throw new Error('Hydration failed because the initial UI does not match what was ' + 'rendered on the server.');
		}

		function tryToClaimNextHydratableInstance(fiber) {
		  if (!isHydrating) {
		    return;
		  }

		  var nextInstance = nextHydratableInstance;

		  if (!nextInstance) {
		    if (shouldClientRenderOnMismatch(fiber)) {
		      warnNonhydratedInstance(hydrationParentFiber, fiber);
		      throwOnHydrationMismatch();
		    } // Nothing to hydrate. Make it an insertion.


		    insertNonHydratedInstance(hydrationParentFiber, fiber);
		    isHydrating = false;
		    hydrationParentFiber = fiber;
		    return;
		  }

		  var firstAttemptedInstance = nextInstance;

		  if (!tryHydrate(fiber, nextInstance)) {
		    if (shouldClientRenderOnMismatch(fiber)) {
		      warnNonhydratedInstance(hydrationParentFiber, fiber);
		      throwOnHydrationMismatch();
		    } // If we can't hydrate this instance let's try the next one.
		    // We use this as a heuristic. It's based on intuition and not data so it
		    // might be flawed or unnecessary.


		    nextInstance = getNextHydratableSibling(firstAttemptedInstance);
		    var prevHydrationParentFiber = hydrationParentFiber;

		    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
		      // Nothing to hydrate. Make it an insertion.
		      insertNonHydratedInstance(hydrationParentFiber, fiber);
		      isHydrating = false;
		      hydrationParentFiber = fiber;
		      return;
		    } // We matched the next one, we'll now assume that the first one was
		    // superfluous and we'll delete it. Since we can't eagerly delete it
		    // we'll have to schedule a deletion. To do that, this node needs a dummy
		    // fiber associated with it.


		    deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
		  }
		}

		function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

		  var instance = fiber.stateNode;
		  var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
		  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.

		  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
		  // is a new ref we mark this as an update.

		  if (updatePayload !== null) {
		    return true;
		  }

		  return false;
		}

		function prepareToHydrateHostTextInstance(fiber) {

		  var textInstance = fiber.stateNode;
		  var textContent = fiber.memoizedProps;
		  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

		  if (shouldUpdate) {
		    // We assume that prepareToHydrateHostTextInstance is called in a context where the
		    // hydration parent is the parent host component of this host text.
		    var returnFiber = hydrationParentFiber;

		    if (returnFiber !== null) {
		      switch (returnFiber.tag) {
		        case HostRoot:
		          {
		            var parentContainer = returnFiber.stateNode.containerInfo;
		            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
		            didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.
		            isConcurrentMode);
		            break;
		          }

		        case HostComponent:
		          {
		            var parentType = returnFiber.type;
		            var parentProps = returnFiber.memoizedProps;
		            var parentInstance = returnFiber.stateNode;

		            var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;

		            didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.
		            _isConcurrentMode2);
		            break;
		          }
		      }
		    }
		  }

		  return shouldUpdate;
		}

		function prepareToHydrateHostSuspenseInstance(fiber) {

		  var suspenseState = fiber.memoizedState;
		  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

		  if (!suspenseInstance) {
		    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');
		  }

		  hydrateSuspenseInstance(suspenseInstance, fiber);
		}

		function skipPastDehydratedSuspenseInstance(fiber) {

		  var suspenseState = fiber.memoizedState;
		  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

		  if (!suspenseInstance) {
		    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');
		  }

		  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
		}

		function popToNextHostParent(fiber) {
		  var parent = fiber.return;

		  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
		    parent = parent.return;
		  }

		  hydrationParentFiber = parent;
		}

		function popHydrationState(fiber) {

		  if (fiber !== hydrationParentFiber) {
		    // We're deeper than the current hydration context, inside an inserted
		    // tree.
		    return false;
		  }

		  if (!isHydrating) {
		    // If we're not currently hydrating but we're in a hydration context, then
		    // we were an insertion and now need to pop up reenter hydration of our
		    // siblings.
		    popToNextHostParent(fiber);
		    isHydrating = true;
		    return false;
		  } // If we have any remaining hydratable nodes, we need to delete them now.
		  // We only do this deeper than head and body since they tend to have random
		  // other nodes in them. We also ignore components with pure text content in
		  // side of them. We also don't delete anything inside the root container.


		  if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
		    var nextInstance = nextHydratableInstance;

		    if (nextInstance) {
		      if (shouldClientRenderOnMismatch(fiber)) {
		        warnIfUnhydratedTailNodes(fiber);
		        throwOnHydrationMismatch();
		      } else {
		        while (nextInstance) {
		          deleteHydratableInstance(fiber, nextInstance);
		          nextInstance = getNextHydratableSibling(nextInstance);
		        }
		      }
		    }
		  }

		  popToNextHostParent(fiber);

		  if (fiber.tag === SuspenseComponent) {
		    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
		  } else {
		    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
		  }

		  return true;
		}

		function hasUnhydratedTailNodes() {
		  return isHydrating && nextHydratableInstance !== null;
		}

		function warnIfUnhydratedTailNodes(fiber) {
		  var nextInstance = nextHydratableInstance;

		  while (nextInstance) {
		    warnUnhydratedInstance(fiber, nextInstance);
		    nextInstance = getNextHydratableSibling(nextInstance);
		  }
		}

		function resetHydrationState() {

		  hydrationParentFiber = null;
		  nextHydratableInstance = null;
		  isHydrating = false;
		  didSuspendOrErrorDEV = false;
		}

		function upgradeHydrationErrorsToRecoverable() {
		  if (hydrationErrors !== null) {
		    // Successfully completed a forced client render. The errors that occurred
		    // during the hydration attempt are now recovered. We will log them in
		    // commit phase, once the entire tree has finished.
		    queueRecoverableErrors(hydrationErrors);
		    hydrationErrors = null;
		  }
		}

		function getIsHydrating() {
		  return isHydrating;
		}

		function queueHydrationError(error) {
		  if (hydrationErrors === null) {
		    hydrationErrors = [error];
		  } else {
		    hydrationErrors.push(error);
		  }
		}

		var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
		var NoTransition = null;
		function requestCurrentTransition() {
		  return ReactCurrentBatchConfig$1.transition;
		}

		var ReactStrictModeWarnings = {
		  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
		  flushPendingUnsafeLifecycleWarnings: function () {},
		  recordLegacyContextWarning: function (fiber, instance) {},
		  flushLegacyContextWarning: function () {},
		  discardPendingWarnings: function () {}
		};

		{
		  var findStrictRoot = function (fiber) {
		    var maybeStrictRoot = null;
		    var node = fiber;

		    while (node !== null) {
		      if (node.mode & StrictLegacyMode) {
		        maybeStrictRoot = node;
		      }

		      node = node.return;
		    }

		    return maybeStrictRoot;
		  };

		  var setToSortedString = function (set) {
		    var array = [];
		    set.forEach(function (value) {
		      array.push(value);
		    });
		    return array.sort().join(', ');
		  };

		  var pendingComponentWillMountWarnings = [];
		  var pendingUNSAFE_ComponentWillMountWarnings = [];
		  var pendingComponentWillReceivePropsWarnings = [];
		  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
		  var pendingComponentWillUpdateWarnings = [];
		  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

		  var didWarnAboutUnsafeLifecycles = new Set();

		  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
		    // Dedupe strategy: Warn once per component.
		    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
		      return;
		    }

		    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
		    instance.componentWillMount.__suppressDeprecationWarning !== true) {
		      pendingComponentWillMountWarnings.push(fiber);
		    }

		    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {
		      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
		    }

		    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
		      pendingComponentWillReceivePropsWarnings.push(fiber);
		    }

		    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
		      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
		    }

		    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
		      pendingComponentWillUpdateWarnings.push(fiber);
		    }

		    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
		      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
		    }
		  };

		  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
		    // We do an initial pass to gather component names
		    var componentWillMountUniqueNames = new Set();

		    if (pendingComponentWillMountWarnings.length > 0) {
		      pendingComponentWillMountWarnings.forEach(function (fiber) {
		        componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
		        didWarnAboutUnsafeLifecycles.add(fiber.type);
		      });
		      pendingComponentWillMountWarnings = [];
		    }

		    var UNSAFE_componentWillMountUniqueNames = new Set();

		    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
		      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
		        UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
		        didWarnAboutUnsafeLifecycles.add(fiber.type);
		      });
		      pendingUNSAFE_ComponentWillMountWarnings = [];
		    }

		    var componentWillReceivePropsUniqueNames = new Set();

		    if (pendingComponentWillReceivePropsWarnings.length > 0) {
		      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
		        componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
		        didWarnAboutUnsafeLifecycles.add(fiber.type);
		      });
		      pendingComponentWillReceivePropsWarnings = [];
		    }

		    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

		    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
		      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
		        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
		        didWarnAboutUnsafeLifecycles.add(fiber.type);
		      });
		      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
		    }

		    var componentWillUpdateUniqueNames = new Set();

		    if (pendingComponentWillUpdateWarnings.length > 0) {
		      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
		        componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
		        didWarnAboutUnsafeLifecycles.add(fiber.type);
		      });
		      pendingComponentWillUpdateWarnings = [];
		    }

		    var UNSAFE_componentWillUpdateUniqueNames = new Set();

		    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
		      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
		        UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
		        didWarnAboutUnsafeLifecycles.add(fiber.type);
		      });
		      pendingUNSAFE_ComponentWillUpdateWarnings = [];
		    } // Finally, we flush all the warnings
		    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


		    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
		      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

		      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
		    }

		    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
		      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

		      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
		    }

		    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
		      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

		      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
		    }

		    if (componentWillMountUniqueNames.size > 0) {
		      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

		      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
		    }

		    if (componentWillReceivePropsUniqueNames.size > 0) {
		      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

		      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
		    }

		    if (componentWillUpdateUniqueNames.size > 0) {
		      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

		      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
		    }
		  };

		  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

		  var didWarnAboutLegacyContext = new Set();

		  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
		    var strictRoot = findStrictRoot(fiber);

		    if (strictRoot === null) {
		      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

		      return;
		    } // Dedup strategy: Warn once per component.


		    if (didWarnAboutLegacyContext.has(fiber.type)) {
		      return;
		    }

		    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

		    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
		      if (warningsForRoot === undefined) {
		        warningsForRoot = [];
		        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
		      }

		      warningsForRoot.push(fiber);
		    }
		  };

		  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
		    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
		      if (fiberArray.length === 0) {
		        return;
		      }

		      var firstFiber = fiberArray[0];
		      var uniqueNames = new Set();
		      fiberArray.forEach(function (fiber) {
		        uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
		        didWarnAboutLegacyContext.add(fiber.type);
		      });
		      var sortedNames = setToSortedString(uniqueNames);

		      try {
		        setCurrentFiber(firstFiber);

		        error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);
		      } finally {
		        resetCurrentFiber();
		      }
		    });
		  };

		  ReactStrictModeWarnings.discardPendingWarnings = function () {
		    pendingComponentWillMountWarnings = [];
		    pendingUNSAFE_ComponentWillMountWarnings = [];
		    pendingComponentWillReceivePropsWarnings = [];
		    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
		    pendingComponentWillUpdateWarnings = [];
		    pendingUNSAFE_ComponentWillUpdateWarnings = [];
		    pendingLegacyContextWarning = new Map();
		  };
		}

		function resolveDefaultProps(Component, baseProps) {
		  if (Component && Component.defaultProps) {
		    // Resolve default props. Taken from ReactElement
		    var props = assign({}, baseProps);
		    var defaultProps = Component.defaultProps;

		    for (var propName in defaultProps) {
		      if (props[propName] === undefined) {
		        props[propName] = defaultProps[propName];
		      }
		    }

		    return props;
		  }

		  return baseProps;
		}

		var valueCursor = createCursor(null);
		var rendererSigil;

		{
		  // Use this to detect multiple renderers using the same context
		  rendererSigil = {};
		}

		var currentlyRenderingFiber = null;
		var lastContextDependency = null;
		var lastFullyObservedContext = null;
		var isDisallowedContextReadInDEV = false;
		function resetContextDependencies() {
		  // This is called right before React yields execution, to ensure `readContext`
		  // cannot be called outside the render phase.
		  currentlyRenderingFiber = null;
		  lastContextDependency = null;
		  lastFullyObservedContext = null;

		  {
		    isDisallowedContextReadInDEV = false;
		  }
		}
		function enterDisallowedContextReadInDEV() {
		  {
		    isDisallowedContextReadInDEV = true;
		  }
		}
		function exitDisallowedContextReadInDEV() {
		  {
		    isDisallowedContextReadInDEV = false;
		  }
		}
		function pushProvider(providerFiber, context, nextValue) {
		  {
		    push(valueCursor, context._currentValue, providerFiber);
		    context._currentValue = nextValue;

		    {
		      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
		        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
		      }

		      context._currentRenderer = rendererSigil;
		    }
		  }
		}
		function popProvider(context, providerFiber) {
		  var currentValue = valueCursor.current;
		  pop(valueCursor, providerFiber);

		  {
		    {
		      context._currentValue = currentValue;
		    }
		  }
		}
		function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
		  // Update the child lanes of all the ancestors, including the alternates.
		  var node = parent;

		  while (node !== null) {
		    var alternate = node.alternate;

		    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
		      node.childLanes = mergeLanes(node.childLanes, renderLanes);

		      if (alternate !== null) {
		        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
		      }
		    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
		      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
		    }

		    if (node === propagationRoot) {
		      break;
		    }

		    node = node.return;
		  }

		  {
		    if (node !== propagationRoot) {
		      error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');
		    }
		  }
		}
		function propagateContextChange(workInProgress, context, renderLanes) {
		  {
		    propagateContextChange_eager(workInProgress, context, renderLanes);
		  }
		}

		function propagateContextChange_eager(workInProgress, context, renderLanes) {

		  var fiber = workInProgress.child;

		  if (fiber !== null) {
		    // Set the return pointer of the child to the work-in-progress fiber.
		    fiber.return = workInProgress;
		  }

		  while (fiber !== null) {
		    var nextFiber = void 0; // Visit this fiber.

		    var list = fiber.dependencies;

		    if (list !== null) {
		      nextFiber = fiber.child;
		      var dependency = list.firstContext;

		      while (dependency !== null) {
		        // Check if the context matches.
		        if (dependency.context === context) {
		          // Match! Schedule an update on this fiber.
		          if (fiber.tag === ClassComponent) {
		            // Schedule a force update on the work-in-progress.
		            var lane = pickArbitraryLane(renderLanes);
		            var update = createUpdate(NoTimestamp, lane);
		            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
		            // update to the current fiber, too, which means it will persist even if
		            // this render is thrown away. Since it's a race condition, not sure it's
		            // worth fixing.
		            // Inlined `enqueueUpdate` to remove interleaved update check

		            var updateQueue = fiber.updateQueue;

		            if (updateQueue === null) ; else {
		              var sharedQueue = updateQueue.shared;
		              var pending = sharedQueue.pending;

		              if (pending === null) {
		                // This is the first update. Create a circular list.
		                update.next = update;
		              } else {
		                update.next = pending.next;
		                pending.next = update;
		              }

		              sharedQueue.pending = update;
		            }
		          }

		          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
		          var alternate = fiber.alternate;

		          if (alternate !== null) {
		            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
		          }

		          scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.

		          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
		          // dependency list.

		          break;
		        }

		        dependency = dependency.next;
		      }
		    } else if (fiber.tag === ContextProvider) {
		      // Don't scan deeper if this is a matching provider
		      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
		    } else if (fiber.tag === DehydratedFragment) {
		      // If a dehydrated suspense boundary is in this subtree, we don't know
		      // if it will have any context consumers in it. The best we can do is
		      // mark it as having updates.
		      var parentSuspense = fiber.return;

		      if (parentSuspense === null) {
		        throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');
		      }

		      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);
		      var _alternate = parentSuspense.alternate;

		      if (_alternate !== null) {
		        _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);
		      } // This is intentionally passing this fiber as the parent
		      // because we want to schedule this fiber as having work
		      // on its children. We'll use the childLanes on
		      // this fiber to indicate that a context has changed.


		      scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);
		      nextFiber = fiber.sibling;
		    } else {
		      // Traverse down.
		      nextFiber = fiber.child;
		    }

		    if (nextFiber !== null) {
		      // Set the return pointer of the child to the work-in-progress fiber.
		      nextFiber.return = fiber;
		    } else {
		      // No child. Traverse to next sibling.
		      nextFiber = fiber;

		      while (nextFiber !== null) {
		        if (nextFiber === workInProgress) {
		          // We're back to the root of this subtree. Exit.
		          nextFiber = null;
		          break;
		        }

		        var sibling = nextFiber.sibling;

		        if (sibling !== null) {
		          // Set the return pointer of the sibling to the work-in-progress fiber.
		          sibling.return = nextFiber.return;
		          nextFiber = sibling;
		          break;
		        } // No more siblings. Traverse up.


		        nextFiber = nextFiber.return;
		      }
		    }

		    fiber = nextFiber;
		  }
		}
		function prepareToReadContext(workInProgress, renderLanes) {
		  currentlyRenderingFiber = workInProgress;
		  lastContextDependency = null;
		  lastFullyObservedContext = null;
		  var dependencies = workInProgress.dependencies;

		  if (dependencies !== null) {
		    {
		      var firstContext = dependencies.firstContext;

		      if (firstContext !== null) {
		        if (includesSomeLane(dependencies.lanes, renderLanes)) {
		          // Context list has a pending update. Mark that this fiber performed work.
		          markWorkInProgressReceivedUpdate();
		        } // Reset the work-in-progress list


		        dependencies.firstContext = null;
		      }
		    }
		  }
		}
		function readContext(context) {
		  {
		    // This warning would fire if you read context inside a Hook like useMemo.
		    // Unlike the class check below, it's not enforced in production for perf.
		    if (isDisallowedContextReadInDEV) {
		      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
		    }
		  }

		  var value =  context._currentValue ;

		  if (lastFullyObservedContext === context) ; else {
		    var contextItem = {
		      context: context,
		      memoizedValue: value,
		      next: null
		    };

		    if (lastContextDependency === null) {
		      if (currentlyRenderingFiber === null) {
		        throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
		      } // This is the first dependency for this component. Create a new list.


		      lastContextDependency = contextItem;
		      currentlyRenderingFiber.dependencies = {
		        lanes: NoLanes,
		        firstContext: contextItem
		      };
		    } else {
		      // Append a new context item.
		      lastContextDependency = lastContextDependency.next = contextItem;
		    }
		  }

		  return value;
		}

		// render. When this render exits, either because it finishes or because it is
		// interrupted, the interleaved updates will be transferred onto the main part
		// of the queue.

		var concurrentQueues = null;
		function pushConcurrentUpdateQueue(queue) {
		  if (concurrentQueues === null) {
		    concurrentQueues = [queue];
		  } else {
		    concurrentQueues.push(queue);
		  }
		}
		function finishQueueingConcurrentUpdates() {
		  // Transfer the interleaved updates onto the main queue. Each queue has a
		  // `pending` field and an `interleaved` field. When they are not null, they
		  // point to the last node in a circular linked list. We need to append the
		  // interleaved list to the end of the pending list by joining them into a
		  // single, circular list.
		  if (concurrentQueues !== null) {
		    for (var i = 0; i < concurrentQueues.length; i++) {
		      var queue = concurrentQueues[i];
		      var lastInterleavedUpdate = queue.interleaved;

		      if (lastInterleavedUpdate !== null) {
		        queue.interleaved = null;
		        var firstInterleavedUpdate = lastInterleavedUpdate.next;
		        var lastPendingUpdate = queue.pending;

		        if (lastPendingUpdate !== null) {
		          var firstPendingUpdate = lastPendingUpdate.next;
		          lastPendingUpdate.next = firstInterleavedUpdate;
		          lastInterleavedUpdate.next = firstPendingUpdate;
		        }

		        queue.pending = lastInterleavedUpdate;
		      }
		    }

		    concurrentQueues = null;
		  }
		}
		function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
		  var interleaved = queue.interleaved;

		  if (interleaved === null) {
		    // This is the first update. Create a circular list.
		    update.next = update; // At the end of the current render, this queue's interleaved updates will
		    // be transferred to the pending queue.

		    pushConcurrentUpdateQueue(queue);
		  } else {
		    update.next = interleaved.next;
		    interleaved.next = update;
		  }

		  queue.interleaved = update;
		  return markUpdateLaneFromFiberToRoot(fiber, lane);
		}
		function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
		  var interleaved = queue.interleaved;

		  if (interleaved === null) {
		    // This is the first update. Create a circular list.
		    update.next = update; // At the end of the current render, this queue's interleaved updates will
		    // be transferred to the pending queue.

		    pushConcurrentUpdateQueue(queue);
		  } else {
		    update.next = interleaved.next;
		    interleaved.next = update;
		  }

		  queue.interleaved = update;
		}
		function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
		  var interleaved = queue.interleaved;

		  if (interleaved === null) {
		    // This is the first update. Create a circular list.
		    update.next = update; // At the end of the current render, this queue's interleaved updates will
		    // be transferred to the pending queue.

		    pushConcurrentUpdateQueue(queue);
		  } else {
		    update.next = interleaved.next;
		    interleaved.next = update;
		  }

		  queue.interleaved = update;
		  return markUpdateLaneFromFiberToRoot(fiber, lane);
		}
		function enqueueConcurrentRenderForLane(fiber, lane) {
		  return markUpdateLaneFromFiberToRoot(fiber, lane);
		} // Calling this function outside this module should only be done for backwards
		// compatibility and should always be accompanied by a warning.

		var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;

		function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
		  // Update the source fiber's lanes
		  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
		  var alternate = sourceFiber.alternate;

		  if (alternate !== null) {
		    alternate.lanes = mergeLanes(alternate.lanes, lane);
		  }

		  {
		    if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
		      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
		    }
		  } // Walk the parent path to the root and update the child lanes.


		  var node = sourceFiber;
		  var parent = sourceFiber.return;

		  while (parent !== null) {
		    parent.childLanes = mergeLanes(parent.childLanes, lane);
		    alternate = parent.alternate;

		    if (alternate !== null) {
		      alternate.childLanes = mergeLanes(alternate.childLanes, lane);
		    } else {
		      {
		        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
		          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
		        }
		      }
		    }

		    node = parent;
		    parent = parent.return;
		  }

		  if (node.tag === HostRoot) {
		    var root = node.stateNode;
		    return root;
		  } else {
		    return null;
		  }
		}

		var UpdateState = 0;
		var ReplaceState = 1;
		var ForceUpdate = 2;
		var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
		// It should only be read right after calling `processUpdateQueue`, via
		// `checkHasForceUpdateAfterProcessing`.

		var hasForceUpdate = false;
		var didWarnUpdateInsideUpdate;
		var currentlyProcessingQueue;

		{
		  didWarnUpdateInsideUpdate = false;
		  currentlyProcessingQueue = null;
		}

		function initializeUpdateQueue(fiber) {
		  var queue = {
		    baseState: fiber.memoizedState,
		    firstBaseUpdate: null,
		    lastBaseUpdate: null,
		    shared: {
		      pending: null,
		      interleaved: null,
		      lanes: NoLanes
		    },
		    effects: null
		  };
		  fiber.updateQueue = queue;
		}
		function cloneUpdateQueue(current, workInProgress) {
		  // Clone the update queue from current. Unless it's already a clone.
		  var queue = workInProgress.updateQueue;
		  var currentQueue = current.updateQueue;

		  if (queue === currentQueue) {
		    var clone = {
		      baseState: currentQueue.baseState,
		      firstBaseUpdate: currentQueue.firstBaseUpdate,
		      lastBaseUpdate: currentQueue.lastBaseUpdate,
		      shared: currentQueue.shared,
		      effects: currentQueue.effects
		    };
		    workInProgress.updateQueue = clone;
		  }
		}
		function createUpdate(eventTime, lane) {
		  var update = {
		    eventTime: eventTime,
		    lane: lane,
		    tag: UpdateState,
		    payload: null,
		    callback: null,
		    next: null
		  };
		  return update;
		}
		function enqueueUpdate(fiber, update, lane) {
		  var updateQueue = fiber.updateQueue;

		  if (updateQueue === null) {
		    // Only occurs if the fiber has been unmounted.
		    return null;
		  }

		  var sharedQueue = updateQueue.shared;

		  {
		    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
		      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

		      didWarnUpdateInsideUpdate = true;
		    }
		  }

		  if (isUnsafeClassRenderPhaseUpdate()) {
		    // This is an unsafe render phase update. Add directly to the update
		    // queue so we can process it immediately during the current render.
		    var pending = sharedQueue.pending;

		    if (pending === null) {
		      // This is the first update. Create a circular list.
		      update.next = update;
		    } else {
		      update.next = pending.next;
		      pending.next = update;
		    }

		    sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering
		    // this fiber. This is for backwards compatibility in the case where you
		    // update a different component during render phase than the one that is
		    // currently renderings (a pattern that is accompanied by a warning).

		    return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
		  } else {
		    return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
		  }
		}
		function entangleTransitions(root, fiber, lane) {
		  var updateQueue = fiber.updateQueue;

		  if (updateQueue === null) {
		    // Only occurs if the fiber has been unmounted.
		    return;
		  }

		  var sharedQueue = updateQueue.shared;

		  if (isTransitionLane(lane)) {
		    var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must
		    // have finished. We can remove them from the shared queue, which represents
		    // a superset of the actually pending lanes. In some cases we may entangle
		    // more than we need to, but that's OK. In fact it's worse if we *don't*
		    // entangle when we should.

		    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.

		    var newQueueLanes = mergeLanes(queueLanes, lane);
		    sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
		    // the lane finished since the last time we entangled it. So we need to
		    // entangle it again, just to be sure.

		    markRootEntangled(root, newQueueLanes);
		  }
		}
		function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
		  // Captured updates are updates that are thrown by a child during the render
		  // phase. They should be discarded if the render is aborted. Therefore,
		  // we should only put them on the work-in-progress queue, not the current one.
		  var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.

		  var current = workInProgress.alternate;

		  if (current !== null) {
		    var currentQueue = current.updateQueue;

		    if (queue === currentQueue) {
		      // The work-in-progress queue is the same as current. This happens when
		      // we bail out on a parent fiber that then captures an error thrown by
		      // a child. Since we want to append the update only to the work-in
		      // -progress queue, we need to clone the updates. We usually clone during
		      // processUpdateQueue, but that didn't happen in this case because we
		      // skipped over the parent when we bailed out.
		      var newFirst = null;
		      var newLast = null;
		      var firstBaseUpdate = queue.firstBaseUpdate;

		      if (firstBaseUpdate !== null) {
		        // Loop through the updates and clone them.
		        var update = firstBaseUpdate;

		        do {
		          var clone = {
		            eventTime: update.eventTime,
		            lane: update.lane,
		            tag: update.tag,
		            payload: update.payload,
		            callback: update.callback,
		            next: null
		          };

		          if (newLast === null) {
		            newFirst = newLast = clone;
		          } else {
		            newLast.next = clone;
		            newLast = clone;
		          }

		          update = update.next;
		        } while (update !== null); // Append the captured update the end of the cloned list.


		        if (newLast === null) {
		          newFirst = newLast = capturedUpdate;
		        } else {
		          newLast.next = capturedUpdate;
		          newLast = capturedUpdate;
		        }
		      } else {
		        // There are no base updates.
		        newFirst = newLast = capturedUpdate;
		      }

		      queue = {
		        baseState: currentQueue.baseState,
		        firstBaseUpdate: newFirst,
		        lastBaseUpdate: newLast,
		        shared: currentQueue.shared,
		        effects: currentQueue.effects
		      };
		      workInProgress.updateQueue = queue;
		      return;
		    }
		  } // Append the update to the end of the list.


		  var lastBaseUpdate = queue.lastBaseUpdate;

		  if (lastBaseUpdate === null) {
		    queue.firstBaseUpdate = capturedUpdate;
		  } else {
		    lastBaseUpdate.next = capturedUpdate;
		  }

		  queue.lastBaseUpdate = capturedUpdate;
		}

		function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
		  switch (update.tag) {
		    case ReplaceState:
		      {
		        var payload = update.payload;

		        if (typeof payload === 'function') {
		          // Updater function
		          {
		            enterDisallowedContextReadInDEV();
		          }

		          var nextState = payload.call(instance, prevState, nextProps);

		          {
		            if ( workInProgress.mode & StrictLegacyMode) {
		              setIsStrictModeForDevtools(true);

		              try {
		                payload.call(instance, prevState, nextProps);
		              } finally {
		                setIsStrictModeForDevtools(false);
		              }
		            }

		            exitDisallowedContextReadInDEV();
		          }

		          return nextState;
		        } // State object


		        return payload;
		      }

		    case CaptureUpdate:
		      {
		        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
		      }
		    // Intentional fallthrough

		    case UpdateState:
		      {
		        var _payload = update.payload;
		        var partialState;

		        if (typeof _payload === 'function') {
		          // Updater function
		          {
		            enterDisallowedContextReadInDEV();
		          }

		          partialState = _payload.call(instance, prevState, nextProps);

		          {
		            if ( workInProgress.mode & StrictLegacyMode) {
		              setIsStrictModeForDevtools(true);

		              try {
		                _payload.call(instance, prevState, nextProps);
		              } finally {
		                setIsStrictModeForDevtools(false);
		              }
		            }

		            exitDisallowedContextReadInDEV();
		          }
		        } else {
		          // Partial state object
		          partialState = _payload;
		        }

		        if (partialState === null || partialState === undefined) {
		          // Null and undefined are treated as no-ops.
		          return prevState;
		        } // Merge the partial state and the previous state.


		        return assign({}, prevState, partialState);
		      }

		    case ForceUpdate:
		      {
		        hasForceUpdate = true;
		        return prevState;
		      }
		  }

		  return prevState;
		}

		function processUpdateQueue(workInProgress, props, instance, renderLanes) {
		  // This is always non-null on a ClassComponent or HostRoot
		  var queue = workInProgress.updateQueue;
		  hasForceUpdate = false;

		  {
		    currentlyProcessingQueue = queue.shared;
		  }

		  var firstBaseUpdate = queue.firstBaseUpdate;
		  var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.

		  var pendingQueue = queue.shared.pending;

		  if (pendingQueue !== null) {
		    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
		    // and last so that it's non-circular.

		    var lastPendingUpdate = pendingQueue;
		    var firstPendingUpdate = lastPendingUpdate.next;
		    lastPendingUpdate.next = null; // Append pending updates to base queue

		    if (lastBaseUpdate === null) {
		      firstBaseUpdate = firstPendingUpdate;
		    } else {
		      lastBaseUpdate.next = firstPendingUpdate;
		    }

		    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
		    // we need to transfer the updates to that queue, too. Because the base
		    // queue is a singly-linked list with no cycles, we can append to both
		    // lists and take advantage of structural sharing.
		    // TODO: Pass `current` as argument

		    var current = workInProgress.alternate;

		    if (current !== null) {
		      // This is always non-null on a ClassComponent or HostRoot
		      var currentQueue = current.updateQueue;
		      var currentLastBaseUpdate = currentQueue.lastBaseUpdate;

		      if (currentLastBaseUpdate !== lastBaseUpdate) {
		        if (currentLastBaseUpdate === null) {
		          currentQueue.firstBaseUpdate = firstPendingUpdate;
		        } else {
		          currentLastBaseUpdate.next = firstPendingUpdate;
		        }

		        currentQueue.lastBaseUpdate = lastPendingUpdate;
		      }
		    }
		  } // These values may change as we process the queue.


		  if (firstBaseUpdate !== null) {
		    // Iterate through the list of updates to compute the result.
		    var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
		    // from the original lanes.

		    var newLanes = NoLanes;
		    var newBaseState = null;
		    var newFirstBaseUpdate = null;
		    var newLastBaseUpdate = null;
		    var update = firstBaseUpdate;

		    do {
		      var updateLane = update.lane;
		      var updateEventTime = update.eventTime;

		      if (!isSubsetOfLanes(renderLanes, updateLane)) {
		        // Priority is insufficient. Skip this update. If this is the first
		        // skipped update, the previous update/state is the new base
		        // update/state.
		        var clone = {
		          eventTime: updateEventTime,
		          lane: updateLane,
		          tag: update.tag,
		          payload: update.payload,
		          callback: update.callback,
		          next: null
		        };

		        if (newLastBaseUpdate === null) {
		          newFirstBaseUpdate = newLastBaseUpdate = clone;
		          newBaseState = newState;
		        } else {
		          newLastBaseUpdate = newLastBaseUpdate.next = clone;
		        } // Update the remaining priority in the queue.


		        newLanes = mergeLanes(newLanes, updateLane);
		      } else {
		        // This update does have sufficient priority.
		        if (newLastBaseUpdate !== null) {
		          var _clone = {
		            eventTime: updateEventTime,
		            // This update is going to be committed so we never want uncommit
		            // it. Using NoLane works because 0 is a subset of all bitmasks, so
		            // this will never be skipped by the check above.
		            lane: NoLane,
		            tag: update.tag,
		            payload: update.payload,
		            callback: update.callback,
		            next: null
		          };
		          newLastBaseUpdate = newLastBaseUpdate.next = _clone;
		        } // Process this update.


		        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
		        var callback = update.callback;

		        if (callback !== null && // If the update was already committed, we should not queue its
		        // callback again.
		        update.lane !== NoLane) {
		          workInProgress.flags |= Callback;
		          var effects = queue.effects;

		          if (effects === null) {
		            queue.effects = [update];
		          } else {
		            effects.push(update);
		          }
		        }
		      }

		      update = update.next;

		      if (update === null) {
		        pendingQueue = queue.shared.pending;

		        if (pendingQueue === null) {
		          break;
		        } else {
		          // An update was scheduled from inside a reducer. Add the new
		          // pending updates to the end of the list and keep processing.
		          var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
		          // unravel them when transferring them to the base queue.

		          var _firstPendingUpdate = _lastPendingUpdate.next;
		          _lastPendingUpdate.next = null;
		          update = _firstPendingUpdate;
		          queue.lastBaseUpdate = _lastPendingUpdate;
		          queue.shared.pending = null;
		        }
		      }
		    } while (true);

		    if (newLastBaseUpdate === null) {
		      newBaseState = newState;
		    }

		    queue.baseState = newBaseState;
		    queue.firstBaseUpdate = newFirstBaseUpdate;
		    queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to
		    // process them during this render, but we do need to track which lanes
		    // are remaining.

		    var lastInterleaved = queue.shared.interleaved;

		    if (lastInterleaved !== null) {
		      var interleaved = lastInterleaved;

		      do {
		        newLanes = mergeLanes(newLanes, interleaved.lane);
		        interleaved = interleaved.next;
		      } while (interleaved !== lastInterleaved);
		    } else if (firstBaseUpdate === null) {
		      // `queue.lanes` is used for entangling transitions. We can set it back to
		      // zero once the queue is empty.
		      queue.shared.lanes = NoLanes;
		    } // Set the remaining expiration time to be whatever is remaining in the queue.
		    // This should be fine because the only two other things that contribute to
		    // expiration time are props and context. We're already in the middle of the
		    // begin phase by the time we start processing the queue, so we've already
		    // dealt with the props. Context in components that specify
		    // shouldComponentUpdate is tricky; but we'll have to account for
		    // that regardless.


		    markSkippedUpdateLanes(newLanes);
		    workInProgress.lanes = newLanes;
		    workInProgress.memoizedState = newState;
		  }

		  {
		    currentlyProcessingQueue = null;
		  }
		}

		function callCallback(callback, context) {
		  if (typeof callback !== 'function') {
		    throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + ("received: " + callback));
		  }

		  callback.call(context);
		}

		function resetHasForceUpdateBeforeProcessing() {
		  hasForceUpdate = false;
		}
		function checkHasForceUpdateAfterProcessing() {
		  return hasForceUpdate;
		}
		function commitUpdateQueue(finishedWork, finishedQueue, instance) {
		  // Commit the effects
		  var effects = finishedQueue.effects;
		  finishedQueue.effects = null;

		  if (effects !== null) {
		    for (var i = 0; i < effects.length; i++) {
		      var effect = effects[i];
		      var callback = effect.callback;

		      if (callback !== null) {
		        effect.callback = null;
		        callCallback(callback, instance);
		      }
		    }
		  }
		}

		var fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.
		// We'll use it to determine whether we need to initialize legacy refs.

		var emptyRefsObject = new React.Component().refs;
		var didWarnAboutStateAssignmentForComponent;
		var didWarnAboutUninitializedState;
		var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
		var didWarnAboutLegacyLifecyclesAndDerivedState;
		var didWarnAboutUndefinedDerivedState;
		var warnOnUndefinedDerivedState;
		var warnOnInvalidCallback;
		var didWarnAboutDirectlyAssigningPropsToState;
		var didWarnAboutContextTypeAndContextTypes;
		var didWarnAboutInvalidateContextType;

		{
		  didWarnAboutStateAssignmentForComponent = new Set();
		  didWarnAboutUninitializedState = new Set();
		  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
		  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
		  didWarnAboutDirectlyAssigningPropsToState = new Set();
		  didWarnAboutUndefinedDerivedState = new Set();
		  didWarnAboutContextTypeAndContextTypes = new Set();
		  didWarnAboutInvalidateContextType = new Set();
		  var didWarnOnInvalidCallback = new Set();

		  warnOnInvalidCallback = function (callback, callerName) {
		    if (callback === null || typeof callback === 'function') {
		      return;
		    }

		    var key = callerName + '_' + callback;

		    if (!didWarnOnInvalidCallback.has(key)) {
		      didWarnOnInvalidCallback.add(key);

		      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
		    }
		  };

		  warnOnUndefinedDerivedState = function (type, partialState) {
		    if (partialState === undefined) {
		      var componentName = getComponentNameFromType(type) || 'Component';

		      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
		        didWarnAboutUndefinedDerivedState.add(componentName);

		        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
		      }
		    }
		  }; // This is so gross but it's at least non-critical and can be removed if
		  // it causes problems. This is meant to give a nicer error message for
		  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
		  // ...)) which otherwise throws a "_processChildContext is not a function"
		  // exception.


		  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
		    enumerable: false,
		    value: function () {
		      throw new Error('_processChildContext is not available in React 16+. This likely ' + 'means you have multiple copies of React and are attempting to nest ' + 'a React 15 tree inside a React 16 tree using ' + "unstable_renderSubtreeIntoContainer, which isn't supported. Try " + 'to make sure you have only one copy of React (and ideally, switch ' + 'to ReactDOM.createPortal).');
		    }
		  });
		  Object.freeze(fakeInternalInstance);
		}

		function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
		  var prevState = workInProgress.memoizedState;
		  var partialState = getDerivedStateFromProps(nextProps, prevState);

		  {
		    if ( workInProgress.mode & StrictLegacyMode) {
		      setIsStrictModeForDevtools(true);

		      try {
		        // Invoke the function an extra time to help detect side-effects.
		        partialState = getDerivedStateFromProps(nextProps, prevState);
		      } finally {
		        setIsStrictModeForDevtools(false);
		      }
		    }

		    warnOnUndefinedDerivedState(ctor, partialState);
		  } // Merge the partial state and the previous state.


		  var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
		  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
		  // base state.

		  if (workInProgress.lanes === NoLanes) {
		    // Queue is always non-null for classes
		    var updateQueue = workInProgress.updateQueue;
		    updateQueue.baseState = memoizedState;
		  }
		}

		var classComponentUpdater = {
		  isMounted: isMounted,
		  enqueueSetState: function (inst, payload, callback) {
		    var fiber = get(inst);
		    var eventTime = requestEventTime();
		    var lane = requestUpdateLane(fiber);
		    var update = createUpdate(eventTime, lane);
		    update.payload = payload;

		    if (callback !== undefined && callback !== null) {
		      {
		        warnOnInvalidCallback(callback, 'setState');
		      }

		      update.callback = callback;
		    }

		    var root = enqueueUpdate(fiber, update, lane);

		    if (root !== null) {
		      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
		      entangleTransitions(root, fiber, lane);
		    }

		    {
		      markStateUpdateScheduled(fiber, lane);
		    }
		  },
		  enqueueReplaceState: function (inst, payload, callback) {
		    var fiber = get(inst);
		    var eventTime = requestEventTime();
		    var lane = requestUpdateLane(fiber);
		    var update = createUpdate(eventTime, lane);
		    update.tag = ReplaceState;
		    update.payload = payload;

		    if (callback !== undefined && callback !== null) {
		      {
		        warnOnInvalidCallback(callback, 'replaceState');
		      }

		      update.callback = callback;
		    }

		    var root = enqueueUpdate(fiber, update, lane);

		    if (root !== null) {
		      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
		      entangleTransitions(root, fiber, lane);
		    }

		    {
		      markStateUpdateScheduled(fiber, lane);
		    }
		  },
		  enqueueForceUpdate: function (inst, callback) {
		    var fiber = get(inst);
		    var eventTime = requestEventTime();
		    var lane = requestUpdateLane(fiber);
		    var update = createUpdate(eventTime, lane);
		    update.tag = ForceUpdate;

		    if (callback !== undefined && callback !== null) {
		      {
		        warnOnInvalidCallback(callback, 'forceUpdate');
		      }

		      update.callback = callback;
		    }

		    var root = enqueueUpdate(fiber, update, lane);

		    if (root !== null) {
		      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
		      entangleTransitions(root, fiber, lane);
		    }

		    {
		      markForceUpdateScheduled(fiber, lane);
		    }
		  }
		};

		function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
		  var instance = workInProgress.stateNode;

		  if (typeof instance.shouldComponentUpdate === 'function') {
		    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);

		    {
		      if ( workInProgress.mode & StrictLegacyMode) {
		        setIsStrictModeForDevtools(true);

		        try {
		          // Invoke the function an extra time to help detect side-effects.
		          shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
		        } finally {
		          setIsStrictModeForDevtools(false);
		        }
		      }

		      if (shouldUpdate === undefined) {
		        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentNameFromType(ctor) || 'Component');
		      }
		    }

		    return shouldUpdate;
		  }

		  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
		    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
		  }

		  return true;
		}

		function checkClassInstance(workInProgress, ctor, newProps) {
		  var instance = workInProgress.stateNode;

		  {
		    var name = getComponentNameFromType(ctor) || 'Component';
		    var renderPresent = instance.render;

		    if (!renderPresent) {
		      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
		        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
		      } else {
		        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
		      }
		    }

		    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
		      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
		    }

		    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
		      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
		    }

		    if (instance.propTypes) {
		      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
		    }

		    if (instance.contextType) {
		      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
		    }

		    {
		      if (instance.contextTypes) {
		        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
		      }

		      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
		        didWarnAboutContextTypeAndContextTypes.add(ctor);

		        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
		      }
		    }

		    if (typeof instance.componentShouldUpdate === 'function') {
		      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
		    }

		    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
		      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');
		    }

		    if (typeof instance.componentDidUnmount === 'function') {
		      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
		    }

		    if (typeof instance.componentDidReceiveProps === 'function') {
		      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
		    }

		    if (typeof instance.componentWillRecieveProps === 'function') {
		      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
		    }

		    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
		      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
		    }

		    var hasMutatedProps = instance.props !== newProps;

		    if (instance.props !== undefined && hasMutatedProps) {
		      error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
		    }

		    if (instance.defaultProps) {
		      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
		    }

		    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
		      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

		      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));
		    }

		    if (typeof instance.getDerivedStateFromProps === 'function') {
		      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
		    }

		    if (typeof instance.getDerivedStateFromError === 'function') {
		      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
		    }

		    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
		      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
		    }

		    var _state = instance.state;

		    if (_state && (typeof _state !== 'object' || isArray(_state))) {
		      error('%s.state: must be set to an object or null', name);
		    }

		    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
		      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
		    }
		  }
		}

		function adoptClassInstance(workInProgress, instance) {
		  instance.updater = classComponentUpdater;
		  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

		  set(instance, workInProgress);

		  {
		    instance._reactInternalInstance = fakeInternalInstance;
		  }
		}

		function constructClassInstance(workInProgress, ctor, props) {
		  var isLegacyContextConsumer = false;
		  var unmaskedContext = emptyContextObject;
		  var context = emptyContextObject;
		  var contextType = ctor.contextType;

		  {
		    if ('contextType' in ctor) {
		      var isValid = // Allow null for conditional declaration
		      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

		      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
		        didWarnAboutInvalidateContextType.add(ctor);
		        var addendum = '';

		        if (contextType === undefined) {
		          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
		        } else if (typeof contextType !== 'object') {
		          addendum = ' However, it is set to a ' + typeof contextType + '.';
		        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
		          addendum = ' Did you accidentally pass the Context.Provider instead?';
		        } else if (contextType._context !== undefined) {
		          // <Context.Consumer>
		          addendum = ' Did you accidentally pass the Context.Consumer instead?';
		        } else {
		          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
		        }

		        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);
		      }
		    }
		  }

		  if (typeof contextType === 'object' && contextType !== null) {
		    context = readContext(contextType);
		  } else {
		    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
		    var contextTypes = ctor.contextTypes;
		    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
		    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
		  }

		  var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.

		  {
		    if ( workInProgress.mode & StrictLegacyMode) {
		      setIsStrictModeForDevtools(true);

		      try {
		        instance = new ctor(props, context); // eslint-disable-line no-new
		      } finally {
		        setIsStrictModeForDevtools(false);
		      }
		    }
		  }

		  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
		  adoptClassInstance(workInProgress, instance);

		  {
		    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
		      var componentName = getComponentNameFromType(ctor) || 'Component';

		      if (!didWarnAboutUninitializedState.has(componentName)) {
		        didWarnAboutUninitializedState.add(componentName);

		        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
		      }
		    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
		    // Warn about these lifecycles if they are present.
		    // Don't warn about react-lifecycles-compat polyfilled methods though.


		    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
		      var foundWillMountName = null;
		      var foundWillReceivePropsName = null;
		      var foundWillUpdateName = null;

		      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
		        foundWillMountName = 'componentWillMount';
		      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
		        foundWillMountName = 'UNSAFE_componentWillMount';
		      }

		      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
		        foundWillReceivePropsName = 'componentWillReceiveProps';
		      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
		        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
		      }

		      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
		        foundWillUpdateName = 'componentWillUpdate';
		      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
		        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
		      }

		      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
		        var _componentName = getComponentNameFromType(ctor) || 'Component';

		        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

		        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
		          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

		          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
		        }
		      }
		    }
		  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
		  // ReactFiberContext usually updates this cache but can't for newly-created instances.


		  if (isLegacyContextConsumer) {
		    cacheContext(workInProgress, unmaskedContext, context);
		  }

		  return instance;
		}

		function callComponentWillMount(workInProgress, instance) {
		  var oldState = instance.state;

		  if (typeof instance.componentWillMount === 'function') {
		    instance.componentWillMount();
		  }

		  if (typeof instance.UNSAFE_componentWillMount === 'function') {
		    instance.UNSAFE_componentWillMount();
		  }

		  if (oldState !== instance.state) {
		    {
		      error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentNameFromFiber(workInProgress) || 'Component');
		    }

		    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
		  }
		}

		function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
		  var oldState = instance.state;

		  if (typeof instance.componentWillReceiveProps === 'function') {
		    instance.componentWillReceiveProps(newProps, nextContext);
		  }

		  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
		    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
		  }

		  if (instance.state !== oldState) {
		    {
		      var componentName = getComponentNameFromFiber(workInProgress) || 'Component';

		      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
		        didWarnAboutStateAssignmentForComponent.add(componentName);

		        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
		      }
		    }

		    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
		  }
		} // Invokes the mount life-cycles on a previously never rendered instance.


		function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
		  {
		    checkClassInstance(workInProgress, ctor, newProps);
		  }

		  var instance = workInProgress.stateNode;
		  instance.props = newProps;
		  instance.state = workInProgress.memoizedState;
		  instance.refs = emptyRefsObject;
		  initializeUpdateQueue(workInProgress);
		  var contextType = ctor.contextType;

		  if (typeof contextType === 'object' && contextType !== null) {
		    instance.context = readContext(contextType);
		  } else {
		    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
		    instance.context = getMaskedContext(workInProgress, unmaskedContext);
		  }

		  {
		    if (instance.state === newProps) {
		      var componentName = getComponentNameFromType(ctor) || 'Component';

		      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
		        didWarnAboutDirectlyAssigningPropsToState.add(componentName);

		        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
		      }
		    }

		    if (workInProgress.mode & StrictLegacyMode) {
		      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
		    }

		    {
		      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
		    }
		  }

		  instance.state = workInProgress.memoizedState;
		  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

		  if (typeof getDerivedStateFromProps === 'function') {
		    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
		    instance.state = workInProgress.memoizedState;
		  } // In order to support react-lifecycles-compat polyfilled components,
		  // Unsafe lifecycles should not be invoked for components using the new APIs.


		  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
		    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
		    // process them now.

		    processUpdateQueue(workInProgress, newProps, instance, renderLanes);
		    instance.state = workInProgress.memoizedState;
		  }

		  if (typeof instance.componentDidMount === 'function') {
		    var fiberFlags = Update;

		    {
		      fiberFlags |= LayoutStatic;
		    }

		    if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
		      fiberFlags |= MountLayoutDev;
		    }

		    workInProgress.flags |= fiberFlags;
		  }
		}

		function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
		  var instance = workInProgress.stateNode;
		  var oldProps = workInProgress.memoizedProps;
		  instance.props = oldProps;
		  var oldContext = instance.context;
		  var contextType = ctor.contextType;
		  var nextContext = emptyContextObject;

		  if (typeof contextType === 'object' && contextType !== null) {
		    nextContext = readContext(contextType);
		  } else {
		    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
		    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
		  }

		  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
		  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
		  // ever the previously attempted to render - not the "current". However,
		  // during componentDidUpdate we pass the "current" props.
		  // In order to support react-lifecycles-compat polyfilled components,
		  // Unsafe lifecycles should not be invoked for components using the new APIs.

		  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
		    if (oldProps !== newProps || oldContext !== nextContext) {
		      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
		    }
		  }

		  resetHasForceUpdateBeforeProcessing();
		  var oldState = workInProgress.memoizedState;
		  var newState = instance.state = oldState;
		  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
		  newState = workInProgress.memoizedState;

		  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
		    // If an update was already in progress, we should schedule an Update
		    // effect even though we're bailing out, so that cWU/cDU are called.
		    if (typeof instance.componentDidMount === 'function') {
		      var fiberFlags = Update;

		      {
		        fiberFlags |= LayoutStatic;
		      }

		      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
		        fiberFlags |= MountLayoutDev;
		      }

		      workInProgress.flags |= fiberFlags;
		    }

		    return false;
		  }

		  if (typeof getDerivedStateFromProps === 'function') {
		    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
		    newState = workInProgress.memoizedState;
		  }

		  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

		  if (shouldUpdate) {
		    // In order to support react-lifecycles-compat polyfilled components,
		    // Unsafe lifecycles should not be invoked for components using the new APIs.
		    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
		      if (typeof instance.componentWillMount === 'function') {
		        instance.componentWillMount();
		      }

		      if (typeof instance.UNSAFE_componentWillMount === 'function') {
		        instance.UNSAFE_componentWillMount();
		      }
		    }

		    if (typeof instance.componentDidMount === 'function') {
		      var _fiberFlags = Update;

		      {
		        _fiberFlags |= LayoutStatic;
		      }

		      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
		        _fiberFlags |= MountLayoutDev;
		      }

		      workInProgress.flags |= _fiberFlags;
		    }
		  } else {
		    // If an update was already in progress, we should schedule an Update
		    // effect even though we're bailing out, so that cWU/cDU are called.
		    if (typeof instance.componentDidMount === 'function') {
		      var _fiberFlags2 = Update;

		      {
		        _fiberFlags2 |= LayoutStatic;
		      }

		      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
		        _fiberFlags2 |= MountLayoutDev;
		      }

		      workInProgress.flags |= _fiberFlags2;
		    } // If shouldComponentUpdate returned false, we should still update the
		    // memoized state to indicate that this work can be reused.


		    workInProgress.memoizedProps = newProps;
		    workInProgress.memoizedState = newState;
		  } // Update the existing instance's state, props, and context pointers even
		  // if shouldComponentUpdate returns false.


		  instance.props = newProps;
		  instance.state = newState;
		  instance.context = nextContext;
		  return shouldUpdate;
		} // Invokes the update life-cycles and returns false if it shouldn't rerender.


		function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
		  var instance = workInProgress.stateNode;
		  cloneUpdateQueue(current, workInProgress);
		  var unresolvedOldProps = workInProgress.memoizedProps;
		  var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
		  instance.props = oldProps;
		  var unresolvedNewProps = workInProgress.pendingProps;
		  var oldContext = instance.context;
		  var contextType = ctor.contextType;
		  var nextContext = emptyContextObject;

		  if (typeof contextType === 'object' && contextType !== null) {
		    nextContext = readContext(contextType);
		  } else {
		    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
		    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
		  }

		  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
		  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
		  // ever the previously attempted to render - not the "current". However,
		  // during componentDidUpdate we pass the "current" props.
		  // In order to support react-lifecycles-compat polyfilled components,
		  // Unsafe lifecycles should not be invoked for components using the new APIs.

		  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
		    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
		      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
		    }
		  }

		  resetHasForceUpdateBeforeProcessing();
		  var oldState = workInProgress.memoizedState;
		  var newState = instance.state = oldState;
		  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
		  newState = workInProgress.memoizedState;

		  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !(enableLazyContextPropagation   )) {
		    // If an update was already in progress, we should schedule an Update
		    // effect even though we're bailing out, so that cWU/cDU are called.
		    if (typeof instance.componentDidUpdate === 'function') {
		      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
		        workInProgress.flags |= Update;
		      }
		    }

		    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
		      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
		        workInProgress.flags |= Snapshot;
		      }
		    }

		    return false;
		  }

		  if (typeof getDerivedStateFromProps === 'function') {
		    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
		    newState = workInProgress.memoizedState;
		  }

		  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
		  // both before and after `shouldComponentUpdate` has been called. Not ideal,
		  // but I'm loath to refactor this function. This only happens for memoized
		  // components so it's not that common.
		  enableLazyContextPropagation   ;

		  if (shouldUpdate) {
		    // In order to support react-lifecycles-compat polyfilled components,
		    // Unsafe lifecycles should not be invoked for components using the new APIs.
		    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
		      if (typeof instance.componentWillUpdate === 'function') {
		        instance.componentWillUpdate(newProps, newState, nextContext);
		      }

		      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
		        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
		      }
		    }

		    if (typeof instance.componentDidUpdate === 'function') {
		      workInProgress.flags |= Update;
		    }

		    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
		      workInProgress.flags |= Snapshot;
		    }
		  } else {
		    // If an update was already in progress, we should schedule an Update
		    // effect even though we're bailing out, so that cWU/cDU are called.
		    if (typeof instance.componentDidUpdate === 'function') {
		      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
		        workInProgress.flags |= Update;
		      }
		    }

		    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
		      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
		        workInProgress.flags |= Snapshot;
		      }
		    } // If shouldComponentUpdate returned false, we should still update the
		    // memoized props/state to indicate that this work can be reused.


		    workInProgress.memoizedProps = newProps;
		    workInProgress.memoizedState = newState;
		  } // Update the existing instance's state, props, and context pointers even
		  // if shouldComponentUpdate returns false.


		  instance.props = newProps;
		  instance.state = newState;
		  instance.context = nextContext;
		  return shouldUpdate;
		}

		var didWarnAboutMaps;
		var didWarnAboutGenerators;
		var didWarnAboutStringRefs;
		var ownerHasKeyUseWarning;
		var ownerHasFunctionTypeWarning;

		var warnForMissingKey = function (child, returnFiber) {};

		{
		  didWarnAboutMaps = false;
		  didWarnAboutGenerators = false;
		  didWarnAboutStringRefs = {};
		  /**
		   * Warn if there's no key explicitly set on dynamic arrays of children or
		   * object keys are not valid. This allows us to keep track of children between
		   * updates.
		   */

		  ownerHasKeyUseWarning = {};
		  ownerHasFunctionTypeWarning = {};

		  warnForMissingKey = function (child, returnFiber) {
		    if (child === null || typeof child !== 'object') {
		      return;
		    }

		    if (!child._store || child._store.validated || child.key != null) {
		      return;
		    }

		    if (typeof child._store !== 'object') {
		      throw new Error('React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');
		    }

		    child._store.validated = true;
		    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

		    if (ownerHasKeyUseWarning[componentName]) {
		      return;
		    }

		    ownerHasKeyUseWarning[componentName] = true;

		    error('Each child in a list should have a unique ' + '"key" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');
		  };
		}

		function coerceRef(returnFiber, current, element) {
		  var mixedRef = element.ref;

		  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
		    {
		      // TODO: Clean this up once we turn on the string ref warning for
		      // everyone, because the strict mode case will no longer be relevant
		      if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
		      // because these cannot be automatically converted to an arrow function
		      // using a codemod. Therefore, we don't have to warn about string refs again.
		      !(element._owner && element._self && element._owner.stateNode !== element._self)) {
		        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

		        if (!didWarnAboutStringRefs[componentName]) {
		          {
		            error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);
		          }

		          didWarnAboutStringRefs[componentName] = true;
		        }
		      }
		    }

		    if (element._owner) {
		      var owner = element._owner;
		      var inst;

		      if (owner) {
		        var ownerFiber = owner;

		        if (ownerFiber.tag !== ClassComponent) {
		          throw new Error('Function components cannot have string refs. ' + 'We recommend using useRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref');
		        }

		        inst = ownerFiber.stateNode;
		      }

		      if (!inst) {
		        throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a " + 'bug in React. Please file an issue.');
		      } // Assigning this to a const so Flow knows it won't change in the closure


		      var resolvedInst = inst;

		      {
		        checkPropStringCoercion(mixedRef, 'ref');
		      }

		      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

		      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
		        return current.ref;
		      }

		      var ref = function (value) {
		        var refs = resolvedInst.refs;

		        if (refs === emptyRefsObject) {
		          // This is a lazy pooled frozen object, so we need to initialize.
		          refs = resolvedInst.refs = {};
		        }

		        if (value === null) {
		          delete refs[stringRef];
		        } else {
		          refs[stringRef] = value;
		        }
		      };

		      ref._stringRef = stringRef;
		      return ref;
		    } else {
		      if (typeof mixedRef !== 'string') {
		        throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');
		      }

		      if (!element._owner) {
		        throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of" + ' the following reasons:\n' + '1. You may be adding a ref to a function component\n' + "2. You may be adding a ref to a component that was not created inside a component's render method\n" + '3. You have multiple copies of React loaded\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');
		      }
		    }
		  }

		  return mixedRef;
		}

		function throwOnInvalidObjectType(returnFiber, newChild) {
		  var childString = Object.prototype.toString.call(newChild);
		  throw new Error("Objects are not valid as a React child (found: " + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
		}

		function warnOnFunctionType(returnFiber) {
		  {
		    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

		    if (ownerHasFunctionTypeWarning[componentName]) {
		      return;
		    }

		    ownerHasFunctionTypeWarning[componentName] = true;

		    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
		  }
		}

		function resolveLazy(lazyType) {
		  var payload = lazyType._payload;
		  var init = lazyType._init;
		  return init(payload);
		} // This wrapper function exists because I expect to clone the code in each path
		// to be able to optimize each path individually by branching early. This needs
		// a compiler or we can do it manually. Helpers that don't need this branching
		// live outside of this function.


		function ChildReconciler(shouldTrackSideEffects) {
		  function deleteChild(returnFiber, childToDelete) {
		    if (!shouldTrackSideEffects) {
		      // Noop.
		      return;
		    }

		    var deletions = returnFiber.deletions;

		    if (deletions === null) {
		      returnFiber.deletions = [childToDelete];
		      returnFiber.flags |= ChildDeletion;
		    } else {
		      deletions.push(childToDelete);
		    }
		  }

		  function deleteRemainingChildren(returnFiber, currentFirstChild) {
		    if (!shouldTrackSideEffects) {
		      // Noop.
		      return null;
		    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
		    // assuming that after the first child we've already added everything.


		    var childToDelete = currentFirstChild;

		    while (childToDelete !== null) {
		      deleteChild(returnFiber, childToDelete);
		      childToDelete = childToDelete.sibling;
		    }

		    return null;
		  }

		  function mapRemainingChildren(returnFiber, currentFirstChild) {
		    // Add the remaining children to a temporary map so that we can find them by
		    // keys quickly. Implicit (null) keys get added to this set with their index
		    // instead.
		    var existingChildren = new Map();
		    var existingChild = currentFirstChild;

		    while (existingChild !== null) {
		      if (existingChild.key !== null) {
		        existingChildren.set(existingChild.key, existingChild);
		      } else {
		        existingChildren.set(existingChild.index, existingChild);
		      }

		      existingChild = existingChild.sibling;
		    }

		    return existingChildren;
		  }

		  function useFiber(fiber, pendingProps) {
		    // We currently set sibling to null and index to 0 here because it is easy
		    // to forget to do before returning it. E.g. for the single child case.
		    var clone = createWorkInProgress(fiber, pendingProps);
		    clone.index = 0;
		    clone.sibling = null;
		    return clone;
		  }

		  function placeChild(newFiber, lastPlacedIndex, newIndex) {
		    newFiber.index = newIndex;

		    if (!shouldTrackSideEffects) {
		      // During hydration, the useId algorithm needs to know which fibers are
		      // part of a list of children (arrays, iterators).
		      newFiber.flags |= Forked;
		      return lastPlacedIndex;
		    }

		    var current = newFiber.alternate;

		    if (current !== null) {
		      var oldIndex = current.index;

		      if (oldIndex < lastPlacedIndex) {
		        // This is a move.
		        newFiber.flags |= Placement;
		        return lastPlacedIndex;
		      } else {
		        // This item can stay in place.
		        return oldIndex;
		      }
		    } else {
		      // This is an insertion.
		      newFiber.flags |= Placement;
		      return lastPlacedIndex;
		    }
		  }

		  function placeSingleChild(newFiber) {
		    // This is simpler for the single child case. We only need to do a
		    // placement for inserting new children.
		    if (shouldTrackSideEffects && newFiber.alternate === null) {
		      newFiber.flags |= Placement;
		    }

		    return newFiber;
		  }

		  function updateTextNode(returnFiber, current, textContent, lanes) {
		    if (current === null || current.tag !== HostText) {
		      // Insert
		      var created = createFiberFromText(textContent, returnFiber.mode, lanes);
		      created.return = returnFiber;
		      return created;
		    } else {
		      // Update
		      var existing = useFiber(current, textContent);
		      existing.return = returnFiber;
		      return existing;
		    }
		  }

		  function updateElement(returnFiber, current, element, lanes) {
		    var elementType = element.type;

		    if (elementType === REACT_FRAGMENT_TYPE) {
		      return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
		    }

		    if (current !== null) {
		      if (current.elementType === elementType || ( // Keep this check inline so it only runs on the false path:
		       isCompatibleFamilyForHotReloading(current, element) ) || // Lazy types should reconcile their resolved type.
		      // We need to do this after the Hot Reloading check above,
		      // because hot reloading has different semantics than prod because
		      // it doesn't resuspend. So we can't let the call below suspend.
		      typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {
		        // Move based on index
		        var existing = useFiber(current, element.props);
		        existing.ref = coerceRef(returnFiber, current, element);
		        existing.return = returnFiber;

		        {
		          existing._debugSource = element._source;
		          existing._debugOwner = element._owner;
		        }

		        return existing;
		      }
		    } // Insert


		    var created = createFiberFromElement(element, returnFiber.mode, lanes);
		    created.ref = coerceRef(returnFiber, current, element);
		    created.return = returnFiber;
		    return created;
		  }

		  function updatePortal(returnFiber, current, portal, lanes) {
		    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
		      // Insert
		      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
		      created.return = returnFiber;
		      return created;
		    } else {
		      // Update
		      var existing = useFiber(current, portal.children || []);
		      existing.return = returnFiber;
		      return existing;
		    }
		  }

		  function updateFragment(returnFiber, current, fragment, lanes, key) {
		    if (current === null || current.tag !== Fragment) {
		      // Insert
		      var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
		      created.return = returnFiber;
		      return created;
		    } else {
		      // Update
		      var existing = useFiber(current, fragment);
		      existing.return = returnFiber;
		      return existing;
		    }
		  }

		  function createChild(returnFiber, newChild, lanes) {
		    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
		      // Text nodes don't have keys. If the previous node is implicitly keyed
		      // we can continue to replace it without aborting even if it is not a text
		      // node.
		      var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
		      created.return = returnFiber;
		      return created;
		    }

		    if (typeof newChild === 'object' && newChild !== null) {
		      switch (newChild.$$typeof) {
		        case REACT_ELEMENT_TYPE:
		          {
		            var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);

		            _created.ref = coerceRef(returnFiber, null, newChild);
		            _created.return = returnFiber;
		            return _created;
		          }

		        case REACT_PORTAL_TYPE:
		          {
		            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);

		            _created2.return = returnFiber;
		            return _created2;
		          }

		        case REACT_LAZY_TYPE:
		          {
		            var payload = newChild._payload;
		            var init = newChild._init;
		            return createChild(returnFiber, init(payload), lanes);
		          }
		      }

		      if (isArray(newChild) || getIteratorFn(newChild)) {
		        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);

		        _created3.return = returnFiber;
		        return _created3;
		      }

		      throwOnInvalidObjectType(returnFiber, newChild);
		    }

		    {
		      if (typeof newChild === 'function') {
		        warnOnFunctionType(returnFiber);
		      }
		    }

		    return null;
		  }

		  function updateSlot(returnFiber, oldFiber, newChild, lanes) {
		    // Update the fiber if the keys match, otherwise return null.
		    var key = oldFiber !== null ? oldFiber.key : null;

		    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
		      // Text nodes don't have keys. If the previous node is implicitly keyed
		      // we can continue to replace it without aborting even if it is not a text
		      // node.
		      if (key !== null) {
		        return null;
		      }

		      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
		    }

		    if (typeof newChild === 'object' && newChild !== null) {
		      switch (newChild.$$typeof) {
		        case REACT_ELEMENT_TYPE:
		          {
		            if (newChild.key === key) {
		              return updateElement(returnFiber, oldFiber, newChild, lanes);
		            } else {
		              return null;
		            }
		          }

		        case REACT_PORTAL_TYPE:
		          {
		            if (newChild.key === key) {
		              return updatePortal(returnFiber, oldFiber, newChild, lanes);
		            } else {
		              return null;
		            }
		          }

		        case REACT_LAZY_TYPE:
		          {
		            var payload = newChild._payload;
		            var init = newChild._init;
		            return updateSlot(returnFiber, oldFiber, init(payload), lanes);
		          }
		      }

		      if (isArray(newChild) || getIteratorFn(newChild)) {
		        if (key !== null) {
		          return null;
		        }

		        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
		      }

		      throwOnInvalidObjectType(returnFiber, newChild);
		    }

		    {
		      if (typeof newChild === 'function') {
		        warnOnFunctionType(returnFiber);
		      }
		    }

		    return null;
		  }

		  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
		    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
		      // Text nodes don't have keys, so we neither have to check the old nor
		      // new node for the key. If both are text nodes, they match.
		      var matchedFiber = existingChildren.get(newIdx) || null;
		      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
		    }

		    if (typeof newChild === 'object' && newChild !== null) {
		      switch (newChild.$$typeof) {
		        case REACT_ELEMENT_TYPE:
		          {
		            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

		            return updateElement(returnFiber, _matchedFiber, newChild, lanes);
		          }

		        case REACT_PORTAL_TYPE:
		          {
		            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

		            return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
		          }

		        case REACT_LAZY_TYPE:
		          var payload = newChild._payload;
		          var init = newChild._init;
		          return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
		      }

		      if (isArray(newChild) || getIteratorFn(newChild)) {
		        var _matchedFiber3 = existingChildren.get(newIdx) || null;

		        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
		      }

		      throwOnInvalidObjectType(returnFiber, newChild);
		    }

		    {
		      if (typeof newChild === 'function') {
		        warnOnFunctionType(returnFiber);
		      }
		    }

		    return null;
		  }
		  /**
		   * Warns if there is a duplicate or missing key
		   */


		  function warnOnInvalidKey(child, knownKeys, returnFiber) {
		    {
		      if (typeof child !== 'object' || child === null) {
		        return knownKeys;
		      }

		      switch (child.$$typeof) {
		        case REACT_ELEMENT_TYPE:
		        case REACT_PORTAL_TYPE:
		          warnForMissingKey(child, returnFiber);
		          var key = child.key;

		          if (typeof key !== 'string') {
		            break;
		          }

		          if (knownKeys === null) {
		            knownKeys = new Set();
		            knownKeys.add(key);
		            break;
		          }

		          if (!knownKeys.has(key)) {
		            knownKeys.add(key);
		            break;
		          }

		          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

		          break;

		        case REACT_LAZY_TYPE:
		          var payload = child._payload;
		          var init = child._init;
		          warnOnInvalidKey(init(payload), knownKeys, returnFiber);
		          break;
		      }
		    }

		    return knownKeys;
		  }

		  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
		    // This algorithm can't optimize by searching from both ends since we
		    // don't have backpointers on fibers. I'm trying to see how far we can get
		    // with that model. If it ends up not being worth the tradeoffs, we can
		    // add it later.
		    // Even with a two ended optimization, we'd want to optimize for the case
		    // where there are few changes and brute force the comparison instead of
		    // going for the Map. It'd like to explore hitting that path first in
		    // forward-only mode and only go for the Map once we notice that we need
		    // lots of look ahead. This doesn't handle reversal as well as two ended
		    // search but that's unusual. Besides, for the two ended optimization to
		    // work on Iterables, we'd need to copy the whole set.
		    // In this first iteration, we'll just live with hitting the bad case
		    // (adding everything to a Map) in for every insert/move.
		    // If you change this code, also update reconcileChildrenIterator() which
		    // uses the same algorithm.
		    {
		      // First, validate keys.
		      var knownKeys = null;

		      for (var i = 0; i < newChildren.length; i++) {
		        var child = newChildren[i];
		        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
		      }
		    }

		    var resultingFirstChild = null;
		    var previousNewFiber = null;
		    var oldFiber = currentFirstChild;
		    var lastPlacedIndex = 0;
		    var newIdx = 0;
		    var nextOldFiber = null;

		    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
		      if (oldFiber.index > newIdx) {
		        nextOldFiber = oldFiber;
		        oldFiber = null;
		      } else {
		        nextOldFiber = oldFiber.sibling;
		      }

		      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);

		      if (newFiber === null) {
		        // TODO: This breaks on empty slots like null children. That's
		        // unfortunate because it triggers the slow path all the time. We need
		        // a better way to communicate whether this was a miss or null,
		        // boolean, undefined, etc.
		        if (oldFiber === null) {
		          oldFiber = nextOldFiber;
		        }

		        break;
		      }

		      if (shouldTrackSideEffects) {
		        if (oldFiber && newFiber.alternate === null) {
		          // We matched the slot, but we didn't reuse the existing fiber, so we
		          // need to delete the existing child.
		          deleteChild(returnFiber, oldFiber);
		        }
		      }

		      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

		      if (previousNewFiber === null) {
		        // TODO: Move out of the loop. This only happens for the first run.
		        resultingFirstChild = newFiber;
		      } else {
		        // TODO: Defer siblings if we're not at the right index for this slot.
		        // I.e. if we had null values before, then we want to defer this
		        // for each null value. However, we also don't want to call updateSlot
		        // with the previous one.
		        previousNewFiber.sibling = newFiber;
		      }

		      previousNewFiber = newFiber;
		      oldFiber = nextOldFiber;
		    }

		    if (newIdx === newChildren.length) {
		      // We've reached the end of the new children. We can delete the rest.
		      deleteRemainingChildren(returnFiber, oldFiber);

		      if (getIsHydrating()) {
		        var numberOfForks = newIdx;
		        pushTreeFork(returnFiber, numberOfForks);
		      }

		      return resultingFirstChild;
		    }

		    if (oldFiber === null) {
		      // If we don't have any more existing children we can choose a fast path
		      // since the rest will all be insertions.
		      for (; newIdx < newChildren.length; newIdx++) {
		        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);

		        if (_newFiber === null) {
		          continue;
		        }

		        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

		        if (previousNewFiber === null) {
		          // TODO: Move out of the loop. This only happens for the first run.
		          resultingFirstChild = _newFiber;
		        } else {
		          previousNewFiber.sibling = _newFiber;
		        }

		        previousNewFiber = _newFiber;
		      }

		      if (getIsHydrating()) {
		        var _numberOfForks = newIdx;
		        pushTreeFork(returnFiber, _numberOfForks);
		      }

		      return resultingFirstChild;
		    } // Add all children to a key map for quick lookups.


		    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

		    for (; newIdx < newChildren.length; newIdx++) {
		      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);

		      if (_newFiber2 !== null) {
		        if (shouldTrackSideEffects) {
		          if (_newFiber2.alternate !== null) {
		            // The new fiber is a work in progress, but if there exists a
		            // current, that means that we reused the fiber. We need to delete
		            // it from the child list so that we don't add it to the deletion
		            // list.
		            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
		          }
		        }

		        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

		        if (previousNewFiber === null) {
		          resultingFirstChild = _newFiber2;
		        } else {
		          previousNewFiber.sibling = _newFiber2;
		        }

		        previousNewFiber = _newFiber2;
		      }
		    }

		    if (shouldTrackSideEffects) {
		      // Any existing children that weren't consumed above were deleted. We need
		      // to add them to the deletion list.
		      existingChildren.forEach(function (child) {
		        return deleteChild(returnFiber, child);
		      });
		    }

		    if (getIsHydrating()) {
		      var _numberOfForks2 = newIdx;
		      pushTreeFork(returnFiber, _numberOfForks2);
		    }

		    return resultingFirstChild;
		  }

		  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
		    // This is the same implementation as reconcileChildrenArray(),
		    // but using the iterator instead.
		    var iteratorFn = getIteratorFn(newChildrenIterable);

		    if (typeof iteratorFn !== 'function') {
		      throw new Error('An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');
		    }

		    {
		      // We don't support rendering Generators because it's a mutation.
		      // See https://github.com/facebook/react/issues/12995
		      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
		      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
		        if (!didWarnAboutGenerators) {
		          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
		        }

		        didWarnAboutGenerators = true;
		      } // Warn about using Maps as children


		      if (newChildrenIterable.entries === iteratorFn) {
		        if (!didWarnAboutMaps) {
		          error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
		        }

		        didWarnAboutMaps = true;
		      } // First, validate keys.
		      // We'll get a different iterator later for the main pass.


		      var _newChildren = iteratorFn.call(newChildrenIterable);

		      if (_newChildren) {
		        var knownKeys = null;

		        var _step = _newChildren.next();

		        for (; !_step.done; _step = _newChildren.next()) {
		          var child = _step.value;
		          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
		        }
		      }
		    }

		    var newChildren = iteratorFn.call(newChildrenIterable);

		    if (newChildren == null) {
		      throw new Error('An iterable object provided no iterator.');
		    }

		    var resultingFirstChild = null;
		    var previousNewFiber = null;
		    var oldFiber = currentFirstChild;
		    var lastPlacedIndex = 0;
		    var newIdx = 0;
		    var nextOldFiber = null;
		    var step = newChildren.next();

		    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
		      if (oldFiber.index > newIdx) {
		        nextOldFiber = oldFiber;
		        oldFiber = null;
		      } else {
		        nextOldFiber = oldFiber.sibling;
		      }

		      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);

		      if (newFiber === null) {
		        // TODO: This breaks on empty slots like null children. That's
		        // unfortunate because it triggers the slow path all the time. We need
		        // a better way to communicate whether this was a miss or null,
		        // boolean, undefined, etc.
		        if (oldFiber === null) {
		          oldFiber = nextOldFiber;
		        }

		        break;
		      }

		      if (shouldTrackSideEffects) {
		        if (oldFiber && newFiber.alternate === null) {
		          // We matched the slot, but we didn't reuse the existing fiber, so we
		          // need to delete the existing child.
		          deleteChild(returnFiber, oldFiber);
		        }
		      }

		      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

		      if (previousNewFiber === null) {
		        // TODO: Move out of the loop. This only happens for the first run.
		        resultingFirstChild = newFiber;
		      } else {
		        // TODO: Defer siblings if we're not at the right index for this slot.
		        // I.e. if we had null values before, then we want to defer this
		        // for each null value. However, we also don't want to call updateSlot
		        // with the previous one.
		        previousNewFiber.sibling = newFiber;
		      }

		      previousNewFiber = newFiber;
		      oldFiber = nextOldFiber;
		    }

		    if (step.done) {
		      // We've reached the end of the new children. We can delete the rest.
		      deleteRemainingChildren(returnFiber, oldFiber);

		      if (getIsHydrating()) {
		        var numberOfForks = newIdx;
		        pushTreeFork(returnFiber, numberOfForks);
		      }

		      return resultingFirstChild;
		    }

		    if (oldFiber === null) {
		      // If we don't have any more existing children we can choose a fast path
		      // since the rest will all be insertions.
		      for (; !step.done; newIdx++, step = newChildren.next()) {
		        var _newFiber3 = createChild(returnFiber, step.value, lanes);

		        if (_newFiber3 === null) {
		          continue;
		        }

		        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

		        if (previousNewFiber === null) {
		          // TODO: Move out of the loop. This only happens for the first run.
		          resultingFirstChild = _newFiber3;
		        } else {
		          previousNewFiber.sibling = _newFiber3;
		        }

		        previousNewFiber = _newFiber3;
		      }

		      if (getIsHydrating()) {
		        var _numberOfForks3 = newIdx;
		        pushTreeFork(returnFiber, _numberOfForks3);
		      }

		      return resultingFirstChild;
		    } // Add all children to a key map for quick lookups.


		    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

		    for (; !step.done; newIdx++, step = newChildren.next()) {
		      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);

		      if (_newFiber4 !== null) {
		        if (shouldTrackSideEffects) {
		          if (_newFiber4.alternate !== null) {
		            // The new fiber is a work in progress, but if there exists a
		            // current, that means that we reused the fiber. We need to delete
		            // it from the child list so that we don't add it to the deletion
		            // list.
		            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
		          }
		        }

		        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

		        if (previousNewFiber === null) {
		          resultingFirstChild = _newFiber4;
		        } else {
		          previousNewFiber.sibling = _newFiber4;
		        }

		        previousNewFiber = _newFiber4;
		      }
		    }

		    if (shouldTrackSideEffects) {
		      // Any existing children that weren't consumed above were deleted. We need
		      // to add them to the deletion list.
		      existingChildren.forEach(function (child) {
		        return deleteChild(returnFiber, child);
		      });
		    }

		    if (getIsHydrating()) {
		      var _numberOfForks4 = newIdx;
		      pushTreeFork(returnFiber, _numberOfForks4);
		    }

		    return resultingFirstChild;
		  }

		  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
		    // There's no need to check for keys on text nodes since we don't have a
		    // way to define them.
		    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
		      // We already have an existing node so let's just update it and delete
		      // the rest.
		      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
		      var existing = useFiber(currentFirstChild, textContent);
		      existing.return = returnFiber;
		      return existing;
		    } // The existing first child is not a text node so we need to create one
		    // and delete the existing ones.


		    deleteRemainingChildren(returnFiber, currentFirstChild);
		    var created = createFiberFromText(textContent, returnFiber.mode, lanes);
		    created.return = returnFiber;
		    return created;
		  }

		  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
		    var key = element.key;
		    var child = currentFirstChild;

		    while (child !== null) {
		      // TODO: If key === null and child.key === null, then this only applies to
		      // the first item in the list.
		      if (child.key === key) {
		        var elementType = element.type;

		        if (elementType === REACT_FRAGMENT_TYPE) {
		          if (child.tag === Fragment) {
		            deleteRemainingChildren(returnFiber, child.sibling);
		            var existing = useFiber(child, element.props.children);
		            existing.return = returnFiber;

		            {
		              existing._debugSource = element._source;
		              existing._debugOwner = element._owner;
		            }

		            return existing;
		          }
		        } else {
		          if (child.elementType === elementType || ( // Keep this check inline so it only runs on the false path:
		           isCompatibleFamilyForHotReloading(child, element) ) || // Lazy types should reconcile their resolved type.
		          // We need to do this after the Hot Reloading check above,
		          // because hot reloading has different semantics than prod because
		          // it doesn't resuspend. So we can't let the call below suspend.
		          typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
		            deleteRemainingChildren(returnFiber, child.sibling);

		            var _existing = useFiber(child, element.props);

		            _existing.ref = coerceRef(returnFiber, child, element);
		            _existing.return = returnFiber;

		            {
		              _existing._debugSource = element._source;
		              _existing._debugOwner = element._owner;
		            }

		            return _existing;
		          }
		        } // Didn't match.


		        deleteRemainingChildren(returnFiber, child);
		        break;
		      } else {
		        deleteChild(returnFiber, child);
		      }

		      child = child.sibling;
		    }

		    if (element.type === REACT_FRAGMENT_TYPE) {
		      var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
		      created.return = returnFiber;
		      return created;
		    } else {
		      var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);

		      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
		      _created4.return = returnFiber;
		      return _created4;
		    }
		  }

		  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
		    var key = portal.key;
		    var child = currentFirstChild;

		    while (child !== null) {
		      // TODO: If key === null and child.key === null, then this only applies to
		      // the first item in the list.
		      if (child.key === key) {
		        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
		          deleteRemainingChildren(returnFiber, child.sibling);
		          var existing = useFiber(child, portal.children || []);
		          existing.return = returnFiber;
		          return existing;
		        } else {
		          deleteRemainingChildren(returnFiber, child);
		          break;
		        }
		      } else {
		        deleteChild(returnFiber, child);
		      }

		      child = child.sibling;
		    }

		    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
		    created.return = returnFiber;
		    return created;
		  } // This API will tag the children with the side-effect of the reconciliation
		  // itself. They will be added to the side-effect list as we pass through the
		  // children and the parent.


		  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
		    // This function is not recursive.
		    // If the top level item is an array, we treat it as a set of children,
		    // not as a fragment. Nested arrays on the other hand will be treated as
		    // fragment nodes. Recursion happens at the normal flow.
		    // Handle top level unkeyed fragments as if they were arrays.
		    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
		    // We treat the ambiguous cases above the same.
		    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

		    if (isUnkeyedTopLevelFragment) {
		      newChild = newChild.props.children;
		    } // Handle object types


		    if (typeof newChild === 'object' && newChild !== null) {
		      switch (newChild.$$typeof) {
		        case REACT_ELEMENT_TYPE:
		          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));

		        case REACT_PORTAL_TYPE:
		          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));

		        case REACT_LAZY_TYPE:
		          var payload = newChild._payload;
		          var init = newChild._init; // TODO: This function is supposed to be non-recursive.

		          return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);
		      }

		      if (isArray(newChild)) {
		        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
		      }

		      if (getIteratorFn(newChild)) {
		        return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
		      }

		      throwOnInvalidObjectType(returnFiber, newChild);
		    }

		    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
		      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
		    }

		    {
		      if (typeof newChild === 'function') {
		        warnOnFunctionType(returnFiber);
		      }
		    } // Remaining cases are all treated as empty.


		    return deleteRemainingChildren(returnFiber, currentFirstChild);
		  }

		  return reconcileChildFibers;
		}

		var reconcileChildFibers = ChildReconciler(true);
		var mountChildFibers = ChildReconciler(false);
		function cloneChildFibers(current, workInProgress) {
		  if (current !== null && workInProgress.child !== current.child) {
		    throw new Error('Resuming work not yet implemented.');
		  }

		  if (workInProgress.child === null) {
		    return;
		  }

		  var currentChild = workInProgress.child;
		  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
		  workInProgress.child = newChild;
		  newChild.return = workInProgress;

		  while (currentChild.sibling !== null) {
		    currentChild = currentChild.sibling;
		    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
		    newChild.return = workInProgress;
		  }

		  newChild.sibling = null;
		} // Reset a workInProgress child set to prepare it for a second pass.

		function resetChildFibers(workInProgress, lanes) {
		  var child = workInProgress.child;

		  while (child !== null) {
		    resetWorkInProgress(child, lanes);
		    child = child.sibling;
		  }
		}

		var NO_CONTEXT = {};
		var contextStackCursor$1 = createCursor(NO_CONTEXT);
		var contextFiberStackCursor = createCursor(NO_CONTEXT);
		var rootInstanceStackCursor = createCursor(NO_CONTEXT);

		function requiredContext(c) {
		  if (c === NO_CONTEXT) {
		    throw new Error('Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');
		  }

		  return c;
		}

		function getRootHostContainer() {
		  var rootInstance = requiredContext(rootInstanceStackCursor.current);
		  return rootInstance;
		}

		function pushHostContainer(fiber, nextRootInstance) {
		  // Push current root instance onto the stack;
		  // This allows us to reset root when portals are popped.
		  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
		  // This enables us to pop only Fibers that provide unique contexts.

		  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
		  // However, we can't just call getRootHostContext() and push it because
		  // we'd have a different number of entries on the stack depending on
		  // whether getRootHostContext() throws somewhere in renderer code or not.
		  // So we push an empty value first. This lets us safely unwind on errors.

		  push(contextStackCursor$1, NO_CONTEXT, fiber);
		  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

		  pop(contextStackCursor$1, fiber);
		  push(contextStackCursor$1, nextRootContext, fiber);
		}

		function popHostContainer(fiber) {
		  pop(contextStackCursor$1, fiber);
		  pop(contextFiberStackCursor, fiber);
		  pop(rootInstanceStackCursor, fiber);
		}

		function getHostContext() {
		  var context = requiredContext(contextStackCursor$1.current);
		  return context;
		}

		function pushHostContext(fiber) {
		  requiredContext(rootInstanceStackCursor.current);
		  var context = requiredContext(contextStackCursor$1.current);
		  var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

		  if (context === nextContext) {
		    return;
		  } // Track the context and the Fiber that provided it.
		  // This enables us to pop only Fibers that provide unique contexts.


		  push(contextFiberStackCursor, fiber, fiber);
		  push(contextStackCursor$1, nextContext, fiber);
		}

		function popHostContext(fiber) {
		  // Do not pop unless this Fiber provided the current context.
		  // pushHostContext() only pushes Fibers that provide unique contexts.
		  if (contextFiberStackCursor.current !== fiber) {
		    return;
		  }

		  pop(contextStackCursor$1, fiber);
		  pop(contextFiberStackCursor, fiber);
		}

		var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
		// inherited deeply down the subtree. The upper bits only affect
		// this immediate suspense boundary and gets reset each new
		// boundary or suspense list.

		var SubtreeSuspenseContextMask = 1; // Subtree Flags:
		// InvisibleParentSuspenseContext indicates that one of our parent Suspense
		// boundaries is not currently showing visible main content.
		// Either because it is already showing a fallback or is not mounted at all.
		// We can use this to determine if it is desirable to trigger a fallback at
		// the parent. If not, then we might need to trigger undesirable boundaries
		// and/or suspend the commit to avoid hiding the parent content.

		var InvisibleParentSuspenseContext = 1; // Shallow Flags:
		// ForceSuspenseFallback can be used by SuspenseList to force newly added
		// items into their fallback state during one of the render passes.

		var ForceSuspenseFallback = 2;
		var suspenseStackCursor = createCursor(DefaultSuspenseContext);
		function hasSuspenseContext(parentContext, flag) {
		  return (parentContext & flag) !== 0;
		}
		function setDefaultShallowSuspenseContext(parentContext) {
		  return parentContext & SubtreeSuspenseContextMask;
		}
		function setShallowSuspenseContext(parentContext, shallowContext) {
		  return parentContext & SubtreeSuspenseContextMask | shallowContext;
		}
		function addSubtreeSuspenseContext(parentContext, subtreeContext) {
		  return parentContext | subtreeContext;
		}
		function pushSuspenseContext(fiber, newContext) {
		  push(suspenseStackCursor, newContext, fiber);
		}
		function popSuspenseContext(fiber) {
		  pop(suspenseStackCursor, fiber);
		}

		function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
		  // If it was the primary children that just suspended, capture and render the
		  // fallback. Otherwise, don't capture and bubble to the next boundary.
		  var nextState = workInProgress.memoizedState;

		  if (nextState !== null) {
		    if (nextState.dehydrated !== null) {
		      // A dehydrated boundary always captures.
		      return true;
		    }

		    return false;
		  }

		  workInProgress.memoizedProps; // Regular boundaries always capture.

		  {
		    return true;
		  } // If it's a boundary we should avoid, then we prefer to bubble up to the
		}
		function findFirstSuspended(row) {
		  var node = row;

		  while (node !== null) {
		    if (node.tag === SuspenseComponent) {
		      var state = node.memoizedState;

		      if (state !== null) {
		        var dehydrated = state.dehydrated;

		        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
		          return node;
		        }
		      }
		    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
		    // keep track of whether it suspended or not.
		    node.memoizedProps.revealOrder !== undefined) {
		      var didSuspend = (node.flags & DidCapture) !== NoFlags;

		      if (didSuspend) {
		        return node;
		      }
		    } else if (node.child !== null) {
		      node.child.return = node;
		      node = node.child;
		      continue;
		    }

		    if (node === row) {
		      return null;
		    }

		    while (node.sibling === null) {
		      if (node.return === null || node.return === row) {
		        return null;
		      }

		      node = node.return;
		    }

		    node.sibling.return = node.return;
		    node = node.sibling;
		  }

		  return null;
		}

		var NoFlags$1 =
		/*   */
		0; // Represents whether effect should fire.

		var HasEffect =
		/* */
		1; // Represents the phase in which the effect (not the clean-up) fires.

		var Insertion =
		/*  */
		2;
		var Layout =
		/*    */
		4;
		var Passive$1 =
		/*   */
		8;

		// and should be reset before starting a new render.
		// This tracks which mutable sources need to be reset after a render.

		var workInProgressSources = [];
		function resetWorkInProgressVersions() {
		  for (var i = 0; i < workInProgressSources.length; i++) {
		    var mutableSource = workInProgressSources[i];

		    {
		      mutableSource._workInProgressVersionPrimary = null;
		    }
		  }

		  workInProgressSources.length = 0;
		}
		// This ensures that the version used for server rendering matches the one
		// that is eventually read during hydration.
		// If they don't match there's a potential tear and a full deopt render is required.

		function registerMutableSourceForHydration(root, mutableSource) {
		  var getVersion = mutableSource._getVersion;
		  var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
		  // Retaining it forever may interfere with GC.

		  if (root.mutableSourceEagerHydrationData == null) {
		    root.mutableSourceEagerHydrationData = [mutableSource, version];
		  } else {
		    root.mutableSourceEagerHydrationData.push(mutableSource, version);
		  }
		}

		var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
		    ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
		var didWarnAboutMismatchedHooksForComponent;
		var didWarnUncachedGetSnapshot;

		{
		  didWarnAboutMismatchedHooksForComponent = new Set();
		}

		// These are set right before calling the component.
		var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
		// the work-in-progress hook.

		var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
		// current hook list is the list that belongs to the current fiber. The
		// work-in-progress hook list is a new list that will be added to the
		// work-in-progress fiber.

		var currentHook = null;
		var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
		// does not get reset if we do another render pass; only when we're completely
		// finished evaluating this component. This is an optimization so we know
		// whether we need to clear render phase updates after a throw.

		var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
		// gets reset after each attempt.
		// TODO: Maybe there's some way to consolidate this with
		// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.

		var didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.

		var localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during
		// hydration). This counter is global, so client ids are not stable across
		// render attempts.

		var globalClientIdCounter = 0;
		var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

		var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
		// The list stores the order of hooks used during the initial render (mount).
		// Subsequent renders (updates) reference this list.

		var hookTypesDev = null;
		var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
		// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
		// When true, such Hooks will always be "remounted". Only used during hot reload.

		var ignorePreviousDependencies = false;

		function mountHookTypesDev() {
		  {
		    var hookName = currentHookNameInDev;

		    if (hookTypesDev === null) {
		      hookTypesDev = [hookName];
		    } else {
		      hookTypesDev.push(hookName);
		    }
		  }
		}

		function updateHookTypesDev() {
		  {
		    var hookName = currentHookNameInDev;

		    if (hookTypesDev !== null) {
		      hookTypesUpdateIndexDev++;

		      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
		        warnOnHookMismatchInDev(hookName);
		      }
		    }
		  }
		}

		function checkDepsAreArrayDev(deps) {
		  {
		    if (deps !== undefined && deps !== null && !isArray(deps)) {
		      // Verify deps, but only on mount to avoid extra checks.
		      // It's unlikely their type would change as usually you define them inline.
		      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
		    }
		  }
		}

		function warnOnHookMismatchInDev(currentHookName) {
		  {
		    var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);

		    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
		      didWarnAboutMismatchedHooksForComponent.add(componentName);

		      if (hookTypesDev !== null) {
		        var table = '';
		        var secondColumnStart = 30;

		        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
		          var oldHookName = hookTypesDev[i];
		          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
		          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
		          // lol @ IE not supporting String#repeat

		          while (row.length < secondColumnStart) {
		            row += ' ';
		          }

		          row += newHookName + '\n';
		          table += row;
		        }

		        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
		      }
		    }
		  }
		}

		function throwInvalidHookError() {
		  throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' + '2. You might be breaking the Rules of Hooks\n' + '3. You might have more than one copy of React in the same app\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
		}

		function areHookInputsEqual(nextDeps, prevDeps) {
		  {
		    if (ignorePreviousDependencies) {
		      // Only true when this component is being hot reloaded.
		      return false;
		    }
		  }

		  if (prevDeps === null) {
		    {
		      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
		    }

		    return false;
		  }

		  {
		    // Don't bother comparing lengths in prod because these arrays should be
		    // passed inline.
		    if (nextDeps.length !== prevDeps.length) {
		      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
		    }
		  }

		  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
		    if (objectIs(nextDeps[i], prevDeps[i])) {
		      continue;
		    }

		    return false;
		  }

		  return true;
		}

		function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
		  renderLanes = nextRenderLanes;
		  currentlyRenderingFiber$1 = workInProgress;

		  {
		    hookTypesDev = current !== null ? current._debugHookTypes : null;
		    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

		    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
		  }

		  workInProgress.memoizedState = null;
		  workInProgress.updateQueue = null;
		  workInProgress.lanes = NoLanes; // The following should have already been reset
		  // currentHook = null;
		  // workInProgressHook = null;
		  // didScheduleRenderPhaseUpdate = false;
		  // localIdCounter = 0;
		  // TODO Warn if no hooks are used at all during mount, then some are used during update.
		  // Currently we will identify the update render as a mount because memoizedState === null.
		  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
		  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
		  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
		  // so memoizedState would be null during updates and mounts.

		  {
		    if (current !== null && current.memoizedState !== null) {
		      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
		    } else if (hookTypesDev !== null) {
		      // This dispatcher handles an edge case where a component is updating,
		      // but no stateful hooks have been used.
		      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
		      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
		      // This dispatcher does that.
		      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
		    } else {
		      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
		    }
		  }

		  var children = Component(props, secondArg); // Check if there was a render phase update

		  if (didScheduleRenderPhaseUpdateDuringThisPass) {
		    // Keep rendering in a loop for as long as render phase updates continue to
		    // be scheduled. Use a counter to prevent infinite loops.
		    var numberOfReRenders = 0;

		    do {
		      didScheduleRenderPhaseUpdateDuringThisPass = false;
		      localIdCounter = 0;

		      if (numberOfReRenders >= RE_RENDER_LIMIT) {
		        throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');
		      }

		      numberOfReRenders += 1;

		      {
		        // Even when hot reloading, allow dependencies to stabilize
		        // after first render to prevent infinite render phase updates.
		        ignorePreviousDependencies = false;
		      } // Start over from the beginning of the list


		      currentHook = null;
		      workInProgressHook = null;
		      workInProgress.updateQueue = null;

		      {
		        // Also validate hook order for cascading updates.
		        hookTypesUpdateIndexDev = -1;
		      }

		      ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;
		      children = Component(props, secondArg);
		    } while (didScheduleRenderPhaseUpdateDuringThisPass);
		  } // We can assume the previous dispatcher is always this one, since we set it
		  // at the beginning of the render phase and there's no re-entrance.


		  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

		  {
		    workInProgress._debugHookTypes = hookTypesDev;
		  } // This check uses currentHook so that it works the same in DEV and prod bundles.
		  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


		  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
		  renderLanes = NoLanes;
		  currentlyRenderingFiber$1 = null;
		  currentHook = null;
		  workInProgressHook = null;

		  {
		    currentHookNameInDev = null;
		    hookTypesDev = null;
		    hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last
		    // render. If this fires, it suggests that we incorrectly reset the static
		    // flags in some other part of the codebase. This has happened before, for
		    // example, in the SuspenseList implementation.

		    if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
		    // and creates false positives. To make this work in legacy mode, we'd
		    // need to mark fibers that commit in an incomplete state, somehow. For
		    // now I'll disable the warning that most of the bugs that would trigger
		    // it are either exclusive to concurrent mode or exist in both.
		    (current.mode & ConcurrentMode) !== NoMode) {
		      error('Internal React error: Expected static flag was missing. Please ' + 'notify the React team.');
		    }
		  }

		  didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook
		  // localIdCounter = 0;

		  if (didRenderTooFewHooks) {
		    throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental ' + 'early return statement.');
		  }

		  return children;
		}
		function checkDidRenderIdHook() {
		  // This should be called immediately after every renderWithHooks call.
		  // Conceptually, it's part of the return value of renderWithHooks; it's only a
		  // separate function to avoid using an array tuple.
		  var didRenderIdHook = localIdCounter !== 0;
		  localIdCounter = 0;
		  return didRenderIdHook;
		}
		function bailoutHooks(current, workInProgress, lanes) {
		  workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the
		  // complete phase (bubbleProperties).

		  if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
		    workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
		  } else {
		    workInProgress.flags &= ~(Passive | Update);
		  }

		  current.lanes = removeLanes(current.lanes, lanes);
		}
		function resetHooksAfterThrow() {
		  // We can assume the previous dispatcher is always this one, since we set it
		  // at the beginning of the render phase and there's no re-entrance.
		  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

		  if (didScheduleRenderPhaseUpdate) {
		    // There were render phase updates. These are only valid for this render
		    // phase, which we are now aborting. Remove the updates from the queues so
		    // they do not persist to the next render. Do not remove updates from hooks
		    // that weren't processed.
		    //
		    // Only reset the updates from the queue if it has a clone. If it does
		    // not have a clone, that means it wasn't processed, and the updates were
		    // scheduled before we entered the render phase.
		    var hook = currentlyRenderingFiber$1.memoizedState;

		    while (hook !== null) {
		      var queue = hook.queue;

		      if (queue !== null) {
		        queue.pending = null;
		      }

		      hook = hook.next;
		    }

		    didScheduleRenderPhaseUpdate = false;
		  }

		  renderLanes = NoLanes;
		  currentlyRenderingFiber$1 = null;
		  currentHook = null;
		  workInProgressHook = null;

		  {
		    hookTypesDev = null;
		    hookTypesUpdateIndexDev = -1;
		    currentHookNameInDev = null;
		    isUpdatingOpaqueValueInRenderPhase = false;
		  }

		  didScheduleRenderPhaseUpdateDuringThisPass = false;
		  localIdCounter = 0;
		}

		function mountWorkInProgressHook() {
		  var hook = {
		    memoizedState: null,
		    baseState: null,
		    baseQueue: null,
		    queue: null,
		    next: null
		  };

		  if (workInProgressHook === null) {
		    // This is the first hook in the list
		    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
		  } else {
		    // Append to the end of the list
		    workInProgressHook = workInProgressHook.next = hook;
		  }

		  return workInProgressHook;
		}

		function updateWorkInProgressHook() {
		  // This function is used both for updates and for re-renders triggered by a
		  // render phase update. It assumes there is either a current hook we can
		  // clone, or a work-in-progress hook from a previous render pass that we can
		  // use as a base. When we reach the end of the base list, we must switch to
		  // the dispatcher used for mounts.
		  var nextCurrentHook;

		  if (currentHook === null) {
		    var current = currentlyRenderingFiber$1.alternate;

		    if (current !== null) {
		      nextCurrentHook = current.memoizedState;
		    } else {
		      nextCurrentHook = null;
		    }
		  } else {
		    nextCurrentHook = currentHook.next;
		  }

		  var nextWorkInProgressHook;

		  if (workInProgressHook === null) {
		    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
		  } else {
		    nextWorkInProgressHook = workInProgressHook.next;
		  }

		  if (nextWorkInProgressHook !== null) {
		    // There's already a work-in-progress. Reuse it.
		    workInProgressHook = nextWorkInProgressHook;
		    nextWorkInProgressHook = workInProgressHook.next;
		    currentHook = nextCurrentHook;
		  } else {
		    // Clone from the current hook.
		    if (nextCurrentHook === null) {
		      throw new Error('Rendered more hooks than during the previous render.');
		    }

		    currentHook = nextCurrentHook;
		    var newHook = {
		      memoizedState: currentHook.memoizedState,
		      baseState: currentHook.baseState,
		      baseQueue: currentHook.baseQueue,
		      queue: currentHook.queue,
		      next: null
		    };

		    if (workInProgressHook === null) {
		      // This is the first hook in the list.
		      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
		    } else {
		      // Append to the end of the list.
		      workInProgressHook = workInProgressHook.next = newHook;
		    }
		  }

		  return workInProgressHook;
		}

		function createFunctionComponentUpdateQueue() {
		  return {
		    lastEffect: null,
		    stores: null
		  };
		}

		function basicStateReducer(state, action) {
		  // $FlowFixMe: Flow doesn't like mixed types
		  return typeof action === 'function' ? action(state) : action;
		}

		function mountReducer(reducer, initialArg, init) {
		  var hook = mountWorkInProgressHook();
		  var initialState;

		  if (init !== undefined) {
		    initialState = init(initialArg);
		  } else {
		    initialState = initialArg;
		  }

		  hook.memoizedState = hook.baseState = initialState;
		  var queue = {
		    pending: null,
		    interleaved: null,
		    lanes: NoLanes,
		    dispatch: null,
		    lastRenderedReducer: reducer,
		    lastRenderedState: initialState
		  };
		  hook.queue = queue;
		  var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
		  return [hook.memoizedState, dispatch];
		}

		function updateReducer(reducer, initialArg, init) {
		  var hook = updateWorkInProgressHook();
		  var queue = hook.queue;

		  if (queue === null) {
		    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
		  }

		  queue.lastRenderedReducer = reducer;
		  var current = currentHook; // The last rebase update that is NOT part of the base state.

		  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

		  var pendingQueue = queue.pending;

		  if (pendingQueue !== null) {
		    // We have new updates that haven't been processed yet.
		    // We'll add them to the base queue.
		    if (baseQueue !== null) {
		      // Merge the pending queue and the base queue.
		      var baseFirst = baseQueue.next;
		      var pendingFirst = pendingQueue.next;
		      baseQueue.next = pendingFirst;
		      pendingQueue.next = baseFirst;
		    }

		    {
		      if (current.baseQueue !== baseQueue) {
		        // Internal invariant that should never happen, but feasibly could in
		        // the future if we implement resuming, or some form of that.
		        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');
		      }
		    }

		    current.baseQueue = baseQueue = pendingQueue;
		    queue.pending = null;
		  }

		  if (baseQueue !== null) {
		    // We have a queue to process.
		    var first = baseQueue.next;
		    var newState = current.baseState;
		    var newBaseState = null;
		    var newBaseQueueFirst = null;
		    var newBaseQueueLast = null;
		    var update = first;

		    do {
		      var updateLane = update.lane;

		      if (!isSubsetOfLanes(renderLanes, updateLane)) {
		        // Priority is insufficient. Skip this update. If this is the first
		        // skipped update, the previous update/state is the new base
		        // update/state.
		        var clone = {
		          lane: updateLane,
		          action: update.action,
		          hasEagerState: update.hasEagerState,
		          eagerState: update.eagerState,
		          next: null
		        };

		        if (newBaseQueueLast === null) {
		          newBaseQueueFirst = newBaseQueueLast = clone;
		          newBaseState = newState;
		        } else {
		          newBaseQueueLast = newBaseQueueLast.next = clone;
		        } // Update the remaining priority in the queue.
		        // TODO: Don't need to accumulate this. Instead, we can remove
		        // renderLanes from the original lanes.


		        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
		        markSkippedUpdateLanes(updateLane);
		      } else {
		        // This update does have sufficient priority.
		        if (newBaseQueueLast !== null) {
		          var _clone = {
		            // This update is going to be committed so we never want uncommit
		            // it. Using NoLane works because 0 is a subset of all bitmasks, so
		            // this will never be skipped by the check above.
		            lane: NoLane,
		            action: update.action,
		            hasEagerState: update.hasEagerState,
		            eagerState: update.eagerState,
		            next: null
		          };
		          newBaseQueueLast = newBaseQueueLast.next = _clone;
		        } // Process this update.


		        if (update.hasEagerState) {
		          // If this update is a state update (not a reducer) and was processed eagerly,
		          // we can use the eagerly computed state
		          newState = update.eagerState;
		        } else {
		          var action = update.action;
		          newState = reducer(newState, action);
		        }
		      }

		      update = update.next;
		    } while (update !== null && update !== first);

		    if (newBaseQueueLast === null) {
		      newBaseState = newState;
		    } else {
		      newBaseQueueLast.next = newBaseQueueFirst;
		    } // Mark that the fiber performed work, but only if the new state is
		    // different from the current state.


		    if (!objectIs(newState, hook.memoizedState)) {
		      markWorkInProgressReceivedUpdate();
		    }

		    hook.memoizedState = newState;
		    hook.baseState = newBaseState;
		    hook.baseQueue = newBaseQueueLast;
		    queue.lastRenderedState = newState;
		  } // Interleaved updates are stored on a separate queue. We aren't going to
		  // process them during this render, but we do need to track which lanes
		  // are remaining.


		  var lastInterleaved = queue.interleaved;

		  if (lastInterleaved !== null) {
		    var interleaved = lastInterleaved;

		    do {
		      var interleavedLane = interleaved.lane;
		      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
		      markSkippedUpdateLanes(interleavedLane);
		      interleaved = interleaved.next;
		    } while (interleaved !== lastInterleaved);
		  } else if (baseQueue === null) {
		    // `queue.lanes` is used for entangling transitions. We can set it back to
		    // zero once the queue is empty.
		    queue.lanes = NoLanes;
		  }

		  var dispatch = queue.dispatch;
		  return [hook.memoizedState, dispatch];
		}

		function rerenderReducer(reducer, initialArg, init) {
		  var hook = updateWorkInProgressHook();
		  var queue = hook.queue;

		  if (queue === null) {
		    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
		  }

		  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
		  // work-in-progress hook.

		  var dispatch = queue.dispatch;
		  var lastRenderPhaseUpdate = queue.pending;
		  var newState = hook.memoizedState;

		  if (lastRenderPhaseUpdate !== null) {
		    // The queue doesn't persist past this render pass.
		    queue.pending = null;
		    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
		    var update = firstRenderPhaseUpdate;

		    do {
		      // Process this render phase update. We don't have to check the
		      // priority because it will always be the same as the current
		      // render's.
		      var action = update.action;
		      newState = reducer(newState, action);
		      update = update.next;
		    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
		    // different from the current state.


		    if (!objectIs(newState, hook.memoizedState)) {
		      markWorkInProgressReceivedUpdate();
		    }

		    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
		    // the base state unless the queue is empty.
		    // TODO: Not sure if this is the desired semantics, but it's what we
		    // do for gDSFP. I can't remember why.

		    if (hook.baseQueue === null) {
		      hook.baseState = newState;
		    }

		    queue.lastRenderedState = newState;
		  }

		  return [newState, dispatch];
		}

		function mountMutableSource(source, getSnapshot, subscribe) {
		  {
		    return undefined;
		  }
		}

		function updateMutableSource(source, getSnapshot, subscribe) {
		  {
		    return undefined;
		  }
		}

		function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
		  var fiber = currentlyRenderingFiber$1;
		  var hook = mountWorkInProgressHook();
		  var nextSnapshot;
		  var isHydrating = getIsHydrating();

		  if (isHydrating) {
		    if (getServerSnapshot === undefined) {
		      throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');
		    }

		    nextSnapshot = getServerSnapshot();

		    {
		      if (!didWarnUncachedGetSnapshot) {
		        if (nextSnapshot !== getServerSnapshot()) {
		          error('The result of getServerSnapshot should be cached to avoid an infinite loop');

		          didWarnUncachedGetSnapshot = true;
		        }
		      }
		    }
		  } else {
		    nextSnapshot = getSnapshot();

		    {
		      if (!didWarnUncachedGetSnapshot) {
		        var cachedSnapshot = getSnapshot();

		        if (!objectIs(nextSnapshot, cachedSnapshot)) {
		          error('The result of getSnapshot should be cached to avoid an infinite loop');

		          didWarnUncachedGetSnapshot = true;
		        }
		      }
		    } // Unless we're rendering a blocking lane, schedule a consistency check.
		    // Right before committing, we will walk the tree and check if any of the
		    // stores were mutated.
		    //
		    // We won't do this if we're hydrating server-rendered content, because if
		    // the content is stale, it's already visible anyway. Instead we'll patch
		    // it up in a passive effect.


		    var root = getWorkInProgressRoot();

		    if (root === null) {
		      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
		    }

		    if (!includesBlockingLane(root, renderLanes)) {
		      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
		    }
		  } // Read the current snapshot from the store on every render. This breaks the
		  // normal rules of React, and only works because store updates are
		  // always synchronous.


		  hook.memoizedState = nextSnapshot;
		  var inst = {
		    value: nextSnapshot,
		    getSnapshot: getSnapshot
		  };
		  hook.queue = inst; // Schedule an effect to subscribe to the store.

		  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update
		  // this whenever subscribe, getSnapshot, or value changes. Because there's no
		  // clean-up function, and we track the deps correctly, we can call pushEffect
		  // directly, without storing any additional state. For the same reason, we
		  // don't need to set a static flag, either.
		  // TODO: We can move this to the passive phase once we add a pre-commit
		  // consistency check. See the next comment.

		  fiber.flags |= Passive;
		  pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
		  return nextSnapshot;
		}

		function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
		  var fiber = currentlyRenderingFiber$1;
		  var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the
		  // normal rules of React, and only works because store updates are
		  // always synchronous.

		  var nextSnapshot = getSnapshot();

		  {
		    if (!didWarnUncachedGetSnapshot) {
		      var cachedSnapshot = getSnapshot();

		      if (!objectIs(nextSnapshot, cachedSnapshot)) {
		        error('The result of getSnapshot should be cached to avoid an infinite loop');

		        didWarnUncachedGetSnapshot = true;
		      }
		    }
		  }

		  var prevSnapshot = hook.memoizedState;
		  var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);

		  if (snapshotChanged) {
		    hook.memoizedState = nextSnapshot;
		    markWorkInProgressReceivedUpdate();
		  }

		  var inst = hook.queue;
		  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the
		  // commit phase if there was an interleaved mutation. In concurrent mode
		  // this can happen all the time, but even in synchronous mode, an earlier
		  // effect may have mutated the store.

		  if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
		  // checking whether we scheduled a subscription effect above.
		  workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
		    fiber.flags |= Passive;
		    pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.
		    // Right before committing, we will walk the tree and check if any of the
		    // stores were mutated.

		    var root = getWorkInProgressRoot();

		    if (root === null) {
		      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
		    }

		    if (!includesBlockingLane(root, renderLanes)) {
		      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
		    }
		  }

		  return nextSnapshot;
		}

		function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
		  fiber.flags |= StoreConsistency;
		  var check = {
		    getSnapshot: getSnapshot,
		    value: renderedSnapshot
		  };
		  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

		  if (componentUpdateQueue === null) {
		    componentUpdateQueue = createFunctionComponentUpdateQueue();
		    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
		    componentUpdateQueue.stores = [check];
		  } else {
		    var stores = componentUpdateQueue.stores;

		    if (stores === null) {
		      componentUpdateQueue.stores = [check];
		    } else {
		      stores.push(check);
		    }
		  }
		}

		function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
		  // These are updated in the passive phase
		  inst.value = nextSnapshot;
		  inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could
		  // have been in an event that fired before the passive effects, or it could
		  // have been in a layout effect. In that case, we would have used the old
		  // snapsho and getSnapshot values to bail out. We need to check one more time.

		  if (checkIfSnapshotChanged(inst)) {
		    // Force a re-render.
		    forceStoreRerender(fiber);
		  }
		}

		function subscribeToStore(fiber, inst, subscribe) {
		  var handleStoreChange = function () {
		    // The store changed. Check if the snapshot changed since the last time we
		    // read from the store.
		    if (checkIfSnapshotChanged(inst)) {
		      // Force a re-render.
		      forceStoreRerender(fiber);
		    }
		  }; // Subscribe to the store and return a clean-up function.


		  return subscribe(handleStoreChange);
		}

		function checkIfSnapshotChanged(inst) {
		  var latestGetSnapshot = inst.getSnapshot;
		  var prevValue = inst.value;

		  try {
		    var nextValue = latestGetSnapshot();
		    return !objectIs(prevValue, nextValue);
		  } catch (error) {
		    return true;
		  }
		}

		function forceStoreRerender(fiber) {
		  var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

		  if (root !== null) {
		    scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
		  }
		}

		function mountState(initialState) {
		  var hook = mountWorkInProgressHook();

		  if (typeof initialState === 'function') {
		    // $FlowFixMe: Flow doesn't like mixed types
		    initialState = initialState();
		  }

		  hook.memoizedState = hook.baseState = initialState;
		  var queue = {
		    pending: null,
		    interleaved: null,
		    lanes: NoLanes,
		    dispatch: null,
		    lastRenderedReducer: basicStateReducer,
		    lastRenderedState: initialState
		  };
		  hook.queue = queue;
		  var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
		  return [hook.memoizedState, dispatch];
		}

		function updateState(initialState) {
		  return updateReducer(basicStateReducer);
		}

		function rerenderState(initialState) {
		  return rerenderReducer(basicStateReducer);
		}

		function pushEffect(tag, create, destroy, deps) {
		  var effect = {
		    tag: tag,
		    create: create,
		    destroy: destroy,
		    deps: deps,
		    // Circular
		    next: null
		  };
		  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

		  if (componentUpdateQueue === null) {
		    componentUpdateQueue = createFunctionComponentUpdateQueue();
		    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
		    componentUpdateQueue.lastEffect = effect.next = effect;
		  } else {
		    var lastEffect = componentUpdateQueue.lastEffect;

		    if (lastEffect === null) {
		      componentUpdateQueue.lastEffect = effect.next = effect;
		    } else {
		      var firstEffect = lastEffect.next;
		      lastEffect.next = effect;
		      effect.next = firstEffect;
		      componentUpdateQueue.lastEffect = effect;
		    }
		  }

		  return effect;
		}

		function mountRef(initialValue) {
		  var hook = mountWorkInProgressHook();

		  {
		    var _ref2 = {
		      current: initialValue
		    };
		    hook.memoizedState = _ref2;
		    return _ref2;
		  }
		}

		function updateRef(initialValue) {
		  var hook = updateWorkInProgressHook();
		  return hook.memoizedState;
		}

		function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
		  var hook = mountWorkInProgressHook();
		  var nextDeps = deps === undefined ? null : deps;
		  currentlyRenderingFiber$1.flags |= fiberFlags;
		  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
		}

		function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
		  var hook = updateWorkInProgressHook();
		  var nextDeps = deps === undefined ? null : deps;
		  var destroy = undefined;

		  if (currentHook !== null) {
		    var prevEffect = currentHook.memoizedState;
		    destroy = prevEffect.destroy;

		    if (nextDeps !== null) {
		      var prevDeps = prevEffect.deps;

		      if (areHookInputsEqual(nextDeps, prevDeps)) {
		        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
		        return;
		      }
		    }
		  }

		  currentlyRenderingFiber$1.flags |= fiberFlags;
		  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
		}

		function mountEffect(create, deps) {
		  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
		    return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
		  } else {
		    return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
		  }
		}

		function updateEffect(create, deps) {
		  return updateEffectImpl(Passive, Passive$1, create, deps);
		}

		function mountInsertionEffect(create, deps) {
		  return mountEffectImpl(Update, Insertion, create, deps);
		}

		function updateInsertionEffect(create, deps) {
		  return updateEffectImpl(Update, Insertion, create, deps);
		}

		function mountLayoutEffect(create, deps) {
		  var fiberFlags = Update;

		  {
		    fiberFlags |= LayoutStatic;
		  }

		  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
		    fiberFlags |= MountLayoutDev;
		  }

		  return mountEffectImpl(fiberFlags, Layout, create, deps);
		}

		function updateLayoutEffect(create, deps) {
		  return updateEffectImpl(Update, Layout, create, deps);
		}

		function imperativeHandleEffect(create, ref) {
		  if (typeof ref === 'function') {
		    var refCallback = ref;

		    var _inst = create();

		    refCallback(_inst);
		    return function () {
		      refCallback(null);
		    };
		  } else if (ref !== null && ref !== undefined) {
		    var refObject = ref;

		    {
		      if (!refObject.hasOwnProperty('current')) {
		        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
		      }
		    }

		    var _inst2 = create();

		    refObject.current = _inst2;
		    return function () {
		      refObject.current = null;
		    };
		  }
		}

		function mountImperativeHandle(ref, create, deps) {
		  {
		    if (typeof create !== 'function') {
		      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
		    }
		  } // TODO: If deps are provided, should we skip comparing the ref itself?


		  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
		  var fiberFlags = Update;

		  {
		    fiberFlags |= LayoutStatic;
		  }

		  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
		    fiberFlags |= MountLayoutDev;
		  }

		  return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
		}

		function updateImperativeHandle(ref, create, deps) {
		  {
		    if (typeof create !== 'function') {
		      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
		    }
		  } // TODO: If deps are provided, should we skip comparing the ref itself?


		  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
		  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
		}

		function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
		  // The react-debug-hooks package injects its own implementation
		  // so that e.g. DevTools can display custom hook values.
		}

		var updateDebugValue = mountDebugValue;

		function mountCallback(callback, deps) {
		  var hook = mountWorkInProgressHook();
		  var nextDeps = deps === undefined ? null : deps;
		  hook.memoizedState = [callback, nextDeps];
		  return callback;
		}

		function updateCallback(callback, deps) {
		  var hook = updateWorkInProgressHook();
		  var nextDeps = deps === undefined ? null : deps;
		  var prevState = hook.memoizedState;

		  if (prevState !== null) {
		    if (nextDeps !== null) {
		      var prevDeps = prevState[1];

		      if (areHookInputsEqual(nextDeps, prevDeps)) {
		        return prevState[0];
		      }
		    }
		  }

		  hook.memoizedState = [callback, nextDeps];
		  return callback;
		}

		function mountMemo(nextCreate, deps) {
		  var hook = mountWorkInProgressHook();
		  var nextDeps = deps === undefined ? null : deps;
		  var nextValue = nextCreate();
		  hook.memoizedState = [nextValue, nextDeps];
		  return nextValue;
		}

		function updateMemo(nextCreate, deps) {
		  var hook = updateWorkInProgressHook();
		  var nextDeps = deps === undefined ? null : deps;
		  var prevState = hook.memoizedState;

		  if (prevState !== null) {
		    // Assume these are defined. If they're not, areHookInputsEqual will warn.
		    if (nextDeps !== null) {
		      var prevDeps = prevState[1];

		      if (areHookInputsEqual(nextDeps, prevDeps)) {
		        return prevState[0];
		      }
		    }
		  }

		  var nextValue = nextCreate();
		  hook.memoizedState = [nextValue, nextDeps];
		  return nextValue;
		}

		function mountDeferredValue(value) {
		  var hook = mountWorkInProgressHook();
		  hook.memoizedState = value;
		  return value;
		}

		function updateDeferredValue(value) {
		  var hook = updateWorkInProgressHook();
		  var resolvedCurrentHook = currentHook;
		  var prevValue = resolvedCurrentHook.memoizedState;
		  return updateDeferredValueImpl(hook, prevValue, value);
		}

		function rerenderDeferredValue(value) {
		  var hook = updateWorkInProgressHook();

		  if (currentHook === null) {
		    // This is a rerender during a mount.
		    hook.memoizedState = value;
		    return value;
		  } else {
		    // This is a rerender during an update.
		    var prevValue = currentHook.memoizedState;
		    return updateDeferredValueImpl(hook, prevValue, value);
		  }
		}

		function updateDeferredValueImpl(hook, prevValue, value) {
		  var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);

		  if (shouldDeferValue) {
		    // This is an urgent update. If the value has changed, keep using the
		    // previous value and spawn a deferred render to update it later.
		    if (!objectIs(value, prevValue)) {
		      // Schedule a deferred render
		      var deferredLane = claimNextTransitionLane();
		      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
		      markSkippedUpdateLanes(deferredLane); // Set this to true to indicate that the rendered value is inconsistent
		      // from the latest value. The name "baseState" doesn't really match how we
		      // use it because we're reusing a state hook field instead of creating a
		      // new one.

		      hook.baseState = true;
		    } // Reuse the previous value


		    return prevValue;
		  } else {
		    // This is not an urgent update, so we can use the latest value regardless
		    // of what it is. No need to defer it.
		    // However, if we're currently inside a spawned render, then we need to mark
		    // this as an update to prevent the fiber from bailing out.
		    //
		    // `baseState` is true when the current value is different from the rendered
		    // value. The name doesn't really match how we use it because we're reusing
		    // a state hook field instead of creating a new one.
		    if (hook.baseState) {
		      // Flip this back to false.
		      hook.baseState = false;
		      markWorkInProgressReceivedUpdate();
		    }

		    hook.memoizedState = value;
		    return value;
		  }
		}

		function startTransition(setPending, callback, options) {
		  var previousPriority = getCurrentUpdatePriority();
		  setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
		  setPending(true);
		  var prevTransition = ReactCurrentBatchConfig$2.transition;
		  ReactCurrentBatchConfig$2.transition = {};
		  var currentTransition = ReactCurrentBatchConfig$2.transition;

		  {
		    ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();
		  }

		  try {
		    setPending(false);
		    callback();
		  } finally {
		    setCurrentUpdatePriority(previousPriority);
		    ReactCurrentBatchConfig$2.transition = prevTransition;

		    {
		      if (prevTransition === null && currentTransition._updatedFibers) {
		        var updatedFibersCount = currentTransition._updatedFibers.size;

		        if (updatedFibersCount > 10) {
		          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');
		        }

		        currentTransition._updatedFibers.clear();
		      }
		    }
		  }
		}

		function mountTransition() {
		  var _mountState = mountState(false),
		      isPending = _mountState[0],
		      setPending = _mountState[1]; // The `start` method never changes.


		  var start = startTransition.bind(null, setPending);
		  var hook = mountWorkInProgressHook();
		  hook.memoizedState = start;
		  return [isPending, start];
		}

		function updateTransition() {
		  var _updateState = updateState(),
		      isPending = _updateState[0];

		  var hook = updateWorkInProgressHook();
		  var start = hook.memoizedState;
		  return [isPending, start];
		}

		function rerenderTransition() {
		  var _rerenderState = rerenderState(),
		      isPending = _rerenderState[0];

		  var hook = updateWorkInProgressHook();
		  var start = hook.memoizedState;
		  return [isPending, start];
		}

		var isUpdatingOpaqueValueInRenderPhase = false;
		function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
		  {
		    return isUpdatingOpaqueValueInRenderPhase;
		  }
		}

		function mountId() {
		  var hook = mountWorkInProgressHook();
		  var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we
		  // should do this in Fiber, too? Deferring this decision for now because
		  // there's no other place to store the prefix except for an internal field on
		  // the public createRoot object, which the fiber tree does not currently have
		  // a reference to.

		  var identifierPrefix = root.identifierPrefix;
		  var id;

		  if (getIsHydrating()) {
		    var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.

		    id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end
		    // that represents the position of this useId hook among all the useId
		    // hooks for this fiber.

		    var localId = localIdCounter++;

		    if (localId > 0) {
		      id += 'H' + localId.toString(32);
		    }

		    id += ':';
		  } else {
		    // Use a lowercase r prefix for client-generated ids.
		    var globalClientId = globalClientIdCounter++;
		    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';
		  }

		  hook.memoizedState = id;
		  return id;
		}

		function updateId() {
		  var hook = updateWorkInProgressHook();
		  var id = hook.memoizedState;
		  return id;
		}

		function dispatchReducerAction(fiber, queue, action) {
		  {
		    if (typeof arguments[3] === 'function') {
		      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
		    }
		  }

		  var lane = requestUpdateLane(fiber);
		  var update = {
		    lane: lane,
		    action: action,
		    hasEagerState: false,
		    eagerState: null,
		    next: null
		  };

		  if (isRenderPhaseUpdate(fiber)) {
		    enqueueRenderPhaseUpdate(queue, update);
		  } else {
		    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);

		    if (root !== null) {
		      var eventTime = requestEventTime();
		      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
		      entangleTransitionUpdate(root, queue, lane);
		    }
		  }

		  markUpdateInDevTools(fiber, lane);
		}

		function dispatchSetState(fiber, queue, action) {
		  {
		    if (typeof arguments[3] === 'function') {
		      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
		    }
		  }

		  var lane = requestUpdateLane(fiber);
		  var update = {
		    lane: lane,
		    action: action,
		    hasEagerState: false,
		    eagerState: null,
		    next: null
		  };

		  if (isRenderPhaseUpdate(fiber)) {
		    enqueueRenderPhaseUpdate(queue, update);
		  } else {
		    var alternate = fiber.alternate;

		    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
		      // The queue is currently empty, which means we can eagerly compute the
		      // next state before entering the render phase. If the new state is the
		      // same as the current state, we may be able to bail out entirely.
		      var lastRenderedReducer = queue.lastRenderedReducer;

		      if (lastRenderedReducer !== null) {
		        var prevDispatcher;

		        {
		          prevDispatcher = ReactCurrentDispatcher$1.current;
		          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
		        }

		        try {
		          var currentState = queue.lastRenderedState;
		          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
		          // it, on the update object. If the reducer hasn't changed by the
		          // time we enter the render phase, then the eager state can be used
		          // without calling the reducer again.

		          update.hasEagerState = true;
		          update.eagerState = eagerState;

		          if (objectIs(eagerState, currentState)) {
		            // Fast path. We can bail out without scheduling React to re-render.
		            // It's still possible that we'll need to rebase this update later,
		            // if the component re-renders for a different reason and by that
		            // time the reducer has changed.
		            // TODO: Do we still need to entangle transitions in this case?
		            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
		            return;
		          }
		        } catch (error) {// Suppress the error. It will throw again in the render phase.
		        } finally {
		          {
		            ReactCurrentDispatcher$1.current = prevDispatcher;
		          }
		        }
		      }
		    }

		    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);

		    if (root !== null) {
		      var eventTime = requestEventTime();
		      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
		      entangleTransitionUpdate(root, queue, lane);
		    }
		  }

		  markUpdateInDevTools(fiber, lane);
		}

		function isRenderPhaseUpdate(fiber) {
		  var alternate = fiber.alternate;
		  return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
		}

		function enqueueRenderPhaseUpdate(queue, update) {
		  // This is a render phase update. Stash it in a lazily-created map of
		  // queue -> linked list of updates. After this render pass, we'll restart
		  // and apply the stashed updates on top of the work-in-progress hook.
		  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
		  var pending = queue.pending;

		  if (pending === null) {
		    // This is the first update. Create a circular list.
		    update.next = update;
		  } else {
		    update.next = pending.next;
		    pending.next = update;
		  }

		  queue.pending = update;
		} // TODO: Move to ReactFiberConcurrentUpdates?


		function entangleTransitionUpdate(root, queue, lane) {
		  if (isTransitionLane(lane)) {
		    var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they
		    // must have finished. We can remove them from the shared queue, which
		    // represents a superset of the actually pending lanes. In some cases we
		    // may entangle more than we need to, but that's OK. In fact it's worse if
		    // we *don't* entangle when we should.

		    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.

		    var newQueueLanes = mergeLanes(queueLanes, lane);
		    queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
		    // the lane finished since the last time we entangled it. So we need to
		    // entangle it again, just to be sure.

		    markRootEntangled(root, newQueueLanes);
		  }
		}

		function markUpdateInDevTools(fiber, lane, action) {

		  {
		    markStateUpdateScheduled(fiber, lane);
		  }
		}

		var ContextOnlyDispatcher = {
		  readContext: readContext,
		  useCallback: throwInvalidHookError,
		  useContext: throwInvalidHookError,
		  useEffect: throwInvalidHookError,
		  useImperativeHandle: throwInvalidHookError,
		  useInsertionEffect: throwInvalidHookError,
		  useLayoutEffect: throwInvalidHookError,
		  useMemo: throwInvalidHookError,
		  useReducer: throwInvalidHookError,
		  useRef: throwInvalidHookError,
		  useState: throwInvalidHookError,
		  useDebugValue: throwInvalidHookError,
		  useDeferredValue: throwInvalidHookError,
		  useTransition: throwInvalidHookError,
		  useMutableSource: throwInvalidHookError,
		  useSyncExternalStore: throwInvalidHookError,
		  useId: throwInvalidHookError,
		  unstable_isNewReconciler: enableNewReconciler
		};

		var HooksDispatcherOnMountInDEV = null;
		var HooksDispatcherOnMountWithHookTypesInDEV = null;
		var HooksDispatcherOnUpdateInDEV = null;
		var HooksDispatcherOnRerenderInDEV = null;
		var InvalidNestedHooksDispatcherOnMountInDEV = null;
		var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
		var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

		{
		  var warnInvalidContextAccess = function () {
		    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
		  };

		  var warnInvalidHookAccess = function () {
		    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');
		  };

		  HooksDispatcherOnMountInDEV = {
		    readContext: function (context) {
		      return readContext(context);
		    },
		    useCallback: function (callback, deps) {
		      currentHookNameInDev = 'useCallback';
		      mountHookTypesDev();
		      checkDepsAreArrayDev(deps);
		      return mountCallback(callback, deps);
		    },
		    useContext: function (context) {
		      currentHookNameInDev = 'useContext';
		      mountHookTypesDev();
		      return readContext(context);
		    },
		    useEffect: function (create, deps) {
		      currentHookNameInDev = 'useEffect';
		      mountHookTypesDev();
		      checkDepsAreArrayDev(deps);
		      return mountEffect(create, deps);
		    },
		    useImperativeHandle: function (ref, create, deps) {
		      currentHookNameInDev = 'useImperativeHandle';
		      mountHookTypesDev();
		      checkDepsAreArrayDev(deps);
		      return mountImperativeHandle(ref, create, deps);
		    },
		    useInsertionEffect: function (create, deps) {
		      currentHookNameInDev = 'useInsertionEffect';
		      mountHookTypesDev();
		      checkDepsAreArrayDev(deps);
		      return mountInsertionEffect(create, deps);
		    },
		    useLayoutEffect: function (create, deps) {
		      currentHookNameInDev = 'useLayoutEffect';
		      mountHookTypesDev();
		      checkDepsAreArrayDev(deps);
		      return mountLayoutEffect(create, deps);
		    },
		    useMemo: function (create, deps) {
		      currentHookNameInDev = 'useMemo';
		      mountHookTypesDev();
		      checkDepsAreArrayDev(deps);
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

		      try {
		        return mountMemo(create, deps);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useReducer: function (reducer, initialArg, init) {
		      currentHookNameInDev = 'useReducer';
		      mountHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

		      try {
		        return mountReducer(reducer, initialArg, init);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useRef: function (initialValue) {
		      currentHookNameInDev = 'useRef';
		      mountHookTypesDev();
		      return mountRef(initialValue);
		    },
		    useState: function (initialState) {
		      currentHookNameInDev = 'useState';
		      mountHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

		      try {
		        return mountState(initialState);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useDebugValue: function (value, formatterFn) {
		      currentHookNameInDev = 'useDebugValue';
		      mountHookTypesDev();
		      return mountDebugValue();
		    },
		    useDeferredValue: function (value) {
		      currentHookNameInDev = 'useDeferredValue';
		      mountHookTypesDev();
		      return mountDeferredValue(value);
		    },
		    useTransition: function () {
		      currentHookNameInDev = 'useTransition';
		      mountHookTypesDev();
		      return mountTransition();
		    },
		    useMutableSource: function (source, getSnapshot, subscribe) {
		      currentHookNameInDev = 'useMutableSource';
		      mountHookTypesDev();
		      return mountMutableSource();
		    },
		    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
		      currentHookNameInDev = 'useSyncExternalStore';
		      mountHookTypesDev();
		      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
		    },
		    useId: function () {
		      currentHookNameInDev = 'useId';
		      mountHookTypesDev();
		      return mountId();
		    },
		    unstable_isNewReconciler: enableNewReconciler
		  };

		  HooksDispatcherOnMountWithHookTypesInDEV = {
		    readContext: function (context) {
		      return readContext(context);
		    },
		    useCallback: function (callback, deps) {
		      currentHookNameInDev = 'useCallback';
		      updateHookTypesDev();
		      return mountCallback(callback, deps);
		    },
		    useContext: function (context) {
		      currentHookNameInDev = 'useContext';
		      updateHookTypesDev();
		      return readContext(context);
		    },
		    useEffect: function (create, deps) {
		      currentHookNameInDev = 'useEffect';
		      updateHookTypesDev();
		      return mountEffect(create, deps);
		    },
		    useImperativeHandle: function (ref, create, deps) {
		      currentHookNameInDev = 'useImperativeHandle';
		      updateHookTypesDev();
		      return mountImperativeHandle(ref, create, deps);
		    },
		    useInsertionEffect: function (create, deps) {
		      currentHookNameInDev = 'useInsertionEffect';
		      updateHookTypesDev();
		      return mountInsertionEffect(create, deps);
		    },
		    useLayoutEffect: function (create, deps) {
		      currentHookNameInDev = 'useLayoutEffect';
		      updateHookTypesDev();
		      return mountLayoutEffect(create, deps);
		    },
		    useMemo: function (create, deps) {
		      currentHookNameInDev = 'useMemo';
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

		      try {
		        return mountMemo(create, deps);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useReducer: function (reducer, initialArg, init) {
		      currentHookNameInDev = 'useReducer';
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

		      try {
		        return mountReducer(reducer, initialArg, init);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useRef: function (initialValue) {
		      currentHookNameInDev = 'useRef';
		      updateHookTypesDev();
		      return mountRef(initialValue);
		    },
		    useState: function (initialState) {
		      currentHookNameInDev = 'useState';
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

		      try {
		        return mountState(initialState);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useDebugValue: function (value, formatterFn) {
		      currentHookNameInDev = 'useDebugValue';
		      updateHookTypesDev();
		      return mountDebugValue();
		    },
		    useDeferredValue: function (value) {
		      currentHookNameInDev = 'useDeferredValue';
		      updateHookTypesDev();
		      return mountDeferredValue(value);
		    },
		    useTransition: function () {
		      currentHookNameInDev = 'useTransition';
		      updateHookTypesDev();
		      return mountTransition();
		    },
		    useMutableSource: function (source, getSnapshot, subscribe) {
		      currentHookNameInDev = 'useMutableSource';
		      updateHookTypesDev();
		      return mountMutableSource();
		    },
		    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
		      currentHookNameInDev = 'useSyncExternalStore';
		      updateHookTypesDev();
		      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
		    },
		    useId: function () {
		      currentHookNameInDev = 'useId';
		      updateHookTypesDev();
		      return mountId();
		    },
		    unstable_isNewReconciler: enableNewReconciler
		  };

		  HooksDispatcherOnUpdateInDEV = {
		    readContext: function (context) {
		      return readContext(context);
		    },
		    useCallback: function (callback, deps) {
		      currentHookNameInDev = 'useCallback';
		      updateHookTypesDev();
		      return updateCallback(callback, deps);
		    },
		    useContext: function (context) {
		      currentHookNameInDev = 'useContext';
		      updateHookTypesDev();
		      return readContext(context);
		    },
		    useEffect: function (create, deps) {
		      currentHookNameInDev = 'useEffect';
		      updateHookTypesDev();
		      return updateEffect(create, deps);
		    },
		    useImperativeHandle: function (ref, create, deps) {
		      currentHookNameInDev = 'useImperativeHandle';
		      updateHookTypesDev();
		      return updateImperativeHandle(ref, create, deps);
		    },
		    useInsertionEffect: function (create, deps) {
		      currentHookNameInDev = 'useInsertionEffect';
		      updateHookTypesDev();
		      return updateInsertionEffect(create, deps);
		    },
		    useLayoutEffect: function (create, deps) {
		      currentHookNameInDev = 'useLayoutEffect';
		      updateHookTypesDev();
		      return updateLayoutEffect(create, deps);
		    },
		    useMemo: function (create, deps) {
		      currentHookNameInDev = 'useMemo';
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

		      try {
		        return updateMemo(create, deps);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useReducer: function (reducer, initialArg, init) {
		      currentHookNameInDev = 'useReducer';
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

		      try {
		        return updateReducer(reducer, initialArg, init);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useRef: function (initialValue) {
		      currentHookNameInDev = 'useRef';
		      updateHookTypesDev();
		      return updateRef();
		    },
		    useState: function (initialState) {
		      currentHookNameInDev = 'useState';
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

		      try {
		        return updateState(initialState);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useDebugValue: function (value, formatterFn) {
		      currentHookNameInDev = 'useDebugValue';
		      updateHookTypesDev();
		      return updateDebugValue();
		    },
		    useDeferredValue: function (value) {
		      currentHookNameInDev = 'useDeferredValue';
		      updateHookTypesDev();
		      return updateDeferredValue(value);
		    },
		    useTransition: function () {
		      currentHookNameInDev = 'useTransition';
		      updateHookTypesDev();
		      return updateTransition();
		    },
		    useMutableSource: function (source, getSnapshot, subscribe) {
		      currentHookNameInDev = 'useMutableSource';
		      updateHookTypesDev();
		      return updateMutableSource();
		    },
		    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
		      currentHookNameInDev = 'useSyncExternalStore';
		      updateHookTypesDev();
		      return updateSyncExternalStore(subscribe, getSnapshot);
		    },
		    useId: function () {
		      currentHookNameInDev = 'useId';
		      updateHookTypesDev();
		      return updateId();
		    },
		    unstable_isNewReconciler: enableNewReconciler
		  };

		  HooksDispatcherOnRerenderInDEV = {
		    readContext: function (context) {
		      return readContext(context);
		    },
		    useCallback: function (callback, deps) {
		      currentHookNameInDev = 'useCallback';
		      updateHookTypesDev();
		      return updateCallback(callback, deps);
		    },
		    useContext: function (context) {
		      currentHookNameInDev = 'useContext';
		      updateHookTypesDev();
		      return readContext(context);
		    },
		    useEffect: function (create, deps) {
		      currentHookNameInDev = 'useEffect';
		      updateHookTypesDev();
		      return updateEffect(create, deps);
		    },
		    useImperativeHandle: function (ref, create, deps) {
		      currentHookNameInDev = 'useImperativeHandle';
		      updateHookTypesDev();
		      return updateImperativeHandle(ref, create, deps);
		    },
		    useInsertionEffect: function (create, deps) {
		      currentHookNameInDev = 'useInsertionEffect';
		      updateHookTypesDev();
		      return updateInsertionEffect(create, deps);
		    },
		    useLayoutEffect: function (create, deps) {
		      currentHookNameInDev = 'useLayoutEffect';
		      updateHookTypesDev();
		      return updateLayoutEffect(create, deps);
		    },
		    useMemo: function (create, deps) {
		      currentHookNameInDev = 'useMemo';
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

		      try {
		        return updateMemo(create, deps);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useReducer: function (reducer, initialArg, init) {
		      currentHookNameInDev = 'useReducer';
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

		      try {
		        return rerenderReducer(reducer, initialArg, init);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useRef: function (initialValue) {
		      currentHookNameInDev = 'useRef';
		      updateHookTypesDev();
		      return updateRef();
		    },
		    useState: function (initialState) {
		      currentHookNameInDev = 'useState';
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

		      try {
		        return rerenderState(initialState);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useDebugValue: function (value, formatterFn) {
		      currentHookNameInDev = 'useDebugValue';
		      updateHookTypesDev();
		      return updateDebugValue();
		    },
		    useDeferredValue: function (value) {
		      currentHookNameInDev = 'useDeferredValue';
		      updateHookTypesDev();
		      return rerenderDeferredValue(value);
		    },
		    useTransition: function () {
		      currentHookNameInDev = 'useTransition';
		      updateHookTypesDev();
		      return rerenderTransition();
		    },
		    useMutableSource: function (source, getSnapshot, subscribe) {
		      currentHookNameInDev = 'useMutableSource';
		      updateHookTypesDev();
		      return updateMutableSource();
		    },
		    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
		      currentHookNameInDev = 'useSyncExternalStore';
		      updateHookTypesDev();
		      return updateSyncExternalStore(subscribe, getSnapshot);
		    },
		    useId: function () {
		      currentHookNameInDev = 'useId';
		      updateHookTypesDev();
		      return updateId();
		    },
		    unstable_isNewReconciler: enableNewReconciler
		  };

		  InvalidNestedHooksDispatcherOnMountInDEV = {
		    readContext: function (context) {
		      warnInvalidContextAccess();
		      return readContext(context);
		    },
		    useCallback: function (callback, deps) {
		      currentHookNameInDev = 'useCallback';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountCallback(callback, deps);
		    },
		    useContext: function (context) {
		      currentHookNameInDev = 'useContext';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return readContext(context);
		    },
		    useEffect: function (create, deps) {
		      currentHookNameInDev = 'useEffect';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountEffect(create, deps);
		    },
		    useImperativeHandle: function (ref, create, deps) {
		      currentHookNameInDev = 'useImperativeHandle';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountImperativeHandle(ref, create, deps);
		    },
		    useInsertionEffect: function (create, deps) {
		      currentHookNameInDev = 'useInsertionEffect';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountInsertionEffect(create, deps);
		    },
		    useLayoutEffect: function (create, deps) {
		      currentHookNameInDev = 'useLayoutEffect';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountLayoutEffect(create, deps);
		    },
		    useMemo: function (create, deps) {
		      currentHookNameInDev = 'useMemo';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

		      try {
		        return mountMemo(create, deps);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useReducer: function (reducer, initialArg, init) {
		      currentHookNameInDev = 'useReducer';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

		      try {
		        return mountReducer(reducer, initialArg, init);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useRef: function (initialValue) {
		      currentHookNameInDev = 'useRef';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountRef(initialValue);
		    },
		    useState: function (initialState) {
		      currentHookNameInDev = 'useState';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

		      try {
		        return mountState(initialState);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useDebugValue: function (value, formatterFn) {
		      currentHookNameInDev = 'useDebugValue';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountDebugValue();
		    },
		    useDeferredValue: function (value) {
		      currentHookNameInDev = 'useDeferredValue';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountDeferredValue(value);
		    },
		    useTransition: function () {
		      currentHookNameInDev = 'useTransition';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountTransition();
		    },
		    useMutableSource: function (source, getSnapshot, subscribe) {
		      currentHookNameInDev = 'useMutableSource';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountMutableSource();
		    },
		    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
		      currentHookNameInDev = 'useSyncExternalStore';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
		    },
		    useId: function () {
		      currentHookNameInDev = 'useId';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountId();
		    },
		    unstable_isNewReconciler: enableNewReconciler
		  };

		  InvalidNestedHooksDispatcherOnUpdateInDEV = {
		    readContext: function (context) {
		      warnInvalidContextAccess();
		      return readContext(context);
		    },
		    useCallback: function (callback, deps) {
		      currentHookNameInDev = 'useCallback';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateCallback(callback, deps);
		    },
		    useContext: function (context) {
		      currentHookNameInDev = 'useContext';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return readContext(context);
		    },
		    useEffect: function (create, deps) {
		      currentHookNameInDev = 'useEffect';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateEffect(create, deps);
		    },
		    useImperativeHandle: function (ref, create, deps) {
		      currentHookNameInDev = 'useImperativeHandle';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateImperativeHandle(ref, create, deps);
		    },
		    useInsertionEffect: function (create, deps) {
		      currentHookNameInDev = 'useInsertionEffect';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateInsertionEffect(create, deps);
		    },
		    useLayoutEffect: function (create, deps) {
		      currentHookNameInDev = 'useLayoutEffect';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateLayoutEffect(create, deps);
		    },
		    useMemo: function (create, deps) {
		      currentHookNameInDev = 'useMemo';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

		      try {
		        return updateMemo(create, deps);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useReducer: function (reducer, initialArg, init) {
		      currentHookNameInDev = 'useReducer';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

		      try {
		        return updateReducer(reducer, initialArg, init);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useRef: function (initialValue) {
		      currentHookNameInDev = 'useRef';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateRef();
		    },
		    useState: function (initialState) {
		      currentHookNameInDev = 'useState';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

		      try {
		        return updateState(initialState);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useDebugValue: function (value, formatterFn) {
		      currentHookNameInDev = 'useDebugValue';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateDebugValue();
		    },
		    useDeferredValue: function (value) {
		      currentHookNameInDev = 'useDeferredValue';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateDeferredValue(value);
		    },
		    useTransition: function () {
		      currentHookNameInDev = 'useTransition';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateTransition();
		    },
		    useMutableSource: function (source, getSnapshot, subscribe) {
		      currentHookNameInDev = 'useMutableSource';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateMutableSource();
		    },
		    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
		      currentHookNameInDev = 'useSyncExternalStore';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateSyncExternalStore(subscribe, getSnapshot);
		    },
		    useId: function () {
		      currentHookNameInDev = 'useId';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateId();
		    },
		    unstable_isNewReconciler: enableNewReconciler
		  };

		  InvalidNestedHooksDispatcherOnRerenderInDEV = {
		    readContext: function (context) {
		      warnInvalidContextAccess();
		      return readContext(context);
		    },
		    useCallback: function (callback, deps) {
		      currentHookNameInDev = 'useCallback';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateCallback(callback, deps);
		    },
		    useContext: function (context) {
		      currentHookNameInDev = 'useContext';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return readContext(context);
		    },
		    useEffect: function (create, deps) {
		      currentHookNameInDev = 'useEffect';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateEffect(create, deps);
		    },
		    useImperativeHandle: function (ref, create, deps) {
		      currentHookNameInDev = 'useImperativeHandle';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateImperativeHandle(ref, create, deps);
		    },
		    useInsertionEffect: function (create, deps) {
		      currentHookNameInDev = 'useInsertionEffect';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateInsertionEffect(create, deps);
		    },
		    useLayoutEffect: function (create, deps) {
		      currentHookNameInDev = 'useLayoutEffect';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateLayoutEffect(create, deps);
		    },
		    useMemo: function (create, deps) {
		      currentHookNameInDev = 'useMemo';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

		      try {
		        return updateMemo(create, deps);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useReducer: function (reducer, initialArg, init) {
		      currentHookNameInDev = 'useReducer';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

		      try {
		        return rerenderReducer(reducer, initialArg, init);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useRef: function (initialValue) {
		      currentHookNameInDev = 'useRef';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateRef();
		    },
		    useState: function (initialState) {
		      currentHookNameInDev = 'useState';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

		      try {
		        return rerenderState(initialState);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useDebugValue: function (value, formatterFn) {
		      currentHookNameInDev = 'useDebugValue';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateDebugValue();
		    },
		    useDeferredValue: function (value) {
		      currentHookNameInDev = 'useDeferredValue';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return rerenderDeferredValue(value);
		    },
		    useTransition: function () {
		      currentHookNameInDev = 'useTransition';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return rerenderTransition();
		    },
		    useMutableSource: function (source, getSnapshot, subscribe) {
		      currentHookNameInDev = 'useMutableSource';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateMutableSource();
		    },
		    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
		      currentHookNameInDev = 'useSyncExternalStore';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateSyncExternalStore(subscribe, getSnapshot);
		    },
		    useId: function () {
		      currentHookNameInDev = 'useId';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateId();
		    },
		    unstable_isNewReconciler: enableNewReconciler
		  };
		}

		var now$1 = Scheduler.unstable_now;
		var commitTime = 0;
		var layoutEffectStartTime = -1;
		var profilerStartTime = -1;
		var passiveEffectStartTime = -1;
		/**
		 * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).
		 *
		 * The overall sequence is:
		 *   1. render
		 *   2. commit (and call `onRender`, `onCommit`)
		 *   3. check for nested updates
		 *   4. flush passive effects (and call `onPostCommit`)
		 *
		 * Nested updates are identified in step 3 above,
		 * but step 4 still applies to the work that was just committed.
		 * We use two flags to track nested updates then:
		 * one tracks whether the upcoming update is a nested update,
		 * and the other tracks whether the current update was a nested update.
		 * The first value gets synced to the second at the start of the render phase.
		 */

		var currentUpdateIsNested = false;
		var nestedUpdateScheduled = false;

		function isCurrentUpdateNested() {
		  return currentUpdateIsNested;
		}

		function markNestedUpdateScheduled() {
		  {
		    nestedUpdateScheduled = true;
		  }
		}

		function resetNestedUpdateFlag() {
		  {
		    currentUpdateIsNested = false;
		    nestedUpdateScheduled = false;
		  }
		}

		function syncNestedUpdateFlag() {
		  {
		    currentUpdateIsNested = nestedUpdateScheduled;
		    nestedUpdateScheduled = false;
		  }
		}

		function getCommitTime() {
		  return commitTime;
		}

		function recordCommitTime() {

		  commitTime = now$1();
		}

		function startProfilerTimer(fiber) {

		  profilerStartTime = now$1();

		  if (fiber.actualStartTime < 0) {
		    fiber.actualStartTime = now$1();
		  }
		}

		function stopProfilerTimerIfRunning(fiber) {

		  profilerStartTime = -1;
		}

		function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

		  if (profilerStartTime >= 0) {
		    var elapsedTime = now$1() - profilerStartTime;
		    fiber.actualDuration += elapsedTime;

		    if (overrideBaseTime) {
		      fiber.selfBaseDuration = elapsedTime;
		    }

		    profilerStartTime = -1;
		  }
		}

		function recordLayoutEffectDuration(fiber) {

		  if (layoutEffectStartTime >= 0) {
		    var elapsedTime = now$1() - layoutEffectStartTime;
		    layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
		    // Or the root (for the DevTools Profiler to read)

		    var parentFiber = fiber.return;

		    while (parentFiber !== null) {
		      switch (parentFiber.tag) {
		        case HostRoot:
		          var root = parentFiber.stateNode;
		          root.effectDuration += elapsedTime;
		          return;

		        case Profiler:
		          var parentStateNode = parentFiber.stateNode;
		          parentStateNode.effectDuration += elapsedTime;
		          return;
		      }

		      parentFiber = parentFiber.return;
		    }
		  }
		}

		function recordPassiveEffectDuration(fiber) {

		  if (passiveEffectStartTime >= 0) {
		    var elapsedTime = now$1() - passiveEffectStartTime;
		    passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
		    // Or the root (for the DevTools Profiler to read)

		    var parentFiber = fiber.return;

		    while (parentFiber !== null) {
		      switch (parentFiber.tag) {
		        case HostRoot:
		          var root = parentFiber.stateNode;

		          if (root !== null) {
		            root.passiveEffectDuration += elapsedTime;
		          }

		          return;

		        case Profiler:
		          var parentStateNode = parentFiber.stateNode;

		          if (parentStateNode !== null) {
		            // Detached fibers have their state node cleared out.
		            // In this case, the return pointer is also cleared out,
		            // so we won't be able to report the time spent in this Profiler's subtree.
		            parentStateNode.passiveEffectDuration += elapsedTime;
		          }

		          return;
		      }

		      parentFiber = parentFiber.return;
		    }
		  }
		}

		function startLayoutEffectTimer() {

		  layoutEffectStartTime = now$1();
		}

		function startPassiveEffectTimer() {

		  passiveEffectStartTime = now$1();
		}

		function transferActualDuration(fiber) {
		  // Transfer time spent rendering these children so we don't lose it
		  // after we rerender. This is used as a helper in special cases
		  // where we should count the work of multiple passes.
		  var child = fiber.child;

		  while (child) {
		    fiber.actualDuration += child.actualDuration;
		    child = child.sibling;
		  }
		}

		function createCapturedValueAtFiber(value, source) {
		  // If the value is an error, call this function immediately after it is thrown
		  // so the stack is accurate.
		  return {
		    value: value,
		    source: source,
		    stack: getStackByFiberInDevAndProd(source),
		    digest: null
		  };
		}
		function createCapturedValue(value, digest, stack) {
		  return {
		    value: value,
		    source: null,
		    stack: stack != null ? stack : null,
		    digest: digest != null ? digest : null
		  };
		}

		// This module is forked in different environments.
		// By default, return `true` to log errors to the console.
		// Forks can return `false` if this isn't desirable.
		function showErrorDialog(boundary, errorInfo) {
		  return true;
		}

		function logCapturedError(boundary, errorInfo) {
		  try {
		    var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
		    // This enables renderers like ReactNative to better manage redbox behavior.

		    if (logError === false) {
		      return;
		    }

		    var error = errorInfo.value;

		    if (true) {
		      var source = errorInfo.source;
		      var stack = errorInfo.stack;
		      var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
		      // `preventDefault()` in window `error` handler.
		      // We record this information as an expando on the error.

		      if (error != null && error._suppressLogging) {
		        if (boundary.tag === ClassComponent) {
		          // The error is recoverable and was silenced.
		          // Ignore it and don't print the stack addendum.
		          // This is handy for testing error boundaries without noise.
		          return;
		        } // The error is fatal. Since the silencing might have
		        // been accidental, we'll surface it anyway.
		        // However, the browser would have silenced the original error
		        // so we'll print it first, and then print the stack addendum.


		        console['error'](error); // Don't transform to our wrapper
		        // For a more detailed description of this block, see:
		        // https://github.com/facebook/react/pull/13384
		      }

		      var componentName = source ? getComponentNameFromFiber(source) : null;
		      var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
		      var errorBoundaryMessage;

		      if (boundary.tag === HostRoot) {
		        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';
		      } else {
		        var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';
		        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
		      }

		      var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
		      // We don't include the original error message and JS stack because the browser
		      // has already printed it. Even if the application swallows the error, it is still
		      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

		      console['error'](combinedMessage); // Don't transform to our wrapper
		    }
		  } catch (e) {
		    // This method must not throw, or React internal state will get messed up.
		    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
		    // we want to report this error outside of the normal stack as a last resort.
		    // https://github.com/facebook/react/issues/13188
		    setTimeout(function () {
		      throw e;
		    });
		  }
		}

		var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

		function createRootErrorUpdate(fiber, errorInfo, lane) {
		  var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.

		  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
		  // being called "element".

		  update.payload = {
		    element: null
		  };
		  var error = errorInfo.value;

		  update.callback = function () {
		    onUncaughtError(error);
		    logCapturedError(fiber, errorInfo);
		  };

		  return update;
		}

		function createClassErrorUpdate(fiber, errorInfo, lane) {
		  var update = createUpdate(NoTimestamp, lane);
		  update.tag = CaptureUpdate;
		  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

		  if (typeof getDerivedStateFromError === 'function') {
		    var error$1 = errorInfo.value;

		    update.payload = function () {
		      return getDerivedStateFromError(error$1);
		    };

		    update.callback = function () {
		      {
		        markFailedErrorBoundaryForHotReloading(fiber);
		      }

		      logCapturedError(fiber, errorInfo);
		    };
		  }

		  var inst = fiber.stateNode;

		  if (inst !== null && typeof inst.componentDidCatch === 'function') {
		    update.callback = function callback() {
		      {
		        markFailedErrorBoundaryForHotReloading(fiber);
		      }

		      logCapturedError(fiber, errorInfo);

		      if (typeof getDerivedStateFromError !== 'function') {
		        // To preserve the preexisting retry behavior of error boundaries,
		        // we keep track of which ones already failed during this batch.
		        // This gets reset before we yield back to the browser.
		        // TODO: Warn in strict mode if getDerivedStateFromError is
		        // not defined.
		        markLegacyErrorBoundaryAsFailed(this);
		      }

		      var error$1 = errorInfo.value;
		      var stack = errorInfo.stack;
		      this.componentDidCatch(error$1, {
		        componentStack: stack !== null ? stack : ''
		      });

		      {
		        if (typeof getDerivedStateFromError !== 'function') {
		          // If componentDidCatch is the only error boundary method defined,
		          // then it needs to call setState to recover from errors.
		          // If no state update is scheduled then the boundary will swallow the error.
		          if (!includesSomeLane(fiber.lanes, SyncLane)) {
		            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentNameFromFiber(fiber) || 'Unknown');
		          }
		        }
		      }
		    };
		  }

		  return update;
		}

		function attachPingListener(root, wakeable, lanes) {
		  // Attach a ping listener
		  //
		  // The data might resolve before we have a chance to commit the fallback. Or,
		  // in the case of a refresh, we'll never commit a fallback. So we need to
		  // attach a listener now. When it resolves ("pings"), we can decide whether to
		  // try rendering the tree again.
		  //
		  // Only attach a listener if one does not already exist for the lanes
		  // we're currently rendering (which acts like a "thread ID" here).
		  //
		  // We only need to do this in concurrent mode. Legacy Suspense always
		  // commits fallbacks synchronously, so there are no pings.
		  var pingCache = root.pingCache;
		  var threadIDs;

		  if (pingCache === null) {
		    pingCache = root.pingCache = new PossiblyWeakMap$1();
		    threadIDs = new Set();
		    pingCache.set(wakeable, threadIDs);
		  } else {
		    threadIDs = pingCache.get(wakeable);

		    if (threadIDs === undefined) {
		      threadIDs = new Set();
		      pingCache.set(wakeable, threadIDs);
		    }
		  }

		  if (!threadIDs.has(lanes)) {
		    // Memoize using the thread ID to prevent redundant listeners.
		    threadIDs.add(lanes);
		    var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);

		    {
		      if (isDevToolsPresent) {
		        // If we have pending work still, restore the original updaters
		        restorePendingUpdaters(root, lanes);
		      }
		    }

		    wakeable.then(ping, ping);
		  }
		}

		function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {
		  // Retry listener
		  //
		  // If the fallback does commit, we need to attach a different type of
		  // listener. This one schedules an update on the Suspense boundary to turn
		  // the fallback state off.
		  //
		  // Stash the wakeable on the boundary fiber so we can access it in the
		  // commit phase.
		  //
		  // When the wakeable resolves, we'll attempt to render the boundary
		  // again ("retry").
		  var wakeables = suspenseBoundary.updateQueue;

		  if (wakeables === null) {
		    var updateQueue = new Set();
		    updateQueue.add(wakeable);
		    suspenseBoundary.updateQueue = updateQueue;
		  } else {
		    wakeables.add(wakeable);
		  }
		}

		function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
		  // A legacy mode Suspense quirk, only relevant to hook components.


		  var tag = sourceFiber.tag;

		  if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
		    var currentSource = sourceFiber.alternate;

		    if (currentSource) {
		      sourceFiber.updateQueue = currentSource.updateQueue;
		      sourceFiber.memoizedState = currentSource.memoizedState;
		      sourceFiber.lanes = currentSource.lanes;
		    } else {
		      sourceFiber.updateQueue = null;
		      sourceFiber.memoizedState = null;
		    }
		  }
		}

		function getNearestSuspenseBoundaryToCapture(returnFiber) {
		  var node = returnFiber;

		  do {
		    if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
		      return node;
		    } // This boundary already captured during this render. Continue to the next
		    // boundary.


		    node = node.return;
		  } while (node !== null);

		  return null;
		}

		function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {
		  // This marks a Suspense boundary so that when we're unwinding the stack,
		  // it captures the suspended "exception" and does a second (fallback) pass.
		  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
		    // Legacy Mode Suspense
		    //
		    // If the boundary is in legacy mode, we should *not*
		    // suspend the commit. Pretend as if the suspended component rendered
		    // null and keep rendering. When the Suspense boundary completes,
		    // we'll do a second pass to render the fallback.
		    if (suspenseBoundary === returnFiber) {
		      // Special case where we suspended while reconciling the children of
		      // a Suspense boundary's inner Offscreen wrapper fiber. This happens
		      // when a React.lazy component is a direct child of a
		      // Suspense boundary.
		      //
		      // Suspense boundaries are implemented as multiple fibers, but they
		      // are a single conceptual unit. The legacy mode behavior where we
		      // pretend the suspended fiber committed as `null` won't work,
		      // because in this case the "suspended" fiber is the inner
		      // Offscreen wrapper.
		      //
		      // Because the contents of the boundary haven't started rendering
		      // yet (i.e. nothing in the tree has partially rendered) we can
		      // switch to the regular, concurrent mode behavior: mark the
		      // boundary with ShouldCapture and enter the unwind phase.
		      suspenseBoundary.flags |= ShouldCapture;
		    } else {
		      suspenseBoundary.flags |= DidCapture;
		      sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
		      // But we shouldn't call any lifecycle methods or callbacks. Remove
		      // all lifecycle effect tags.

		      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);

		      if (sourceFiber.tag === ClassComponent) {
		        var currentSourceFiber = sourceFiber.alternate;

		        if (currentSourceFiber === null) {
		          // This is a new mount. Change the tag so it's not mistaken for a
		          // completed class component. For example, we should not call
		          // componentWillUnmount if it is deleted.
		          sourceFiber.tag = IncompleteClassComponent;
		        } else {
		          // When we try rendering again, we should not reuse the current fiber,
		          // since it's known to be in an inconsistent state. Use a force update to
		          // prevent a bail out.
		          var update = createUpdate(NoTimestamp, SyncLane);
		          update.tag = ForceUpdate;
		          enqueueUpdate(sourceFiber, update, SyncLane);
		        }
		      } // The source fiber did not complete. Mark it with Sync priority to
		      // indicate that it still has pending work.


		      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
		    }

		    return suspenseBoundary;
		  } // Confirmed that the boundary is in a concurrent mode tree. Continue
		  // with the normal suspend path.
		  //
		  // After this we'll use a set of heuristics to determine whether this
		  // render pass will run to completion or restart or "suspend" the commit.
		  // The actual logic for this is spread out in different places.
		  //
		  // This first principle is that if we're going to suspend when we complete
		  // a root, then we should also restart if we get an update or ping that
		  // might unsuspend it, and vice versa. The only reason to suspend is
		  // because you think you might want to restart before committing. However,
		  // it doesn't make sense to restart only while in the period we're suspended.
		  //
		  // Restarting too aggressively is also not good because it starves out any
		  // intermediate loading state. So we use heuristics to determine when.
		  // Suspense Heuristics
		  //
		  // If nothing threw a Promise or all the same fallbacks are already showing,
		  // then don't suspend/restart.
		  //
		  // If this is an initial render of a new tree of Suspense boundaries and
		  // those trigger a fallback, then don't suspend/restart. We want to ensure
		  // that we can show the initial loading state as quickly as possible.
		  //
		  // If we hit a "Delayed" case, such as when we'd switch from content back into
		  // a fallback, then we should always suspend/restart. Transitions apply
		  // to this case. If none is defined, JND is used instead.
		  //
		  // If we're already showing a fallback and it gets "retried", allowing us to show
		  // another level, but there's still an inner boundary that would show a fallback,
		  // then we suspend/restart for 500ms since the last time we showed a fallback
		  // anywhere in the tree. This effectively throttles progressive loading into a
		  // consistent train of commits. This also gives us an opportunity to restart to
		  // get to the completed state slightly earlier.
		  //
		  // If there's ambiguity due to batching it's resolved in preference of:
		  // 1) "delayed", 2) "initial render", 3) "retry".
		  //
		  // We want to ensure that a "busy" state doesn't get force committed. We want to
		  // ensure that new initial loading states can commit as soon as possible.


		  suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in
		  // the begin phase to prevent an early bailout.

		  suspenseBoundary.lanes = rootRenderLanes;
		  return suspenseBoundary;
		}

		function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
		  // The source fiber did not complete.
		  sourceFiber.flags |= Incomplete;

		  {
		    if (isDevToolsPresent) {
		      // If we have pending work still, restore the original updaters
		      restorePendingUpdaters(root, rootRenderLanes);
		    }
		  }

		  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
		    // This is a wakeable. The component suspended.
		    var wakeable = value;
		    resetSuspendedComponent(sourceFiber);

		    {
		      if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
		        markDidThrowWhileHydratingDEV();
		      }
		    }


		    var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);

		    if (suspenseBoundary !== null) {
		      suspenseBoundary.flags &= ~ForceClientRender;
		      markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always
		      // commits fallbacks synchronously, so there are no pings.

		      if (suspenseBoundary.mode & ConcurrentMode) {
		        attachPingListener(root, wakeable, rootRenderLanes);
		      }

		      attachRetryListener(suspenseBoundary, root, wakeable);
		      return;
		    } else {
		      // No boundary was found. Unless this is a sync update, this is OK.
		      // We can suspend and wait for more data to arrive.
		      if (!includesSyncLane(rootRenderLanes)) {
		        // This is not a sync update. Suspend. Since we're not activating a
		        // Suspense boundary, this will unwind all the way to the root without
		        // performing a second pass to render a fallback. (This is arguably how
		        // refresh transitions should work, too, since we're not going to commit
		        // the fallbacks anyway.)
		        //
		        // This case also applies to initial hydration.
		        attachPingListener(root, wakeable, rootRenderLanes);
		        renderDidSuspendDelayIfPossible();
		        return;
		      } // This is a sync/discrete update. We treat this case like an error
		      // because discrete renders are expected to produce a complete tree
		      // synchronously to maintain consistency with external state.


		      var uncaughtSuspenseError = new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To ' + 'fix, updates that suspend should be wrapped ' + 'with startTransition.'); // If we're outside a transition, fall through to the regular error path.
		      // The error will be caught by the nearest suspense boundary.

		      value = uncaughtSuspenseError;
		    }
		  } else {
		    // This is a regular error, not a Suspense wakeable.
		    if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
		      markDidThrowWhileHydratingDEV();

		      var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by
		      // discarding the dehydrated content and switching to a client render.
		      // Instead of surfacing the error, find the nearest Suspense boundary
		      // and render it again without hydration.


		      if (_suspenseBoundary !== null) {
		        if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
		          // Set a flag to indicate that we should try rendering the normal
		          // children again, not the fallback.
		          _suspenseBoundary.flags |= ForceClientRender;
		        }

		        markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should
		        // still log it so it can be fixed.

		        queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
		        return;
		      }
		    }
		  }

		  value = createCapturedValueAtFiber(value, sourceFiber);
		  renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start
		  // over and traverse parent path again, this time treating the exception
		  // as an error.

		  var workInProgress = returnFiber;

		  do {
		    switch (workInProgress.tag) {
		      case HostRoot:
		        {
		          var _errorInfo = value;
		          workInProgress.flags |= ShouldCapture;
		          var lane = pickArbitraryLane(rootRenderLanes);
		          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
		          var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
		          enqueueCapturedUpdate(workInProgress, update);
		          return;
		        }

		      case ClassComponent:
		        // Capture and retry
		        var errorInfo = value;
		        var ctor = workInProgress.type;
		        var instance = workInProgress.stateNode;

		        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
		          workInProgress.flags |= ShouldCapture;

		          var _lane = pickArbitraryLane(rootRenderLanes);

		          workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state

		          var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);

		          enqueueCapturedUpdate(workInProgress, _update);
		          return;
		        }

		        break;
		    }

		    workInProgress = workInProgress.return;
		  } while (workInProgress !== null);
		}

		function getSuspendedCache() {
		  {
		    return null;
		  } // This function is called when a Suspense boundary suspends. It returns the
		}

		var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
		var didReceiveUpdate = false;
		var didWarnAboutBadClass;
		var didWarnAboutModulePatternComponent;
		var didWarnAboutContextTypeOnFunctionComponent;
		var didWarnAboutGetDerivedStateOnFunctionComponent;
		var didWarnAboutFunctionRefs;
		var didWarnAboutReassigningProps;
		var didWarnAboutRevealOrder;
		var didWarnAboutTailOptions;

		{
		  didWarnAboutBadClass = {};
		  didWarnAboutModulePatternComponent = {};
		  didWarnAboutContextTypeOnFunctionComponent = {};
		  didWarnAboutGetDerivedStateOnFunctionComponent = {};
		  didWarnAboutFunctionRefs = {};
		  didWarnAboutReassigningProps = false;
		  didWarnAboutRevealOrder = {};
		  didWarnAboutTailOptions = {};
		}

		function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
		  if (current === null) {
		    // If this is a fresh new component that hasn't been rendered yet, we
		    // won't update its child set by applying minimal side-effects. Instead,
		    // we will add them all to the child before it gets rendered. That means
		    // we can optimize this reconciliation pass by not tracking side-effects.
		    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
		  } else {
		    // If the current child is the same as the work in progress, it means that
		    // we haven't yet started any work on these children. Therefore, we use
		    // the clone algorithm to create a copy of all the current children.
		    // If we had any progressed work already, that is invalid at this point so
		    // let's throw it out.
		    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
		  }
		}

		function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
		  // This function is fork of reconcileChildren. It's used in cases where we
		  // want to reconcile without matching against the existing set. This has the
		  // effect of all current children being unmounted; even if the type and key
		  // are the same, the old child is unmounted and a new child is created.
		  //
		  // To do this, we're going to go through the reconcile algorithm twice. In
		  // the first pass, we schedule a deletion for all the current children by
		  // passing null.
		  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
		  // pass null in place of where we usually pass the current child set. This has
		  // the effect of remounting all children regardless of whether their
		  // identities match.

		  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
		}

		function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
		  // TODO: current can be non-null here even if the component
		  // hasn't yet mounted. This happens after the first render suspends.
		  // We'll need to figure out if this is fine or can cause issues.
		  {
		    if (workInProgress.type !== workInProgress.elementType) {
		      // Lazy component props can't be validated in createElement
		      // because they're only guaranteed to be resolved here.
		      var innerPropTypes = Component.propTypes;

		      if (innerPropTypes) {
		        checkPropTypes(innerPropTypes, nextProps, // Resolved props
		        'prop', getComponentNameFromType(Component));
		      }
		    }
		  }

		  var render = Component.render;
		  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

		  var nextChildren;
		  var hasId;
		  prepareToReadContext(workInProgress, renderLanes);

		  {
		    markComponentRenderStarted(workInProgress);
		  }

		  {
		    ReactCurrentOwner$1.current = workInProgress;
		    setIsRendering(true);
		    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
		    hasId = checkDidRenderIdHook();

		    if ( workInProgress.mode & StrictLegacyMode) {
		      setIsStrictModeForDevtools(true);

		      try {
		        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
		        hasId = checkDidRenderIdHook();
		      } finally {
		        setIsStrictModeForDevtools(false);
		      }
		    }

		    setIsRendering(false);
		  }

		  {
		    markComponentRenderStopped();
		  }

		  if (current !== null && !didReceiveUpdate) {
		    bailoutHooks(current, workInProgress, renderLanes);
		    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
		  }

		  if (getIsHydrating() && hasId) {
		    pushMaterializedTreeId(workInProgress);
		  } // React DevTools reads this flag.


		  workInProgress.flags |= PerformedWork;
		  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  return workInProgress.child;
		}

		function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
		  if (current === null) {
		    var type = Component.type;

		    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
		    Component.defaultProps === undefined) {
		      var resolvedType = type;

		      {
		        resolvedType = resolveFunctionForHotReloading(type);
		      } // If this is a plain function component without default props,
		      // and with only the default shallow comparison, we upgrade it
		      // to a SimpleMemoComponent to allow fast path updates.


		      workInProgress.tag = SimpleMemoComponent;
		      workInProgress.type = resolvedType;

		      {
		        validateFunctionComponentInDev(workInProgress, type);
		      }

		      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);
		    }

		    {
		      var innerPropTypes = type.propTypes;

		      if (innerPropTypes) {
		        // Inner memo component props aren't currently validated in createElement.
		        // We could move it there, but we'd still need this for lazy code path.
		        checkPropTypes(innerPropTypes, nextProps, // Resolved props
		        'prop', getComponentNameFromType(type));
		      }
		    }

		    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
		    child.ref = workInProgress.ref;
		    child.return = workInProgress;
		    workInProgress.child = child;
		    return child;
		  }

		  {
		    var _type = Component.type;
		    var _innerPropTypes = _type.propTypes;

		    if (_innerPropTypes) {
		      // Inner memo component props aren't currently validated in createElement.
		      // We could move it there, but we'd still need this for lazy code path.
		      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
		      'prop', getComponentNameFromType(_type));
		    }
		  }

		  var currentChild = current.child; // This is always exactly one child

		  var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);

		  if (!hasScheduledUpdateOrContext) {
		    // This will be the props with resolved defaultProps,
		    // unlike current.memoizedProps which will be the unresolved ones.
		    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

		    var compare = Component.compare;
		    compare = compare !== null ? compare : shallowEqual;

		    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
		      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
		    }
		  } // React DevTools reads this flag.


		  workInProgress.flags |= PerformedWork;
		  var newChild = createWorkInProgress(currentChild, nextProps);
		  newChild.ref = workInProgress.ref;
		  newChild.return = workInProgress;
		  workInProgress.child = newChild;
		  return newChild;
		}

		function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
		  // TODO: current can be non-null here even if the component
		  // hasn't yet mounted. This happens when the inner render suspends.
		  // We'll need to figure out if this is fine or can cause issues.
		  {
		    if (workInProgress.type !== workInProgress.elementType) {
		      // Lazy component props can't be validated in createElement
		      // because they're only guaranteed to be resolved here.
		      var outerMemoType = workInProgress.elementType;

		      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
		        // We warn when you define propTypes on lazy()
		        // so let's just skip over it to find memo() outer wrapper.
		        // Inner props for memo are validated later.
		        var lazyComponent = outerMemoType;
		        var payload = lazyComponent._payload;
		        var init = lazyComponent._init;

		        try {
		          outerMemoType = init(payload);
		        } catch (x) {
		          outerMemoType = null;
		        } // Inner propTypes will be validated in the function component path.


		        var outerPropTypes = outerMemoType && outerMemoType.propTypes;

		        if (outerPropTypes) {
		          checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
		          'prop', getComponentNameFromType(outerMemoType));
		        }
		      }
		    }
		  }

		  if (current !== null) {
		    var prevProps = current.memoizedProps;

		    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
		     workInProgress.type === current.type )) {
		      didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we
		      // would during a normal fiber bailout.
		      //
		      // We don't have strong guarantees that the props object is referentially
		      // equal during updates where we can't bail out anyway — like if the props
		      // are shallowly equal, but there's a local state or context update in the
		      // same batch.
		      //
		      // However, as a principle, we should aim to make the behavior consistent
		      // across different ways of memoizing a component. For example, React.memo
		      // has a different internal Fiber layout if you pass a normal function
		      // component (SimpleMemoComponent) versus if you pass a different type
		      // like forwardRef (MemoComponent). But this is an implementation detail.
		      // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't
		      // affect whether the props object is reused during a bailout.

		      workInProgress.pendingProps = nextProps = prevProps;

		      if (!checkScheduledUpdateOrContext(current, renderLanes)) {
		        // The pending lanes were cleared at the beginning of beginWork. We're
		        // about to bail out, but there might be other lanes that weren't
		        // included in the current render. Usually, the priority level of the
		        // remaining updates is accumulated during the evaluation of the
		        // component (i.e. when processing the update queue). But since since
		        // we're bailing out early *without* evaluating the component, we need
		        // to account for it here, too. Reset to the value of the current fiber.
		        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
		        // because a MemoComponent fiber does not have hooks or an update queue;
		        // rather, it wraps around an inner component, which may or may not
		        // contains hooks.
		        // TODO: Move the reset at in beginWork out of the common path so that
		        // this is no longer necessary.
		        workInProgress.lanes = current.lanes;
		        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
		      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
		        // This is a special case that only exists for legacy mode.
		        // See https://github.com/facebook/react/pull/19216.
		        didReceiveUpdate = true;
		      }
		    }
		  }

		  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
		}

		function updateOffscreenComponent(current, workInProgress, renderLanes) {
		  var nextProps = workInProgress.pendingProps;
		  var nextChildren = nextProps.children;
		  var prevState = current !== null ? current.memoizedState : null;

		  if (nextProps.mode === 'hidden' || enableLegacyHidden ) {
		    // Rendering a hidden tree.
		    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
		      // In legacy sync mode, don't defer the subtree. Render it now.
		      // TODO: Consider how Offscreen should work with transitions in the future
		      var nextState = {
		        baseLanes: NoLanes,
		        cachePool: null,
		        transitions: null
		      };
		      workInProgress.memoizedState = nextState;

		      pushRenderLanes(workInProgress, renderLanes);
		    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
		      var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out
		      // and resume this tree later.

		      var nextBaseLanes;

		      if (prevState !== null) {
		        var prevBaseLanes = prevState.baseLanes;
		        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
		      } else {
		        nextBaseLanes = renderLanes;
		      } // Schedule this fiber to re-render at offscreen priority. Then bailout.


		      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
		      var _nextState = {
		        baseLanes: nextBaseLanes,
		        cachePool: spawnedCachePool,
		        transitions: null
		      };
		      workInProgress.memoizedState = _nextState;
		      workInProgress.updateQueue = null;
		      // to avoid a push/pop misalignment.


		      pushRenderLanes(workInProgress, nextBaseLanes);

		      return null;
		    } else {
		      // This is the second render. The surrounding visible content has already
		      // committed. Now we resume rendering the hidden tree.
		      // Rendering at offscreen, so we can clear the base lanes.
		      var _nextState2 = {
		        baseLanes: NoLanes,
		        cachePool: null,
		        transitions: null
		      };
		      workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.

		      var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;

		      pushRenderLanes(workInProgress, subtreeRenderLanes);
		    }
		  } else {
		    // Rendering a visible tree.
		    var _subtreeRenderLanes;

		    if (prevState !== null) {
		      // We're going from hidden -> visible.
		      _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);

		      workInProgress.memoizedState = null;
		    } else {
		      // We weren't previously hidden, and we still aren't, so there's nothing
		      // special to do. Need to push to the stack regardless, though, to avoid
		      // a push/pop misalignment.
		      _subtreeRenderLanes = renderLanes;
		    }

		    pushRenderLanes(workInProgress, _subtreeRenderLanes);
		  }

		  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  return workInProgress.child;
		} // Note: These happen to have identical begin phases, for now. We shouldn't hold

		function updateFragment(current, workInProgress, renderLanes) {
		  var nextChildren = workInProgress.pendingProps;
		  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  return workInProgress.child;
		}

		function updateMode(current, workInProgress, renderLanes) {
		  var nextChildren = workInProgress.pendingProps.children;
		  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  return workInProgress.child;
		}

		function updateProfiler(current, workInProgress, renderLanes) {
		  {
		    workInProgress.flags |= Update;

		    {
		      // Reset effect durations for the next eventual effect phase.
		      // These are reset during render to allow the DevTools commit hook a chance to read them,
		      var stateNode = workInProgress.stateNode;
		      stateNode.effectDuration = 0;
		      stateNode.passiveEffectDuration = 0;
		    }
		  }

		  var nextProps = workInProgress.pendingProps;
		  var nextChildren = nextProps.children;
		  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  return workInProgress.child;
		}

		function markRef(current, workInProgress) {
		  var ref = workInProgress.ref;

		  if (current === null && ref !== null || current !== null && current.ref !== ref) {
		    // Schedule a Ref effect
		    workInProgress.flags |= Ref;

		    {
		      workInProgress.flags |= RefStatic;
		    }
		  }
		}

		function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
		  {
		    if (workInProgress.type !== workInProgress.elementType) {
		      // Lazy component props can't be validated in createElement
		      // because they're only guaranteed to be resolved here.
		      var innerPropTypes = Component.propTypes;

		      if (innerPropTypes) {
		        checkPropTypes(innerPropTypes, nextProps, // Resolved props
		        'prop', getComponentNameFromType(Component));
		      }
		    }
		  }

		  var context;

		  {
		    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
		    context = getMaskedContext(workInProgress, unmaskedContext);
		  }

		  var nextChildren;
		  var hasId;
		  prepareToReadContext(workInProgress, renderLanes);

		  {
		    markComponentRenderStarted(workInProgress);
		  }

		  {
		    ReactCurrentOwner$1.current = workInProgress;
		    setIsRendering(true);
		    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
		    hasId = checkDidRenderIdHook();

		    if ( workInProgress.mode & StrictLegacyMode) {
		      setIsStrictModeForDevtools(true);

		      try {
		        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
		        hasId = checkDidRenderIdHook();
		      } finally {
		        setIsStrictModeForDevtools(false);
		      }
		    }

		    setIsRendering(false);
		  }

		  {
		    markComponentRenderStopped();
		  }

		  if (current !== null && !didReceiveUpdate) {
		    bailoutHooks(current, workInProgress, renderLanes);
		    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
		  }

		  if (getIsHydrating() && hasId) {
		    pushMaterializedTreeId(workInProgress);
		  } // React DevTools reads this flag.


		  workInProgress.flags |= PerformedWork;
		  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  return workInProgress.child;
		}

		function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
		  {
		    // This is used by DevTools to force a boundary to error.
		    switch (shouldError(workInProgress)) {
		      case false:
		        {
		          var _instance = workInProgress.stateNode;
		          var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.
		          // Is there a better way to do this?

		          var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);
		          var state = tempInstance.state;

		          _instance.updater.enqueueSetState(_instance, state, null);

		          break;
		        }

		      case true:
		        {
		          workInProgress.flags |= DidCapture;
		          workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes

		          var error$1 = new Error('Simulated error coming from DevTools');
		          var lane = pickArbitraryLane(renderLanes);
		          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state

		          var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);
		          enqueueCapturedUpdate(workInProgress, update);
		          break;
		        }
		    }

		    if (workInProgress.type !== workInProgress.elementType) {
		      // Lazy component props can't be validated in createElement
		      // because they're only guaranteed to be resolved here.
		      var innerPropTypes = Component.propTypes;

		      if (innerPropTypes) {
		        checkPropTypes(innerPropTypes, nextProps, // Resolved props
		        'prop', getComponentNameFromType(Component));
		      }
		    }
		  } // Push context providers early to prevent context stack mismatches.
		  // During mounting we don't know the child context yet as the instance doesn't exist.
		  // We will invalidate the child context in finishClassComponent() right after rendering.


		  var hasContext;

		  if (isContextProvider(Component)) {
		    hasContext = true;
		    pushContextProvider(workInProgress);
		  } else {
		    hasContext = false;
		  }

		  prepareToReadContext(workInProgress, renderLanes);
		  var instance = workInProgress.stateNode;
		  var shouldUpdate;

		  if (instance === null) {
		    resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.

		    constructClassInstance(workInProgress, Component, nextProps);
		    mountClassInstance(workInProgress, Component, nextProps, renderLanes);
		    shouldUpdate = true;
		  } else if (current === null) {
		    // In a resume, we'll already have an instance we can reuse.
		    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
		  } else {
		    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
		  }

		  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);

		  {
		    var inst = workInProgress.stateNode;

		    if (shouldUpdate && inst.props !== nextProps) {
		      if (!didWarnAboutReassigningProps) {
		        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromFiber(workInProgress) || 'a component');
		      }

		      didWarnAboutReassigningProps = true;
		    }
		  }

		  return nextUnitOfWork;
		}

		function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
		  // Refs should update even if shouldComponentUpdate returns false
		  markRef(current, workInProgress);
		  var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;

		  if (!shouldUpdate && !didCaptureError) {
		    // Context providers should defer to sCU for rendering
		    if (hasContext) {
		      invalidateContextProvider(workInProgress, Component, false);
		    }

		    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
		  }

		  var instance = workInProgress.stateNode; // Rerender

		  ReactCurrentOwner$1.current = workInProgress;
		  var nextChildren;

		  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
		    // If we captured an error, but getDerivedStateFromError is not defined,
		    // unmount all the children. componentDidCatch will schedule an update to
		    // re-render a fallback. This is temporary until we migrate everyone to
		    // the new API.
		    // TODO: Warn in a future release.
		    nextChildren = null;

		    {
		      stopProfilerTimerIfRunning();
		    }
		  } else {
		    {
		      markComponentRenderStarted(workInProgress);
		    }

		    {
		      setIsRendering(true);
		      nextChildren = instance.render();

		      if ( workInProgress.mode & StrictLegacyMode) {
		        setIsStrictModeForDevtools(true);

		        try {
		          instance.render();
		        } finally {
		          setIsStrictModeForDevtools(false);
		        }
		      }

		      setIsRendering(false);
		    }

		    {
		      markComponentRenderStopped();
		    }
		  } // React DevTools reads this flag.


		  workInProgress.flags |= PerformedWork;

		  if (current !== null && didCaptureError) {
		    // If we're recovering from an error, reconcile without reusing any of
		    // the existing children. Conceptually, the normal children and the children
		    // that are shown on error are two different sets, so we shouldn't reuse
		    // normal children even if their identities match.
		    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
		  } else {
		    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  } // Memoize state using the values we just used to render.
		  // TODO: Restructure so we never read values from the instance.


		  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

		  if (hasContext) {
		    invalidateContextProvider(workInProgress, Component, true);
		  }

		  return workInProgress.child;
		}

		function pushHostRootContext(workInProgress) {
		  var root = workInProgress.stateNode;

		  if (root.pendingContext) {
		    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
		  } else if (root.context) {
		    // Should always be set
		    pushTopLevelContextObject(workInProgress, root.context, false);
		  }

		  pushHostContainer(workInProgress, root.containerInfo);
		}

		function updateHostRoot(current, workInProgress, renderLanes) {
		  pushHostRootContext(workInProgress);

		  if (current === null) {
		    throw new Error('Should have a current fiber. This is a bug in React.');
		  }

		  var nextProps = workInProgress.pendingProps;
		  var prevState = workInProgress.memoizedState;
		  var prevChildren = prevState.element;
		  cloneUpdateQueue(current, workInProgress);
		  processUpdateQueue(workInProgress, nextProps, null, renderLanes);
		  var nextState = workInProgress.memoizedState;
		  workInProgress.stateNode;
		  // being called "element".


		  var nextChildren = nextState.element;

		  if ( prevState.isDehydrated) {
		    // This is a hydration root whose shell has not yet hydrated. We should
		    // attempt to hydrate.
		    // Flip isDehydrated to false to indicate that when this render
		    // finishes, the root will no longer be dehydrated.
		    var overrideState = {
		      element: nextChildren,
		      isDehydrated: false,
		      cache: nextState.cache,
		      pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
		      transitions: nextState.transitions
		    };
		    var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't
		    // have reducer functions so it doesn't need rebasing.

		    updateQueue.baseState = overrideState;
		    workInProgress.memoizedState = overrideState;

		    if (workInProgress.flags & ForceClientRender) {
		      // Something errored during a previous attempt to hydrate the shell, so we
		      // forced a client render.
		      var recoverableError = createCapturedValueAtFiber(new Error('There was an error while hydrating. Because the error happened outside ' + 'of a Suspense boundary, the entire root will switch to ' + 'client rendering.'), workInProgress);
		      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);
		    } else if (nextChildren !== prevChildren) {
		      var _recoverableError = createCapturedValueAtFiber(new Error('This root received an early update, before anything was able ' + 'hydrate. Switched the entire root to client rendering.'), workInProgress);

		      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);
		    } else {
		      // The outermost shell has not hydrated yet. Start hydrating.
		      enterHydrationState(workInProgress);

		      var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
		      workInProgress.child = child;
		      var node = child;

		      while (node) {
		        // Mark each child as hydrating. This is a fast path to know whether this
		        // tree is part of a hydrating tree. This is used to determine if a child
		        // node has fully mounted yet, and for scheduling event replaying.
		        // Conceptually this is similar to Placement in that a new subtree is
		        // inserted into the React tree here. It just happens to not need DOM
		        // mutations because it already exists.
		        node.flags = node.flags & ~Placement | Hydrating;
		        node = node.sibling;
		      }
		    }
		  } else {
		    // Root is not dehydrated. Either this is a client-only root, or it
		    // already hydrated.
		    resetHydrationState();

		    if (nextChildren === prevChildren) {
		      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
		    }

		    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  }

		  return workInProgress.child;
		}

		function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {
		  // Revert to client rendering.
		  resetHydrationState();
		  queueHydrationError(recoverableError);
		  workInProgress.flags |= ForceClientRender;
		  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  return workInProgress.child;
		}

		function updateHostComponent(current, workInProgress, renderLanes) {
		  pushHostContext(workInProgress);

		  if (current === null) {
		    tryToClaimNextHydratableInstance(workInProgress);
		  }

		  var type = workInProgress.type;
		  var nextProps = workInProgress.pendingProps;
		  var prevProps = current !== null ? current.memoizedProps : null;
		  var nextChildren = nextProps.children;
		  var isDirectTextChild = shouldSetTextContent(type, nextProps);

		  if (isDirectTextChild) {
		    // We special case a direct text child of a host node. This is a common
		    // case. We won't handle it as a reified child. We will instead handle
		    // this in the host environment that also has access to this prop. That
		    // avoids allocating another HostText fiber and traversing it.
		    nextChildren = null;
		  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
		    // If we're switching from a direct text child to a normal child, or to
		    // empty, we need to schedule the text content to be reset.
		    workInProgress.flags |= ContentReset;
		  }

		  markRef(current, workInProgress);
		  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  return workInProgress.child;
		}

		function updateHostText(current, workInProgress) {
		  if (current === null) {
		    tryToClaimNextHydratableInstance(workInProgress);
		  } // Nothing to do here. This is terminal. We'll do the completion step
		  // immediately after.


		  return null;
		}

		function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {
		  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
		  var props = workInProgress.pendingProps;
		  var lazyComponent = elementType;
		  var payload = lazyComponent._payload;
		  var init = lazyComponent._init;
		  var Component = init(payload); // Store the unwrapped component in the type.

		  workInProgress.type = Component;
		  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
		  var resolvedProps = resolveDefaultProps(Component, props);
		  var child;

		  switch (resolvedTag) {
		    case FunctionComponent:
		      {
		        {
		          validateFunctionComponentInDev(workInProgress, Component);
		          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
		        }

		        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
		        return child;
		      }

		    case ClassComponent:
		      {
		        {
		          workInProgress.type = Component = resolveClassForHotReloading(Component);
		        }

		        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
		        return child;
		      }

		    case ForwardRef:
		      {
		        {
		          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
		        }

		        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
		        return child;
		      }

		    case MemoComponent:
		      {
		        {
		          if (workInProgress.type !== workInProgress.elementType) {
		            var outerPropTypes = Component.propTypes;

		            if (outerPropTypes) {
		              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
		              'prop', getComponentNameFromType(Component));
		            }
		          }
		        }

		        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
		        renderLanes);
		        return child;
		      }
		  }

		  var hint = '';

		  {
		    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
		      hint = ' Did you wrap a component in React.lazy() more than once?';
		    }
		  } // This message intentionally doesn't mention ForwardRef or MemoComponent
		  // because the fact that it's a separate type of work is an
		  // implementation detail.


		  throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
		}

		function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
		  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.

		  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
		  // Push context providers early to prevent context stack mismatches.
		  // During mounting we don't know the child context yet as the instance doesn't exist.
		  // We will invalidate the child context in finishClassComponent() right after rendering.

		  var hasContext;

		  if (isContextProvider(Component)) {
		    hasContext = true;
		    pushContextProvider(workInProgress);
		  } else {
		    hasContext = false;
		  }

		  prepareToReadContext(workInProgress, renderLanes);
		  constructClassInstance(workInProgress, Component, nextProps);
		  mountClassInstance(workInProgress, Component, nextProps, renderLanes);
		  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
		}

		function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
		  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
		  var props = workInProgress.pendingProps;
		  var context;

		  {
		    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
		    context = getMaskedContext(workInProgress, unmaskedContext);
		  }

		  prepareToReadContext(workInProgress, renderLanes);
		  var value;
		  var hasId;

		  {
		    markComponentRenderStarted(workInProgress);
		  }

		  {
		    if (Component.prototype && typeof Component.prototype.render === 'function') {
		      var componentName = getComponentNameFromType(Component) || 'Unknown';

		      if (!didWarnAboutBadClass[componentName]) {
		        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

		        didWarnAboutBadClass[componentName] = true;
		      }
		    }

		    if (workInProgress.mode & StrictLegacyMode) {
		      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
		    }

		    setIsRendering(true);
		    ReactCurrentOwner$1.current = workInProgress;
		    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
		    hasId = checkDidRenderIdHook();
		    setIsRendering(false);
		  }

		  {
		    markComponentRenderStopped();
		  } // React DevTools reads this flag.


		  workInProgress.flags |= PerformedWork;

		  {
		    // Support for module components is deprecated and is removed behind a flag.
		    // Whether or not it would crash later, we want to show a good message in DEV first.
		    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
		      var _componentName = getComponentNameFromType(Component) || 'Unknown';

		      if (!didWarnAboutModulePatternComponent[_componentName]) {
		        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

		        didWarnAboutModulePatternComponent[_componentName] = true;
		      }
		    }
		  }

		  if ( // Run these checks in production only if the flag is off.
		  // Eventually we'll delete this branch altogether.
		   typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
		    {
		      var _componentName2 = getComponentNameFromType(Component) || 'Unknown';

		      if (!didWarnAboutModulePatternComponent[_componentName2]) {
		        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);

		        didWarnAboutModulePatternComponent[_componentName2] = true;
		      }
		    } // Proceed under the assumption that this is a class instance


		    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

		    workInProgress.memoizedState = null;
		    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
		    // During mounting we don't know the child context yet as the instance doesn't exist.
		    // We will invalidate the child context in finishClassComponent() right after rendering.

		    var hasContext = false;

		    if (isContextProvider(Component)) {
		      hasContext = true;
		      pushContextProvider(workInProgress);
		    } else {
		      hasContext = false;
		    }

		    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
		    initializeUpdateQueue(workInProgress);
		    adoptClassInstance(workInProgress, value);
		    mountClassInstance(workInProgress, Component, props, renderLanes);
		    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
		  } else {
		    // Proceed under the assumption that this is a function component
		    workInProgress.tag = FunctionComponent;

		    {

		      if ( workInProgress.mode & StrictLegacyMode) {
		        setIsStrictModeForDevtools(true);

		        try {
		          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
		          hasId = checkDidRenderIdHook();
		        } finally {
		          setIsStrictModeForDevtools(false);
		        }
		      }
		    }

		    if (getIsHydrating() && hasId) {
		      pushMaterializedTreeId(workInProgress);
		    }

		    reconcileChildren(null, workInProgress, value, renderLanes);

		    {
		      validateFunctionComponentInDev(workInProgress, Component);
		    }

		    return workInProgress.child;
		  }
		}

		function validateFunctionComponentInDev(workInProgress, Component) {
		  {
		    if (Component) {
		      if (Component.childContextTypes) {
		        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
		      }
		    }

		    if (workInProgress.ref !== null) {
		      var info = '';
		      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

		      if (ownerName) {
		        info += '\n\nCheck the render method of `' + ownerName + '`.';
		      }

		      var warningKey = ownerName || '';
		      var debugSource = workInProgress._debugSource;

		      if (debugSource) {
		        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
		      }

		      if (!didWarnAboutFunctionRefs[warningKey]) {
		        didWarnAboutFunctionRefs[warningKey] = true;

		        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
		      }
		    }

		    if (typeof Component.getDerivedStateFromProps === 'function') {
		      var _componentName3 = getComponentNameFromType(Component) || 'Unknown';

		      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
		        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);

		        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
		      }
		    }

		    if (typeof Component.contextType === 'object' && Component.contextType !== null) {
		      var _componentName4 = getComponentNameFromType(Component) || 'Unknown';

		      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
		        error('%s: Function components do not support contextType.', _componentName4);

		        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
		      }
		    }
		  }
		}

		var SUSPENDED_MARKER = {
		  dehydrated: null,
		  treeContext: null,
		  retryLane: NoLane
		};

		function mountSuspenseOffscreenState(renderLanes) {
		  return {
		    baseLanes: renderLanes,
		    cachePool: getSuspendedCache(),
		    transitions: null
		  };
		}

		function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
		  var cachePool = null;

		  return {
		    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),
		    cachePool: cachePool,
		    transitions: prevOffscreenState.transitions
		  };
		} // TODO: Probably should inline this back


		function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
		  // If we're already showing a fallback, there are cases where we need to
		  // remain on that fallback regardless of whether the content has resolved.
		  // For example, SuspenseList coordinates when nested content appears.
		  if (current !== null) {
		    var suspenseState = current.memoizedState;

		    if (suspenseState === null) {
		      // Currently showing content. Don't hide it, even if ForceSuspenseFallback
		      // is true. More precise name might be "ForceRemainSuspenseFallback".
		      // Note: This is a factoring smell. Can't remain on a fallback if there's
		      // no fallback to remain on.
		      return false;
		    }
		  } // Not currently showing content. Consult the Suspense context.


		  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
		}

		function getRemainingWorkInPrimaryTree(current, renderLanes) {
		  // TODO: Should not remove render lanes that were pinged during this render
		  return removeLanes(current.childLanes, renderLanes);
		}

		function updateSuspenseComponent(current, workInProgress, renderLanes) {
		  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

		  {
		    if (shouldSuspend(workInProgress)) {
		      workInProgress.flags |= DidCapture;
		    }
		  }

		  var suspenseContext = suspenseStackCursor.current;
		  var showFallback = false;
		  var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;

		  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
		    // Something in this boundary's subtree already suspended. Switch to
		    // rendering the fallback children.
		    showFallback = true;
		    workInProgress.flags &= ~DidCapture;
		  } else {
		    // Attempting the main content
		    if (current === null || current.memoizedState !== null) {
		      // This is a new mount or this boundary is already showing a fallback state.
		      // Mark this subtree context as having at least one invisible parent that could
		      // handle the fallback state.
		      // Avoided boundaries are not considered since they cannot handle preferred fallback states.
		      {
		        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
		      }
		    }
		  }

		  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
		  pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
		  // boundary's children. This involves some custom reconciliation logic. Two
		  // main reasons this is so complicated.
		  //
		  // First, Legacy Mode has different semantics for backwards compatibility. The
		  // primary tree will commit in an inconsistent state, so when we do the
		  // second pass to render the fallback, we do some exceedingly, uh, clever
		  // hacks to make that not totally break. Like transferring effects and
		  // deletions from hidden tree. In Concurrent Mode, it's much simpler,
		  // because we bailout on the primary tree completely and leave it in its old
		  // state, no effects. Same as what we do for Offscreen (except that
		  // Offscreen doesn't have the first render pass).
		  //
		  // Second is hydration. During hydration, the Suspense fiber has a slightly
		  // different layout, where the child points to a dehydrated fragment, which
		  // contains the DOM rendered by the server.
		  //
		  // Third, even if you set all that aside, Suspense is like error boundaries in
		  // that we first we try to render one tree, and if that fails, we render again
		  // and switch to a different tree. Like a try/catch block. So we have to track
		  // which branch we're currently rendering. Ideally we would model this using
		  // a stack.

		  if (current === null) {
		    // Initial mount
		    // Special path for hydration
		    // If we're currently hydrating, try to hydrate this boundary.
		    tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.

		    var suspenseState = workInProgress.memoizedState;

		    if (suspenseState !== null) {
		      var dehydrated = suspenseState.dehydrated;

		      if (dehydrated !== null) {
		        return mountDehydratedSuspenseComponent(workInProgress, dehydrated);
		      }
		    }

		    var nextPrimaryChildren = nextProps.children;
		    var nextFallbackChildren = nextProps.fallback;

		    if (showFallback) {
		      var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
		      var primaryChildFragment = workInProgress.child;
		      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
		      workInProgress.memoizedState = SUSPENDED_MARKER;

		      return fallbackFragment;
		    } else {
		      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
		    }
		  } else {
		    // This is an update.
		    // Special path for hydration
		    var prevState = current.memoizedState;

		    if (prevState !== null) {
		      var _dehydrated = prevState.dehydrated;

		      if (_dehydrated !== null) {
		        return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);
		      }
		    }

		    if (showFallback) {
		      var _nextFallbackChildren = nextProps.fallback;
		      var _nextPrimaryChildren = nextProps.children;
		      var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);
		      var _primaryChildFragment2 = workInProgress.child;
		      var prevOffscreenState = current.child.memoizedState;
		      _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);

		      _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
		      workInProgress.memoizedState = SUSPENDED_MARKER;
		      return fallbackChildFragment;
		    } else {
		      var _nextPrimaryChildren2 = nextProps.children;

		      var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);

		      workInProgress.memoizedState = null;
		      return _primaryChildFragment3;
		    }
		  }
		}

		function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
		  var mode = workInProgress.mode;
		  var primaryChildProps = {
		    mode: 'visible',
		    children: primaryChildren
		  };
		  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
		  primaryChildFragment.return = workInProgress;
		  workInProgress.child = primaryChildFragment;
		  return primaryChildFragment;
		}

		function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
		  var mode = workInProgress.mode;
		  var progressedPrimaryFragment = workInProgress.child;
		  var primaryChildProps = {
		    mode: 'hidden',
		    children: primaryChildren
		  };
		  var primaryChildFragment;
		  var fallbackChildFragment;

		  if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
		    // In legacy mode, we commit the primary tree as if it successfully
		    // completed, even though it's in an inconsistent state.
		    primaryChildFragment = progressedPrimaryFragment;
		    primaryChildFragment.childLanes = NoLanes;
		    primaryChildFragment.pendingProps = primaryChildProps;

		    if ( workInProgress.mode & ProfileMode) {
		      // Reset the durations from the first pass so they aren't included in the
		      // final amounts. This seems counterintuitive, since we're intentionally
		      // not measuring part of the render phase, but this makes it match what we
		      // do in Concurrent Mode.
		      primaryChildFragment.actualDuration = 0;
		      primaryChildFragment.actualStartTime = -1;
		      primaryChildFragment.selfBaseDuration = 0;
		      primaryChildFragment.treeBaseDuration = 0;
		    }

		    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
		  } else {
		    primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
		    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
		  }

		  primaryChildFragment.return = workInProgress;
		  fallbackChildFragment.return = workInProgress;
		  primaryChildFragment.sibling = fallbackChildFragment;
		  workInProgress.child = primaryChildFragment;
		  return fallbackChildFragment;
		}

		function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {
		  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use
		  // this wrapper function to constrain it.
		  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
		}

		function updateWorkInProgressOffscreenFiber(current, offscreenProps) {
		  // The props argument to `createWorkInProgress` is `any` typed, so we use this
		  // wrapper function to constrain it.
		  return createWorkInProgress(current, offscreenProps);
		}

		function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
		  var currentPrimaryChildFragment = current.child;
		  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
		  var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
		    mode: 'visible',
		    children: primaryChildren
		  });

		  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
		    primaryChildFragment.lanes = renderLanes;
		  }

		  primaryChildFragment.return = workInProgress;
		  primaryChildFragment.sibling = null;

		  if (currentFallbackChildFragment !== null) {
		    // Delete the fallback child fragment
		    var deletions = workInProgress.deletions;

		    if (deletions === null) {
		      workInProgress.deletions = [currentFallbackChildFragment];
		      workInProgress.flags |= ChildDeletion;
		    } else {
		      deletions.push(currentFallbackChildFragment);
		    }
		  }

		  workInProgress.child = primaryChildFragment;
		  return primaryChildFragment;
		}

		function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
		  var mode = workInProgress.mode;
		  var currentPrimaryChildFragment = current.child;
		  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
		  var primaryChildProps = {
		    mode: 'hidden',
		    children: primaryChildren
		  };
		  var primaryChildFragment;

		  if ( // In legacy mode, we commit the primary tree as if it successfully
		  // completed, even though it's in an inconsistent state.
		  (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
		  // already cloned. In legacy mode, the only case where this isn't true is
		  // when DevTools forces us to display a fallback; we skip the first render
		  // pass entirely and go straight to rendering the fallback. (In Concurrent
		  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
		  // only codepath.)
		  workInProgress.child !== currentPrimaryChildFragment) {
		    var progressedPrimaryFragment = workInProgress.child;
		    primaryChildFragment = progressedPrimaryFragment;
		    primaryChildFragment.childLanes = NoLanes;
		    primaryChildFragment.pendingProps = primaryChildProps;

		    if ( workInProgress.mode & ProfileMode) {
		      // Reset the durations from the first pass so they aren't included in the
		      // final amounts. This seems counterintuitive, since we're intentionally
		      // not measuring part of the render phase, but this makes it match what we
		      // do in Concurrent Mode.
		      primaryChildFragment.actualDuration = 0;
		      primaryChildFragment.actualStartTime = -1;
		      primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
		      primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
		    } // The fallback fiber was added as a deletion during the first pass.
		    // However, since we're going to remain on the fallback, we no longer want
		    // to delete it.


		    workInProgress.deletions = null;
		  } else {
		    primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.
		    // (We don't do this in legacy mode, because in legacy mode we don't re-use
		    // the current tree; see previous branch.)

		    primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
		  }

		  var fallbackChildFragment;

		  if (currentFallbackChildFragment !== null) {
		    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
		  } else {
		    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
		    // mounted but this is a new fiber.

		    fallbackChildFragment.flags |= Placement;
		  }

		  fallbackChildFragment.return = workInProgress;
		  primaryChildFragment.return = workInProgress;
		  primaryChildFragment.sibling = fallbackChildFragment;
		  workInProgress.child = primaryChildFragment;
		  return fallbackChildFragment;
		}

		function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {
		  // Falling back to client rendering. Because this has performance
		  // implications, it's considered a recoverable error, even though the user
		  // likely won't observe anything wrong with the UI.
		  //
		  // The error is passed in as an argument to enforce that every caller provide
		  // a custom message, or explicitly opt out (currently the only path that opts
		  // out is legacy mode; every concurrent path provides an error).
		  if (recoverableError !== null) {
		    queueHydrationError(recoverableError);
		  } // This will add the old fiber to the deletion list


		  reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.

		  var nextProps = workInProgress.pendingProps;
		  var primaryChildren = nextProps.children;
		  var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already
		  // mounted but this is a new fiber.

		  primaryChildFragment.flags |= Placement;
		  workInProgress.memoizedState = null;
		  return primaryChildFragment;
		}

		function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
		  var fiberMode = workInProgress.mode;
		  var primaryChildProps = {
		    mode: 'visible',
		    children: primaryChildren
		  };
		  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
		  var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense
		  // boundary) already mounted but this is a new fiber.

		  fallbackChildFragment.flags |= Placement;
		  primaryChildFragment.return = workInProgress;
		  fallbackChildFragment.return = workInProgress;
		  primaryChildFragment.sibling = fallbackChildFragment;
		  workInProgress.child = primaryChildFragment;

		  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
		    // We will have dropped the effect list which contains the
		    // deletion. We need to reconcile to delete the current child.
		    reconcileChildFibers(workInProgress, current.child, null, renderLanes);
		  }

		  return fallbackChildFragment;
		}

		function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {
		  // During the first pass, we'll bail out and not drill into the children.
		  // Instead, we'll leave the content in place and try to hydrate it later.
		  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
		    {
		      error('Cannot hydrate Suspense in legacy mode. Switch from ' + 'ReactDOM.hydrate(element, container) to ' + 'ReactDOMClient.hydrateRoot(container, <App />)' + '.render(element) or remove the Suspense components from ' + 'the server rendered components.');
		    }

		    workInProgress.lanes = laneToLanes(SyncLane);
		  } else if (isSuspenseInstanceFallback(suspenseInstance)) {
		    // This is a client-only boundary. Since we won't get any content from the server
		    // for this, we need to schedule that at a higher priority based on when it would
		    // have timed out. In theory we could render it in this pass but it would have the
		    // wrong priority associated with it and will prevent hydration of parent path.
		    // Instead, we'll leave work left on it to render it in a separate commit.
		    // TODO This time should be the time at which the server rendered response that is
		    // a parent to this boundary was displayed. However, since we currently don't have
		    // a protocol to transfer that time, we'll just estimate it by using the current
		    // time. This will mean that Suspense timeouts are slightly shifted to later than
		    // they should be.
		    // Schedule a normal pri update to render this content.
		    workInProgress.lanes = laneToLanes(DefaultHydrationLane);
		  } else {
		    // We'll continue hydrating the rest at offscreen priority since we'll already
		    // be showing the right content coming from the server, it is no rush.
		    workInProgress.lanes = laneToLanes(OffscreenLane);
		  }

		  return null;
		}

		function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {
		  if (!didSuspend) {
		    // This is the first render pass. Attempt to hydrate.
		    // We should never be hydrating at this point because it is the first pass,
		    // but after we've already committed once.
		    warnIfHydrating();

		    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
		      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // TODO: When we delete legacy mode, we should make this error argument
		      // required — every concurrent mode path that causes hydration to
		      // de-opt to client rendering should have an error message.
		      null);
		    }

		    if (isSuspenseInstanceFallback(suspenseInstance)) {
		      // This boundary is in a permanent fallback state. In this case, we'll never
		      // get an update and we'll never be able to hydrate the final content. Let's just try the
		      // client side render instead.
		      var digest, message, stack;

		      {
		        var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);

		        digest = _getSuspenseInstanceF.digest;
		        message = _getSuspenseInstanceF.message;
		        stack = _getSuspenseInstanceF.stack;
		      }

		      var error;

		      if (message) {
		        // eslint-disable-next-line react-internal/prod-error-codes
		        error = new Error(message);
		      } else {
		        error = new Error('The server could not finish this Suspense boundary, likely ' + 'due to an error during server rendering. Switched to ' + 'client rendering.');
		      }

		      var capturedValue = createCapturedValue(error, digest, stack);
		      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);
		    }
		    // any context has changed, we need to treat is as if the input might have changed.


		    var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);

		    if (didReceiveUpdate || hasContextChanged) {
		      // This boundary has changed since the first render. This means that we are now unable to
		      // hydrate it. We might still be able to hydrate it using a higher priority lane.
		      var root = getWorkInProgressRoot();

		      if (root !== null) {
		        var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);

		        if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
		          // Intentionally mutating since this render will get interrupted. This
		          // is one of the very rare times where we mutate the current tree
		          // during the render phase.
		          suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render

		          var eventTime = NoTimestamp;
		          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);
		          scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);
		        }
		      } // If we have scheduled higher pri work above, this will probably just abort the render
		      // since we now have higher priority work, but in case it doesn't, we need to prepare to
		      // render something, if we time out. Even if that requires us to delete everything and
		      // skip hydration.
		      // Delay having to do this as long as the suspense timeout allows us.


		      renderDidSuspendDelayIfPossible();

		      var _capturedValue = createCapturedValue(new Error('This Suspense boundary received an update before it finished ' + 'hydrating. This caused the boundary to switch to client rendering. ' + 'The usual way to fix this is to wrap the original update ' + 'in startTransition.'));

		      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);
		    } else if (isSuspenseInstancePending(suspenseInstance)) {
		      // This component is still pending more data from the server, so we can't hydrate its
		      // content. We treat it as if this component suspended itself. It might seem as if
		      // we could just try to render it client-side instead. However, this will perform a
		      // lot of unnecessary work and is unlikely to complete since it often will suspend
		      // on missing data anyway. Additionally, the server might be able to render more
		      // than we can on the client yet. In that case we'd end up with more fallback states
		      // on the client than if we just leave it alone. If the server times out or errors
		      // these should update this boundary to the permanent Fallback state instead.
		      // Mark it as having captured (i.e. suspended).
		      workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.

		      workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.

		      var retry = retryDehydratedSuspenseBoundary.bind(null, current);
		      registerSuspenseInstanceRetry(suspenseInstance, retry);
		      return null;
		    } else {
		      // This is the first attempt.
		      reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);
		      var primaryChildren = nextProps.children;
		      var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this
		      // tree is part of a hydrating tree. This is used to determine if a child
		      // node has fully mounted yet, and for scheduling event replaying.
		      // Conceptually this is similar to Placement in that a new subtree is
		      // inserted into the React tree here. It just happens to not need DOM
		      // mutations because it already exists.

		      primaryChildFragment.flags |= Hydrating;
		      return primaryChildFragment;
		    }
		  } else {
		    // This is the second render pass. We already attempted to hydrated, but
		    // something either suspended or errored.
		    if (workInProgress.flags & ForceClientRender) {
		      // Something errored during hydration. Try again without hydrating.
		      workInProgress.flags &= ~ForceClientRender;

		      var _capturedValue2 = createCapturedValue(new Error('There was an error while hydrating this Suspense boundary. ' + 'Switched to client rendering.'));

		      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);
		    } else if (workInProgress.memoizedState !== null) {
		      // Something suspended and we should still be in dehydrated mode.
		      // Leave the existing child in place.
		      workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there
		      // but the normal suspense pass doesn't.

		      workInProgress.flags |= DidCapture;
		      return null;
		    } else {
		      // Suspended but we should no longer be in dehydrated mode.
		      // Therefore we now have to render the fallback.
		      var nextPrimaryChildren = nextProps.children;
		      var nextFallbackChildren = nextProps.fallback;
		      var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
		      var _primaryChildFragment4 = workInProgress.child;
		      _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);
		      workInProgress.memoizedState = SUSPENDED_MARKER;
		      return fallbackChildFragment;
		    }
		  }
		}

		function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
		  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
		  var alternate = fiber.alternate;

		  if (alternate !== null) {
		    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
		  }

		  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
		}

		function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
		  // Mark any Suspense boundaries with fallbacks as having work to do.
		  // If they were previously forced into fallbacks, they may now be able
		  // to unblock.
		  var node = firstChild;

		  while (node !== null) {
		    if (node.tag === SuspenseComponent) {
		      var state = node.memoizedState;

		      if (state !== null) {
		        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
		      }
		    } else if (node.tag === SuspenseListComponent) {
		      // If the tail is hidden there might not be an Suspense boundaries
		      // to schedule work on. In this case we have to schedule it on the
		      // list itself.
		      // We don't have to traverse to the children of the list since
		      // the list will propagate the change when it rerenders.
		      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
		    } else if (node.child !== null) {
		      node.child.return = node;
		      node = node.child;
		      continue;
		    }

		    if (node === workInProgress) {
		      return;
		    }

		    while (node.sibling === null) {
		      if (node.return === null || node.return === workInProgress) {
		        return;
		      }

		      node = node.return;
		    }

		    node.sibling.return = node.return;
		    node = node.sibling;
		  }
		}

		function findLastContentRow(firstChild) {
		  // This is going to find the last row among these children that is already
		  // showing content on the screen, as opposed to being in fallback state or
		  // new. If a row has multiple Suspense boundaries, any of them being in the
		  // fallback state, counts as the whole row being in a fallback state.
		  // Note that the "rows" will be workInProgress, but any nested children
		  // will still be current since we haven't rendered them yet. The mounted
		  // order may not be the same as the new order. We use the new order.
		  var row = firstChild;
		  var lastContentRow = null;

		  while (row !== null) {
		    var currentRow = row.alternate; // New rows can't be content rows.

		    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
		      lastContentRow = row;
		    }

		    row = row.sibling;
		  }

		  return lastContentRow;
		}

		function validateRevealOrder(revealOrder) {
		  {
		    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
		      didWarnAboutRevealOrder[revealOrder] = true;

		      if (typeof revealOrder === 'string') {
		        switch (revealOrder.toLowerCase()) {
		          case 'together':
		          case 'forwards':
		          case 'backwards':
		            {
		              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

		              break;
		            }

		          case 'forward':
		          case 'backward':
		            {
		              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

		              break;
		            }

		          default:
		            error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

		            break;
		        }
		      } else {
		        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
		      }
		    }
		  }
		}

		function validateTailOptions(tailMode, revealOrder) {
		  {
		    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
		      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
		        didWarnAboutTailOptions[tailMode] = true;

		        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
		      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
		        didWarnAboutTailOptions[tailMode] = true;

		        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
		      }
		    }
		  }
		}

		function validateSuspenseListNestedChild(childSlot, index) {
		  {
		    var isAnArray = isArray(childSlot);
		    var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';

		    if (isAnArray || isIterable) {
		      var type = isAnArray ? 'array' : 'iterable';

		      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

		      return false;
		    }
		  }

		  return true;
		}

		function validateSuspenseListChildren(children, revealOrder) {
		  {
		    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
		      if (isArray(children)) {
		        for (var i = 0; i < children.length; i++) {
		          if (!validateSuspenseListNestedChild(children[i], i)) {
		            return;
		          }
		        }
		      } else {
		        var iteratorFn = getIteratorFn(children);

		        if (typeof iteratorFn === 'function') {
		          var childrenIterator = iteratorFn.call(children);

		          if (childrenIterator) {
		            var step = childrenIterator.next();
		            var _i = 0;

		            for (; !step.done; step = childrenIterator.next()) {
		              if (!validateSuspenseListNestedChild(step.value, _i)) {
		                return;
		              }

		              _i++;
		            }
		          }
		        } else {
		          error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
		        }
		      }
		    }
		  }
		}

		function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
		  var renderState = workInProgress.memoizedState;

		  if (renderState === null) {
		    workInProgress.memoizedState = {
		      isBackwards: isBackwards,
		      rendering: null,
		      renderingStartTime: 0,
		      last: lastContentRow,
		      tail: tail,
		      tailMode: tailMode
		    };
		  } else {
		    // We can reuse the existing object from previous renders.
		    renderState.isBackwards = isBackwards;
		    renderState.rendering = null;
		    renderState.renderingStartTime = 0;
		    renderState.last = lastContentRow;
		    renderState.tail = tail;
		    renderState.tailMode = tailMode;
		  }
		} // This can end up rendering this component multiple passes.
		// The first pass splits the children fibers into two sets. A head and tail.
		// We first render the head. If anything is in fallback state, we do another
		// pass through beginWork to rerender all children (including the tail) with
		// the force suspend context. If the first render didn't have anything in
		// in fallback state. Then we render each row in the tail one-by-one.
		// That happens in the completeWork phase without going back to beginWork.


		function updateSuspenseListComponent(current, workInProgress, renderLanes) {
		  var nextProps = workInProgress.pendingProps;
		  var revealOrder = nextProps.revealOrder;
		  var tailMode = nextProps.tail;
		  var newChildren = nextProps.children;
		  validateRevealOrder(revealOrder);
		  validateTailOptions(tailMode, revealOrder);
		  validateSuspenseListChildren(newChildren, revealOrder);
		  reconcileChildren(current, workInProgress, newChildren, renderLanes);
		  var suspenseContext = suspenseStackCursor.current;
		  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

		  if (shouldForceFallback) {
		    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
		    workInProgress.flags |= DidCapture;
		  } else {
		    var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;

		    if (didSuspendBefore) {
		      // If we previously forced a fallback, we need to schedule work
		      // on any nested boundaries to let them know to try to render
		      // again. This is the same as context updating.
		      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
		    }

		    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
		  }

		  pushSuspenseContext(workInProgress, suspenseContext);

		  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
		    // In legacy mode, SuspenseList doesn't work so we just
		    // use make it a noop by treating it as the default revealOrder.
		    workInProgress.memoizedState = null;
		  } else {
		    switch (revealOrder) {
		      case 'forwards':
		        {
		          var lastContentRow = findLastContentRow(workInProgress.child);
		          var tail;

		          if (lastContentRow === null) {
		            // The whole list is part of the tail.
		            // TODO: We could fast path by just rendering the tail now.
		            tail = workInProgress.child;
		            workInProgress.child = null;
		          } else {
		            // Disconnect the tail rows after the content row.
		            // We're going to render them separately later.
		            tail = lastContentRow.sibling;
		            lastContentRow.sibling = null;
		          }

		          initSuspenseListRenderState(workInProgress, false, // isBackwards
		          tail, lastContentRow, tailMode);
		          break;
		        }

		      case 'backwards':
		        {
		          // We're going to find the first row that has existing content.
		          // At the same time we're going to reverse the list of everything
		          // we pass in the meantime. That's going to be our tail in reverse
		          // order.
		          var _tail = null;
		          var row = workInProgress.child;
		          workInProgress.child = null;

		          while (row !== null) {
		            var currentRow = row.alternate; // New rows can't be content rows.

		            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
		              // This is the beginning of the main content.
		              workInProgress.child = row;
		              break;
		            }

		            var nextRow = row.sibling;
		            row.sibling = _tail;
		            _tail = row;
		            row = nextRow;
		          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


		          initSuspenseListRenderState(workInProgress, true, // isBackwards
		          _tail, null, // last
		          tailMode);
		          break;
		        }

		      case 'together':
		        {
		          initSuspenseListRenderState(workInProgress, false, // isBackwards
		          null, // tail
		          null, // last
		          undefined);
		          break;
		        }

		      default:
		        {
		          // The default reveal order is the same as not having
		          // a boundary.
		          workInProgress.memoizedState = null;
		        }
		    }
		  }

		  return workInProgress.child;
		}

		function updatePortalComponent(current, workInProgress, renderLanes) {
		  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
		  var nextChildren = workInProgress.pendingProps;

		  if (current === null) {
		    // Portals are special because we don't append the children during mount
		    // but at commit. Therefore we need to track insertions which the normal
		    // flow doesn't do during mount. This doesn't happen at the root because
		    // the root always starts with a "current" with a null child.
		    // TODO: Consider unifying this with how the root works.
		    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
		  } else {
		    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  }

		  return workInProgress.child;
		}

		var hasWarnedAboutUsingNoValuePropOnContextProvider = false;

		function updateContextProvider(current, workInProgress, renderLanes) {
		  var providerType = workInProgress.type;
		  var context = providerType._context;
		  var newProps = workInProgress.pendingProps;
		  var oldProps = workInProgress.memoizedProps;
		  var newValue = newProps.value;

		  {
		    if (!('value' in newProps)) {
		      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
		        hasWarnedAboutUsingNoValuePropOnContextProvider = true;

		        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
		      }
		    }

		    var providerPropTypes = workInProgress.type.propTypes;

		    if (providerPropTypes) {
		      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
		    }
		  }

		  pushProvider(workInProgress, context, newValue);

		  {
		    if (oldProps !== null) {
		      var oldValue = oldProps.value;

		      if (objectIs(oldValue, newValue)) {
		        // No change. Bailout early if children are the same.
		        if (oldProps.children === newProps.children && !hasContextChanged()) {
		          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
		        }
		      } else {
		        // The context value changed. Search for matching consumers and schedule
		        // them to update.
		        propagateContextChange(workInProgress, context, renderLanes);
		      }
		    }
		  }

		  var newChildren = newProps.children;
		  reconcileChildren(current, workInProgress, newChildren, renderLanes);
		  return workInProgress.child;
		}

		var hasWarnedAboutUsingContextAsConsumer = false;

		function updateContextConsumer(current, workInProgress, renderLanes) {
		  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
		  // DEV mode, we create a separate object for Context.Consumer that acts
		  // like a proxy to Context. This proxy object adds unnecessary code in PROD
		  // so we use the old behaviour (Context.Consumer references Context) to
		  // reduce size and overhead. The separate object references context via
		  // a property called "_context", which also gives us the ability to check
		  // in DEV mode if this property exists or not and warn if it does not.

		  {
		    if (context._context === undefined) {
		      // This may be because it's a Context (rather than a Consumer).
		      // Or it may be because it's older React where they're the same thing.
		      // We only want to warn if we're sure it's a new React.
		      if (context !== context.Consumer) {
		        if (!hasWarnedAboutUsingContextAsConsumer) {
		          hasWarnedAboutUsingContextAsConsumer = true;

		          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
		        }
		      }
		    } else {
		      context = context._context;
		    }
		  }

		  var newProps = workInProgress.pendingProps;
		  var render = newProps.children;

		  {
		    if (typeof render !== 'function') {
		      error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
		    }
		  }

		  prepareToReadContext(workInProgress, renderLanes);
		  var newValue = readContext(context);

		  {
		    markComponentRenderStarted(workInProgress);
		  }

		  var newChildren;

		  {
		    ReactCurrentOwner$1.current = workInProgress;
		    setIsRendering(true);
		    newChildren = render(newValue);
		    setIsRendering(false);
		  }

		  {
		    markComponentRenderStopped();
		  } // React DevTools reads this flag.


		  workInProgress.flags |= PerformedWork;
		  reconcileChildren(current, workInProgress, newChildren, renderLanes);
		  return workInProgress.child;
		}

		function markWorkInProgressReceivedUpdate() {
		  didReceiveUpdate = true;
		}

		function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
		  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
		    if (current !== null) {
		      // A lazy component only mounts if it suspended inside a non-
		      // concurrent tree, in an inconsistent state. We want to treat it like
		      // a new mount, even though an empty version of it already committed.
		      // Disconnect the alternate pointers.
		      current.alternate = null;
		      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

		      workInProgress.flags |= Placement;
		    }
		  }
		}

		function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
		  if (current !== null) {
		    // Reuse previous dependencies
		    workInProgress.dependencies = current.dependencies;
		  }

		  {
		    // Don't update "base" render times for bailouts.
		    stopProfilerTimerIfRunning();
		  }

		  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.

		  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
		    // The children don't have any work either. We can skip them.
		    // TODO: Once we add back resuming, we should check if the children are
		    // a work-in-progress set. If so, we need to transfer their effects.
		    {
		      return null;
		    }
		  } // This fiber doesn't have work, but its subtree does. Clone the child
		  // fibers and continue.


		  cloneChildFibers(current, workInProgress);
		  return workInProgress.child;
		}

		function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
		  {
		    var returnFiber = oldWorkInProgress.return;

		    if (returnFiber === null) {
		      // eslint-disable-next-line react-internal/prod-error-codes
		      throw new Error('Cannot swap the root fiber.');
		    } // Disconnect from the old current.
		    // It will get deleted.


		    current.alternate = null;
		    oldWorkInProgress.alternate = null; // Connect to the new tree.

		    newWorkInProgress.index = oldWorkInProgress.index;
		    newWorkInProgress.sibling = oldWorkInProgress.sibling;
		    newWorkInProgress.return = oldWorkInProgress.return;
		    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

		    if (oldWorkInProgress === returnFiber.child) {
		      returnFiber.child = newWorkInProgress;
		    } else {
		      var prevSibling = returnFiber.child;

		      if (prevSibling === null) {
		        // eslint-disable-next-line react-internal/prod-error-codes
		        throw new Error('Expected parent to have a child.');
		      }

		      while (prevSibling.sibling !== oldWorkInProgress) {
		        prevSibling = prevSibling.sibling;

		        if (prevSibling === null) {
		          // eslint-disable-next-line react-internal/prod-error-codes
		          throw new Error('Expected to find the previous sibling.');
		        }
		      }

		      prevSibling.sibling = newWorkInProgress;
		    } // Delete the old fiber and place the new one.
		    // Since the old fiber is disconnected, we have to schedule it manually.


		    var deletions = returnFiber.deletions;

		    if (deletions === null) {
		      returnFiber.deletions = [current];
		      returnFiber.flags |= ChildDeletion;
		    } else {
		      deletions.push(current);
		    }

		    newWorkInProgress.flags |= Placement; // Restart work from the new fiber.

		    return newWorkInProgress;
		  }
		}

		function checkScheduledUpdateOrContext(current, renderLanes) {
		  // Before performing an early bailout, we must check if there are pending
		  // updates or context.
		  var updateLanes = current.lanes;

		  if (includesSomeLane(updateLanes, renderLanes)) {
		    return true;
		  } // No pending update, but because context is propagated lazily, we need

		  return false;
		}

		function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
		  // This fiber does not have any pending work. Bailout without entering
		  // the begin phase. There's still some bookkeeping we that needs to be done
		  // in this optimized path, mostly pushing stuff onto the stack.
		  switch (workInProgress.tag) {
		    case HostRoot:
		      pushHostRootContext(workInProgress);
		      workInProgress.stateNode;

		      resetHydrationState();
		      break;

		    case HostComponent:
		      pushHostContext(workInProgress);
		      break;

		    case ClassComponent:
		      {
		        var Component = workInProgress.type;

		        if (isContextProvider(Component)) {
		          pushContextProvider(workInProgress);
		        }

		        break;
		      }

		    case HostPortal:
		      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
		      break;

		    case ContextProvider:
		      {
		        var newValue = workInProgress.memoizedProps.value;
		        var context = workInProgress.type._context;
		        pushProvider(workInProgress, context, newValue);
		        break;
		      }

		    case Profiler:
		      {
		        // Profiler should only call onRender when one of its descendants actually rendered.
		        var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

		        if (hasChildWork) {
		          workInProgress.flags |= Update;
		        }

		        {
		          // Reset effect durations for the next eventual effect phase.
		          // These are reset during render to allow the DevTools commit hook a chance to read them,
		          var stateNode = workInProgress.stateNode;
		          stateNode.effectDuration = 0;
		          stateNode.passiveEffectDuration = 0;
		        }
		      }

		      break;

		    case SuspenseComponent:
		      {
		        var state = workInProgress.memoizedState;

		        if (state !== null) {
		          if (state.dehydrated !== null) {
		            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has
		            // been unsuspended it has committed as a resolved Suspense component.
		            // If it needs to be retried, it should have work scheduled on it.

		            workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we
		            // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.

		            return null;
		          } // If this boundary is currently timed out, we need to decide
		          // whether to retry the primary children, or to skip over it and
		          // go straight to the fallback. Check the priority of the primary
		          // child fragment.


		          var primaryChildFragment = workInProgress.child;
		          var primaryChildLanes = primaryChildFragment.childLanes;

		          if (includesSomeLane(renderLanes, primaryChildLanes)) {
		            // The primary children have pending work. Use the normal path
		            // to attempt to render the primary children again.
		            return updateSuspenseComponent(current, workInProgress, renderLanes);
		          } else {
		            // The primary child fragment does not have pending work marked
		            // on it
		            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
		            // priority. Bailout.

		            var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);

		            if (child !== null) {
		              // The fallback children have pending work. Skip over the
		              // primary children and work on the fallback.
		              return child.sibling;
		            } else {
		              // Note: We can return `null` here because we already checked
		              // whether there were nested context consumers, via the call to
		              // `bailoutOnAlreadyFinishedWork` above.
		              return null;
		            }
		          }
		        } else {
		          pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
		        }

		        break;
		      }

		    case SuspenseListComponent:
		      {
		        var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;

		        var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

		        if (didSuspendBefore) {
		          if (_hasChildWork) {
		            // If something was in fallback state last time, and we have all the
		            // same children then we're still in progressive loading state.
		            // Something might get unblocked by state updates or retries in the
		            // tree which will affect the tail. So we need to use the normal
		            // path to compute the correct tail.
		            return updateSuspenseListComponent(current, workInProgress, renderLanes);
		          } // If none of the children had any work, that means that none of
		          // them got retried so they'll still be blocked in the same way
		          // as before. We can fast bail out.


		          workInProgress.flags |= DidCapture;
		        } // If nothing suspended before and we're rendering the same children,
		        // then the tail doesn't matter. Anything new that suspends will work
		        // in the "together" mode, so we can continue from the state we had.


		        var renderState = workInProgress.memoizedState;

		        if (renderState !== null) {
		          // Reset to the "together" mode in case we've started a different
		          // update in the past but didn't complete it.
		          renderState.rendering = null;
		          renderState.tail = null;
		          renderState.lastEffect = null;
		        }

		        pushSuspenseContext(workInProgress, suspenseStackCursor.current);

		        if (_hasChildWork) {
		          break;
		        } else {
		          // If none of the children had any work, that means that none of
		          // them got retried so they'll still be blocked in the same way
		          // as before. We can fast bail out.
		          return null;
		        }
		      }

		    case OffscreenComponent:
		    case LegacyHiddenComponent:
		      {
		        // Need to check if the tree still needs to be deferred. This is
		        // almost identical to the logic used in the normal update path,
		        // so we'll just enter that. The only difference is we'll bail out
		        // at the next level instead of this one, because the child props
		        // have not changed. Which is fine.
		        // TODO: Probably should refactor `beginWork` to split the bailout
		        // path from the normal path. I'm tempted to do a labeled break here
		        // but I won't :)
		        workInProgress.lanes = NoLanes;
		        return updateOffscreenComponent(current, workInProgress, renderLanes);
		      }
		  }

		  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
		}

		function beginWork(current, workInProgress, renderLanes) {
		  {
		    if (workInProgress._debugNeedsRemount && current !== null) {
		      // This will restart the begin phase with a new fiber.
		      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
		    }
		  }

		  if (current !== null) {
		    var oldProps = current.memoizedProps;
		    var newProps = workInProgress.pendingProps;

		    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
		     workInProgress.type !== current.type )) {
		      // If props or context changed, mark the fiber as having performed work.
		      // This may be unset if the props are determined to be equal later (memo).
		      didReceiveUpdate = true;
		    } else {
		      // Neither props nor legacy context changes. Check if there's a pending
		      // update or context change.
		      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);

		      if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
		      // may not be work scheduled on `current`, so we check for this flag.
		      (workInProgress.flags & DidCapture) === NoFlags) {
		        // No pending updates or context. Bail out now.
		        didReceiveUpdate = false;
		        return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
		      }

		      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
		        // This is a special case that only exists for legacy mode.
		        // See https://github.com/facebook/react/pull/19216.
		        didReceiveUpdate = true;
		      } else {
		        // An update was scheduled on this fiber, but there are no new props
		        // nor legacy context. Set this to false. If an update queue or context
		        // consumer produces a changed value, it will set this to true. Otherwise,
		        // the component will assume the children have not changed and bail out.
		        didReceiveUpdate = false;
		      }
		    }
		  } else {
		    didReceiveUpdate = false;

		    if (getIsHydrating() && isForkedChild(workInProgress)) {
		      // Check if this child belongs to a list of muliple children in
		      // its parent.
		      //
		      // In a true multi-threaded implementation, we would render children on
		      // parallel threads. This would represent the beginning of a new render
		      // thread for this subtree.
		      //
		      // We only use this for id generation during hydration, which is why the
		      // logic is located in this special branch.
		      var slotIndex = workInProgress.index;
		      var numberOfForks = getForksAtLevel();
		      pushTreeId(workInProgress, numberOfForks, slotIndex);
		    }
		  } // Before entering the begin phase, clear pending update priority.
		  // TODO: This assumes that we're about to evaluate the component and process
		  // the update queue. However, there's an exception: SimpleMemoComponent
		  // sometimes bails out later in the begin phase. This indicates that we should
		  // move this assignment out of the common path and into each branch.


		  workInProgress.lanes = NoLanes;

		  switch (workInProgress.tag) {
		    case IndeterminateComponent:
		      {
		        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
		      }

		    case LazyComponent:
		      {
		        var elementType = workInProgress.elementType;
		        return mountLazyComponent(current, workInProgress, elementType, renderLanes);
		      }

		    case FunctionComponent:
		      {
		        var Component = workInProgress.type;
		        var unresolvedProps = workInProgress.pendingProps;
		        var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
		        return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);
		      }

		    case ClassComponent:
		      {
		        var _Component = workInProgress.type;
		        var _unresolvedProps = workInProgress.pendingProps;

		        var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);

		        return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);
		      }

		    case HostRoot:
		      return updateHostRoot(current, workInProgress, renderLanes);

		    case HostComponent:
		      return updateHostComponent(current, workInProgress, renderLanes);

		    case HostText:
		      return updateHostText(current, workInProgress);

		    case SuspenseComponent:
		      return updateSuspenseComponent(current, workInProgress, renderLanes);

		    case HostPortal:
		      return updatePortalComponent(current, workInProgress, renderLanes);

		    case ForwardRef:
		      {
		        var type = workInProgress.type;
		        var _unresolvedProps2 = workInProgress.pendingProps;

		        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

		        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
		      }

		    case Fragment:
		      return updateFragment(current, workInProgress, renderLanes);

		    case Mode:
		      return updateMode(current, workInProgress, renderLanes);

		    case Profiler:
		      return updateProfiler(current, workInProgress, renderLanes);

		    case ContextProvider:
		      return updateContextProvider(current, workInProgress, renderLanes);

		    case ContextConsumer:
		      return updateContextConsumer(current, workInProgress, renderLanes);

		    case MemoComponent:
		      {
		        var _type2 = workInProgress.type;
		        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

		        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

		        {
		          if (workInProgress.type !== workInProgress.elementType) {
		            var outerPropTypes = _type2.propTypes;

		            if (outerPropTypes) {
		              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
		              'prop', getComponentNameFromType(_type2));
		            }
		          }
		        }

		        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
		        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);
		      }

		    case SimpleMemoComponent:
		      {
		        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
		      }

		    case IncompleteClassComponent:
		      {
		        var _Component2 = workInProgress.type;
		        var _unresolvedProps4 = workInProgress.pendingProps;

		        var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);

		        return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);
		      }

		    case SuspenseListComponent:
		      {
		        return updateSuspenseListComponent(current, workInProgress, renderLanes);
		      }

		    case ScopeComponent:
		      {

		        break;
		      }

		    case OffscreenComponent:
		      {
		        return updateOffscreenComponent(current, workInProgress, renderLanes);
		      }
		  }

		  throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
		}

		function markUpdate(workInProgress) {
		  // Tag the fiber with an update effect. This turns a Placement into
		  // a PlacementAndUpdate.
		  workInProgress.flags |= Update;
		}

		function markRef$1(workInProgress) {
		  workInProgress.flags |= Ref;

		  {
		    workInProgress.flags |= RefStatic;
		  }
		}

		var appendAllChildren;
		var updateHostContainer;
		var updateHostComponent$1;
		var updateHostText$1;

		{
		  // Mutation mode
		  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
		    // We only have the top Fiber that was created but we need recurse down its
		    // children to find all the terminal nodes.
		    var node = workInProgress.child;

		    while (node !== null) {
		      if (node.tag === HostComponent || node.tag === HostText) {
		        appendInitialChild(parent, node.stateNode);
		      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
		        node.child.return = node;
		        node = node.child;
		        continue;
		      }

		      if (node === workInProgress) {
		        return;
		      }

		      while (node.sibling === null) {
		        if (node.return === null || node.return === workInProgress) {
		          return;
		        }

		        node = node.return;
		      }

		      node.sibling.return = node.return;
		      node = node.sibling;
		    }
		  };

		  updateHostContainer = function (current, workInProgress) {// Noop
		  };

		  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
		    // If we have an alternate, that means this is an update and we need to
		    // schedule a side-effect to do the updates.
		    var oldProps = current.memoizedProps;

		    if (oldProps === newProps) {
		      // In mutation mode, this is sufficient for a bailout because
		      // we won't touch this node even if children changed.
		      return;
		    } // If we get updated because one of our children updated, we don't
		    // have newProps so we'll have to reuse them.
		    // TODO: Split the update API as separate for the props vs. children.
		    // Even better would be if children weren't special cased at all tho.


		    var instance = workInProgress.stateNode;
		    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
		    // component is hitting the resume path. Figure out why. Possibly
		    // related to `hidden`.

		    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

		    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
		    // is a new ref we mark this as an update. All the work is done in commitWork.

		    if (updatePayload) {
		      markUpdate(workInProgress);
		    }
		  };

		  updateHostText$1 = function (current, workInProgress, oldText, newText) {
		    // If the text differs, mark it as an update. All the work in done in commitWork.
		    if (oldText !== newText) {
		      markUpdate(workInProgress);
		    }
		  };
		}

		function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
		  if (getIsHydrating()) {
		    // If we're hydrating, we should consume as many items as we can
		    // so we don't leave any behind.
		    return;
		  }

		  switch (renderState.tailMode) {
		    case 'hidden':
		      {
		        // Any insertions at the end of the tail list after this point
		        // should be invisible. If there are already mounted boundaries
		        // anything before them are not considered for collapsing.
		        // Therefore we need to go through the whole tail to find if
		        // there are any.
		        var tailNode = renderState.tail;
		        var lastTailNode = null;

		        while (tailNode !== null) {
		          if (tailNode.alternate !== null) {
		            lastTailNode = tailNode;
		          }

		          tailNode = tailNode.sibling;
		        } // Next we're simply going to delete all insertions after the
		        // last rendered item.


		        if (lastTailNode === null) {
		          // All remaining items in the tail are insertions.
		          renderState.tail = null;
		        } else {
		          // Detach the insertion after the last node that was already
		          // inserted.
		          lastTailNode.sibling = null;
		        }

		        break;
		      }

		    case 'collapsed':
		      {
		        // Any insertions at the end of the tail list after this point
		        // should be invisible. If there are already mounted boundaries
		        // anything before them are not considered for collapsing.
		        // Therefore we need to go through the whole tail to find if
		        // there are any.
		        var _tailNode = renderState.tail;
		        var _lastTailNode = null;

		        while (_tailNode !== null) {
		          if (_tailNode.alternate !== null) {
		            _lastTailNode = _tailNode;
		          }

		          _tailNode = _tailNode.sibling;
		        } // Next we're simply going to delete all insertions after the
		        // last rendered item.


		        if (_lastTailNode === null) {
		          // All remaining items in the tail are insertions.
		          if (!hasRenderedATailFallback && renderState.tail !== null) {
		            // We suspended during the head. We want to show at least one
		            // row at the tail. So we'll keep on and cut off the rest.
		            renderState.tail.sibling = null;
		          } else {
		            renderState.tail = null;
		          }
		        } else {
		          // Detach the insertion after the last node that was already
		          // inserted.
		          _lastTailNode.sibling = null;
		        }

		        break;
		      }
		  }
		}

		function bubbleProperties(completedWork) {
		  var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
		  var newChildLanes = NoLanes;
		  var subtreeFlags = NoFlags;

		  if (!didBailout) {
		    // Bubble up the earliest expiration time.
		    if ( (completedWork.mode & ProfileMode) !== NoMode) {
		      // In profiling mode, resetChildExpirationTime is also used to reset
		      // profiler durations.
		      var actualDuration = completedWork.actualDuration;
		      var treeBaseDuration = completedWork.selfBaseDuration;
		      var child = completedWork.child;

		      while (child !== null) {
		        newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
		        subtreeFlags |= child.subtreeFlags;
		        subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will
		        // only be updated if work is done on the fiber (i.e. it doesn't bailout).
		        // When work is done, it should bubble to the parent's actualDuration. If
		        // the fiber has not been cloned though, (meaning no work was done), then
		        // this value will reflect the amount of time spent working on a previous
		        // render. In that case it should not bubble. We determine whether it was
		        // cloned by comparing the child pointer.

		        actualDuration += child.actualDuration;
		        treeBaseDuration += child.treeBaseDuration;
		        child = child.sibling;
		      }

		      completedWork.actualDuration = actualDuration;
		      completedWork.treeBaseDuration = treeBaseDuration;
		    } else {
		      var _child = completedWork.child;

		      while (_child !== null) {
		        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
		        subtreeFlags |= _child.subtreeFlags;
		        subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code
		        // smell because it assumes the commit phase is never concurrent with
		        // the render phase. Will address during refactor to alternate model.

		        _child.return = completedWork;
		        _child = _child.sibling;
		      }
		    }

		    completedWork.subtreeFlags |= subtreeFlags;
		  } else {
		    // Bubble up the earliest expiration time.
		    if ( (completedWork.mode & ProfileMode) !== NoMode) {
		      // In profiling mode, resetChildExpirationTime is also used to reset
		      // profiler durations.
		      var _treeBaseDuration = completedWork.selfBaseDuration;
		      var _child2 = completedWork.child;

		      while (_child2 !== null) {
		        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
		        // so we should bubble those up even during a bailout. All the other
		        // flags have a lifetime only of a single render + commit, so we should
		        // ignore them.

		        subtreeFlags |= _child2.subtreeFlags & StaticMask;
		        subtreeFlags |= _child2.flags & StaticMask;
		        _treeBaseDuration += _child2.treeBaseDuration;
		        _child2 = _child2.sibling;
		      }

		      completedWork.treeBaseDuration = _treeBaseDuration;
		    } else {
		      var _child3 = completedWork.child;

		      while (_child3 !== null) {
		        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
		        // so we should bubble those up even during a bailout. All the other
		        // flags have a lifetime only of a single render + commit, so we should
		        // ignore them.

		        subtreeFlags |= _child3.subtreeFlags & StaticMask;
		        subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code
		        // smell because it assumes the commit phase is never concurrent with
		        // the render phase. Will address during refactor to alternate model.

		        _child3.return = completedWork;
		        _child3 = _child3.sibling;
		      }
		    }

		    completedWork.subtreeFlags |= subtreeFlags;
		  }

		  completedWork.childLanes = newChildLanes;
		  return didBailout;
		}

		function completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {
		  if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {
		    warnIfUnhydratedTailNodes(workInProgress);
		    resetHydrationState();
		    workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;
		    return false;
		  }

		  var wasHydrated = popHydrationState(workInProgress);

		  if (nextState !== null && nextState.dehydrated !== null) {
		    // We might be inside a hydration state the first time we're picking up this
		    // Suspense boundary, and also after we've reentered it for further hydration.
		    if (current === null) {
		      if (!wasHydrated) {
		        throw new Error('A dehydrated suspense component was completed without a hydrated node. ' + 'This is probably a bug in React.');
		      }

		      prepareToHydrateHostSuspenseInstance(workInProgress);
		      bubbleProperties(workInProgress);

		      {
		        if ((workInProgress.mode & ProfileMode) !== NoMode) {
		          var isTimedOutSuspense = nextState !== null;

		          if (isTimedOutSuspense) {
		            // Don't count time spent in a timed out Suspense subtree as part of the base duration.
		            var primaryChildFragment = workInProgress.child;

		            if (primaryChildFragment !== null) {
		              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
		              workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
		            }
		          }
		        }
		      }

		      return false;
		    } else {
		      // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration
		      // state since we're now exiting out of it. popHydrationState doesn't do that for us.
		      resetHydrationState();

		      if ((workInProgress.flags & DidCapture) === NoFlags) {
		        // This boundary did not suspend so it's now hydrated and unsuspended.
		        workInProgress.memoizedState = null;
		      } // If nothing suspended, we need to schedule an effect to mark this boundary
		      // as having hydrated so events know that they're free to be invoked.
		      // It's also a signal to replay events and the suspense callback.
		      // If something suspended, schedule an effect to attach retry listeners.
		      // So we might as well always mark this.


		      workInProgress.flags |= Update;
		      bubbleProperties(workInProgress);

		      {
		        if ((workInProgress.mode & ProfileMode) !== NoMode) {
		          var _isTimedOutSuspense = nextState !== null;

		          if (_isTimedOutSuspense) {
		            // Don't count time spent in a timed out Suspense subtree as part of the base duration.
		            var _primaryChildFragment = workInProgress.child;

		            if (_primaryChildFragment !== null) {
		              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
		              workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
		            }
		          }
		        }
		      }

		      return false;
		    }
		  } else {
		    // Successfully completed this tree. If this was a forced client render,
		    // there may have been recoverable errors during first hydration
		    // attempt. If so, add them to a queue so we can log them in the
		    // commit phase.
		    upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path

		    return true;
		  }
		}

		function completeWork(current, workInProgress, renderLanes) {
		  var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing
		  // to the current tree provider fiber is just as fast and less error-prone.
		  // Ideally we would have a special version of the work loop only
		  // for hydration.

		  popTreeContext(workInProgress);

		  switch (workInProgress.tag) {
		    case IndeterminateComponent:
		    case LazyComponent:
		    case SimpleMemoComponent:
		    case FunctionComponent:
		    case ForwardRef:
		    case Fragment:
		    case Mode:
		    case Profiler:
		    case ContextConsumer:
		    case MemoComponent:
		      bubbleProperties(workInProgress);
		      return null;

		    case ClassComponent:
		      {
		        var Component = workInProgress.type;

		        if (isContextProvider(Component)) {
		          popContext(workInProgress);
		        }

		        bubbleProperties(workInProgress);
		        return null;
		      }

		    case HostRoot:
		      {
		        var fiberRoot = workInProgress.stateNode;
		        popHostContainer(workInProgress);
		        popTopLevelContextObject(workInProgress);
		        resetWorkInProgressVersions();

		        if (fiberRoot.pendingContext) {
		          fiberRoot.context = fiberRoot.pendingContext;
		          fiberRoot.pendingContext = null;
		        }

		        if (current === null || current.child === null) {
		          // If we hydrated, pop so that we can delete any remaining children
		          // that weren't hydrated.
		          var wasHydrated = popHydrationState(workInProgress);

		          if (wasHydrated) {
		            // If we hydrated, then we'll need to schedule an update for
		            // the commit side-effects on the root.
		            markUpdate(workInProgress);
		          } else {
		            if (current !== null) {
		              var prevState = current.memoizedState;

		              if ( // Check if this is a client root
		              !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
		              (workInProgress.flags & ForceClientRender) !== NoFlags) {
		                // Schedule an effect to clear this container at the start of the
		                // next commit. This handles the case of React rendering into a
		                // container with previous children. It's also safe to do for
		                // updates too, because current.child would only be null if the
		                // previous render was null (so the container would already
		                // be empty).
		                workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been
		                // recoverable errors during first hydration attempt. If so, add
		                // them to a queue so we can log them in the commit phase.

		                upgradeHydrationErrorsToRecoverable();
		              }
		            }
		          }
		        }

		        updateHostContainer(current, workInProgress);
		        bubbleProperties(workInProgress);

		        return null;
		      }

		    case HostComponent:
		      {
		        popHostContext(workInProgress);
		        var rootContainerInstance = getRootHostContainer();
		        var type = workInProgress.type;

		        if (current !== null && workInProgress.stateNode != null) {
		          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

		          if (current.ref !== workInProgress.ref) {
		            markRef$1(workInProgress);
		          }
		        } else {
		          if (!newProps) {
		            if (workInProgress.stateNode === null) {
		              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');
		            } // This can happen when we abort work.


		            bubbleProperties(workInProgress);
		            return null;
		          }

		          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
		          // "stack" as the parent. Then append children as we go in beginWork
		          // or completeWork depending on whether we want to add them top->down or
		          // bottom->up. Top->down is faster in IE11.

		          var _wasHydrated = popHydrationState(workInProgress);

		          if (_wasHydrated) {
		            // TODO: Move this and createInstance step into the beginPhase
		            // to consolidate.
		            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
		              // If changes to the hydrated node need to be applied at the
		              // commit-phase we mark this as such.
		              markUpdate(workInProgress);
		            }
		          } else {
		            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
		            appendAllChildren(instance, workInProgress, false, false);
		            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
		            // (eg DOM renderer supports auto-focus for certain elements).
		            // Make sure such renderers get scheduled for later work.

		            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
		              markUpdate(workInProgress);
		            }
		          }

		          if (workInProgress.ref !== null) {
		            // If there is a ref on a host node we need to schedule a callback
		            markRef$1(workInProgress);
		          }
		        }

		        bubbleProperties(workInProgress);
		        return null;
		      }

		    case HostText:
		      {
		        var newText = newProps;

		        if (current && workInProgress.stateNode != null) {
		          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
		          // to schedule a side-effect to do the updates.

		          updateHostText$1(current, workInProgress, oldText, newText);
		        } else {
		          if (typeof newText !== 'string') {
		            if (workInProgress.stateNode === null) {
		              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');
		            } // This can happen when we abort work.

		          }

		          var _rootContainerInstance = getRootHostContainer();

		          var _currentHostContext = getHostContext();

		          var _wasHydrated2 = popHydrationState(workInProgress);

		          if (_wasHydrated2) {
		            if (prepareToHydrateHostTextInstance(workInProgress)) {
		              markUpdate(workInProgress);
		            }
		          } else {
		            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
		          }
		        }

		        bubbleProperties(workInProgress);
		        return null;
		      }

		    case SuspenseComponent:
		      {
		        popSuspenseContext(workInProgress);
		        var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this
		        // to its own fiber type so that we can add other kinds of hydration
		        // boundaries that aren't associated with a Suspense tree. In anticipation
		        // of such a refactor, all the hydration logic is contained in
		        // this branch.

		        if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {
		          var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);

		          if (!fallthroughToNormalSuspensePath) {
		            if (workInProgress.flags & ShouldCapture) {
		              // Special case. There were remaining unhydrated nodes. We treat
		              // this as a mismatch. Revert to client rendering.
		              return workInProgress;
		            } else {
		              // Did not finish hydrating, either because this is the initial
		              // render or because something suspended.
		              return null;
		            }
		          } // Continue with the normal Suspense path.

		        }

		        if ((workInProgress.flags & DidCapture) !== NoFlags) {
		          // Something suspended. Re-render with the fallback children.
		          workInProgress.lanes = renderLanes; // Do not reset the effect list.

		          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
		            transferActualDuration(workInProgress);
		          } // Don't bubble properties in this case.


		          return workInProgress;
		        }

		        var nextDidTimeout = nextState !== null;
		        var prevDidTimeout = current !== null && current.memoizedState !== null;
		        // a passive effect, which is when we process the transitions


		        if (nextDidTimeout !== prevDidTimeout) {
		          // an effect to toggle the subtree's visibility. When we switch from
		          // fallback -> primary, the inner Offscreen fiber schedules this effect
		          // as part of its normal complete phase. But when we switch from
		          // primary -> fallback, the inner Offscreen fiber does not have a complete
		          // phase. So we need to schedule its effect here.
		          //
		          // We also use this flag to connect/disconnect the effects, but the same
		          // logic applies: when re-connecting, the Offscreen fiber's complete
		          // phase will handle scheduling the effect. It's only when the fallback
		          // is active that we have to do anything special.


		          if (nextDidTimeout) {
		            var _offscreenFiber2 = workInProgress.child;
		            _offscreenFiber2.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything
		            // in the concurrent tree already suspended during this render.
		            // This is a known bug.

		            if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
		              // TODO: Move this back to throwException because this is too late
		              // if this is a large tree which is common for initial loads. We
		              // don't know if we should restart a render or not until we get
		              // this marker, and this is too late.
		              // If this render already had a ping or lower pri updates,
		              // and this is the first time we know we're going to suspend we
		              // should be able to immediately restart from within throwException.
		              var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);

		              if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
		                // If this was in an invisible tree or a new render, then showing
		                // this boundary is ok.
		                renderDidSuspend();
		              } else {
		                // Otherwise, we're going to have to hide content so we should
		                // suspend for longer if possible.
		                renderDidSuspendDelayIfPossible();
		              }
		            }
		          }
		        }

		        var wakeables = workInProgress.updateQueue;

		        if (wakeables !== null) {
		          // Schedule an effect to attach a retry listener to the promise.
		          // TODO: Move to passive phase
		          workInProgress.flags |= Update;
		        }

		        bubbleProperties(workInProgress);

		        {
		          if ((workInProgress.mode & ProfileMode) !== NoMode) {
		            if (nextDidTimeout) {
		              // Don't count time spent in a timed out Suspense subtree as part of the base duration.
		              var primaryChildFragment = workInProgress.child;

		              if (primaryChildFragment !== null) {
		                // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
		                workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
		              }
		            }
		          }
		        }

		        return null;
		      }

		    case HostPortal:
		      popHostContainer(workInProgress);
		      updateHostContainer(current, workInProgress);

		      if (current === null) {
		        preparePortalMount(workInProgress.stateNode.containerInfo);
		      }

		      bubbleProperties(workInProgress);
		      return null;

		    case ContextProvider:
		      // Pop provider fiber
		      var context = workInProgress.type._context;
		      popProvider(context, workInProgress);
		      bubbleProperties(workInProgress);
		      return null;

		    case IncompleteClassComponent:
		      {
		        // Same as class component case. I put it down here so that the tags are
		        // sequential to ensure this switch is compiled to a jump table.
		        var _Component = workInProgress.type;

		        if (isContextProvider(_Component)) {
		          popContext(workInProgress);
		        }

		        bubbleProperties(workInProgress);
		        return null;
		      }

		    case SuspenseListComponent:
		      {
		        popSuspenseContext(workInProgress);
		        var renderState = workInProgress.memoizedState;

		        if (renderState === null) {
		          // We're running in the default, "independent" mode.
		          // We don't do anything in this mode.
		          bubbleProperties(workInProgress);
		          return null;
		        }

		        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
		        var renderedTail = renderState.rendering;

		        if (renderedTail === null) {
		          // We just rendered the head.
		          if (!didSuspendAlready) {
		            // This is the first pass. We need to figure out if anything is still
		            // suspended in the rendered set.
		            // If new content unsuspended, but there's still some content that
		            // didn't. Then we need to do a second pass that forces everything
		            // to keep showing their fallbacks.
		            // We might be suspended if something in this render pass suspended, or
		            // something in the previous committed pass suspended. Otherwise,
		            // there's no chance so we can skip the expensive call to
		            // findFirstSuspended.
		            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);

		            if (!cannotBeSuspended) {
		              var row = workInProgress.child;

		              while (row !== null) {
		                var suspended = findFirstSuspended(row);

		                if (suspended !== null) {
		                  didSuspendAlready = true;
		                  workInProgress.flags |= DidCapture;
		                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
		                  // part of the second pass. In that case nothing will subscribe to
		                  // its thenables. Instead, we'll transfer its thenables to the
		                  // SuspenseList so that it can retry if they resolve.
		                  // There might be multiple of these in the list but since we're
		                  // going to wait for all of them anyway, it doesn't really matter
		                  // which ones gets to ping. In theory we could get clever and keep
		                  // track of how many dependencies remain but it gets tricky because
		                  // in the meantime, we can add/remove/change items and dependencies.
		                  // We might bail out of the loop before finding any but that
		                  // doesn't matter since that means that the other boundaries that
		                  // we did find already has their listeners attached.

		                  var newThenables = suspended.updateQueue;

		                  if (newThenables !== null) {
		                    workInProgress.updateQueue = newThenables;
		                    workInProgress.flags |= Update;
		                  } // Rerender the whole list, but this time, we'll force fallbacks
		                  // to stay in place.
		                  // Reset the effect flags before doing the second pass since that's now invalid.
		                  // Reset the child fibers to their original state.


		                  workInProgress.subtreeFlags = NoFlags;
		                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
		                  // rerender the children.

		                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.

		                  return workInProgress.child;
		                }

		                row = row.sibling;
		              }
		            }

		            if (renderState.tail !== null && now() > getRenderTargetTime()) {
		              // We have already passed our CPU deadline but we still have rows
		              // left in the tail. We'll just give up further attempts to render
		              // the main content and only render fallbacks.
		              workInProgress.flags |= DidCapture;
		              didSuspendAlready = true;
		              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
		              // to get it started back up to attempt the next item. While in terms
		              // of priority this work has the same priority as this current render,
		              // it's not part of the same transition once the transition has
		              // committed. If it's sync, we still want to yield so that it can be
		              // painted. Conceptually, this is really the same as pinging.
		              // We can use any RetryLane even if it's the one currently rendering
		              // since we're leaving it behind on this node.

		              workInProgress.lanes = SomeRetryLane;
		            }
		          } else {
		            cutOffTailIfNeeded(renderState, false);
		          } // Next we're going to render the tail.

		        } else {
		          // Append the rendered row to the child list.
		          if (!didSuspendAlready) {
		            var _suspended = findFirstSuspended(renderedTail);

		            if (_suspended !== null) {
		              workInProgress.flags |= DidCapture;
		              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
		              // get lost if this row ends up dropped during a second pass.

		              var _newThenables = _suspended.updateQueue;

		              if (_newThenables !== null) {
		                workInProgress.updateQueue = _newThenables;
		                workInProgress.flags |= Update;
		              }

		              cutOffTailIfNeeded(renderState, true); // This might have been modified.

		              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
		              ) {
		                  // We're done.
		                  bubbleProperties(workInProgress);
		                  return null;
		                }
		            } else if ( // The time it took to render last row is greater than the remaining
		            // time we have to render. So rendering one more row would likely
		            // exceed it.
		            now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
		              // We have now passed our CPU deadline and we'll just give up further
		              // attempts to render the main content and only render fallbacks.
		              // The assumption is that this is usually faster.
		              workInProgress.flags |= DidCapture;
		              didSuspendAlready = true;
		              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
		              // to get it started back up to attempt the next item. While in terms
		              // of priority this work has the same priority as this current render,
		              // it's not part of the same transition once the transition has
		              // committed. If it's sync, we still want to yield so that it can be
		              // painted. Conceptually, this is really the same as pinging.
		              // We can use any RetryLane even if it's the one currently rendering
		              // since we're leaving it behind on this node.

		              workInProgress.lanes = SomeRetryLane;
		            }
		          }

		          if (renderState.isBackwards) {
		            // The effect list of the backwards tail will have been added
		            // to the end. This breaks the guarantee that life-cycles fire in
		            // sibling order but that isn't a strong guarantee promised by React.
		            // Especially since these might also just pop in during future commits.
		            // Append to the beginning of the list.
		            renderedTail.sibling = workInProgress.child;
		            workInProgress.child = renderedTail;
		          } else {
		            var previousSibling = renderState.last;

		            if (previousSibling !== null) {
		              previousSibling.sibling = renderedTail;
		            } else {
		              workInProgress.child = renderedTail;
		            }

		            renderState.last = renderedTail;
		          }
		        }

		        if (renderState.tail !== null) {
		          // We still have tail rows to render.
		          // Pop a row.
		          var next = renderState.tail;
		          renderState.rendering = next;
		          renderState.tail = next.sibling;
		          renderState.renderingStartTime = now();
		          next.sibling = null; // Restore the context.
		          // TODO: We can probably just avoid popping it instead and only
		          // setting it the first time we go from not suspended to suspended.

		          var suspenseContext = suspenseStackCursor.current;

		          if (didSuspendAlready) {
		            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
		          } else {
		            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
		          }

		          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
		          // Don't bubble properties in this case.

		          return next;
		        }

		        bubbleProperties(workInProgress);
		        return null;
		      }

		    case ScopeComponent:
		      {

		        break;
		      }

		    case OffscreenComponent:
		    case LegacyHiddenComponent:
		      {
		        popRenderLanes(workInProgress);
		        var _nextState = workInProgress.memoizedState;
		        var nextIsHidden = _nextState !== null;

		        if (current !== null) {
		          var _prevState = current.memoizedState;
		          var prevIsHidden = _prevState !== null;

		          if (prevIsHidden !== nextIsHidden && ( // LegacyHidden doesn't do any hiding — it only pre-renders.
		          !enableLegacyHidden )) {
		            workInProgress.flags |= Visibility;
		          }
		        }

		        if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {
		          bubbleProperties(workInProgress);
		        } else {
		          // Don't bubble properties for hidden children unless we're rendering
		          // at offscreen priority.
		          if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
		            bubbleProperties(workInProgress);

		            {
		              // Check if there was an insertion or update in the hidden subtree.
		              // If so, we need to hide those nodes in the commit phase, so
		              // schedule a visibility effect.
		              if ( workInProgress.subtreeFlags & (Placement | Update)) {
		                workInProgress.flags |= Visibility;
		              }
		            }
		          }
		        }
		        return null;
		      }

		    case CacheComponent:
		      {

		        return null;
		      }

		    case TracingMarkerComponent:
		      {

		        return null;
		      }
		  }

		  throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
		}

		function unwindWork(current, workInProgress, renderLanes) {
		  // Note: This intentionally doesn't check if we're hydrating because comparing
		  // to the current tree provider fiber is just as fast and less error-prone.
		  // Ideally we would have a special version of the work loop only
		  // for hydration.
		  popTreeContext(workInProgress);

		  switch (workInProgress.tag) {
		    case ClassComponent:
		      {
		        var Component = workInProgress.type;

		        if (isContextProvider(Component)) {
		          popContext(workInProgress);
		        }

		        var flags = workInProgress.flags;

		        if (flags & ShouldCapture) {
		          workInProgress.flags = flags & ~ShouldCapture | DidCapture;

		          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
		            transferActualDuration(workInProgress);
		          }

		          return workInProgress;
		        }

		        return null;
		      }

		    case HostRoot:
		      {
		        workInProgress.stateNode;
		        popHostContainer(workInProgress);
		        popTopLevelContextObject(workInProgress);
		        resetWorkInProgressVersions();
		        var _flags = workInProgress.flags;

		        if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
		          // There was an error during render that wasn't captured by a suspense
		          // boundary. Do a second pass on the root to unmount the children.
		          workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
		          return workInProgress;
		        } // We unwound to the root without completing it. Exit.


		        return null;
		      }

		    case HostComponent:
		      {
		        // TODO: popHydrationState
		        popHostContext(workInProgress);
		        return null;
		      }

		    case SuspenseComponent:
		      {
		        popSuspenseContext(workInProgress);
		        var suspenseState = workInProgress.memoizedState;

		        if (suspenseState !== null && suspenseState.dehydrated !== null) {
		          if (workInProgress.alternate === null) {
		            throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in ' + 'React. Please file an issue.');
		          }

		          resetHydrationState();
		        }

		        var _flags2 = workInProgress.flags;

		        if (_flags2 & ShouldCapture) {
		          workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

		          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
		            transferActualDuration(workInProgress);
		          }

		          return workInProgress;
		        }

		        return null;
		      }

		    case SuspenseListComponent:
		      {
		        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
		        // caught by a nested boundary. If not, it should bubble through.

		        return null;
		      }

		    case HostPortal:
		      popHostContainer(workInProgress);
		      return null;

		    case ContextProvider:
		      var context = workInProgress.type._context;
		      popProvider(context, workInProgress);
		      return null;

		    case OffscreenComponent:
		    case LegacyHiddenComponent:
		      popRenderLanes(workInProgress);
		      return null;

		    case CacheComponent:

		      return null;

		    default:
		      return null;
		  }
		}

		function unwindInterruptedWork(current, interruptedWork, renderLanes) {
		  // Note: This intentionally doesn't check if we're hydrating because comparing
		  // to the current tree provider fiber is just as fast and less error-prone.
		  // Ideally we would have a special version of the work loop only
		  // for hydration.
		  popTreeContext(interruptedWork);

		  switch (interruptedWork.tag) {
		    case ClassComponent:
		      {
		        var childContextTypes = interruptedWork.type.childContextTypes;

		        if (childContextTypes !== null && childContextTypes !== undefined) {
		          popContext(interruptedWork);
		        }

		        break;
		      }

		    case HostRoot:
		      {
		        interruptedWork.stateNode;
		        popHostContainer(interruptedWork);
		        popTopLevelContextObject(interruptedWork);
		        resetWorkInProgressVersions();
		        break;
		      }

		    case HostComponent:
		      {
		        popHostContext(interruptedWork);
		        break;
		      }

		    case HostPortal:
		      popHostContainer(interruptedWork);
		      break;

		    case SuspenseComponent:
		      popSuspenseContext(interruptedWork);
		      break;

		    case SuspenseListComponent:
		      popSuspenseContext(interruptedWork);
		      break;

		    case ContextProvider:
		      var context = interruptedWork.type._context;
		      popProvider(context, interruptedWork);
		      break;

		    case OffscreenComponent:
		    case LegacyHiddenComponent:
		      popRenderLanes(interruptedWork);
		      break;
		  }
		}

		var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

		{
		  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
		} // Used during the commit phase to track the state of the Offscreen component stack.
		// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.
		// Only used when enableSuspenseLayoutEffectSemantics is enabled.


		var offscreenSubtreeIsHidden = false;
		var offscreenSubtreeWasHidden = false;
		var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
		var nextEffect = null; // Used for Profiling builds to track updaters.

		var inProgressLanes = null;
		var inProgressRoot = null;
		function reportUncaughtErrorInDEV(error) {
		  // Wrapping each small part of the commit phase into a guarded
		  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).
		  // But we rely on it to surface errors to DEV tools like overlays
		  // (https://github.com/facebook/react/issues/21712).
		  // As a compromise, rethrow only caught errors in a guard.
		  {
		    invokeGuardedCallback(null, function () {
		      throw error;
		    });
		    clearCaughtError();
		  }
		}

		var callComponentWillUnmountWithTimer = function (current, instance) {
		  instance.props = current.memoizedProps;
		  instance.state = current.memoizedState;

		  if ( current.mode & ProfileMode) {
		    try {
		      startLayoutEffectTimer();
		      instance.componentWillUnmount();
		    } finally {
		      recordLayoutEffectDuration(current);
		    }
		  } else {
		    instance.componentWillUnmount();
		  }
		}; // Capture errors so they don't interrupt mounting.


		function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {
		  try {
		    commitHookEffectListMount(Layout, current);
		  } catch (error) {
		    captureCommitPhaseError(current, nearestMountedAncestor, error);
		  }
		} // Capture errors so they don't interrupt unmounting.


		function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
		  try {
		    callComponentWillUnmountWithTimer(current, instance);
		  } catch (error) {
		    captureCommitPhaseError(current, nearestMountedAncestor, error);
		  }
		} // Capture errors so they don't interrupt mounting.


		function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {
		  try {
		    instance.componentDidMount();
		  } catch (error) {
		    captureCommitPhaseError(current, nearestMountedAncestor, error);
		  }
		} // Capture errors so they don't interrupt mounting.


		function safelyAttachRef(current, nearestMountedAncestor) {
		  try {
		    commitAttachRef(current);
		  } catch (error) {
		    captureCommitPhaseError(current, nearestMountedAncestor, error);
		  }
		}

		function safelyDetachRef(current, nearestMountedAncestor) {
		  var ref = current.ref;

		  if (ref !== null) {
		    if (typeof ref === 'function') {
		      var retVal;

		      try {
		        if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {
		          try {
		            startLayoutEffectTimer();
		            retVal = ref(null);
		          } finally {
		            recordLayoutEffectDuration(current);
		          }
		        } else {
		          retVal = ref(null);
		        }
		      } catch (error) {
		        captureCommitPhaseError(current, nearestMountedAncestor, error);
		      }

		      {
		        if (typeof retVal === 'function') {
		          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(current));
		        }
		      }
		    } else {
		      ref.current = null;
		    }
		  }
		}

		function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
		  try {
		    destroy();
		  } catch (error) {
		    captureCommitPhaseError(current, nearestMountedAncestor, error);
		  }
		}
		var shouldFireAfterActiveInstanceBlur = false;
		function commitBeforeMutationEffects(root, firstChild) {
		  prepareForCommit(root.containerInfo);
		  nextEffect = firstChild;
		  commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber

		  var shouldFire = shouldFireAfterActiveInstanceBlur;
		  shouldFireAfterActiveInstanceBlur = false;
		  return shouldFire;
		}

		function commitBeforeMutationEffects_begin() {
		  while (nextEffect !== null) {
		    var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.

		    var child = fiber.child;

		    if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
		      child.return = fiber;
		      nextEffect = child;
		    } else {
		      commitBeforeMutationEffects_complete();
		    }
		  }
		}

		function commitBeforeMutationEffects_complete() {
		  while (nextEffect !== null) {
		    var fiber = nextEffect;
		    setCurrentFiber(fiber);

		    try {
		      commitBeforeMutationEffectsOnFiber(fiber);
		    } catch (error) {
		      captureCommitPhaseError(fiber, fiber.return, error);
		    }

		    resetCurrentFiber();
		    var sibling = fiber.sibling;

		    if (sibling !== null) {
		      sibling.return = fiber.return;
		      nextEffect = sibling;
		      return;
		    }

		    nextEffect = fiber.return;
		  }
		}

		function commitBeforeMutationEffectsOnFiber(finishedWork) {
		  var current = finishedWork.alternate;
		  var flags = finishedWork.flags;

		  if ((flags & Snapshot) !== NoFlags) {
		    setCurrentFiber(finishedWork);

		    switch (finishedWork.tag) {
		      case FunctionComponent:
		      case ForwardRef:
		      case SimpleMemoComponent:
		        {
		          break;
		        }

		      case ClassComponent:
		        {
		          if (current !== null) {
		            var prevProps = current.memoizedProps;
		            var prevState = current.memoizedState;
		            var instance = finishedWork.stateNode; // We could update instance props and state here,
		            // but instead we rely on them being set during last render.
		            // TODO: revisit this when we implement resuming.

		            {
		              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
		                if (instance.props !== finishedWork.memoizedProps) {
		                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
		                }

		                if (instance.state !== finishedWork.memoizedState) {
		                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
		                }
		              }
		            }

		            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

		            {
		              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

		              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
		                didWarnSet.add(finishedWork.type);

		                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentNameFromFiber(finishedWork));
		              }
		            }

		            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
		          }

		          break;
		        }

		      case HostRoot:
		        {
		          {
		            var root = finishedWork.stateNode;
		            clearContainer(root.containerInfo);
		          }

		          break;
		        }

		      case HostComponent:
		      case HostText:
		      case HostPortal:
		      case IncompleteClassComponent:
		        // Nothing to do for these component types
		        break;

		      default:
		        {
		          throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');
		        }
		    }

		    resetCurrentFiber();
		  }
		}

		function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
		  var updateQueue = finishedWork.updateQueue;
		  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

		  if (lastEffect !== null) {
		    var firstEffect = lastEffect.next;
		    var effect = firstEffect;

		    do {
		      if ((effect.tag & flags) === flags) {
		        // Unmount
		        var destroy = effect.destroy;
		        effect.destroy = undefined;

		        if (destroy !== undefined) {
		          {
		            if ((flags & Passive$1) !== NoFlags$1) {
		              markComponentPassiveEffectUnmountStarted(finishedWork);
		            } else if ((flags & Layout) !== NoFlags$1) {
		              markComponentLayoutEffectUnmountStarted(finishedWork);
		            }
		          }

		          {
		            if ((flags & Insertion) !== NoFlags$1) {
		              setIsRunningInsertionEffect(true);
		            }
		          }

		          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);

		          {
		            if ((flags & Insertion) !== NoFlags$1) {
		              setIsRunningInsertionEffect(false);
		            }
		          }

		          {
		            if ((flags & Passive$1) !== NoFlags$1) {
		              markComponentPassiveEffectUnmountStopped();
		            } else if ((flags & Layout) !== NoFlags$1) {
		              markComponentLayoutEffectUnmountStopped();
		            }
		          }
		        }
		      }

		      effect = effect.next;
		    } while (effect !== firstEffect);
		  }
		}

		function commitHookEffectListMount(flags, finishedWork) {
		  var updateQueue = finishedWork.updateQueue;
		  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

		  if (lastEffect !== null) {
		    var firstEffect = lastEffect.next;
		    var effect = firstEffect;

		    do {
		      if ((effect.tag & flags) === flags) {
		        {
		          if ((flags & Passive$1) !== NoFlags$1) {
		            markComponentPassiveEffectMountStarted(finishedWork);
		          } else if ((flags & Layout) !== NoFlags$1) {
		            markComponentLayoutEffectMountStarted(finishedWork);
		          }
		        } // Mount


		        var create = effect.create;

		        {
		          if ((flags & Insertion) !== NoFlags$1) {
		            setIsRunningInsertionEffect(true);
		          }
		        }

		        effect.destroy = create();

		        {
		          if ((flags & Insertion) !== NoFlags$1) {
		            setIsRunningInsertionEffect(false);
		          }
		        }

		        {
		          if ((flags & Passive$1) !== NoFlags$1) {
		            markComponentPassiveEffectMountStopped();
		          } else if ((flags & Layout) !== NoFlags$1) {
		            markComponentLayoutEffectMountStopped();
		          }
		        }

		        {
		          var destroy = effect.destroy;

		          if (destroy !== undefined && typeof destroy !== 'function') {
		            var hookName = void 0;

		            if ((effect.tag & Layout) !== NoFlags) {
		              hookName = 'useLayoutEffect';
		            } else if ((effect.tag & Insertion) !== NoFlags) {
		              hookName = 'useInsertionEffect';
		            } else {
		              hookName = 'useEffect';
		            }

		            var addendum = void 0;

		            if (destroy === null) {
		              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
		            } else if (typeof destroy.then === 'function') {
		              addendum = '\n\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + hookName + '(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
		            } else {
		              addendum = ' You returned: ' + destroy;
		            }

		            error('%s must not return anything besides a function, ' + 'which is used for clean-up.%s', hookName, addendum);
		          }
		        }
		      }

		      effect = effect.next;
		    } while (effect !== firstEffect);
		  }
		}

		function commitPassiveEffectDurations(finishedRoot, finishedWork) {
		  {
		    // Only Profilers with work in their subtree will have an Update effect scheduled.
		    if ((finishedWork.flags & Update) !== NoFlags) {
		      switch (finishedWork.tag) {
		        case Profiler:
		          {
		            var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
		            var _finishedWork$memoize = finishedWork.memoizedProps,
		                id = _finishedWork$memoize.id,
		                onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.
		            // It does not get reset until the start of the next commit phase.

		            var commitTime = getCommitTime();
		            var phase = finishedWork.alternate === null ? 'mount' : 'update';

		            {
		              if (isCurrentUpdateNested()) {
		                phase = 'nested-update';
		              }
		            }

		            if (typeof onPostCommit === 'function') {
		              onPostCommit(id, phase, passiveEffectDuration, commitTime);
		            } // Bubble times to the next nearest ancestor Profiler.
		            // After we process that Profiler, we'll bubble further up.


		            var parentFiber = finishedWork.return;

		            outer: while (parentFiber !== null) {
		              switch (parentFiber.tag) {
		                case HostRoot:
		                  var root = parentFiber.stateNode;
		                  root.passiveEffectDuration += passiveEffectDuration;
		                  break outer;

		                case Profiler:
		                  var parentStateNode = parentFiber.stateNode;
		                  parentStateNode.passiveEffectDuration += passiveEffectDuration;
		                  break outer;
		              }

		              parentFiber = parentFiber.return;
		            }

		            break;
		          }
		      }
		    }
		  }
		}

		function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {
		  if ((finishedWork.flags & LayoutMask) !== NoFlags) {
		    switch (finishedWork.tag) {
		      case FunctionComponent:
		      case ForwardRef:
		      case SimpleMemoComponent:
		        {
		          if ( !offscreenSubtreeWasHidden) {
		            // At this point layout effects have already been destroyed (during mutation phase).
		            // This is done to prevent sibling component effects from interfering with each other,
		            // e.g. a destroy function in one component should never override a ref set
		            // by a create function in another component during the same commit.
		            if ( finishedWork.mode & ProfileMode) {
		              try {
		                startLayoutEffectTimer();
		                commitHookEffectListMount(Layout | HasEffect, finishedWork);
		              } finally {
		                recordLayoutEffectDuration(finishedWork);
		              }
		            } else {
		              commitHookEffectListMount(Layout | HasEffect, finishedWork);
		            }
		          }

		          break;
		        }

		      case ClassComponent:
		        {
		          var instance = finishedWork.stateNode;

		          if (finishedWork.flags & Update) {
		            if (!offscreenSubtreeWasHidden) {
		              if (current === null) {
		                // We could update instance props and state here,
		                // but instead we rely on them being set during last render.
		                // TODO: revisit this when we implement resuming.
		                {
		                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
		                    if (instance.props !== finishedWork.memoizedProps) {
		                      error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
		                    }

		                    if (instance.state !== finishedWork.memoizedState) {
		                      error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
		                    }
		                  }
		                }

		                if ( finishedWork.mode & ProfileMode) {
		                  try {
		                    startLayoutEffectTimer();
		                    instance.componentDidMount();
		                  } finally {
		                    recordLayoutEffectDuration(finishedWork);
		                  }
		                } else {
		                  instance.componentDidMount();
		                }
		              } else {
		                var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
		                var prevState = current.memoizedState; // We could update instance props and state here,
		                // but instead we rely on them being set during last render.
		                // TODO: revisit this when we implement resuming.

		                {
		                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
		                    if (instance.props !== finishedWork.memoizedProps) {
		                      error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
		                    }

		                    if (instance.state !== finishedWork.memoizedState) {
		                      error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
		                    }
		                  }
		                }

		                if ( finishedWork.mode & ProfileMode) {
		                  try {
		                    startLayoutEffectTimer();
		                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
		                  } finally {
		                    recordLayoutEffectDuration(finishedWork);
		                  }
		                } else {
		                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
		                }
		              }
		            }
		          } // TODO: I think this is now always non-null by the time it reaches the
		          // commit phase. Consider removing the type check.


		          var updateQueue = finishedWork.updateQueue;

		          if (updateQueue !== null) {
		            {
		              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
		                if (instance.props !== finishedWork.memoizedProps) {
		                  error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
		                }

		                if (instance.state !== finishedWork.memoizedState) {
		                  error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
		                }
		              }
		            } // We could update instance props and state here,
		            // but instead we rely on them being set during last render.
		            // TODO: revisit this when we implement resuming.


		            commitUpdateQueue(finishedWork, updateQueue, instance);
		          }

		          break;
		        }

		      case HostRoot:
		        {
		          // TODO: I think this is now always non-null by the time it reaches the
		          // commit phase. Consider removing the type check.
		          var _updateQueue = finishedWork.updateQueue;

		          if (_updateQueue !== null) {
		            var _instance = null;

		            if (finishedWork.child !== null) {
		              switch (finishedWork.child.tag) {
		                case HostComponent:
		                  _instance = getPublicInstance(finishedWork.child.stateNode);
		                  break;

		                case ClassComponent:
		                  _instance = finishedWork.child.stateNode;
		                  break;
		              }
		            }

		            commitUpdateQueue(finishedWork, _updateQueue, _instance);
		          }

		          break;
		        }

		      case HostComponent:
		        {
		          var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
		          // (eg DOM renderer may schedule auto-focus for inputs and form controls).
		          // These effects should only be committed when components are first mounted,
		          // aka when there is no current/alternate.

		          if (current === null && finishedWork.flags & Update) {
		            var type = finishedWork.type;
		            var props = finishedWork.memoizedProps;
		            commitMount(_instance2, type, props);
		          }

		          break;
		        }

		      case HostText:
		        {
		          // We have no life-cycles associated with text.
		          break;
		        }

		      case HostPortal:
		        {
		          // We have no life-cycles associated with portals.
		          break;
		        }

		      case Profiler:
		        {
		          {
		            var _finishedWork$memoize2 = finishedWork.memoizedProps,
		                onCommit = _finishedWork$memoize2.onCommit,
		                onRender = _finishedWork$memoize2.onRender;
		            var effectDuration = finishedWork.stateNode.effectDuration;
		            var commitTime = getCommitTime();
		            var phase = current === null ? 'mount' : 'update';

		            {
		              if (isCurrentUpdateNested()) {
		                phase = 'nested-update';
		              }
		            }

		            if (typeof onRender === 'function') {
		              onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);
		            }

		            {
		              if (typeof onCommit === 'function') {
		                onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);
		              } // Schedule a passive effect for this Profiler to call onPostCommit hooks.
		              // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,
		              // because the effect is also where times bubble to parent Profilers.


		              enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.
		              // Do not reset these values until the next render so DevTools has a chance to read them first.

		              var parentFiber = finishedWork.return;

		              outer: while (parentFiber !== null) {
		                switch (parentFiber.tag) {
		                  case HostRoot:
		                    var root = parentFiber.stateNode;
		                    root.effectDuration += effectDuration;
		                    break outer;

		                  case Profiler:
		                    var parentStateNode = parentFiber.stateNode;
		                    parentStateNode.effectDuration += effectDuration;
		                    break outer;
		                }

		                parentFiber = parentFiber.return;
		              }
		            }
		          }

		          break;
		        }

		      case SuspenseComponent:
		        {
		          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
		          break;
		        }

		      case SuspenseListComponent:
		      case IncompleteClassComponent:
		      case ScopeComponent:
		      case OffscreenComponent:
		      case LegacyHiddenComponent:
		      case TracingMarkerComponent:
		        {
		          break;
		        }

		      default:
		        throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');
		    }
		  }

		  if ( !offscreenSubtreeWasHidden) {
		    {
		      if (finishedWork.flags & Ref) {
		        commitAttachRef(finishedWork);
		      }
		    }
		  }
		}

		function reappearLayoutEffectsOnFiber(node) {
		  // Turn on layout effects in a tree that previously disappeared.
		  // TODO (Offscreen) Check: flags & LayoutStatic
		  switch (node.tag) {
		    case FunctionComponent:
		    case ForwardRef:
		    case SimpleMemoComponent:
		      {
		        if ( node.mode & ProfileMode) {
		          try {
		            startLayoutEffectTimer();
		            safelyCallCommitHookLayoutEffectListMount(node, node.return);
		          } finally {
		            recordLayoutEffectDuration(node);
		          }
		        } else {
		          safelyCallCommitHookLayoutEffectListMount(node, node.return);
		        }

		        break;
		      }

		    case ClassComponent:
		      {
		        var instance = node.stateNode;

		        if (typeof instance.componentDidMount === 'function') {
		          safelyCallComponentDidMount(node, node.return, instance);
		        }

		        safelyAttachRef(node, node.return);
		        break;
		      }

		    case HostComponent:
		      {
		        safelyAttachRef(node, node.return);
		        break;
		      }
		  }
		}

		function hideOrUnhideAllChildren(finishedWork, isHidden) {
		  // Only hide or unhide the top-most host nodes.
		  var hostSubtreeRoot = null;

		  {
		    // We only have the top Fiber that was inserted but we need to recurse down its
		    // children to find all the terminal nodes.
		    var node = finishedWork;

		    while (true) {
		      if (node.tag === HostComponent) {
		        if (hostSubtreeRoot === null) {
		          hostSubtreeRoot = node;

		          try {
		            var instance = node.stateNode;

		            if (isHidden) {
		              hideInstance(instance);
		            } else {
		              unhideInstance(node.stateNode, node.memoizedProps);
		            }
		          } catch (error) {
		            captureCommitPhaseError(finishedWork, finishedWork.return, error);
		          }
		        }
		      } else if (node.tag === HostText) {
		        if (hostSubtreeRoot === null) {
		          try {
		            var _instance3 = node.stateNode;

		            if (isHidden) {
		              hideTextInstance(_instance3);
		            } else {
		              unhideTextInstance(_instance3, node.memoizedProps);
		            }
		          } catch (error) {
		            captureCommitPhaseError(finishedWork, finishedWork.return, error);
		          }
		        }
		      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {
		        node.child.return = node;
		        node = node.child;
		        continue;
		      }

		      if (node === finishedWork) {
		        return;
		      }

		      while (node.sibling === null) {
		        if (node.return === null || node.return === finishedWork) {
		          return;
		        }

		        if (hostSubtreeRoot === node) {
		          hostSubtreeRoot = null;
		        }

		        node = node.return;
		      }

		      if (hostSubtreeRoot === node) {
		        hostSubtreeRoot = null;
		      }

		      node.sibling.return = node.return;
		      node = node.sibling;
		    }
		  }
		}

		function commitAttachRef(finishedWork) {
		  var ref = finishedWork.ref;

		  if (ref !== null) {
		    var instance = finishedWork.stateNode;
		    var instanceToUse;

		    switch (finishedWork.tag) {
		      case HostComponent:
		        instanceToUse = getPublicInstance(instance);
		        break;

		      default:
		        instanceToUse = instance;
		    } // Moved outside to ensure DCE works with this flag

		    if (typeof ref === 'function') {
		      var retVal;

		      if ( finishedWork.mode & ProfileMode) {
		        try {
		          startLayoutEffectTimer();
		          retVal = ref(instanceToUse);
		        } finally {
		          recordLayoutEffectDuration(finishedWork);
		        }
		      } else {
		        retVal = ref(instanceToUse);
		      }

		      {
		        if (typeof retVal === 'function') {
		          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(finishedWork));
		        }
		      }
		    } else {
		      {
		        if (!ref.hasOwnProperty('current')) {
		          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentNameFromFiber(finishedWork));
		        }
		      }

		      ref.current = instanceToUse;
		    }
		  }
		}

		function detachFiberMutation(fiber) {
		  // Cut off the return pointer to disconnect it from the tree.
		  // This enables us to detect and warn against state updates on an unmounted component.
		  // It also prevents events from bubbling from within disconnected components.
		  //
		  // Ideally, we should also clear the child pointer of the parent alternate to let this
		  // get GC:ed but we don't know which for sure which parent is the current
		  // one so we'll settle for GC:ing the subtree of this child.
		  // This child itself will be GC:ed when the parent updates the next time.
		  //
		  // Note that we can't clear child or sibling pointers yet.
		  // They're needed for passive effects and for findDOMNode.
		  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).
		  //
		  // Don't reset the alternate yet, either. We need that so we can detach the
		  // alternate's fields in the passive phase. Clearing the return pointer is
		  // sufficient for findDOMNode semantics.
		  var alternate = fiber.alternate;

		  if (alternate !== null) {
		    alternate.return = null;
		  }

		  fiber.return = null;
		}

		function detachFiberAfterEffects(fiber) {
		  var alternate = fiber.alternate;

		  if (alternate !== null) {
		    fiber.alternate = null;
		    detachFiberAfterEffects(alternate);
		  } // Note: Defensively using negation instead of < in case
		  // `deletedTreeCleanUpLevel` is undefined.


		  {
		    // Clear cyclical Fiber fields. This level alone is designed to roughly
		    // approximate the planned Fiber refactor. In that world, `setState` will be
		    // bound to a special "instance" object instead of a Fiber. The Instance
		    // object will not have any of these fields. It will only be connected to
		    // the fiber tree via a single link at the root. So if this level alone is
		    // sufficient to fix memory issues, that bodes well for our plans.
		    fiber.child = null;
		    fiber.deletions = null;
		    fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host
		    // tree, which has its own pointers to children, parents, and siblings.
		    // The other host nodes also point back to fibers, so we should detach that
		    // one, too.

		    if (fiber.tag === HostComponent) {
		      var hostInstance = fiber.stateNode;

		      if (hostInstance !== null) {
		        detachDeletedInstance(hostInstance);
		      }
		    }

		    fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We
		    // already disconnect the `return` pointer at the root of the deleted
		    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not
		    // cyclical — it's only cyclical when combined with `child`, `sibling`, and
		    // `alternate`. But we'll clear it in the next level anyway, just in case.

		    {
		      fiber._debugOwner = null;
		    }

		    {
		      // Theoretically, nothing in here should be necessary, because we already
		      // disconnected the fiber from the tree. So even if something leaks this
		      // particular fiber, it won't leak anything else
		      //
		      // The purpose of this branch is to be super aggressive so we can measure
		      // if there's any difference in memory impact. If there is, that could
		      // indicate a React leak we don't know about.
		      fiber.return = null;
		      fiber.dependencies = null;
		      fiber.memoizedProps = null;
		      fiber.memoizedState = null;
		      fiber.pendingProps = null;
		      fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.

		      fiber.updateQueue = null;
		    }
		  }
		}

		function getHostParentFiber(fiber) {
		  var parent = fiber.return;

		  while (parent !== null) {
		    if (isHostParent(parent)) {
		      return parent;
		    }

		    parent = parent.return;
		  }

		  throw new Error('Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');
		}

		function isHostParent(fiber) {
		  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
		}

		function getHostSibling(fiber) {
		  // We're going to search forward into the tree until we find a sibling host
		  // node. Unfortunately, if multiple insertions are done in a row we have to
		  // search past them. This leads to exponential search for the next sibling.
		  // TODO: Find a more efficient way to do this.
		  var node = fiber;

		  siblings: while (true) {
		    // If we didn't find anything, let's try the next sibling.
		    while (node.sibling === null) {
		      if (node.return === null || isHostParent(node.return)) {
		        // If we pop out of the root or hit the parent the fiber we are the
		        // last sibling.
		        return null;
		      }

		      node = node.return;
		    }

		    node.sibling.return = node.return;
		    node = node.sibling;

		    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
		      // If it is not host node and, we might have a host node inside it.
		      // Try to search down until we find one.
		      if (node.flags & Placement) {
		        // If we don't have a child, try the siblings instead.
		        continue siblings;
		      } // If we don't have a child, try the siblings instead.
		      // We also skip portals because they are not part of this host tree.


		      if (node.child === null || node.tag === HostPortal) {
		        continue siblings;
		      } else {
		        node.child.return = node;
		        node = node.child;
		      }
		    } // Check if this host node is stable or about to be placed.


		    if (!(node.flags & Placement)) {
		      // Found it!
		      return node.stateNode;
		    }
		  }
		}

		function commitPlacement(finishedWork) {


		  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

		  switch (parentFiber.tag) {
		    case HostComponent:
		      {
		        var parent = parentFiber.stateNode;

		        if (parentFiber.flags & ContentReset) {
		          // Reset the text content of the parent before doing any insertions
		          resetTextContent(parent); // Clear ContentReset from the effect tag

		          parentFiber.flags &= ~ContentReset;
		        }

		        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
		        // children to find all the terminal nodes.

		        insertOrAppendPlacementNode(finishedWork, before, parent);
		        break;
		      }

		    case HostRoot:
		    case HostPortal:
		      {
		        var _parent = parentFiber.stateNode.containerInfo;

		        var _before = getHostSibling(finishedWork);

		        insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
		        break;
		      }
		    // eslint-disable-next-line-no-fallthrough

		    default:
		      throw new Error('Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');
		  }
		}

		function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
		  var tag = node.tag;
		  var isHost = tag === HostComponent || tag === HostText;

		  if (isHost) {
		    var stateNode = node.stateNode;

		    if (before) {
		      insertInContainerBefore(parent, stateNode, before);
		    } else {
		      appendChildToContainer(parent, stateNode);
		    }
		  } else if (tag === HostPortal) ; else {
		    var child = node.child;

		    if (child !== null) {
		      insertOrAppendPlacementNodeIntoContainer(child, before, parent);
		      var sibling = child.sibling;

		      while (sibling !== null) {
		        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
		        sibling = sibling.sibling;
		      }
		    }
		  }
		}

		function insertOrAppendPlacementNode(node, before, parent) {
		  var tag = node.tag;
		  var isHost = tag === HostComponent || tag === HostText;

		  if (isHost) {
		    var stateNode = node.stateNode;

		    if (before) {
		      insertBefore(parent, stateNode, before);
		    } else {
		      appendChild(parent, stateNode);
		    }
		  } else if (tag === HostPortal) ; else {
		    var child = node.child;

		    if (child !== null) {
		      insertOrAppendPlacementNode(child, before, parent);
		      var sibling = child.sibling;

		      while (sibling !== null) {
		        insertOrAppendPlacementNode(sibling, before, parent);
		        sibling = sibling.sibling;
		      }
		    }
		  }
		} // These are tracked on the stack as we recursively traverse a
		// deleted subtree.
		// TODO: Update these during the whole mutation phase, not just during
		// a deletion.


		var hostParent = null;
		var hostParentIsContainer = false;

		function commitDeletionEffects(root, returnFiber, deletedFiber) {
		  {
		    // We only have the top Fiber that was deleted but we need to recurse down its
		    // children to find all the terminal nodes.
		    // Recursively delete all host nodes from the parent, detach refs, clean
		    // up mounted layout effects, and call componentWillUnmount.
		    // We only need to remove the topmost host child in each branch. But then we
		    // still need to keep traversing to unmount effects, refs, and cWU. TODO: We
		    // could split this into two separate traversals functions, where the second
		    // one doesn't include any removeChild logic. This is maybe the same
		    // function as "disappearLayoutEffects" (or whatever that turns into after
		    // the layout phase is refactored to use recursion).
		    // Before starting, find the nearest host parent on the stack so we know
		    // which instance/container to remove the children from.
		    // TODO: Instead of searching up the fiber return path on every deletion, we
		    // can track the nearest host component on the JS stack as we traverse the
		    // tree during the commit phase. This would make insertions faster, too.
		    var parent = returnFiber;

		    findParent: while (parent !== null) {
		      switch (parent.tag) {
		        case HostComponent:
		          {
		            hostParent = parent.stateNode;
		            hostParentIsContainer = false;
		            break findParent;
		          }

		        case HostRoot:
		          {
		            hostParent = parent.stateNode.containerInfo;
		            hostParentIsContainer = true;
		            break findParent;
		          }

		        case HostPortal:
		          {
		            hostParent = parent.stateNode.containerInfo;
		            hostParentIsContainer = true;
		            break findParent;
		          }
		      }

		      parent = parent.return;
		    }

		    if (hostParent === null) {
		      throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');
		    }

		    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
		    hostParent = null;
		    hostParentIsContainer = false;
		  }

		  detachFiberMutation(deletedFiber);
		}

		function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
		  // TODO: Use a static flag to skip trees that don't have unmount effects
		  var child = parent.child;

		  while (child !== null) {
		    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
		    child = child.sibling;
		  }
		}

		function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
		  onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse
		  // into their subtree. There are simpler cases in the inner switch
		  // that don't modify the stack.

		  switch (deletedFiber.tag) {
		    case HostComponent:
		      {
		        if (!offscreenSubtreeWasHidden) {
		          safelyDetachRef(deletedFiber, nearestMountedAncestor);
		        } // Intentional fallthrough to next branch

		      }
		    // eslint-disable-next-line-no-fallthrough

		    case HostText:
		      {
		        // We only need to remove the nearest host child. Set the host parent
		        // to `null` on the stack to indicate that nested children don't
		        // need to be removed.
		        {
		          var prevHostParent = hostParent;
		          var prevHostParentIsContainer = hostParentIsContainer;
		          hostParent = null;
		          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
		          hostParent = prevHostParent;
		          hostParentIsContainer = prevHostParentIsContainer;

		          if (hostParent !== null) {
		            // Now that all the child effects have unmounted, we can remove the
		            // node from the tree.
		            if (hostParentIsContainer) {
		              removeChildFromContainer(hostParent, deletedFiber.stateNode);
		            } else {
		              removeChild(hostParent, deletedFiber.stateNode);
		            }
		          }
		        }

		        return;
		      }

		    case DehydratedFragment:
		      {
		        // Delete the dehydrated suspense boundary and all of its content.


		        {
		          if (hostParent !== null) {
		            if (hostParentIsContainer) {
		              clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
		            } else {
		              clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
		            }
		          }
		        }

		        return;
		      }

		    case HostPortal:
		      {
		        {
		          // When we go into a portal, it becomes the parent to remove from.
		          var _prevHostParent = hostParent;
		          var _prevHostParentIsContainer = hostParentIsContainer;
		          hostParent = deletedFiber.stateNode.containerInfo;
		          hostParentIsContainer = true;
		          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
		          hostParent = _prevHostParent;
		          hostParentIsContainer = _prevHostParentIsContainer;
		        }

		        return;
		      }

		    case FunctionComponent:
		    case ForwardRef:
		    case MemoComponent:
		    case SimpleMemoComponent:
		      {
		        if (!offscreenSubtreeWasHidden) {
		          var updateQueue = deletedFiber.updateQueue;

		          if (updateQueue !== null) {
		            var lastEffect = updateQueue.lastEffect;

		            if (lastEffect !== null) {
		              var firstEffect = lastEffect.next;
		              var effect = firstEffect;

		              do {
		                var _effect = effect,
		                    destroy = _effect.destroy,
		                    tag = _effect.tag;

		                if (destroy !== undefined) {
		                  if ((tag & Insertion) !== NoFlags$1) {
		                    safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
		                  } else if ((tag & Layout) !== NoFlags$1) {
		                    {
		                      markComponentLayoutEffectUnmountStarted(deletedFiber);
		                    }

		                    if ( deletedFiber.mode & ProfileMode) {
		                      startLayoutEffectTimer();
		                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
		                      recordLayoutEffectDuration(deletedFiber);
		                    } else {
		                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
		                    }

		                    {
		                      markComponentLayoutEffectUnmountStopped();
		                    }
		                  }
		                }

		                effect = effect.next;
		              } while (effect !== firstEffect);
		            }
		          }
		        }

		        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
		        return;
		      }

		    case ClassComponent:
		      {
		        if (!offscreenSubtreeWasHidden) {
		          safelyDetachRef(deletedFiber, nearestMountedAncestor);
		          var instance = deletedFiber.stateNode;

		          if (typeof instance.componentWillUnmount === 'function') {
		            safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
		          }
		        }

		        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
		        return;
		      }

		    case ScopeComponent:
		      {

		        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
		        return;
		      }

		    case OffscreenComponent:
		      {
		        if ( // TODO: Remove this dead flag
		         deletedFiber.mode & ConcurrentMode) {
		          // If this offscreen component is hidden, we already unmounted it. Before
		          // deleting the children, track that it's already unmounted so that we
		          // don't attempt to unmount the effects again.
		          // TODO: If the tree is hidden, in most cases we should be able to skip
		          // over the nested children entirely. An exception is we haven't yet found
		          // the topmost host node to delete, which we already track on the stack.
		          // But the other case is portals, which need to be detached no matter how
		          // deeply they are nested. We should use a subtree flag to track whether a
		          // subtree includes a nested portal.
		          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
		          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
		          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
		          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
		        } else {
		          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
		        }

		        break;
		      }

		    default:
		      {
		        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
		        return;
		      }
		  }
		}

		function commitSuspenseCallback(finishedWork) {
		  // TODO: Move this to passive phase
		  finishedWork.memoizedState;
		}

		function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {

		  var newState = finishedWork.memoizedState;

		  if (newState === null) {
		    var current = finishedWork.alternate;

		    if (current !== null) {
		      var prevState = current.memoizedState;

		      if (prevState !== null) {
		        var suspenseInstance = prevState.dehydrated;

		        if (suspenseInstance !== null) {
		          commitHydratedSuspenseInstance(suspenseInstance);
		        }
		      }
		    }
		  }
		}

		function attachSuspenseRetryListeners(finishedWork) {
		  // If this boundary just timed out, then it will have a set of wakeables.
		  // For each wakeable, attach a listener so that when it resolves, React
		  // attempts to re-render the boundary in the primary (pre-timeout) state.
		  var wakeables = finishedWork.updateQueue;

		  if (wakeables !== null) {
		    finishedWork.updateQueue = null;
		    var retryCache = finishedWork.stateNode;

		    if (retryCache === null) {
		      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
		    }

		    wakeables.forEach(function (wakeable) {
		      // Memoize using the boundary fiber to prevent redundant listeners.
		      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);

		      if (!retryCache.has(wakeable)) {
		        retryCache.add(wakeable);

		        {
		          if (isDevToolsPresent) {
		            if (inProgressLanes !== null && inProgressRoot !== null) {
		              // If we have pending work still, associate the original updaters with it.
		              restorePendingUpdaters(inProgressRoot, inProgressLanes);
		            } else {
		              throw Error('Expected finished root and lanes to be set. This is a bug in React.');
		            }
		          }
		        }

		        wakeable.then(retry, retry);
		      }
		    });
		  }
		} // This function detects when a Suspense boundary goes from visible to hidden.
		function commitMutationEffects(root, finishedWork, committedLanes) {
		  inProgressLanes = committedLanes;
		  inProgressRoot = root;
		  setCurrentFiber(finishedWork);
		  commitMutationEffectsOnFiber(finishedWork, root);
		  setCurrentFiber(finishedWork);
		  inProgressLanes = null;
		  inProgressRoot = null;
		}

		function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {
		  // Deletions effects can be scheduled on any fiber type. They need to happen
		  // before the children effects hae fired.
		  var deletions = parentFiber.deletions;

		  if (deletions !== null) {
		    for (var i = 0; i < deletions.length; i++) {
		      var childToDelete = deletions[i];

		      try {
		        commitDeletionEffects(root, parentFiber, childToDelete);
		      } catch (error) {
		        captureCommitPhaseError(childToDelete, parentFiber, error);
		      }
		    }
		  }

		  var prevDebugFiber = getCurrentFiber();

		  if (parentFiber.subtreeFlags & MutationMask) {
		    var child = parentFiber.child;

		    while (child !== null) {
		      setCurrentFiber(child);
		      commitMutationEffectsOnFiber(child, root);
		      child = child.sibling;
		    }
		  }

		  setCurrentFiber(prevDebugFiber);
		}

		function commitMutationEffectsOnFiber(finishedWork, root, lanes) {
		  var current = finishedWork.alternate;
		  var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,
		  // because the fiber tag is more specific. An exception is any flag related
		  // to reconcilation, because those can be set on all fiber types.

		  switch (finishedWork.tag) {
		    case FunctionComponent:
		    case ForwardRef:
		    case MemoComponent:
		    case SimpleMemoComponent:
		      {
		        recursivelyTraverseMutationEffects(root, finishedWork);
		        commitReconciliationEffects(finishedWork);

		        if (flags & Update) {
		          try {
		            commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
		            commitHookEffectListMount(Insertion | HasEffect, finishedWork);
		          } catch (error) {
		            captureCommitPhaseError(finishedWork, finishedWork.return, error);
		          } // Layout effects are destroyed during the mutation phase so that all
		          // destroy functions for all fibers are called before any create functions.
		          // This prevents sibling component effects from interfering with each other,
		          // e.g. a destroy function in one component should never override a ref set
		          // by a create function in another component during the same commit.


		          if ( finishedWork.mode & ProfileMode) {
		            try {
		              startLayoutEffectTimer();
		              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
		            } catch (error) {
		              captureCommitPhaseError(finishedWork, finishedWork.return, error);
		            }

		            recordLayoutEffectDuration(finishedWork);
		          } else {
		            try {
		              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
		            } catch (error) {
		              captureCommitPhaseError(finishedWork, finishedWork.return, error);
		            }
		          }
		        }

		        return;
		      }

		    case ClassComponent:
		      {
		        recursivelyTraverseMutationEffects(root, finishedWork);
		        commitReconciliationEffects(finishedWork);

		        if (flags & Ref) {
		          if (current !== null) {
		            safelyDetachRef(current, current.return);
		          }
		        }

		        return;
		      }

		    case HostComponent:
		      {
		        recursivelyTraverseMutationEffects(root, finishedWork);
		        commitReconciliationEffects(finishedWork);

		        if (flags & Ref) {
		          if (current !== null) {
		            safelyDetachRef(current, current.return);
		          }
		        }

		        {
		          // TODO: ContentReset gets cleared by the children during the commit
		          // phase. This is a refactor hazard because it means we must read
		          // flags the flags after `commitReconciliationEffects` has already run;
		          // the order matters. We should refactor so that ContentReset does not
		          // rely on mutating the flag during commit. Like by setting a flag
		          // during the render phase instead.
		          if (finishedWork.flags & ContentReset) {
		            var instance = finishedWork.stateNode;

		            try {
		              resetTextContent(instance);
		            } catch (error) {
		              captureCommitPhaseError(finishedWork, finishedWork.return, error);
		            }
		          }

		          if (flags & Update) {
		            var _instance4 = finishedWork.stateNode;

		            if (_instance4 != null) {
		              // Commit the work prepared earlier.
		              var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
		              // as the newProps. The updatePayload will contain the real change in
		              // this case.

		              var oldProps = current !== null ? current.memoizedProps : newProps;
		              var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

		              var updatePayload = finishedWork.updateQueue;
		              finishedWork.updateQueue = null;

		              if (updatePayload !== null) {
		                try {
		                  commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
		                } catch (error) {
		                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
		                }
		              }
		            }
		          }
		        }

		        return;
		      }

		    case HostText:
		      {
		        recursivelyTraverseMutationEffects(root, finishedWork);
		        commitReconciliationEffects(finishedWork);

		        if (flags & Update) {
		          {
		            if (finishedWork.stateNode === null) {
		              throw new Error('This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');
		            }

		            var textInstance = finishedWork.stateNode;
		            var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
		            // as the newProps. The updatePayload will contain the real change in
		            // this case.

		            var oldText = current !== null ? current.memoizedProps : newText;

		            try {
		              commitTextUpdate(textInstance, oldText, newText);
		            } catch (error) {
		              captureCommitPhaseError(finishedWork, finishedWork.return, error);
		            }
		          }
		        }

		        return;
		      }

		    case HostRoot:
		      {
		        recursivelyTraverseMutationEffects(root, finishedWork);
		        commitReconciliationEffects(finishedWork);

		        if (flags & Update) {
		          {
		            if (current !== null) {
		              var prevRootState = current.memoizedState;

		              if (prevRootState.isDehydrated) {
		                try {
		                  commitHydratedContainer(root.containerInfo);
		                } catch (error) {
		                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
		                }
		              }
		            }
		          }
		        }

		        return;
		      }

		    case HostPortal:
		      {
		        recursivelyTraverseMutationEffects(root, finishedWork);
		        commitReconciliationEffects(finishedWork);

		        return;
		      }

		    case SuspenseComponent:
		      {
		        recursivelyTraverseMutationEffects(root, finishedWork);
		        commitReconciliationEffects(finishedWork);
		        var offscreenFiber = finishedWork.child;

		        if (offscreenFiber.flags & Visibility) {
		          var offscreenInstance = offscreenFiber.stateNode;
		          var newState = offscreenFiber.memoizedState;
		          var isHidden = newState !== null; // Track the current state on the Offscreen instance so we can
		          // read it during an event

		          offscreenInstance.isHidden = isHidden;

		          if (isHidden) {
		            var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;

		            if (!wasHidden) {
		              // TODO: Move to passive phase
		              markCommitTimeOfFallback();
		            }
		          }
		        }

		        if (flags & Update) {
		          try {
		            commitSuspenseCallback(finishedWork);
		          } catch (error) {
		            captureCommitPhaseError(finishedWork, finishedWork.return, error);
		          }

		          attachSuspenseRetryListeners(finishedWork);
		        }

		        return;
		      }

		    case OffscreenComponent:
		      {
		        var _wasHidden = current !== null && current.memoizedState !== null;

		        if ( // TODO: Remove this dead flag
		         finishedWork.mode & ConcurrentMode) {
		          // Before committing the children, track on the stack whether this
		          // offscreen subtree was already hidden, so that we don't unmount the
		          // effects again.
		          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
		          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
		          recursivelyTraverseMutationEffects(root, finishedWork);
		          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
		        } else {
		          recursivelyTraverseMutationEffects(root, finishedWork);
		        }

		        commitReconciliationEffects(finishedWork);

		        if (flags & Visibility) {
		          var _offscreenInstance = finishedWork.stateNode;
		          var _newState = finishedWork.memoizedState;

		          var _isHidden = _newState !== null;

		          var offscreenBoundary = finishedWork; // Track the current state on the Offscreen instance so we can
		          // read it during an event

		          _offscreenInstance.isHidden = _isHidden;

		          {
		            if (_isHidden) {
		              if (!_wasHidden) {
		                if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
		                  nextEffect = offscreenBoundary;
		                  var offscreenChild = offscreenBoundary.child;

		                  while (offscreenChild !== null) {
		                    nextEffect = offscreenChild;
		                    disappearLayoutEffects_begin(offscreenChild);
		                    offscreenChild = offscreenChild.sibling;
		                  }
		                }
		              }
		            }
		          }

		          {
		            // TODO: This needs to run whenever there's an insertion or update
		            // inside a hidden Offscreen tree.
		            hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
		          }
		        }

		        return;
		      }

		    case SuspenseListComponent:
		      {
		        recursivelyTraverseMutationEffects(root, finishedWork);
		        commitReconciliationEffects(finishedWork);

		        if (flags & Update) {
		          attachSuspenseRetryListeners(finishedWork);
		        }

		        return;
		      }

		    case ScopeComponent:
		      {

		        return;
		      }

		    default:
		      {
		        recursivelyTraverseMutationEffects(root, finishedWork);
		        commitReconciliationEffects(finishedWork);
		        return;
		      }
		  }
		}

		function commitReconciliationEffects(finishedWork) {
		  // Placement effects (insertions, reorders) can be scheduled on any fiber
		  // type. They needs to happen after the children effects have fired, but
		  // before the effects on this fiber have fired.
		  var flags = finishedWork.flags;

		  if (flags & Placement) {
		    try {
		      commitPlacement(finishedWork);
		    } catch (error) {
		      captureCommitPhaseError(finishedWork, finishedWork.return, error);
		    } // Clear the "placement" from effect tag so that we know that this is
		    // inserted, before any life-cycles like componentDidMount gets called.
		    // TODO: findDOMNode doesn't rely on this any more but isMounted does
		    // and isMounted is deprecated anyway so we should be able to kill this.


		    finishedWork.flags &= ~Placement;
		  }

		  if (flags & Hydrating) {
		    finishedWork.flags &= ~Hydrating;
		  }
		}

		function commitLayoutEffects(finishedWork, root, committedLanes) {
		  inProgressLanes = committedLanes;
		  inProgressRoot = root;
		  nextEffect = finishedWork;
		  commitLayoutEffects_begin(finishedWork, root, committedLanes);
		  inProgressLanes = null;
		  inProgressRoot = null;
		}

		function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {
		  // Suspense layout effects semantics don't change for legacy roots.
		  var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;

		  while (nextEffect !== null) {
		    var fiber = nextEffect;
		    var firstChild = fiber.child;

		    if ( fiber.tag === OffscreenComponent && isModernRoot) {
		      // Keep track of the current Offscreen stack's state.
		      var isHidden = fiber.memoizedState !== null;
		      var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;

		      if (newOffscreenSubtreeIsHidden) {
		        // The Offscreen tree is hidden. Skip over its layout effects.
		        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
		        continue;
		      } else {
		        // TODO (Offscreen) Also check: subtreeFlags & LayoutMask
		        var current = fiber.alternate;
		        var wasHidden = current !== null && current.memoizedState !== null;
		        var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
		        var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
		        var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.

		        offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
		        offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;

		        if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
		          // This is the root of a reappearing boundary. Turn its layout effects
		          // back on.
		          nextEffect = fiber;
		          reappearLayoutEffects_begin(fiber);
		        }

		        var child = firstChild;

		        while (child !== null) {
		          nextEffect = child;
		          commitLayoutEffects_begin(child, // New root; bubble back up to here and stop.
		          root, committedLanes);
		          child = child.sibling;
		        } // Restore Offscreen state and resume in our-progress traversal.


		        nextEffect = fiber;
		        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
		        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
		        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
		        continue;
		      }
		    }

		    if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
		      firstChild.return = fiber;
		      nextEffect = firstChild;
		    } else {
		      commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
		    }
		  }
		}

		function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {
		  while (nextEffect !== null) {
		    var fiber = nextEffect;

		    if ((fiber.flags & LayoutMask) !== NoFlags) {
		      var current = fiber.alternate;
		      setCurrentFiber(fiber);

		      try {
		        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);
		      } catch (error) {
		        captureCommitPhaseError(fiber, fiber.return, error);
		      }

		      resetCurrentFiber();
		    }

		    if (fiber === subtreeRoot) {
		      nextEffect = null;
		      return;
		    }

		    var sibling = fiber.sibling;

		    if (sibling !== null) {
		      sibling.return = fiber.return;
		      nextEffect = sibling;
		      return;
		    }

		    nextEffect = fiber.return;
		  }
		}

		function disappearLayoutEffects_begin(subtreeRoot) {
		  while (nextEffect !== null) {
		    var fiber = nextEffect;
		    var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)

		    switch (fiber.tag) {
		      case FunctionComponent:
		      case ForwardRef:
		      case MemoComponent:
		      case SimpleMemoComponent:
		        {
		          if ( fiber.mode & ProfileMode) {
		            try {
		              startLayoutEffectTimer();
		              commitHookEffectListUnmount(Layout, fiber, fiber.return);
		            } finally {
		              recordLayoutEffectDuration(fiber);
		            }
		          } else {
		            commitHookEffectListUnmount(Layout, fiber, fiber.return);
		          }

		          break;
		        }

		      case ClassComponent:
		        {
		          // TODO (Offscreen) Check: flags & RefStatic
		          safelyDetachRef(fiber, fiber.return);
		          var instance = fiber.stateNode;

		          if (typeof instance.componentWillUnmount === 'function') {
		            safelyCallComponentWillUnmount(fiber, fiber.return, instance);
		          }

		          break;
		        }

		      case HostComponent:
		        {
		          safelyDetachRef(fiber, fiber.return);
		          break;
		        }

		      case OffscreenComponent:
		        {
		          // Check if this is a
		          var isHidden = fiber.memoizedState !== null;

		          if (isHidden) {
		            // Nested Offscreen tree is already hidden. Don't disappear
		            // its effects.
		            disappearLayoutEffects_complete(subtreeRoot);
		            continue;
		          }

		          break;
		        }
		    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic


		    if (firstChild !== null) {
		      firstChild.return = fiber;
		      nextEffect = firstChild;
		    } else {
		      disappearLayoutEffects_complete(subtreeRoot);
		    }
		  }
		}

		function disappearLayoutEffects_complete(subtreeRoot) {
		  while (nextEffect !== null) {
		    var fiber = nextEffect;

		    if (fiber === subtreeRoot) {
		      nextEffect = null;
		      return;
		    }

		    var sibling = fiber.sibling;

		    if (sibling !== null) {
		      sibling.return = fiber.return;
		      nextEffect = sibling;
		      return;
		    }

		    nextEffect = fiber.return;
		  }
		}

		function reappearLayoutEffects_begin(subtreeRoot) {
		  while (nextEffect !== null) {
		    var fiber = nextEffect;
		    var firstChild = fiber.child;

		    if (fiber.tag === OffscreenComponent) {
		      var isHidden = fiber.memoizedState !== null;

		      if (isHidden) {
		        // Nested Offscreen tree is still hidden. Don't re-appear its effects.
		        reappearLayoutEffects_complete(subtreeRoot);
		        continue;
		      }
		    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic


		    if (firstChild !== null) {
		      // This node may have been reused from a previous render, so we can't
		      // assume its return pointer is correct.
		      firstChild.return = fiber;
		      nextEffect = firstChild;
		    } else {
		      reappearLayoutEffects_complete(subtreeRoot);
		    }
		  }
		}

		function reappearLayoutEffects_complete(subtreeRoot) {
		  while (nextEffect !== null) {
		    var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic

		    setCurrentFiber(fiber);

		    try {
		      reappearLayoutEffectsOnFiber(fiber);
		    } catch (error) {
		      captureCommitPhaseError(fiber, fiber.return, error);
		    }

		    resetCurrentFiber();

		    if (fiber === subtreeRoot) {
		      nextEffect = null;
		      return;
		    }

		    var sibling = fiber.sibling;

		    if (sibling !== null) {
		      // This node may have been reused from a previous render, so we can't
		      // assume its return pointer is correct.
		      sibling.return = fiber.return;
		      nextEffect = sibling;
		      return;
		    }

		    nextEffect = fiber.return;
		  }
		}

		function commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {
		  nextEffect = finishedWork;
		  commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);
		}

		function commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {
		  while (nextEffect !== null) {
		    var fiber = nextEffect;
		    var firstChild = fiber.child;

		    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
		      firstChild.return = fiber;
		      nextEffect = firstChild;
		    } else {
		      commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);
		    }
		  }
		}

		function commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {
		  while (nextEffect !== null) {
		    var fiber = nextEffect;

		    if ((fiber.flags & Passive) !== NoFlags) {
		      setCurrentFiber(fiber);

		      try {
		        commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);
		      } catch (error) {
		        captureCommitPhaseError(fiber, fiber.return, error);
		      }

		      resetCurrentFiber();
		    }

		    if (fiber === subtreeRoot) {
		      nextEffect = null;
		      return;
		    }

		    var sibling = fiber.sibling;

		    if (sibling !== null) {
		      sibling.return = fiber.return;
		      nextEffect = sibling;
		      return;
		    }

		    nextEffect = fiber.return;
		  }
		}

		function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
		  switch (finishedWork.tag) {
		    case FunctionComponent:
		    case ForwardRef:
		    case SimpleMemoComponent:
		      {
		        if ( finishedWork.mode & ProfileMode) {
		          startPassiveEffectTimer();

		          try {
		            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
		          } finally {
		            recordPassiveEffectDuration(finishedWork);
		          }
		        } else {
		          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
		        }

		        break;
		      }
		  }
		}

		function commitPassiveUnmountEffects(firstChild) {
		  nextEffect = firstChild;
		  commitPassiveUnmountEffects_begin();
		}

		function commitPassiveUnmountEffects_begin() {
		  while (nextEffect !== null) {
		    var fiber = nextEffect;
		    var child = fiber.child;

		    if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
		      var deletions = fiber.deletions;

		      if (deletions !== null) {
		        for (var i = 0; i < deletions.length; i++) {
		          var fiberToDelete = deletions[i];
		          nextEffect = fiberToDelete;
		          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
		        }

		        {
		          // A fiber was deleted from this parent fiber, but it's still part of
		          // the previous (alternate) parent fiber's list of children. Because
		          // children are a linked list, an earlier sibling that's still alive
		          // will be connected to the deleted fiber via its `alternate`:
		          //
		          //   live fiber
		          //   --alternate--> previous live fiber
		          //   --sibling--> deleted fiber
		          //
		          // We can't disconnect `alternate` on nodes that haven't been deleted
		          // yet, but we can disconnect the `sibling` and `child` pointers.
		          var previousFiber = fiber.alternate;

		          if (previousFiber !== null) {
		            var detachedChild = previousFiber.child;

		            if (detachedChild !== null) {
		              previousFiber.child = null;

		              do {
		                var detachedSibling = detachedChild.sibling;
		                detachedChild.sibling = null;
		                detachedChild = detachedSibling;
		              } while (detachedChild !== null);
		            }
		          }
		        }

		        nextEffect = fiber;
		      }
		    }

		    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
		      child.return = fiber;
		      nextEffect = child;
		    } else {
		      commitPassiveUnmountEffects_complete();
		    }
		  }
		}

		function commitPassiveUnmountEffects_complete() {
		  while (nextEffect !== null) {
		    var fiber = nextEffect;

		    if ((fiber.flags & Passive) !== NoFlags) {
		      setCurrentFiber(fiber);
		      commitPassiveUnmountOnFiber(fiber);
		      resetCurrentFiber();
		    }

		    var sibling = fiber.sibling;

		    if (sibling !== null) {
		      sibling.return = fiber.return;
		      nextEffect = sibling;
		      return;
		    }

		    nextEffect = fiber.return;
		  }
		}

		function commitPassiveUnmountOnFiber(finishedWork) {
		  switch (finishedWork.tag) {
		    case FunctionComponent:
		    case ForwardRef:
		    case SimpleMemoComponent:
		      {
		        if ( finishedWork.mode & ProfileMode) {
		          startPassiveEffectTimer();
		          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
		          recordPassiveEffectDuration(finishedWork);
		        } else {
		          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
		        }

		        break;
		      }
		  }
		}

		function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
		  while (nextEffect !== null) {
		    var fiber = nextEffect; // Deletion effects fire in parent -> child order
		    // TODO: Check if fiber has a PassiveStatic flag

		    setCurrentFiber(fiber);
		    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
		    resetCurrentFiber();
		    var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we
		    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)

		    if (child !== null) {
		      child.return = fiber;
		      nextEffect = child;
		    } else {
		      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
		    }
		  }
		}

		function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
		  while (nextEffect !== null) {
		    var fiber = nextEffect;
		    var sibling = fiber.sibling;
		    var returnFiber = fiber.return;

		    {
		      // Recursively traverse the entire deleted tree and clean up fiber fields.
		      // This is more aggressive than ideal, and the long term goal is to only
		      // have to detach the deleted tree at the root.
		      detachFiberAfterEffects(fiber);

		      if (fiber === deletedSubtreeRoot) {
		        nextEffect = null;
		        return;
		      }
		    }

		    if (sibling !== null) {
		      sibling.return = returnFiber;
		      nextEffect = sibling;
		      return;
		    }

		    nextEffect = returnFiber;
		  }
		}

		function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {
		  switch (current.tag) {
		    case FunctionComponent:
		    case ForwardRef:
		    case SimpleMemoComponent:
		      {
		        if ( current.mode & ProfileMode) {
		          startPassiveEffectTimer();
		          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
		          recordPassiveEffectDuration(current);
		        } else {
		          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
		        }

		        break;
		      }
		  }
		} // TODO: Reuse reappearLayoutEffects traversal here?


		function invokeLayoutEffectMountInDEV(fiber) {
		  {
		    // We don't need to re-check StrictEffectsMode here.
		    // This function is only called if that check has already passed.
		    switch (fiber.tag) {
		      case FunctionComponent:
		      case ForwardRef:
		      case SimpleMemoComponent:
		        {
		          try {
		            commitHookEffectListMount(Layout | HasEffect, fiber);
		          } catch (error) {
		            captureCommitPhaseError(fiber, fiber.return, error);
		          }

		          break;
		        }

		      case ClassComponent:
		        {
		          var instance = fiber.stateNode;

		          try {
		            instance.componentDidMount();
		          } catch (error) {
		            captureCommitPhaseError(fiber, fiber.return, error);
		          }

		          break;
		        }
		    }
		  }
		}

		function invokePassiveEffectMountInDEV(fiber) {
		  {
		    // We don't need to re-check StrictEffectsMode here.
		    // This function is only called if that check has already passed.
		    switch (fiber.tag) {
		      case FunctionComponent:
		      case ForwardRef:
		      case SimpleMemoComponent:
		        {
		          try {
		            commitHookEffectListMount(Passive$1 | HasEffect, fiber);
		          } catch (error) {
		            captureCommitPhaseError(fiber, fiber.return, error);
		          }

		          break;
		        }
		    }
		  }
		}

		function invokeLayoutEffectUnmountInDEV(fiber) {
		  {
		    // We don't need to re-check StrictEffectsMode here.
		    // This function is only called if that check has already passed.
		    switch (fiber.tag) {
		      case FunctionComponent:
		      case ForwardRef:
		      case SimpleMemoComponent:
		        {
		          try {
		            commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
		          } catch (error) {
		            captureCommitPhaseError(fiber, fiber.return, error);
		          }

		          break;
		        }

		      case ClassComponent:
		        {
		          var instance = fiber.stateNode;

		          if (typeof instance.componentWillUnmount === 'function') {
		            safelyCallComponentWillUnmount(fiber, fiber.return, instance);
		          }

		          break;
		        }
		    }
		  }
		}

		function invokePassiveEffectUnmountInDEV(fiber) {
		  {
		    // We don't need to re-check StrictEffectsMode here.
		    // This function is only called if that check has already passed.
		    switch (fiber.tag) {
		      case FunctionComponent:
		      case ForwardRef:
		      case SimpleMemoComponent:
		        {
		          try {
		            commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
		          } catch (error) {
		            captureCommitPhaseError(fiber, fiber.return, error);
		          }
		        }
		    }
		  }
		}

		if (typeof Symbol === 'function' && Symbol.for) {
		  var symbolFor = Symbol.for;
		  symbolFor('selector.component');
		  symbolFor('selector.has_pseudo_class');
		  symbolFor('selector.role');
		  symbolFor('selector.test_id');
		  symbolFor('selector.text');
		}
		var commitHooks = [];
		function onCommitRoot$1() {
		  {
		    commitHooks.forEach(function (commitHook) {
		      return commitHook();
		    });
		  }
		}

		var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
		function isLegacyActEnvironment(fiber) {
		  {
		    // Legacy mode. We preserve the behavior of React 17's act. It assumes an
		    // act environment whenever `jest` is defined, but you can still turn off
		    // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly
		    // to false.
		    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
		    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest

		    var jestIsDefined = typeof jest !== 'undefined';
		    return  jestIsDefined && isReactActEnvironmentGlobal !== false;
		  }
		}
		function isConcurrentActEnvironment() {
		  {
		    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
		    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;

		    if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
		      // TODO: Include link to relevant documentation page.
		      error('The current testing environment is not configured to support ' + 'act(...)');
		    }

		    return isReactActEnvironmentGlobal;
		  }
		}

		var ceil = Math.ceil;
		var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
		    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
		    ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig,
		    ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
		var NoContext =
		/*             */
		0;
		var BatchedContext =
		/*               */
		1;
		var RenderContext =
		/*                */
		2;
		var CommitContext =
		/*                */
		4;
		var RootInProgress = 0;
		var RootFatalErrored = 1;
		var RootErrored = 2;
		var RootSuspended = 3;
		var RootSuspendedWithDelay = 4;
		var RootCompleted = 5;
		var RootDidNotComplete = 6; // Describes where we are in the React execution stack

		var executionContext = NoContext; // The root we're working on

		var workInProgressRoot = null; // The fiber we're working on

		var workInProgress = null; // The lanes we're rendering

		var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
		// This is a superset of the lanes we started working on at the root. The only
		// case where it's different from `workInProgressRootRenderLanes` is when we
		// enter a subtree that is hidden and needs to be unhidden: Suspense and
		// Offscreen component.
		//
		// Most things in the work loop should deal with workInProgressRootRenderLanes.
		// Most things in begin/complete phases should deal with subtreeRenderLanes.

		var subtreeRenderLanes = NoLanes;
		var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.

		var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown

		var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
		// includes unprocessed updates, not work in bailed out children.

		var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.

		var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).

		var workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.

		var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.
		// We will log them once the tree commits.

		var workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train
		// model where we don't commit new loading states in too quick succession.

		var globalMostRecentFallbackTime = 0;
		var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
		// more and prefer CPU suspense heuristics instead.

		var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
		// suspense heuristics and opt out of rendering more content.

		var RENDER_TIMEOUT_MS = 500;
		var workInProgressTransitions = null;

		function resetRenderTimer() {
		  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
		}

		function getRenderTargetTime() {
		  return workInProgressRootRenderTargetTime;
		}
		var hasUncaughtError = false;
		var firstUncaughtError = null;
		var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;
		var rootDoesHavePassiveEffects = false;
		var rootWithPendingPassiveEffects = null;
		var pendingPassiveEffectsLanes = NoLanes;
		var pendingPassiveProfilerEffects = [];
		var pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates

		var NESTED_UPDATE_LIMIT = 50;
		var nestedUpdateCount = 0;
		var rootWithNestedUpdates = null;
		var isFlushingPassiveEffects = false;
		var didScheduleUpdateDuringPassiveEffects = false;
		var NESTED_PASSIVE_UPDATE_LIMIT = 50;
		var nestedPassiveUpdateCount = 0;
		var rootWithPassiveNestedUpdates = null; // If two updates are scheduled within the same event, we should treat their
		// event times as simultaneous, even if the actual clock time has advanced
		// between the first and second call.

		var currentEventTime = NoTimestamp;
		var currentEventTransitionLane = NoLanes;
		var isRunningInsertionEffect = false;
		function getWorkInProgressRoot() {
		  return workInProgressRoot;
		}
		function requestEventTime() {
		  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
		    // We're inside React, so it's fine to read the actual time.
		    return now();
		  } // We're not inside React, so we may be in the middle of a browser event.


		  if (currentEventTime !== NoTimestamp) {
		    // Use the same start time for all updates until we enter React again.
		    return currentEventTime;
		  } // This is the first update since React yielded. Compute a new start time.


		  currentEventTime = now();
		  return currentEventTime;
		}
		function requestUpdateLane(fiber) {
		  // Special cases
		  var mode = fiber.mode;

		  if ((mode & ConcurrentMode) === NoMode) {
		    return SyncLane;
		  } else if ( (executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
		    // This is a render phase update. These are not officially supported. The
		    // old behavior is to give this the same "thread" (lanes) as
		    // whatever is currently rendering. So if you call `setState` on a component
		    // that happens later in the same render, it will flush. Ideally, we want to
		    // remove the special case and treat them as if they came from an
		    // interleaved event. Regardless, this pattern is not officially supported.
		    // This behavior is only a fallback. The flag only exists until we can roll
		    // out the setState warning, since existing code might accidentally rely on
		    // the current behavior.
		    return pickArbitraryLane(workInProgressRootRenderLanes);
		  }

		  var isTransition = requestCurrentTransition() !== NoTransition;

		  if (isTransition) {
		    if ( ReactCurrentBatchConfig$3.transition !== null) {
		      var transition = ReactCurrentBatchConfig$3.transition;

		      if (!transition._updatedFibers) {
		        transition._updatedFibers = new Set();
		      }

		      transition._updatedFibers.add(fiber);
		    } // The algorithm for assigning an update to a lane should be stable for all
		    // updates at the same priority within the same event. To do this, the
		    // inputs to the algorithm must be the same.
		    //
		    // The trick we use is to cache the first of each of these inputs within an
		    // event. Then reset the cached values once we can be sure the event is
		    // over. Our heuristic for that is whenever we enter a concurrent work loop.


		    if (currentEventTransitionLane === NoLane) {
		      // All transitions within the same event are assigned the same lane.
		      currentEventTransitionLane = claimNextTransitionLane();
		    }

		    return currentEventTransitionLane;
		  } // Updates originating inside certain React methods, like flushSync, have
		  // their priority set by tracking it with a context variable.
		  //
		  // The opaque type returned by the host config is internally a lane, so we can
		  // use that directly.
		  // TODO: Move this type conversion to the event priority module.


		  var updateLane = getCurrentUpdatePriority();

		  if (updateLane !== NoLane) {
		    return updateLane;
		  } // This update originated outside React. Ask the host environment for an
		  // appropriate priority, based on the type of event.
		  //
		  // The opaque type returned by the host config is internally a lane, so we can
		  // use that directly.
		  // TODO: Move this type conversion to the event priority module.


		  var eventLane = getCurrentEventPriority();
		  return eventLane;
		}

		function requestRetryLane(fiber) {
		  // This is a fork of `requestUpdateLane` designed specifically for Suspense
		  // "retries" — a special update that attempts to flip a Suspense boundary
		  // from its placeholder state to its primary/resolved state.
		  // Special cases
		  var mode = fiber.mode;

		  if ((mode & ConcurrentMode) === NoMode) {
		    return SyncLane;
		  }

		  return claimNextRetryLane();
		}

		function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {
		  checkForNestedUpdates();

		  {
		    if (isRunningInsertionEffect) {
		      error('useInsertionEffect must not schedule updates.');
		    }
		  }

		  {
		    if (isFlushingPassiveEffects) {
		      didScheduleUpdateDuringPassiveEffects = true;
		    }
		  } // Mark that the root has a pending update.


		  markRootUpdated(root, lane, eventTime);

		  if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {
		    // This update was dispatched during the render phase. This is a mistake
		    // if the update originates from user space (with the exception of local
		    // hook updates, which are handled differently and don't reach this
		    // function), but there are some internal React features that use this as
		    // an implementation detail, like selective hydration.
		    warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase
		  } else {
		    // This is a normal update, scheduled from outside the render phase. For
		    // example, during an input event.
		    {
		      if (isDevToolsPresent) {
		        addFiberToLanesMap(root, fiber, lane);
		      }
		    }

		    warnIfUpdatesNotWrappedWithActDEV(fiber);

		    if (root === workInProgressRoot) {
		      // Received an update to a tree that's in the middle of rendering. Mark
		      // that there was an interleaved update work on this root. Unless the
		      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
		      // phase update. In that case, we don't treat render phase updates as if
		      // they were interleaved, for backwards compat reasons.
		      if ( (executionContext & RenderContext) === NoContext) {
		        workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
		      }

		      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
		        // The root already suspended with a delay, which means this render
		        // definitely won't finish. Since we have a new update, let's mark it as
		        // suspended now, right before marking the incoming update. This has the
		        // effect of interrupting the current render and switching to the update.
		        // TODO: Make sure this doesn't override pings that happen while we've
		        // already started rendering.
		        markRootSuspended$1(root, workInProgressRootRenderLanes);
		      }
		    }

		    ensureRootIsScheduled(root, eventTime);

		    if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
		    !( ReactCurrentActQueue$1.isBatchingLegacy)) {
		      // Flush the synchronous work now, unless we're already working or inside
		      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
		      // scheduleCallbackForFiber to preserve the ability to schedule a callback
		      // without immediately flushing it. We only do this for user-initiated
		      // updates, to preserve historical behavior of legacy mode.
		      resetRenderTimer();
		      flushSyncCallbacksOnlyInLegacyMode();
		    }
		  }
		}
		function scheduleInitialHydrationOnRoot(root, lane, eventTime) {
		  // This is a special fork of scheduleUpdateOnFiber that is only used to
		  // schedule the initial hydration of a root that has just been created. Most
		  // of the stuff in scheduleUpdateOnFiber can be skipped.
		  //
		  // The main reason for this separate path, though, is to distinguish the
		  // initial children from subsequent updates. In fully client-rendered roots
		  // (createRoot instead of hydrateRoot), all top-level renders are modeled as
		  // updates, but hydration roots are special because the initial render must
		  // match what was rendered on the server.
		  var current = root.current;
		  current.lanes = lane;
		  markRootUpdated(root, lane, eventTime);
		  ensureRootIsScheduled(root, eventTime);
		}
		function isUnsafeClassRenderPhaseUpdate(fiber) {
		  // Check if this is a render phase update. Only called by class components,
		  // which special (deprecated) behavior for UNSAFE_componentWillReceive props.
		  return (// TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
		    // decided not to enable it.
		     (executionContext & RenderContext) !== NoContext
		  );
		} // Use this function to schedule a task for a root. There's only one task per
		// root; if a task was already scheduled, we'll check to make sure the priority
		// of the existing task is the same as the priority of the next level that the
		// root has work on. This function is called on every update, and right before
		// exiting a task.

		function ensureRootIsScheduled(root, currentTime) {
		  var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
		  // expired so we know to work on those next.

		  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.

		  var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

		  if (nextLanes === NoLanes) {
		    // Special case: There's nothing to work on.
		    if (existingCallbackNode !== null) {
		      cancelCallback$1(existingCallbackNode);
		    }

		    root.callbackNode = null;
		    root.callbackPriority = NoLane;
		    return;
		  } // We use the highest priority lane to represent the priority of the callback.


		  var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.

		  var existingCallbackPriority = root.callbackPriority;

		  if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
		  // Scheduler task, rather than an `act` task, cancel it and re-scheduled
		  // on the `act` queue.
		  !( ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
		    {
		      // If we're going to re-use an existing task, it needs to exist.
		      // Assume that discrete update microtasks are non-cancellable and null.
		      // TODO: Temporary until we confirm this warning is not fired.
		      if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
		        error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');
		      }
		    } // The priority hasn't changed. We can reuse the existing task. Exit.


		    return;
		  }

		  if (existingCallbackNode != null) {
		    // Cancel the existing callback. We'll schedule a new one below.
		    cancelCallback$1(existingCallbackNode);
		  } // Schedule a new callback.


		  var newCallbackNode;

		  if (newCallbackPriority === SyncLane) {
		    // Special case: Sync React callbacks are scheduled on a special
		    // internal queue
		    if (root.tag === LegacyRoot) {
		      if ( ReactCurrentActQueue$1.isBatchingLegacy !== null) {
		        ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
		      }

		      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));
		    } else {
		      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
		    }

		    {
		      // Flush the queue in a microtask.
		      if ( ReactCurrentActQueue$1.current !== null) {
		        // Inside `act`, use our internal `act` queue so that these get flushed
		        // at the end of the current scope even when using the sync version
		        // of `act`.
		        ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
		      } else {
		        scheduleMicrotask(function () {
		          // In Safari, appending an iframe forces microtasks to run.
		          // https://github.com/facebook/react/issues/22459
		          // We don't support running callbacks in the middle of render
		          // or commit so we need to check against that.
		          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
		            // Note that this would still prematurely flush the callbacks
		            // if this happens outside render or commit phase (e.g. in an event).
		            flushSyncCallbacks();
		          }
		        });
		      }
		    }

		    newCallbackNode = null;
		  } else {
		    var schedulerPriorityLevel;

		    switch (lanesToEventPriority(nextLanes)) {
		      case DiscreteEventPriority:
		        schedulerPriorityLevel = ImmediatePriority;
		        break;

		      case ContinuousEventPriority:
		        schedulerPriorityLevel = UserBlockingPriority;
		        break;

		      case DefaultEventPriority:
		        schedulerPriorityLevel = NormalPriority;
		        break;

		      case IdleEventPriority:
		        schedulerPriorityLevel = IdlePriority;
		        break;

		      default:
		        schedulerPriorityLevel = NormalPriority;
		        break;
		    }

		    newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
		  }

		  root.callbackPriority = newCallbackPriority;
		  root.callbackNode = newCallbackNode;
		} // This is the entry point for every concurrent task, i.e. anything that
		// goes through Scheduler.


		function performConcurrentWorkOnRoot(root, didTimeout) {
		  {
		    resetNestedUpdateFlag();
		  } // Since we know we're in a React event, we can clear the current
		  // event time. The next update will compute a new event time.


		  currentEventTime = NoTimestamp;
		  currentEventTransitionLane = NoLanes;

		  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
		    throw new Error('Should not already be working.');
		  } // Flush any pending passive effects before deciding which lanes to work on,
		  // in case they schedule additional work.


		  var originalCallbackNode = root.callbackNode;
		  var didFlushPassiveEffects = flushPassiveEffects();

		  if (didFlushPassiveEffects) {
		    // Something in the passive effect phase may have canceled the current task.
		    // Check if the task node for this root was changed.
		    if (root.callbackNode !== originalCallbackNode) {
		      // The current task was canceled. Exit. We don't need to call
		      // `ensureRootIsScheduled` because the check above implies either that
		      // there's a new task, or that there's no remaining work on this root.
		      return null;
		    }
		  } // Determine the next lanes to work on, using the fields stored
		  // on the root.


		  var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

		  if (lanes === NoLanes) {
		    // Defensive coding. This is never expected to happen.
		    return null;
		  } // We disable time-slicing in some cases: if the work has been CPU-bound
		  // for too long ("expired" work, to prevent starvation), or we're in
		  // sync-updates-by-default mode.
		  // TODO: We only check `didTimeout` defensively, to account for a Scheduler
		  // bug we're still investigating. Once the bug in Scheduler is fixed,
		  // we can remove this, since we track expiration ourselves.


		  var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && ( !didTimeout);
		  var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);

		  if (exitStatus !== RootInProgress) {
		    if (exitStatus === RootErrored) {
		      // If something threw an error, try rendering one more time. We'll
		      // render synchronously to block concurrent data mutations, and we'll
		      // includes all pending updates are included. If it still fails after
		      // the second attempt, we'll give up and commit the resulting tree.
		      var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

		      if (errorRetryLanes !== NoLanes) {
		        lanes = errorRetryLanes;
		        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
		      }
		    }

		    if (exitStatus === RootFatalErrored) {
		      var fatalError = workInProgressRootFatalError;
		      prepareFreshStack(root, NoLanes);
		      markRootSuspended$1(root, lanes);
		      ensureRootIsScheduled(root, now());
		      throw fatalError;
		    }

		    if (exitStatus === RootDidNotComplete) {
		      // The render unwound without completing the tree. This happens in special
		      // cases where need to exit the current render without producing a
		      // consistent tree or committing.
		      //
		      // This should only happen during a concurrent render, not a discrete or
		      // synchronous update. We should have already checked for this when we
		      // unwound the stack.
		      markRootSuspended$1(root, lanes);
		    } else {
		      // The render completed.
		      // Check if this render may have yielded to a concurrent event, and if so,
		      // confirm that any newly rendered stores are consistent.
		      // TODO: It's possible that even a concurrent render may never have yielded
		      // to the main thread, if it was fast enough, or if it expired. We could
		      // skip the consistency check in that case, too.
		      var renderWasConcurrent = !includesBlockingLane(root, lanes);
		      var finishedWork = root.current.alternate;

		      if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
		        // A store was mutated in an interleaved event. Render again,
		        // synchronously, to block further mutations.
		        exitStatus = renderRootSync(root, lanes); // We need to check again if something threw

		        if (exitStatus === RootErrored) {
		          var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

		          if (_errorRetryLanes !== NoLanes) {
		            lanes = _errorRetryLanes;
		            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any
		            // concurrent events.
		          }
		        }

		        if (exitStatus === RootFatalErrored) {
		          var _fatalError = workInProgressRootFatalError;
		          prepareFreshStack(root, NoLanes);
		          markRootSuspended$1(root, lanes);
		          ensureRootIsScheduled(root, now());
		          throw _fatalError;
		        }
		      } // We now have a consistent tree. The next step is either to commit it,
		      // or, if something suspended, wait to commit it after a timeout.


		      root.finishedWork = finishedWork;
		      root.finishedLanes = lanes;
		      finishConcurrentRender(root, exitStatus, lanes);
		    }
		  }

		  ensureRootIsScheduled(root, now());

		  if (root.callbackNode === originalCallbackNode) {
		    // The task node scheduled for this root is the same one that's
		    // currently executed. Need to return a continuation.
		    return performConcurrentWorkOnRoot.bind(null, root);
		  }

		  return null;
		}

		function recoverFromConcurrentError(root, errorRetryLanes) {
		  // If an error occurred during hydration, discard server response and fall
		  // back to client side render.
		  // Before rendering again, save the errors from the previous attempt.
		  var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;

		  if (isRootDehydrated(root)) {
		    // The shell failed to hydrate. Set a flag to force a client rendering
		    // during the next attempt. To do this, we call prepareFreshStack now
		    // to create the root work-in-progress fiber. This is a bit weird in terms
		    // of factoring, because it relies on renderRootSync not calling
		    // prepareFreshStack again in the call below, which happens because the
		    // root and lanes haven't changed.
		    //
		    // TODO: I think what we should do is set ForceClientRender inside
		    // throwException, like we do for nested Suspense boundaries. The reason
		    // it's here instead is so we can switch to the synchronous work loop, too.
		    // Something to consider for a future refactor.
		    var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);
		    rootWorkInProgress.flags |= ForceClientRender;

		    {
		      errorHydratingContainer(root.containerInfo);
		    }
		  }

		  var exitStatus = renderRootSync(root, errorRetryLanes);

		  if (exitStatus !== RootErrored) {
		    // Successfully finished rendering on retry
		    // The errors from the failed first attempt have been recovered. Add
		    // them to the collection of recoverable errors. We'll log them in the
		    // commit phase.
		    var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
		    workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors
		    // from the first attempt, to preserve the causal sequence.

		    if (errorsFromSecondAttempt !== null) {
		      queueRecoverableErrors(errorsFromSecondAttempt);
		    }
		  }

		  return exitStatus;
		}

		function queueRecoverableErrors(errors) {
		  if (workInProgressRootRecoverableErrors === null) {
		    workInProgressRootRecoverableErrors = errors;
		  } else {
		    workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
		  }
		}

		function finishConcurrentRender(root, exitStatus, lanes) {
		  switch (exitStatus) {
		    case RootInProgress:
		    case RootFatalErrored:
		      {
		        throw new Error('Root did not complete. This is a bug in React.');
		      }
		    // Flow knows about invariant, so it complains if I add a break
		    // statement, but eslint doesn't know about invariant, so it complains
		    // if I do. eslint-disable-next-line no-fallthrough

		    case RootErrored:
		      {
		        // We should have already attempted to retry this tree. If we reached
		        // this point, it errored again. Commit it.
		        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
		        break;
		      }

		    case RootSuspended:
		      {
		        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
		        // should immediately commit it or wait a bit.

		        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
		        !shouldForceFlushFallbacksInDEV()) {
		          // This render only included retries, no updates. Throttle committing
		          // retries so that we don't show too many loading states too quickly.
		          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

		          if (msUntilTimeout > 10) {
		            var nextLanes = getNextLanes(root, NoLanes);

		            if (nextLanes !== NoLanes) {
		              // There's additional work on this root.
		              break;
		            }

		            var suspendedLanes = root.suspendedLanes;

		            if (!isSubsetOfLanes(suspendedLanes, lanes)) {
		              // We should prefer to render the fallback of at the last
		              // suspended level. Ping the last suspended level to try
		              // rendering it again.
		              // FIXME: What if the suspended lanes are Idle? Should not restart.
		              requestEventTime();
		              markRootPinged(root, suspendedLanes);
		              break;
		            } // The render is suspended, it hasn't timed out, and there's no
		            // lower priority work to do. Instead of committing the fallback
		            // immediately, wait for more data to arrive.


		            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
		            break;
		          }
		        } // The work expired. Commit immediately.


		        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
		        break;
		      }

		    case RootSuspendedWithDelay:
		      {
		        markRootSuspended$1(root, lanes);

		        if (includesOnlyTransitions(lanes)) {
		          // This is a transition, so we should exit without committing a
		          // placeholder and without scheduling a timeout. Delay indefinitely
		          // until we receive more data.
		          break;
		        }

		        if (!shouldForceFlushFallbacksInDEV()) {
		          // This is not a transition, but we did trigger an avoided state.
		          // Schedule a placeholder to display after a short delay, using the Just
		          // Noticeable Difference.
		          // TODO: Is the JND optimization worth the added complexity? If this is
		          // the only reason we track the event time, then probably not.
		          // Consider removing.
		          var mostRecentEventTime = getMostRecentEventTime(root, lanes);
		          var eventTimeMs = mostRecentEventTime;
		          var timeElapsedMs = now() - eventTimeMs;

		          var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.


		          if (_msUntilTimeout > 10) {
		            // Instead of committing the fallback immediately, wait for more data
		            // to arrive.
		            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
		            break;
		          }
		        } // Commit the placeholder.


		        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
		        break;
		      }

		    case RootCompleted:
		      {
		        // The work completed. Ready to commit.
		        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
		        break;
		      }

		    default:
		      {
		        throw new Error('Unknown root exit status.');
		      }
		  }
		}

		function isRenderConsistentWithExternalStores(finishedWork) {
		  // Search the rendered tree for external store reads, and check whether the
		  // stores were mutated in a concurrent event. Intentionally using an iterative
		  // loop instead of recursion so we can exit early.
		  var node = finishedWork;

		  while (true) {
		    if (node.flags & StoreConsistency) {
		      var updateQueue = node.updateQueue;

		      if (updateQueue !== null) {
		        var checks = updateQueue.stores;

		        if (checks !== null) {
		          for (var i = 0; i < checks.length; i++) {
		            var check = checks[i];
		            var getSnapshot = check.getSnapshot;
		            var renderedValue = check.value;

		            try {
		              if (!objectIs(getSnapshot(), renderedValue)) {
		                // Found an inconsistent store.
		                return false;
		              }
		            } catch (error) {
		              // If `getSnapshot` throws, return `false`. This will schedule
		              // a re-render, and the error will be rethrown during render.
		              return false;
		            }
		          }
		        }
		      }
		    }

		    var child = node.child;

		    if (node.subtreeFlags & StoreConsistency && child !== null) {
		      child.return = node;
		      node = child;
		      continue;
		    }

		    if (node === finishedWork) {
		      return true;
		    }

		    while (node.sibling === null) {
		      if (node.return === null || node.return === finishedWork) {
		        return true;
		      }

		      node = node.return;
		    }

		    node.sibling.return = node.return;
		    node = node.sibling;
		  } // Flow doesn't know this is unreachable, but eslint does
		  // eslint-disable-next-line no-unreachable


		  return true;
		}

		function markRootSuspended$1(root, suspendedLanes) {
		  // When suspending, we should always exclude lanes that were pinged or (more
		  // rarely, since we try to avoid it) updated during the render phase.
		  // TODO: Lol maybe there's a better way to factor this besides this
		  // obnoxiously named function :)
		  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
		  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
		  markRootSuspended(root, suspendedLanes);
		} // This is the entry point for synchronous tasks that don't go
		// through Scheduler


		function performSyncWorkOnRoot(root) {
		  {
		    syncNestedUpdateFlag();
		  }

		  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
		    throw new Error('Should not already be working.');
		  }

		  flushPassiveEffects();
		  var lanes = getNextLanes(root, NoLanes);

		  if (!includesSomeLane(lanes, SyncLane)) {
		    // There's no remaining sync work left.
		    ensureRootIsScheduled(root, now());
		    return null;
		  }

		  var exitStatus = renderRootSync(root, lanes);

		  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
		    // If something threw an error, try rendering one more time. We'll render
		    // synchronously to block concurrent data mutations, and we'll includes
		    // all pending updates are included. If it still fails after the second
		    // attempt, we'll give up and commit the resulting tree.
		    var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

		    if (errorRetryLanes !== NoLanes) {
		      lanes = errorRetryLanes;
		      exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
		    }
		  }

		  if (exitStatus === RootFatalErrored) {
		    var fatalError = workInProgressRootFatalError;
		    prepareFreshStack(root, NoLanes);
		    markRootSuspended$1(root, lanes);
		    ensureRootIsScheduled(root, now());
		    throw fatalError;
		  }

		  if (exitStatus === RootDidNotComplete) {
		    throw new Error('Root did not complete. This is a bug in React.');
		  } // We now have a consistent tree. Because this is a sync render, we
		  // will commit it even if something suspended.


		  var finishedWork = root.current.alternate;
		  root.finishedWork = finishedWork;
		  root.finishedLanes = lanes;
		  commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next
		  // pending level.

		  ensureRootIsScheduled(root, now());
		  return null;
		}

		function flushRoot(root, lanes) {
		  if (lanes !== NoLanes) {
		    markRootEntangled(root, mergeLanes(lanes, SyncLane));
		    ensureRootIsScheduled(root, now());

		    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
		      resetRenderTimer();
		      flushSyncCallbacks();
		    }
		  }
		}
		function batchedUpdates$1(fn, a) {
		  var prevExecutionContext = executionContext;
		  executionContext |= BatchedContext;

		  try {
		    return fn(a);
		  } finally {
		    executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer
		    // most batchedUpdates-like method.

		    if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
		    !( ReactCurrentActQueue$1.isBatchingLegacy)) {
		      resetRenderTimer();
		      flushSyncCallbacksOnlyInLegacyMode();
		    }
		  }
		}
		function discreteUpdates(fn, a, b, c, d) {
		  var previousPriority = getCurrentUpdatePriority();
		  var prevTransition = ReactCurrentBatchConfig$3.transition;

		  try {
		    ReactCurrentBatchConfig$3.transition = null;
		    setCurrentUpdatePriority(DiscreteEventPriority);
		    return fn(a, b, c, d);
		  } finally {
		    setCurrentUpdatePriority(previousPriority);
		    ReactCurrentBatchConfig$3.transition = prevTransition;

		    if (executionContext === NoContext) {
		      resetRenderTimer();
		    }
		  }
		} // Overload the definition to the two valid signatures.
		// Warning, this opts-out of checking the function body.

		// eslint-disable-next-line no-redeclare
		function flushSync(fn) {
		  // In legacy mode, we flush pending passive effects at the beginning of the
		  // next event, not at the end of the previous one.
		  if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
		    flushPassiveEffects();
		  }

		  var prevExecutionContext = executionContext;
		  executionContext |= BatchedContext;
		  var prevTransition = ReactCurrentBatchConfig$3.transition;
		  var previousPriority = getCurrentUpdatePriority();

		  try {
		    ReactCurrentBatchConfig$3.transition = null;
		    setCurrentUpdatePriority(DiscreteEventPriority);

		    if (fn) {
		      return fn();
		    } else {
		      return undefined;
		    }
		  } finally {
		    setCurrentUpdatePriority(previousPriority);
		    ReactCurrentBatchConfig$3.transition = prevTransition;
		    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
		    // Note that this will happen even if batchedUpdates is higher up
		    // the stack.

		    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
		      flushSyncCallbacks();
		    }
		  }
		}
		function isAlreadyRendering() {
		  // Used by the renderer to print a warning if certain APIs are called from
		  // the wrong context.
		  return  (executionContext & (RenderContext | CommitContext)) !== NoContext;
		}
		function pushRenderLanes(fiber, lanes) {
		  push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
		  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
		}
		function popRenderLanes(fiber) {
		  subtreeRenderLanes = subtreeRenderLanesCursor.current;
		  pop(subtreeRenderLanesCursor, fiber);
		}

		function prepareFreshStack(root, lanes) {
		  root.finishedWork = null;
		  root.finishedLanes = NoLanes;
		  var timeoutHandle = root.timeoutHandle;

		  if (timeoutHandle !== noTimeout) {
		    // The root previous suspended and scheduled a timeout to commit a fallback
		    // state. Now that we have additional work, cancel the timeout.
		    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

		    cancelTimeout(timeoutHandle);
		  }

		  if (workInProgress !== null) {
		    var interruptedWork = workInProgress.return;

		    while (interruptedWork !== null) {
		      var current = interruptedWork.alternate;
		      unwindInterruptedWork(current, interruptedWork);
		      interruptedWork = interruptedWork.return;
		    }
		  }

		  workInProgressRoot = root;
		  var rootWorkInProgress = createWorkInProgress(root.current, null);
		  workInProgress = rootWorkInProgress;
		  workInProgressRootRenderLanes = subtreeRenderLanes = lanes;
		  workInProgressRootExitStatus = RootInProgress;
		  workInProgressRootFatalError = null;
		  workInProgressRootSkippedLanes = NoLanes;
		  workInProgressRootInterleavedUpdatedLanes = NoLanes;
		  workInProgressRootPingedLanes = NoLanes;
		  workInProgressRootConcurrentErrors = null;
		  workInProgressRootRecoverableErrors = null;
		  finishQueueingConcurrentUpdates();

		  {
		    ReactStrictModeWarnings.discardPendingWarnings();
		  }

		  return rootWorkInProgress;
		}

		function handleError(root, thrownValue) {
		  do {
		    var erroredWork = workInProgress;

		    try {
		      // Reset module-level state that was set during the render phase.
		      resetContextDependencies();
		      resetHooksAfterThrow();
		      resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
		      // separate issue. Write a regression test using string refs.

		      ReactCurrentOwner$2.current = null;

		      if (erroredWork === null || erroredWork.return === null) {
		        // Expected to be working on a non-root fiber. This is a fatal error
		        // because there's no ancestor that can handle it; the root is
		        // supposed to capture all errors that weren't caught by an error
		        // boundary.
		        workInProgressRootExitStatus = RootFatalErrored;
		        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
		        // sibling, or the parent if there are no siblings. But since the root
		        // has no siblings nor a parent, we set it to null. Usually this is
		        // handled by `completeUnitOfWork` or `unwindWork`, but since we're
		        // intentionally not calling those, we need set it here.
		        // TODO: Consider calling `unwindWork` to pop the contexts.

		        workInProgress = null;
		        return;
		      }

		      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
		        // Record the time spent rendering before an error was thrown. This
		        // avoids inaccurate Profiler durations in the case of a
		        // suspended render.
		        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
		      }

		      if (enableSchedulingProfiler) {
		        markComponentRenderStopped();

		        if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
		          var wakeable = thrownValue;
		          markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
		        } else {
		          markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
		        }
		      }

		      throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
		      completeUnitOfWork(erroredWork);
		    } catch (yetAnotherThrownValue) {
		      // Something in the return path also threw.
		      thrownValue = yetAnotherThrownValue;

		      if (workInProgress === erroredWork && erroredWork !== null) {
		        // If this boundary has already errored, then we had trouble processing
		        // the error. Bubble it to the next boundary.
		        erroredWork = erroredWork.return;
		        workInProgress = erroredWork;
		      } else {
		        erroredWork = workInProgress;
		      }

		      continue;
		    } // Return to the normal work loop.


		    return;
		  } while (true);
		}

		function pushDispatcher() {
		  var prevDispatcher = ReactCurrentDispatcher$2.current;
		  ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;

		  if (prevDispatcher === null) {
		    // The React isomorphic package does not include a default dispatcher.
		    // Instead the first renderer will lazily attach one, in order to give
		    // nicer error messages.
		    return ContextOnlyDispatcher;
		  } else {
		    return prevDispatcher;
		  }
		}

		function popDispatcher(prevDispatcher) {
		  ReactCurrentDispatcher$2.current = prevDispatcher;
		}

		function markCommitTimeOfFallback() {
		  globalMostRecentFallbackTime = now();
		}
		function markSkippedUpdateLanes(lane) {
		  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
		}
		function renderDidSuspend() {
		  if (workInProgressRootExitStatus === RootInProgress) {
		    workInProgressRootExitStatus = RootSuspended;
		  }
		}
		function renderDidSuspendDelayIfPossible() {
		  if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
		    workInProgressRootExitStatus = RootSuspendedWithDelay;
		  } // Check if there are updates that we skipped tree that might have unblocked
		  // this render.


		  if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
		    // Mark the current render as suspended so that we switch to working on
		    // the updates that were skipped. Usually we only suspend at the end of
		    // the render phase.
		    // TODO: We should probably always mark the root as suspended immediately
		    // (inside this function), since by suspending at the end of the render
		    // phase introduces a potential mistake where we suspend lanes that were
		    // pinged or updated while we were rendering.
		    markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
		  }
		}
		function renderDidError(error) {
		  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
		    workInProgressRootExitStatus = RootErrored;
		  }

		  if (workInProgressRootConcurrentErrors === null) {
		    workInProgressRootConcurrentErrors = [error];
		  } else {
		    workInProgressRootConcurrentErrors.push(error);
		  }
		} // Called during render to determine if anything has suspended.
		// Returns false if we're not sure.

		function renderHasNotSuspendedYet() {
		  // If something errored or completed, we can't really be sure,
		  // so those are false.
		  return workInProgressRootExitStatus === RootInProgress;
		}

		function renderRootSync(root, lanes) {
		  var prevExecutionContext = executionContext;
		  executionContext |= RenderContext;
		  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
		  // and prepare a fresh one. Otherwise we'll continue where we left off.

		  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
		    {
		      if (isDevToolsPresent) {
		        var memoizedUpdaters = root.memoizedUpdaters;

		        if (memoizedUpdaters.size > 0) {
		          restorePendingUpdaters(root, workInProgressRootRenderLanes);
		          memoizedUpdaters.clear();
		        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
		        // If we bailout on this work, we'll move them back (like above).
		        // It's important to move them now in case the work spawns more work at the same priority with different updaters.
		        // That way we can keep the current update and future updates separate.


		        movePendingFibersToMemoized(root, lanes);
		      }
		    }

		    workInProgressTransitions = getTransitionsForLanes();
		    prepareFreshStack(root, lanes);
		  }

		  {
		    markRenderStarted(lanes);
		  }

		  do {
		    try {
		      workLoopSync();
		      break;
		    } catch (thrownValue) {
		      handleError(root, thrownValue);
		    }
		  } while (true);

		  resetContextDependencies();
		  executionContext = prevExecutionContext;
		  popDispatcher(prevDispatcher);

		  if (workInProgress !== null) {
		    // This is a sync render, so we should have finished the whole tree.
		    throw new Error('Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');
		  }

		  {
		    markRenderStopped();
		  } // Set this to null to indicate there's no in-progress render.


		  workInProgressRoot = null;
		  workInProgressRootRenderLanes = NoLanes;
		  return workInProgressRootExitStatus;
		} // The work loop is an extremely hot path. Tell Closure not to inline it.

		/** @noinline */


		function workLoopSync() {
		  // Already timed out, so perform work without checking if we need to yield.
		  while (workInProgress !== null) {
		    performUnitOfWork(workInProgress);
		  }
		}

		function renderRootConcurrent(root, lanes) {
		  var prevExecutionContext = executionContext;
		  executionContext |= RenderContext;
		  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
		  // and prepare a fresh one. Otherwise we'll continue where we left off.

		  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
		    {
		      if (isDevToolsPresent) {
		        var memoizedUpdaters = root.memoizedUpdaters;

		        if (memoizedUpdaters.size > 0) {
		          restorePendingUpdaters(root, workInProgressRootRenderLanes);
		          memoizedUpdaters.clear();
		        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
		        // If we bailout on this work, we'll move them back (like above).
		        // It's important to move them now in case the work spawns more work at the same priority with different updaters.
		        // That way we can keep the current update and future updates separate.


		        movePendingFibersToMemoized(root, lanes);
		      }
		    }

		    workInProgressTransitions = getTransitionsForLanes();
		    resetRenderTimer();
		    prepareFreshStack(root, lanes);
		  }

		  {
		    markRenderStarted(lanes);
		  }

		  do {
		    try {
		      workLoopConcurrent();
		      break;
		    } catch (thrownValue) {
		      handleError(root, thrownValue);
		    }
		  } while (true);

		  resetContextDependencies();
		  popDispatcher(prevDispatcher);
		  executionContext = prevExecutionContext;


		  if (workInProgress !== null) {
		    // Still work remaining.
		    {
		      markRenderYielded();
		    }

		    return RootInProgress;
		  } else {
		    // Completed the tree.
		    {
		      markRenderStopped();
		    } // Set this to null to indicate there's no in-progress render.


		    workInProgressRoot = null;
		    workInProgressRootRenderLanes = NoLanes; // Return the final exit status.

		    return workInProgressRootExitStatus;
		  }
		}
		/** @noinline */


		function workLoopConcurrent() {
		  // Perform work until Scheduler asks us to yield
		  while (workInProgress !== null && !shouldYield()) {
		    performUnitOfWork(workInProgress);
		  }
		}

		function performUnitOfWork(unitOfWork) {
		  // The current, flushed, state of this fiber is the alternate. Ideally
		  // nothing should rely on this, but relying on it here means that we don't
		  // need an additional field on the work in progress.
		  var current = unitOfWork.alternate;
		  setCurrentFiber(unitOfWork);
		  var next;

		  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
		    startProfilerTimer(unitOfWork);
		    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
		    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
		  } else {
		    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
		  }

		  resetCurrentFiber();
		  unitOfWork.memoizedProps = unitOfWork.pendingProps;

		  if (next === null) {
		    // If this doesn't spawn new work, complete the current work.
		    completeUnitOfWork(unitOfWork);
		  } else {
		    workInProgress = next;
		  }

		  ReactCurrentOwner$2.current = null;
		}

		function completeUnitOfWork(unitOfWork) {
		  // Attempt to complete the current unit of work, then move to the next
		  // sibling. If there are no more siblings, return to the parent fiber.
		  var completedWork = unitOfWork;

		  do {
		    // The current, flushed, state of this fiber is the alternate. Ideally
		    // nothing should rely on this, but relying on it here means that we don't
		    // need an additional field on the work in progress.
		    var current = completedWork.alternate;
		    var returnFiber = completedWork.return; // Check if the work completed or if something threw.

		    if ((completedWork.flags & Incomplete) === NoFlags) {
		      setCurrentFiber(completedWork);
		      var next = void 0;

		      if ( (completedWork.mode & ProfileMode) === NoMode) {
		        next = completeWork(current, completedWork, subtreeRenderLanes);
		      } else {
		        startProfilerTimer(completedWork);
		        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.

		        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
		      }

		      resetCurrentFiber();

		      if (next !== null) {
		        // Completing this fiber spawned new work. Work on that next.
		        workInProgress = next;
		        return;
		      }
		    } else {
		      // This fiber did not complete because something threw. Pop values off
		      // the stack without entering the complete phase. If this is a boundary,
		      // capture values if possible.
		      var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.


		      if (_next !== null) {
		        // If completing this work spawned new work, do that next. We'll come
		        // back here again.
		        // Since we're restarting, remove anything that is not a host effect
		        // from the effect tag.
		        _next.flags &= HostEffectMask;
		        workInProgress = _next;
		        return;
		      }

		      if ( (completedWork.mode & ProfileMode) !== NoMode) {
		        // Record the render duration for the fiber that errored.
		        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.

		        var actualDuration = completedWork.actualDuration;
		        var child = completedWork.child;

		        while (child !== null) {
		          actualDuration += child.actualDuration;
		          child = child.sibling;
		        }

		        completedWork.actualDuration = actualDuration;
		      }

		      if (returnFiber !== null) {
		        // Mark the parent fiber as incomplete and clear its subtree flags.
		        returnFiber.flags |= Incomplete;
		        returnFiber.subtreeFlags = NoFlags;
		        returnFiber.deletions = null;
		      } else {
		        // We've unwound all the way to the root.
		        workInProgressRootExitStatus = RootDidNotComplete;
		        workInProgress = null;
		        return;
		      }
		    }

		    var siblingFiber = completedWork.sibling;

		    if (siblingFiber !== null) {
		      // If there is more work to do in this returnFiber, do that next.
		      workInProgress = siblingFiber;
		      return;
		    } // Otherwise, return to the parent


		    completedWork = returnFiber; // Update the next thing we're working on in case something throws.

		    workInProgress = completedWork;
		  } while (completedWork !== null); // We've reached the root.


		  if (workInProgressRootExitStatus === RootInProgress) {
		    workInProgressRootExitStatus = RootCompleted;
		  }
		}

		function commitRoot(root, recoverableErrors, transitions) {
		  // TODO: This no longer makes any sense. We already wrap the mutation and
		  // layout phases. Should be able to remove.
		  var previousUpdateLanePriority = getCurrentUpdatePriority();
		  var prevTransition = ReactCurrentBatchConfig$3.transition;

		  try {
		    ReactCurrentBatchConfig$3.transition = null;
		    setCurrentUpdatePriority(DiscreteEventPriority);
		    commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);
		  } finally {
		    ReactCurrentBatchConfig$3.transition = prevTransition;
		    setCurrentUpdatePriority(previousUpdateLanePriority);
		  }

		  return null;
		}

		function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {
		  do {
		    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
		    // means `flushPassiveEffects` will sometimes result in additional
		    // passive effects. So we need to keep flushing in a loop until there are
		    // no more pending effects.
		    // TODO: Might be better if `flushPassiveEffects` did not automatically
		    // flush synchronous work at the end, to avoid factoring hazards like this.
		    flushPassiveEffects();
		  } while (rootWithPendingPassiveEffects !== null);

		  flushRenderPhaseStrictModeWarningsInDEV();

		  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
		    throw new Error('Should not already be working.');
		  }

		  var finishedWork = root.finishedWork;
		  var lanes = root.finishedLanes;

		  {
		    markCommitStarted(lanes);
		  }

		  if (finishedWork === null) {

		    {
		      markCommitStopped();
		    }

		    return null;
		  } else {
		    {
		      if (lanes === NoLanes) {
		        error('root.finishedLanes should not be empty during a commit. This is a ' + 'bug in React.');
		      }
		    }
		  }

		  root.finishedWork = null;
		  root.finishedLanes = NoLanes;

		  if (finishedWork === root.current) {
		    throw new Error('Cannot commit the same tree as before. This error is likely caused by ' + 'a bug in React. Please file an issue.');
		  } // commitRoot never returns a continuation; it always finishes synchronously.
		  // So we can clear these now to allow a new callback to be scheduled.


		  root.callbackNode = null;
		  root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first
		  // pending time is whatever is left on the root fiber.

		  var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
		  markRootFinished(root, remainingLanes);

		  if (root === workInProgressRoot) {
		    // We can reset these now that they are finished.
		    workInProgressRoot = null;
		    workInProgress = null;
		    workInProgressRootRenderLanes = NoLanes;
		  } // If there are pending passive effects, schedule a callback to process them.
		  // Do this as early as possible, so it is queued before anything else that
		  // might get scheduled in the commit phase. (See #16714.)
		  // TODO: Delete all other places that schedule the passive effect callback
		  // They're redundant.


		  if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
		    if (!rootDoesHavePassiveEffects) {
		      rootDoesHavePassiveEffects = true;
		      // to store it in pendingPassiveTransitions until they get processed
		      // We need to pass this through as an argument to commitRoot
		      // because workInProgressTransitions might have changed between
		      // the previous render and commit if we throttle the commit
		      // with setTimeout

		      pendingPassiveTransitions = transitions;
		      scheduleCallback$1(NormalPriority, function () {
		        flushPassiveEffects(); // This render triggered passive effects: release the root cache pool
		        // *after* passive effects fire to avoid freeing a cache pool that may
		        // be referenced by a node in the tree (HostRoot, Cache boundary etc)

		        return null;
		      });
		    }
		  } // Check if there are any effects in the whole tree.
		  // TODO: This is left over from the effect list implementation, where we had
		  // to check for the existence of `firstEffect` to satisfy Flow. I think the
		  // only other reason this optimization exists is because it affects profiling.
		  // Reconsider whether this is necessary.


		  var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
		  var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;

		  if (subtreeHasEffects || rootHasEffect) {
		    var prevTransition = ReactCurrentBatchConfig$3.transition;
		    ReactCurrentBatchConfig$3.transition = null;
		    var previousPriority = getCurrentUpdatePriority();
		    setCurrentUpdatePriority(DiscreteEventPriority);
		    var prevExecutionContext = executionContext;
		    executionContext |= CommitContext; // Reset this to null before calling lifecycles

		    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
		    // of the effect list for each phase: all mutation effects come before all
		    // layout effects, and so on.
		    // The first phase a "before mutation" phase. We use this phase to read the
		    // state of the host tree right before we mutate it. This is where
		    // getSnapshotBeforeUpdate is called.

		    commitBeforeMutationEffects(root, finishedWork);

		    {
		      // Mark the current commit time to be shared by all Profilers in this
		      // batch. This enables them to be grouped later.
		      recordCommitTime();
		    }


		    commitMutationEffects(root, finishedWork, lanes);

		    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
		    // the mutation phase, so that the previous tree is still current during
		    // componentWillUnmount, but before the layout phase, so that the finished
		    // work is current during componentDidMount/Update.

		    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read

		    {
		      markLayoutEffectsStarted(lanes);
		    }

		    commitLayoutEffects(finishedWork, root, lanes);

		    {
		      markLayoutEffectsStopped();
		    }
		    // opportunity to paint.


		    requestPaint();
		    executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.

		    setCurrentUpdatePriority(previousPriority);
		    ReactCurrentBatchConfig$3.transition = prevTransition;
		  } else {
		    // No effects.
		    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
		    // no effects.
		    // TODO: Maybe there's a better way to report this.

		    {
		      recordCommitTime();
		    }
		  }

		  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

		  if (rootDoesHavePassiveEffects) {
		    // This commit has passive effects. Stash a reference to them. But don't
		    // schedule a callback until after flushing layout work.
		    rootDoesHavePassiveEffects = false;
		    rootWithPendingPassiveEffects = root;
		    pendingPassiveEffectsLanes = lanes;
		  } else {

		    {
		      nestedPassiveUpdateCount = 0;
		      rootWithPassiveNestedUpdates = null;
		    }
		  } // Read this again, since an effect might have updated it


		  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root
		  // TODO: This is part of the `componentDidCatch` implementation. Its purpose
		  // is to detect whether something might have called setState inside
		  // `componentDidCatch`. The mechanism is known to be flawed because `setState`
		  // inside `componentDidCatch` is itself flawed — that's why we recommend
		  // `getDerivedStateFromError` instead. However, it could be improved by
		  // checking if remainingLanes includes Sync work, instead of whether there's
		  // any work remaining at all (which would also include stuff like Suspense
		  // retries or transitions). It's been like this for a while, though, so fixing
		  // it probably isn't that urgent.

		  if (remainingLanes === NoLanes) {
		    // If there's no remaining work, we can clear the set of already failed
		    // error boundaries.
		    legacyErrorBoundariesThatAlreadyFailed = null;
		  }

		  {
		    if (!rootDidHavePassiveEffects) {
		      commitDoubleInvokeEffectsInDEV(root.current, false);
		    }
		  }

		  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);

		  {
		    if (isDevToolsPresent) {
		      root.memoizedUpdaters.clear();
		    }
		  }

		  {
		    onCommitRoot$1();
		  } // Always call this before exiting `commitRoot`, to ensure that any
		  // additional work on this root is scheduled.


		  ensureRootIsScheduled(root, now());

		  if (recoverableErrors !== null) {
		    // There were errors during this render, but recovered from them without
		    // needing to surface it to the UI. We log them here.
		    var onRecoverableError = root.onRecoverableError;

		    for (var i = 0; i < recoverableErrors.length; i++) {
		      var recoverableError = recoverableErrors[i];
		      var componentStack = recoverableError.stack;
		      var digest = recoverableError.digest;
		      onRecoverableError(recoverableError.value, {
		        componentStack: componentStack,
		        digest: digest
		      });
		    }
		  }

		  if (hasUncaughtError) {
		    hasUncaughtError = false;
		    var error$1 = firstUncaughtError;
		    firstUncaughtError = null;
		    throw error$1;
		  } // If the passive effects are the result of a discrete render, flush them
		  // synchronously at the end of the current task so that the result is
		  // immediately observable. Otherwise, we assume that they are not
		  // order-dependent and do not need to be observed by external systems, so we
		  // can wait until after paint.
		  // TODO: We can optimize this by not scheduling the callback earlier. Since we
		  // currently schedule the callback in multiple places, will wait until those
		  // are consolidated.


		  if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {
		    flushPassiveEffects();
		  } // Read this again, since a passive effect might have updated it


		  remainingLanes = root.pendingLanes;

		  if (includesSomeLane(remainingLanes, SyncLane)) {
		    {
		      markNestedUpdateScheduled();
		    } // Count the number of times the root synchronously re-renders without
		    // finishing. If there are too many, it indicates an infinite update loop.


		    if (root === rootWithNestedUpdates) {
		      nestedUpdateCount++;
		    } else {
		      nestedUpdateCount = 0;
		      rootWithNestedUpdates = root;
		    }
		  } else {
		    nestedUpdateCount = 0;
		  } // If layout work was scheduled, flush it now.


		  flushSyncCallbacks();

		  {
		    markCommitStopped();
		  }

		  return null;
		}

		function flushPassiveEffects() {
		  // Returns whether passive effects were flushed.
		  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should
		  // probably just combine the two functions. I believe they were only separate
		  // in the first place because we used to wrap it with
		  // `Scheduler.runWithPriority`, which accepts a function. But now we track the
		  // priority within React itself, so we can mutate the variable directly.
		  if (rootWithPendingPassiveEffects !== null) {
		    var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
		    var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
		    var prevTransition = ReactCurrentBatchConfig$3.transition;
		    var previousPriority = getCurrentUpdatePriority();

		    try {
		      ReactCurrentBatchConfig$3.transition = null;
		      setCurrentUpdatePriority(priority);
		      return flushPassiveEffectsImpl();
		    } finally {
		      setCurrentUpdatePriority(previousPriority);
		      ReactCurrentBatchConfig$3.transition = prevTransition; // Once passive effects have run for the tree - giving components a
		    }
		  }

		  return false;
		}
		function enqueuePendingPassiveProfilerEffect(fiber) {
		  {
		    pendingPassiveProfilerEffects.push(fiber);

		    if (!rootDoesHavePassiveEffects) {
		      rootDoesHavePassiveEffects = true;
		      scheduleCallback$1(NormalPriority, function () {
		        flushPassiveEffects();
		        return null;
		      });
		    }
		  }
		}

		function flushPassiveEffectsImpl() {
		  if (rootWithPendingPassiveEffects === null) {
		    return false;
		  } // Cache and clear the transitions flag


		  var transitions = pendingPassiveTransitions;
		  pendingPassiveTransitions = null;
		  var root = rootWithPendingPassiveEffects;
		  var lanes = pendingPassiveEffectsLanes;
		  rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.
		  // Figure out why and fix it. It's not causing any known issues (probably
		  // because it's only used for profiling), but it's a refactor hazard.

		  pendingPassiveEffectsLanes = NoLanes;

		  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
		    throw new Error('Cannot flush passive effects while already rendering.');
		  }

		  {
		    isFlushingPassiveEffects = true;
		    didScheduleUpdateDuringPassiveEffects = false;
		  }

		  {
		    markPassiveEffectsStarted(lanes);
		  }

		  var prevExecutionContext = executionContext;
		  executionContext |= CommitContext;
		  commitPassiveUnmountEffects(root.current);
		  commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects

		  {
		    var profilerEffects = pendingPassiveProfilerEffects;
		    pendingPassiveProfilerEffects = [];

		    for (var i = 0; i < profilerEffects.length; i++) {
		      var _fiber = profilerEffects[i];
		      commitPassiveEffectDurations(root, _fiber);
		    }
		  }

		  {
		    markPassiveEffectsStopped();
		  }

		  {
		    commitDoubleInvokeEffectsInDEV(root.current, true);
		  }

		  executionContext = prevExecutionContext;
		  flushSyncCallbacks();

		  {
		    // If additional passive effects were scheduled, increment a counter. If this
		    // exceeds the limit, we'll fire a warning.
		    if (didScheduleUpdateDuringPassiveEffects) {
		      if (root === rootWithPassiveNestedUpdates) {
		        nestedPassiveUpdateCount++;
		      } else {
		        nestedPassiveUpdateCount = 0;
		        rootWithPassiveNestedUpdates = root;
		      }
		    } else {
		      nestedPassiveUpdateCount = 0;
		    }

		    isFlushingPassiveEffects = false;
		    didScheduleUpdateDuringPassiveEffects = false;
		  } // TODO: Move to commitPassiveMountEffects


		  onPostCommitRoot(root);

		  {
		    var stateNode = root.current.stateNode;
		    stateNode.effectDuration = 0;
		    stateNode.passiveEffectDuration = 0;
		  }

		  return true;
		}

		function isAlreadyFailedLegacyErrorBoundary(instance) {
		  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
		}
		function markLegacyErrorBoundaryAsFailed(instance) {
		  if (legacyErrorBoundariesThatAlreadyFailed === null) {
		    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
		  } else {
		    legacyErrorBoundariesThatAlreadyFailed.add(instance);
		  }
		}

		function prepareToThrowUncaughtError(error) {
		  if (!hasUncaughtError) {
		    hasUncaughtError = true;
		    firstUncaughtError = error;
		  }
		}

		var onUncaughtError = prepareToThrowUncaughtError;

		function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
		  var errorInfo = createCapturedValueAtFiber(error, sourceFiber);
		  var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
		  var root = enqueueUpdate(rootFiber, update, SyncLane);
		  var eventTime = requestEventTime();

		  if (root !== null) {
		    markRootUpdated(root, SyncLane, eventTime);
		    ensureRootIsScheduled(root, eventTime);
		  }
		}

		function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
		  {
		    reportUncaughtErrorInDEV(error$1);
		    setIsRunningInsertionEffect(false);
		  }

		  if (sourceFiber.tag === HostRoot) {
		    // Error was thrown at the root. There is no parent, so the root
		    // itself should capture it.
		    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
		    return;
		  }

		  var fiber = null;

		  {
		    fiber = nearestMountedAncestor;
		  }

		  while (fiber !== null) {
		    if (fiber.tag === HostRoot) {
		      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
		      return;
		    } else if (fiber.tag === ClassComponent) {
		      var ctor = fiber.type;
		      var instance = fiber.stateNode;

		      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
		        var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
		        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
		        var root = enqueueUpdate(fiber, update, SyncLane);
		        var eventTime = requestEventTime();

		        if (root !== null) {
		          markRootUpdated(root, SyncLane, eventTime);
		          ensureRootIsScheduled(root, eventTime);
		        }

		        return;
		      }
		    }

		    fiber = fiber.return;
		  }

		  {
		    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning
		    // will fire for errors that are thrown by destroy functions inside deleted
		    // trees. What it should instead do is propagate the error to the parent of
		    // the deleted tree. In the meantime, do not add this warning to the
		    // allowlist; this is only for our internal use.
		    error('Internal React error: Attempted to capture a commit phase error ' + 'inside a detached tree. This indicates a bug in React. Likely ' + 'causes include deleting the same fiber more than once, committing an ' + 'already-finished tree, or an inconsistent return pointer.\n\n' + 'Error message:\n\n%s', error$1);
		  }
		}
		function pingSuspendedRoot(root, wakeable, pingedLanes) {
		  var pingCache = root.pingCache;

		  if (pingCache !== null) {
		    // The wakeable resolved, so we no longer need to memoize, because it will
		    // never be thrown again.
		    pingCache.delete(wakeable);
		  }

		  var eventTime = requestEventTime();
		  markRootPinged(root, pingedLanes);
		  warnIfSuspenseResolutionNotWrappedWithActDEV(root);

		  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
		    // Received a ping at the same priority level at which we're currently
		    // rendering. We might want to restart this render. This should mirror
		    // the logic of whether or not a root suspends once it completes.
		    // TODO: If we're rendering sync either due to Sync, Batched or expired,
		    // we should probably never restart.
		    // If we're suspended with delay, or if it's a retry, we'll always suspend
		    // so we can always restart.
		    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
		      // Restart from the root.
		      prepareFreshStack(root, NoLanes);
		    } else {
		      // Even though we can't restart right now, we might get an
		      // opportunity later. So we mark this render as having a ping.
		      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
		    }
		  }

		  ensureRootIsScheduled(root, eventTime);
		}

		function retryTimedOutBoundary(boundaryFiber, retryLane) {
		  // The boundary fiber (a Suspense component or SuspenseList component)
		  // previously was rendered in its fallback state. One of the promises that
		  // suspended it has resolved, which means at least part of the tree was
		  // likely unblocked. Try rendering again, at a new lanes.
		  if (retryLane === NoLane) {
		    // TODO: Assign this to `suspenseState.retryLane`? to avoid
		    // unnecessary entanglement?
		    retryLane = requestRetryLane(boundaryFiber);
		  } // TODO: Special case idle priority?


		  var eventTime = requestEventTime();
		  var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);

		  if (root !== null) {
		    markRootUpdated(root, retryLane, eventTime);
		    ensureRootIsScheduled(root, eventTime);
		  }
		}

		function retryDehydratedSuspenseBoundary(boundaryFiber) {
		  var suspenseState = boundaryFiber.memoizedState;
		  var retryLane = NoLane;

		  if (suspenseState !== null) {
		    retryLane = suspenseState.retryLane;
		  }

		  retryTimedOutBoundary(boundaryFiber, retryLane);
		}
		function resolveRetryWakeable(boundaryFiber, wakeable) {
		  var retryLane = NoLane; // Default

		  var retryCache;

		  switch (boundaryFiber.tag) {
		    case SuspenseComponent:
		      retryCache = boundaryFiber.stateNode;
		      var suspenseState = boundaryFiber.memoizedState;

		      if (suspenseState !== null) {
		        retryLane = suspenseState.retryLane;
		      }

		      break;

		    case SuspenseListComponent:
		      retryCache = boundaryFiber.stateNode;
		      break;

		    default:
		      throw new Error('Pinged unknown suspense boundary type. ' + 'This is probably a bug in React.');
		  }

		  if (retryCache !== null) {
		    // The wakeable resolved, so we no longer need to memoize, because it will
		    // never be thrown again.
		    retryCache.delete(wakeable);
		  }

		  retryTimedOutBoundary(boundaryFiber, retryLane);
		} // Computes the next Just Noticeable Difference (JND) boundary.
		// The theory is that a person can't tell the difference between small differences in time.
		// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
		// difference in the experience. However, waiting for longer might mean that we can avoid
		// showing an intermediate loading state. The longer we have already waited, the harder it
		// is to tell small differences in time. Therefore, the longer we've already waited,
		// the longer we can wait additionally. At some point we have to give up though.
		// We pick a train model where the next boundary commits at a consistent schedule.
		// These particular numbers are vague estimates. We expect to adjust them based on research.

		function jnd(timeElapsed) {
		  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
		}

		function checkForNestedUpdates() {
		  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
		    nestedUpdateCount = 0;
		    rootWithNestedUpdates = null;
		    throw new Error('Maximum update depth exceeded. This can happen when a component ' + 'repeatedly calls setState inside componentWillUpdate or ' + 'componentDidUpdate. React limits the number of nested updates to ' + 'prevent infinite loops.');
		  }

		  {
		    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
		      nestedPassiveUpdateCount = 0;
		      rootWithPassiveNestedUpdates = null;

		      error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
		    }
		  }
		}

		function flushRenderPhaseStrictModeWarningsInDEV() {
		  {
		    ReactStrictModeWarnings.flushLegacyContextWarning();

		    {
		      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
		    }
		  }
		}

		function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
		  {
		    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects
		    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.
		    // Maybe not a big deal since this is DEV only behavior.
		    setCurrentFiber(fiber);
		    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);

		    if (hasPassiveEffects) {
		      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
		    }

		    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);

		    if (hasPassiveEffects) {
		      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
		    }

		    resetCurrentFiber();
		  }
		}

		function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
		  {
		    // We don't need to re-check StrictEffectsMode here.
		    // This function is only called if that check has already passed.
		    var current = firstChild;
		    var subtreeRoot = null;

		    while (current !== null) {
		      var primarySubtreeFlag = current.subtreeFlags & fiberFlags;

		      if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) {
		        current = current.child;
		      } else {
		        if ((current.flags & fiberFlags) !== NoFlags) {
		          invokeEffectFn(current);
		        }

		        if (current.sibling !== null) {
		          current = current.sibling;
		        } else {
		          current = subtreeRoot = current.return;
		        }
		      }
		    }
		  }
		}

		var didWarnStateUpdateForNotYetMountedComponent = null;
		function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
		  {
		    if ((executionContext & RenderContext) !== NoContext) {
		      // We let the other warning about render phase updates deal with this one.
		      return;
		    }

		    if (!(fiber.mode & ConcurrentMode)) {
		      return;
		    }

		    var tag = fiber.tag;

		    if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
		      // Only warn for user-defined components, not internal ones like Suspense.
		      return;
		    } // We show the whole stack but dedupe on the top component's name because
		    // the problematic code almost always lies inside that component.


		    var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';

		    if (didWarnStateUpdateForNotYetMountedComponent !== null) {
		      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
		        return;
		      }

		      didWarnStateUpdateForNotYetMountedComponent.add(componentName);
		    } else {
		      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
		    }

		    var previousFiber = current;

		    try {
		      setCurrentFiber(fiber);

		      error("Can't perform a React state update on a component that hasn't mounted yet. " + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');
		    } finally {
		      if (previousFiber) {
		        setCurrentFiber(fiber);
		      } else {
		        resetCurrentFiber();
		      }
		    }
		  }
		}
		var beginWork$1;

		{
		  var dummyFiber = null;

		  beginWork$1 = function (current, unitOfWork, lanes) {
		    // If a component throws an error, we replay it again in a synchronously
		    // dispatched event, so that the debugger will treat it as an uncaught
		    // error See ReactErrorUtils for more information.
		    // Before entering the begin phase, copy the work-in-progress onto a dummy
		    // fiber. If beginWork throws, we'll use this to reset the state.
		    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

		    try {
		      return beginWork(current, unitOfWork, lanes);
		    } catch (originalError) {
		      if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
		        // Don't replay promises.
		        // Don't replay errors if we are hydrating and have already suspended or handled an error
		        throw originalError;
		      } // Keep this code in sync with handleError; any changes here must have
		      // corresponding changes there.


		      resetContextDependencies();
		      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
		      // same fiber again.
		      // Unwind the failed stack frame

		      unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.

		      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

		      if ( unitOfWork.mode & ProfileMode) {
		        // Reset the profiler timer.
		        startProfilerTimer(unitOfWork);
		      } // Run beginWork again.


		      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);

		      if (hasCaughtError()) {
		        var replayError = clearCaughtError();

		        if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) {
		          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.
		          originalError._suppressLogging = true;
		        }
		      } // We always throw the original error in case the second render pass is not idempotent.
		      // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.


		      throw originalError;
		    }
		  };
		}

		var didWarnAboutUpdateInRender = false;
		var didWarnAboutUpdateInRenderForAnotherComponent;

		{
		  didWarnAboutUpdateInRenderForAnotherComponent = new Set();
		}

		function warnAboutRenderPhaseUpdatesInDEV(fiber) {
		  {
		    if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
		      switch (fiber.tag) {
		        case FunctionComponent:
		        case ForwardRef:
		        case SimpleMemoComponent:
		          {
		            var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

		            var dedupeKey = renderingComponentName;

		            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
		              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
		              var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';

		              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
		            }

		            break;
		          }

		        case ClassComponent:
		          {
		            if (!didWarnAboutUpdateInRender) {
		              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

		              didWarnAboutUpdateInRender = true;
		            }

		            break;
		          }
		      }
		    }
		  }
		}

		function restorePendingUpdaters(root, lanes) {
		  {
		    if (isDevToolsPresent) {
		      var memoizedUpdaters = root.memoizedUpdaters;
		      memoizedUpdaters.forEach(function (schedulingFiber) {
		        addFiberToLanesMap(root, schedulingFiber, lanes);
		      }); // This function intentionally does not clear memoized updaters.
		      // Those may still be relevant to the current commit
		      // and a future one (e.g. Suspense).
		    }
		  }
		}
		var fakeActCallbackNode = {};

		function scheduleCallback$1(priorityLevel, callback) {
		  {
		    // If we're currently inside an `act` scope, bypass Scheduler and push to
		    // the `act` queue instead.
		    var actQueue = ReactCurrentActQueue$1.current;

		    if (actQueue !== null) {
		      actQueue.push(callback);
		      return fakeActCallbackNode;
		    } else {
		      return scheduleCallback(priorityLevel, callback);
		    }
		  }
		}

		function cancelCallback$1(callbackNode) {
		  if ( callbackNode === fakeActCallbackNode) {
		    return;
		  } // In production, always call Scheduler. This function will be stripped out.


		  return cancelCallback(callbackNode);
		}

		function shouldForceFlushFallbacksInDEV() {
		  // Never force flush in production. This function should get stripped out.
		  return  ReactCurrentActQueue$1.current !== null;
		}

		function warnIfUpdatesNotWrappedWithActDEV(fiber) {
		  {
		    if (fiber.mode & ConcurrentMode) {
		      if (!isConcurrentActEnvironment()) {
		        // Not in an act environment. No need to warn.
		        return;
		      }
		    } else {
		      // Legacy mode has additional cases where we suppress a warning.
		      if (!isLegacyActEnvironment()) {
		        // Not in an act environment. No need to warn.
		        return;
		      }

		      if (executionContext !== NoContext) {
		        // Legacy mode doesn't warn if the update is batched, i.e.
		        // batchedUpdates or flushSync.
		        return;
		      }

		      if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
		        // For backwards compatibility with pre-hooks code, legacy mode only
		        // warns for updates that originate from a hook.
		        return;
		      }
		    }

		    if (ReactCurrentActQueue$1.current === null) {
		      var previousFiber = current;

		      try {
		        setCurrentFiber(fiber);

		        error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentNameFromFiber(fiber));
		      } finally {
		        if (previousFiber) {
		          setCurrentFiber(fiber);
		        } else {
		          resetCurrentFiber();
		        }
		      }
		    }
		  }
		}

		function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {
		  {
		    if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
		      error('A suspended resource finished loading inside a test, but the event ' + 'was not wrapped in act(...).\n\n' + 'When testing, code that resolves suspended data should be wrapped ' + 'into act(...):\n\n' + 'act(() => {\n' + '  /* finish loading suspended data */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act');
		    }
		  }
		}

		function setIsRunningInsertionEffect(isRunning) {
		  {
		    isRunningInsertionEffect = isRunning;
		  }
		}

		/* eslint-disable react-internal/prod-error-codes */
		var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

		var failedBoundaries = null;
		var setRefreshHandler = function (handler) {
		  {
		    resolveFamily = handler;
		  }
		};
		function resolveFunctionForHotReloading(type) {
		  {
		    if (resolveFamily === null) {
		      // Hot reloading is disabled.
		      return type;
		    }

		    var family = resolveFamily(type);

		    if (family === undefined) {
		      return type;
		    } // Use the latest known implementation.


		    return family.current;
		  }
		}
		function resolveClassForHotReloading(type) {
		  // No implementation differences.
		  return resolveFunctionForHotReloading(type);
		}
		function resolveForwardRefForHotReloading(type) {
		  {
		    if (resolveFamily === null) {
		      // Hot reloading is disabled.
		      return type;
		    }

		    var family = resolveFamily(type);

		    if (family === undefined) {
		      // Check if we're dealing with a real forwardRef. Don't want to crash early.
		      if (type !== null && type !== undefined && typeof type.render === 'function') {
		        // ForwardRef is special because its resolved .type is an object,
		        // but it's possible that we only have its inner render function in the map.
		        // If that inner render function is different, we'll build a new forwardRef type.
		        var currentRender = resolveFunctionForHotReloading(type.render);

		        if (type.render !== currentRender) {
		          var syntheticType = {
		            $$typeof: REACT_FORWARD_REF_TYPE,
		            render: currentRender
		          };

		          if (type.displayName !== undefined) {
		            syntheticType.displayName = type.displayName;
		          }

		          return syntheticType;
		        }
		      }

		      return type;
		    } // Use the latest known implementation.


		    return family.current;
		  }
		}
		function isCompatibleFamilyForHotReloading(fiber, element) {
		  {
		    if (resolveFamily === null) {
		      // Hot reloading is disabled.
		      return false;
		    }

		    var prevType = fiber.elementType;
		    var nextType = element.type; // If we got here, we know types aren't === equal.

		    var needsCompareFamilies = false;
		    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

		    switch (fiber.tag) {
		      case ClassComponent:
		        {
		          if (typeof nextType === 'function') {
		            needsCompareFamilies = true;
		          }

		          break;
		        }

		      case FunctionComponent:
		        {
		          if (typeof nextType === 'function') {
		            needsCompareFamilies = true;
		          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
		            // We don't know the inner type yet.
		            // We're going to assume that the lazy inner type is stable,
		            // and so it is sufficient to avoid reconciling it away.
		            // We're not going to unwrap or actually use the new lazy type.
		            needsCompareFamilies = true;
		          }

		          break;
		        }

		      case ForwardRef:
		        {
		          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
		            needsCompareFamilies = true;
		          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
		            needsCompareFamilies = true;
		          }

		          break;
		        }

		      case MemoComponent:
		      case SimpleMemoComponent:
		        {
		          if ($$typeofNextType === REACT_MEMO_TYPE) {
		            // TODO: if it was but can no longer be simple,
		            // we shouldn't set this.
		            needsCompareFamilies = true;
		          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
		            needsCompareFamilies = true;
		          }

		          break;
		        }

		      default:
		        return false;
		    } // Check if both types have a family and it's the same one.


		    if (needsCompareFamilies) {
		      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
		      // This means both of them need to be registered to preserve state.
		      // If we unwrapped and compared the inner types for wrappers instead,
		      // then we would risk falsely saying two separate memo(Foo)
		      // calls are equivalent because they wrap the same Foo function.
		      var prevFamily = resolveFamily(prevType);

		      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
		        return true;
		      }
		    }

		    return false;
		  }
		}
		function markFailedErrorBoundaryForHotReloading(fiber) {
		  {
		    if (resolveFamily === null) {
		      // Hot reloading is disabled.
		      return;
		    }

		    if (typeof WeakSet !== 'function') {
		      return;
		    }

		    if (failedBoundaries === null) {
		      failedBoundaries = new WeakSet();
		    }

		    failedBoundaries.add(fiber);
		  }
		}
		var scheduleRefresh = function (root, update) {
		  {
		    if (resolveFamily === null) {
		      // Hot reloading is disabled.
		      return;
		    }

		    var staleFamilies = update.staleFamilies,
		        updatedFamilies = update.updatedFamilies;
		    flushPassiveEffects();
		    flushSync(function () {
		      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
		    });
		  }
		};
		var scheduleRoot = function (root, element) {
		  {
		    if (root.context !== emptyContextObject) {
		      // Super edge case: root has a legacy _renderSubtree context
		      // but we don't know the parentComponent so we can't pass it.
		      // Just ignore. We'll delete this with _renderSubtree code path later.
		      return;
		    }

		    flushPassiveEffects();
		    flushSync(function () {
		      updateContainer(element, root, null, null);
		    });
		  }
		};

		function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
		  {
		    var alternate = fiber.alternate,
		        child = fiber.child,
		        sibling = fiber.sibling,
		        tag = fiber.tag,
		        type = fiber.type;
		    var candidateType = null;

		    switch (tag) {
		      case FunctionComponent:
		      case SimpleMemoComponent:
		      case ClassComponent:
		        candidateType = type;
		        break;

		      case ForwardRef:
		        candidateType = type.render;
		        break;
		    }

		    if (resolveFamily === null) {
		      throw new Error('Expected resolveFamily to be set during hot reload.');
		    }

		    var needsRender = false;
		    var needsRemount = false;

		    if (candidateType !== null) {
		      var family = resolveFamily(candidateType);

		      if (family !== undefined) {
		        if (staleFamilies.has(family)) {
		          needsRemount = true;
		        } else if (updatedFamilies.has(family)) {
		          if (tag === ClassComponent) {
		            needsRemount = true;
		          } else {
		            needsRender = true;
		          }
		        }
		      }
		    }

		    if (failedBoundaries !== null) {
		      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
		        needsRemount = true;
		      }
		    }

		    if (needsRemount) {
		      fiber._debugNeedsRemount = true;
		    }

		    if (needsRemount || needsRender) {
		      var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);

		      if (_root !== null) {
		        scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
		      }
		    }

		    if (child !== null && !needsRemount) {
		      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
		    }

		    if (sibling !== null) {
		      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
		    }
		  }
		}

		var findHostInstancesForRefresh = function (root, families) {
		  {
		    var hostInstances = new Set();
		    var types = new Set(families.map(function (family) {
		      return family.current;
		    }));
		    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
		    return hostInstances;
		  }
		};

		function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
		  {
		    var child = fiber.child,
		        sibling = fiber.sibling,
		        tag = fiber.tag,
		        type = fiber.type;
		    var candidateType = null;

		    switch (tag) {
		      case FunctionComponent:
		      case SimpleMemoComponent:
		      case ClassComponent:
		        candidateType = type;
		        break;

		      case ForwardRef:
		        candidateType = type.render;
		        break;
		    }

		    var didMatch = false;

		    if (candidateType !== null) {
		      if (types.has(candidateType)) {
		        didMatch = true;
		      }
		    }

		    if (didMatch) {
		      // We have a match. This only drills down to the closest host components.
		      // There's no need to search deeper because for the purpose of giving
		      // visual feedback, "flashing" outermost parent rectangles is sufficient.
		      findHostInstancesForFiberShallowly(fiber, hostInstances);
		    } else {
		      // If there's no match, maybe there will be one further down in the child tree.
		      if (child !== null) {
		        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
		      }
		    }

		    if (sibling !== null) {
		      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
		    }
		  }
		}

		function findHostInstancesForFiberShallowly(fiber, hostInstances) {
		  {
		    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

		    if (foundHostInstances) {
		      return;
		    } // If we didn't find any host children, fallback to closest host parent.


		    var node = fiber;

		    while (true) {
		      switch (node.tag) {
		        case HostComponent:
		          hostInstances.add(node.stateNode);
		          return;

		        case HostPortal:
		          hostInstances.add(node.stateNode.containerInfo);
		          return;

		        case HostRoot:
		          hostInstances.add(node.stateNode.containerInfo);
		          return;
		      }

		      if (node.return === null) {
		        throw new Error('Expected to reach root first.');
		      }

		      node = node.return;
		    }
		  }
		}

		function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
		  {
		    var node = fiber;
		    var foundHostInstances = false;

		    while (true) {
		      if (node.tag === HostComponent) {
		        // We got a match.
		        foundHostInstances = true;
		        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
		      } else if (node.child !== null) {
		        node.child.return = node;
		        node = node.child;
		        continue;
		      }

		      if (node === fiber) {
		        return foundHostInstances;
		      }

		      while (node.sibling === null) {
		        if (node.return === null || node.return === fiber) {
		          return foundHostInstances;
		        }

		        node = node.return;
		      }

		      node.sibling.return = node.return;
		      node = node.sibling;
		    }
		  }

		  return false;
		}

		var hasBadMapPolyfill;

		{
		  hasBadMapPolyfill = false;

		  try {
		    var nonExtensibleObject = Object.preventExtensions({});
		    /* eslint-disable no-new */

		    new Map([[nonExtensibleObject, null]]);
		    new Set([nonExtensibleObject]);
		    /* eslint-enable no-new */
		  } catch (e) {
		    // TODO: Consider warning about bad polyfills
		    hasBadMapPolyfill = true;
		  }
		}

		function FiberNode(tag, pendingProps, key, mode) {
		  // Instance
		  this.tag = tag;
		  this.key = key;
		  this.elementType = null;
		  this.type = null;
		  this.stateNode = null; // Fiber

		  this.return = null;
		  this.child = null;
		  this.sibling = null;
		  this.index = 0;
		  this.ref = null;
		  this.pendingProps = pendingProps;
		  this.memoizedProps = null;
		  this.updateQueue = null;
		  this.memoizedState = null;
		  this.dependencies = null;
		  this.mode = mode; // Effects

		  this.flags = NoFlags;
		  this.subtreeFlags = NoFlags;
		  this.deletions = null;
		  this.lanes = NoLanes;
		  this.childLanes = NoLanes;
		  this.alternate = null;

		  {
		    // Note: The following is done to avoid a v8 performance cliff.
		    //
		    // Initializing the fields below to smis and later updating them with
		    // double values will cause Fibers to end up having separate shapes.
		    // This behavior/bug has something to do with Object.preventExtension().
		    // Fortunately this only impacts DEV builds.
		    // Unfortunately it makes React unusably slow for some applications.
		    // To work around this, initialize the fields below with doubles.
		    //
		    // Learn more about this here:
		    // https://github.com/facebook/react/issues/14365
		    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
		    this.actualDuration = Number.NaN;
		    this.actualStartTime = Number.NaN;
		    this.selfBaseDuration = Number.NaN;
		    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
		    // This won't trigger the performance cliff mentioned above,
		    // and it simplifies other profiler code (including DevTools).

		    this.actualDuration = 0;
		    this.actualStartTime = -1;
		    this.selfBaseDuration = 0;
		    this.treeBaseDuration = 0;
		  }

		  {
		    // This isn't directly used but is handy for debugging internals:
		    this._debugSource = null;
		    this._debugOwner = null;
		    this._debugNeedsRemount = false;
		    this._debugHookTypes = null;

		    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
		      Object.preventExtensions(this);
		    }
		  }
		} // This is a constructor function, rather than a POJO constructor, still
		// please ensure we do the following:
		// 1) Nobody should add any instance methods on this. Instance methods can be
		//    more difficult to predict when they get optimized and they are almost
		//    never inlined properly in static compilers.
		// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
		//    always know when it is a fiber.
		// 3) We might want to experiment with using numeric keys since they are easier
		//    to optimize in a non-JIT environment.
		// 4) We can easily go from a constructor to a createFiber object literal if that
		//    is faster.
		// 5) It should be easy to port this to a C struct and keep a C implementation
		//    compatible.


		var createFiber = function (tag, pendingProps, key, mode) {
		  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
		  return new FiberNode(tag, pendingProps, key, mode);
		};

		function shouldConstruct$1(Component) {
		  var prototype = Component.prototype;
		  return !!(prototype && prototype.isReactComponent);
		}

		function isSimpleFunctionComponent(type) {
		  return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
		}
		function resolveLazyComponentTag(Component) {
		  if (typeof Component === 'function') {
		    return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
		  } else if (Component !== undefined && Component !== null) {
		    var $$typeof = Component.$$typeof;

		    if ($$typeof === REACT_FORWARD_REF_TYPE) {
		      return ForwardRef;
		    }

		    if ($$typeof === REACT_MEMO_TYPE) {
		      return MemoComponent;
		    }
		  }

		  return IndeterminateComponent;
		} // This is used to create an alternate fiber to do work on.

		function createWorkInProgress(current, pendingProps) {
		  var workInProgress = current.alternate;

		  if (workInProgress === null) {
		    // We use a double buffering pooling technique because we know that we'll
		    // only ever need at most two versions of a tree. We pool the "other" unused
		    // node that we're free to reuse. This is lazily created to avoid allocating
		    // extra objects for things that are never updated. It also allow us to
		    // reclaim the extra memory if needed.
		    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
		    workInProgress.elementType = current.elementType;
		    workInProgress.type = current.type;
		    workInProgress.stateNode = current.stateNode;

		    {
		      // DEV-only fields
		      workInProgress._debugSource = current._debugSource;
		      workInProgress._debugOwner = current._debugOwner;
		      workInProgress._debugHookTypes = current._debugHookTypes;
		    }

		    workInProgress.alternate = current;
		    current.alternate = workInProgress;
		  } else {
		    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.

		    workInProgress.type = current.type; // We already have an alternate.
		    // Reset the effect tag.

		    workInProgress.flags = NoFlags; // The effects are no longer valid.

		    workInProgress.subtreeFlags = NoFlags;
		    workInProgress.deletions = null;

		    {
		      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
		      // This prevents time from endlessly accumulating in new commits.
		      // This has the downside of resetting values for different priority renders,
		      // But works for yielding (the common case) and should support resuming.
		      workInProgress.actualDuration = 0;
		      workInProgress.actualStartTime = -1;
		    }
		  } // Reset all effects except static ones.
		  // Static effects are not specific to a render.


		  workInProgress.flags = current.flags & StaticMask;
		  workInProgress.childLanes = current.childLanes;
		  workInProgress.lanes = current.lanes;
		  workInProgress.child = current.child;
		  workInProgress.memoizedProps = current.memoizedProps;
		  workInProgress.memoizedState = current.memoizedState;
		  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
		  // it cannot be shared with the current fiber.

		  var currentDependencies = current.dependencies;
		  workInProgress.dependencies = currentDependencies === null ? null : {
		    lanes: currentDependencies.lanes,
		    firstContext: currentDependencies.firstContext
		  }; // These will be overridden during the parent's reconciliation

		  workInProgress.sibling = current.sibling;
		  workInProgress.index = current.index;
		  workInProgress.ref = current.ref;

		  {
		    workInProgress.selfBaseDuration = current.selfBaseDuration;
		    workInProgress.treeBaseDuration = current.treeBaseDuration;
		  }

		  {
		    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

		    switch (workInProgress.tag) {
		      case IndeterminateComponent:
		      case FunctionComponent:
		      case SimpleMemoComponent:
		        workInProgress.type = resolveFunctionForHotReloading(current.type);
		        break;

		      case ClassComponent:
		        workInProgress.type = resolveClassForHotReloading(current.type);
		        break;

		      case ForwardRef:
		        workInProgress.type = resolveForwardRefForHotReloading(current.type);
		        break;
		    }
		  }

		  return workInProgress;
		} // Used to reuse a Fiber for a second pass.

		function resetWorkInProgress(workInProgress, renderLanes) {
		  // This resets the Fiber to what createFiber or createWorkInProgress would
		  // have set the values to before during the first pass. Ideally this wouldn't
		  // be necessary but unfortunately many code paths reads from the workInProgress
		  // when they should be reading from current and writing to workInProgress.
		  // We assume pendingProps, index, key, ref, return are still untouched to
		  // avoid doing another reconciliation.
		  // Reset the effect flags but keep any Placement tags, since that's something
		  // that child fiber is setting, not the reconciliation.
		  workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.

		  var current = workInProgress.alternate;

		  if (current === null) {
		    // Reset to createFiber's initial values.
		    workInProgress.childLanes = NoLanes;
		    workInProgress.lanes = renderLanes;
		    workInProgress.child = null;
		    workInProgress.subtreeFlags = NoFlags;
		    workInProgress.memoizedProps = null;
		    workInProgress.memoizedState = null;
		    workInProgress.updateQueue = null;
		    workInProgress.dependencies = null;
		    workInProgress.stateNode = null;

		    {
		      // Note: We don't reset the actualTime counts. It's useful to accumulate
		      // actual time across multiple render passes.
		      workInProgress.selfBaseDuration = 0;
		      workInProgress.treeBaseDuration = 0;
		    }
		  } else {
		    // Reset to the cloned values that createWorkInProgress would've.
		    workInProgress.childLanes = current.childLanes;
		    workInProgress.lanes = current.lanes;
		    workInProgress.child = current.child;
		    workInProgress.subtreeFlags = NoFlags;
		    workInProgress.deletions = null;
		    workInProgress.memoizedProps = current.memoizedProps;
		    workInProgress.memoizedState = current.memoizedState;
		    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.

		    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
		    // it cannot be shared with the current fiber.

		    var currentDependencies = current.dependencies;
		    workInProgress.dependencies = currentDependencies === null ? null : {
		      lanes: currentDependencies.lanes,
		      firstContext: currentDependencies.firstContext
		    };

		    {
		      // Note: We don't reset the actualTime counts. It's useful to accumulate
		      // actual time across multiple render passes.
		      workInProgress.selfBaseDuration = current.selfBaseDuration;
		      workInProgress.treeBaseDuration = current.treeBaseDuration;
		    }
		  }

		  return workInProgress;
		}
		function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
		  var mode;

		  if (tag === ConcurrentRoot) {
		    mode = ConcurrentMode;

		    if (isStrictMode === true) {
		      mode |= StrictLegacyMode;

		      {
		        mode |= StrictEffectsMode;
		      }
		    }
		  } else {
		    mode = NoMode;
		  }

		  if ( isDevToolsPresent) {
		    // Always collect profile timings when DevTools are present.
		    // This enables DevTools to start capturing timing at any point–
		    // Without some nodes in the tree having empty base times.
		    mode |= ProfileMode;
		  }

		  return createFiber(HostRoot, null, null, mode);
		}
		function createFiberFromTypeAndProps(type, // React$ElementType
		key, pendingProps, owner, mode, lanes) {
		  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

		  var resolvedType = type;

		  if (typeof type === 'function') {
		    if (shouldConstruct$1(type)) {
		      fiberTag = ClassComponent;

		      {
		        resolvedType = resolveClassForHotReloading(resolvedType);
		      }
		    } else {
		      {
		        resolvedType = resolveFunctionForHotReloading(resolvedType);
		      }
		    }
		  } else if (typeof type === 'string') {
		    fiberTag = HostComponent;
		  } else {
		    getTag: switch (type) {
		      case REACT_FRAGMENT_TYPE:
		        return createFiberFromFragment(pendingProps.children, mode, lanes, key);

		      case REACT_STRICT_MODE_TYPE:
		        fiberTag = Mode;
		        mode |= StrictLegacyMode;

		        if ( (mode & ConcurrentMode) !== NoMode) {
		          // Strict effects should never run on legacy roots
		          mode |= StrictEffectsMode;
		        }

		        break;

		      case REACT_PROFILER_TYPE:
		        return createFiberFromProfiler(pendingProps, mode, lanes, key);

		      case REACT_SUSPENSE_TYPE:
		        return createFiberFromSuspense(pendingProps, mode, lanes, key);

		      case REACT_SUSPENSE_LIST_TYPE:
		        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);

		      case REACT_OFFSCREEN_TYPE:
		        return createFiberFromOffscreen(pendingProps, mode, lanes, key);

		      case REACT_LEGACY_HIDDEN_TYPE:

		      // eslint-disable-next-line no-fallthrough

		      case REACT_SCOPE_TYPE:

		      // eslint-disable-next-line no-fallthrough

		      case REACT_CACHE_TYPE:

		      // eslint-disable-next-line no-fallthrough

		      case REACT_TRACING_MARKER_TYPE:

		      // eslint-disable-next-line no-fallthrough

		      case REACT_DEBUG_TRACING_MODE_TYPE:

		      // eslint-disable-next-line no-fallthrough

		      default:
		        {
		          if (typeof type === 'object' && type !== null) {
		            switch (type.$$typeof) {
		              case REACT_PROVIDER_TYPE:
		                fiberTag = ContextProvider;
		                break getTag;

		              case REACT_CONTEXT_TYPE:
		                // This is a consumer
		                fiberTag = ContextConsumer;
		                break getTag;

		              case REACT_FORWARD_REF_TYPE:
		                fiberTag = ForwardRef;

		                {
		                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
		                }

		                break getTag;

		              case REACT_MEMO_TYPE:
		                fiberTag = MemoComponent;
		                break getTag;

		              case REACT_LAZY_TYPE:
		                fiberTag = LazyComponent;
		                resolvedType = null;
		                break getTag;
		            }
		          }

		          var info = '';

		          {
		            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
		              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
		            }

		            var ownerName = owner ? getComponentNameFromFiber(owner) : null;

		            if (ownerName) {
		              info += '\n\nCheck the render method of `' + ownerName + '`.';
		            }
		          }

		          throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + ("but got: " + (type == null ? type : typeof type) + "." + info));
		        }
		    }
		  }

		  var fiber = createFiber(fiberTag, pendingProps, key, mode);
		  fiber.elementType = type;
		  fiber.type = resolvedType;
		  fiber.lanes = lanes;

		  {
		    fiber._debugOwner = owner;
		  }

		  return fiber;
		}
		function createFiberFromElement(element, mode, lanes) {
		  var owner = null;

		  {
		    owner = element._owner;
		  }

		  var type = element.type;
		  var key = element.key;
		  var pendingProps = element.props;
		  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);

		  {
		    fiber._debugSource = element._source;
		    fiber._debugOwner = element._owner;
		  }

		  return fiber;
		}
		function createFiberFromFragment(elements, mode, lanes, key) {
		  var fiber = createFiber(Fragment, elements, key, mode);
		  fiber.lanes = lanes;
		  return fiber;
		}

		function createFiberFromProfiler(pendingProps, mode, lanes, key) {
		  {
		    if (typeof pendingProps.id !== 'string') {
		      error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
		    }
		  }

		  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
		  fiber.elementType = REACT_PROFILER_TYPE;
		  fiber.lanes = lanes;

		  {
		    fiber.stateNode = {
		      effectDuration: 0,
		      passiveEffectDuration: 0
		    };
		  }

		  return fiber;
		}

		function createFiberFromSuspense(pendingProps, mode, lanes, key) {
		  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
		  fiber.elementType = REACT_SUSPENSE_TYPE;
		  fiber.lanes = lanes;
		  return fiber;
		}
		function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
		  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
		  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
		  fiber.lanes = lanes;
		  return fiber;
		}
		function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
		  var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
		  fiber.elementType = REACT_OFFSCREEN_TYPE;
		  fiber.lanes = lanes;
		  var primaryChildInstance = {
		    isHidden: false
		  };
		  fiber.stateNode = primaryChildInstance;
		  return fiber;
		}
		function createFiberFromText(content, mode, lanes) {
		  var fiber = createFiber(HostText, content, null, mode);
		  fiber.lanes = lanes;
		  return fiber;
		}
		function createFiberFromHostInstanceForDeletion() {
		  var fiber = createFiber(HostComponent, null, null, NoMode);
		  fiber.elementType = 'DELETED';
		  return fiber;
		}
		function createFiberFromDehydratedFragment(dehydratedNode) {
		  var fiber = createFiber(DehydratedFragment, null, null, NoMode);
		  fiber.stateNode = dehydratedNode;
		  return fiber;
		}
		function createFiberFromPortal(portal, mode, lanes) {
		  var pendingProps = portal.children !== null ? portal.children : [];
		  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
		  fiber.lanes = lanes;
		  fiber.stateNode = {
		    containerInfo: portal.containerInfo,
		    pendingChildren: null,
		    // Used by persistent updates
		    implementation: portal.implementation
		  };
		  return fiber;
		} // Used for stashing WIP properties to replay failed work in DEV.

		function assignFiberPropertiesInDEV(target, source) {
		  if (target === null) {
		    // This Fiber's initial properties will always be overwritten.
		    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
		    target = createFiber(IndeterminateComponent, null, null, NoMode);
		  } // This is intentionally written as a list of all properties.
		  // We tried to use Object.assign() instead but this is called in
		  // the hottest path, and Object.assign() was too slow:
		  // https://github.com/facebook/react/issues/12502
		  // This code is DEV-only so size is not a concern.


		  target.tag = source.tag;
		  target.key = source.key;
		  target.elementType = source.elementType;
		  target.type = source.type;
		  target.stateNode = source.stateNode;
		  target.return = source.return;
		  target.child = source.child;
		  target.sibling = source.sibling;
		  target.index = source.index;
		  target.ref = source.ref;
		  target.pendingProps = source.pendingProps;
		  target.memoizedProps = source.memoizedProps;
		  target.updateQueue = source.updateQueue;
		  target.memoizedState = source.memoizedState;
		  target.dependencies = source.dependencies;
		  target.mode = source.mode;
		  target.flags = source.flags;
		  target.subtreeFlags = source.subtreeFlags;
		  target.deletions = source.deletions;
		  target.lanes = source.lanes;
		  target.childLanes = source.childLanes;
		  target.alternate = source.alternate;

		  {
		    target.actualDuration = source.actualDuration;
		    target.actualStartTime = source.actualStartTime;
		    target.selfBaseDuration = source.selfBaseDuration;
		    target.treeBaseDuration = source.treeBaseDuration;
		  }

		  target._debugSource = source._debugSource;
		  target._debugOwner = source._debugOwner;
		  target._debugNeedsRemount = source._debugNeedsRemount;
		  target._debugHookTypes = source._debugHookTypes;
		  return target;
		}

		function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
		  this.tag = tag;
		  this.containerInfo = containerInfo;
		  this.pendingChildren = null;
		  this.current = null;
		  this.pingCache = null;
		  this.finishedWork = null;
		  this.timeoutHandle = noTimeout;
		  this.context = null;
		  this.pendingContext = null;
		  this.callbackNode = null;
		  this.callbackPriority = NoLane;
		  this.eventTimes = createLaneMap(NoLanes);
		  this.expirationTimes = createLaneMap(NoTimestamp);
		  this.pendingLanes = NoLanes;
		  this.suspendedLanes = NoLanes;
		  this.pingedLanes = NoLanes;
		  this.expiredLanes = NoLanes;
		  this.mutableReadLanes = NoLanes;
		  this.finishedLanes = NoLanes;
		  this.entangledLanes = NoLanes;
		  this.entanglements = createLaneMap(NoLanes);
		  this.identifierPrefix = identifierPrefix;
		  this.onRecoverableError = onRecoverableError;

		  {
		    this.mutableSourceEagerHydrationData = null;
		  }

		  {
		    this.effectDuration = 0;
		    this.passiveEffectDuration = 0;
		  }

		  {
		    this.memoizedUpdaters = new Set();
		    var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];

		    for (var _i = 0; _i < TotalLanes; _i++) {
		      pendingUpdatersLaneMap.push(new Set());
		    }
		  }

		  {
		    switch (tag) {
		      case ConcurrentRoot:
		        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';
		        break;

		      case LegacyRoot:
		        this._debugRootType = hydrate ? 'hydrate()' : 'render()';
		        break;
		    }
		  }
		}

		function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // TODO: We have several of these arguments that are conceptually part of the
		// host config, but because they are passed in at runtime, we have to thread
		// them through the root constructor. Perhaps we should put them all into a
		// single type, like a DynamicHostConfig that is defined by the renderer.
		identifierPrefix, onRecoverableError, transitionCallbacks) {
		  var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);
		  // stateNode is any.


		  var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
		  root.current = uninitializedFiber;
		  uninitializedFiber.stateNode = root;

		  {
		    var _initialState = {
		      element: initialChildren,
		      isDehydrated: hydrate,
		      cache: null,
		      // not enabled yet
		      transitions: null,
		      pendingSuspenseBoundaries: null
		    };
		    uninitializedFiber.memoizedState = _initialState;
		  }

		  initializeUpdateQueue(uninitializedFiber);
		  return root;
		}

		var ReactVersion = '18.2.0';

		function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
		implementation) {
		  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

		  {
		    checkKeyStringCoercion(key);
		  }

		  return {
		    // This tag allow us to uniquely identify this as a React Portal
		    $$typeof: REACT_PORTAL_TYPE,
		    key: key == null ? null : '' + key,
		    children: children,
		    containerInfo: containerInfo,
		    implementation: implementation
		  };
		}

		var didWarnAboutNestedUpdates;
		var didWarnAboutFindNodeInStrictMode;

		{
		  didWarnAboutNestedUpdates = false;
		  didWarnAboutFindNodeInStrictMode = {};
		}

		function getContextForSubtree(parentComponent) {
		  if (!parentComponent) {
		    return emptyContextObject;
		  }

		  var fiber = get(parentComponent);
		  var parentContext = findCurrentUnmaskedContext(fiber);

		  if (fiber.tag === ClassComponent) {
		    var Component = fiber.type;

		    if (isContextProvider(Component)) {
		      return processChildContext(fiber, Component, parentContext);
		    }
		  }

		  return parentContext;
		}

		function findHostInstanceWithWarning(component, methodName) {
		  {
		    var fiber = get(component);

		    if (fiber === undefined) {
		      if (typeof component.render === 'function') {
		        throw new Error('Unable to find node on an unmounted component.');
		      } else {
		        var keys = Object.keys(component).join(',');
		        throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
		      }
		    }

		    var hostFiber = findCurrentHostFiber(fiber);

		    if (hostFiber === null) {
		      return null;
		    }

		    if (hostFiber.mode & StrictLegacyMode) {
		      var componentName = getComponentNameFromFiber(fiber) || 'Component';

		      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
		        didWarnAboutFindNodeInStrictMode[componentName] = true;
		        var previousFiber = current;

		        try {
		          setCurrentFiber(hostFiber);

		          if (fiber.mode & StrictLegacyMode) {
		            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
		          } else {
		            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
		          }
		        } finally {
		          // Ideally this should reset to previous but this shouldn't be called in
		          // render and there's another warning for that anyway.
		          if (previousFiber) {
		            setCurrentFiber(previousFiber);
		          } else {
		            resetCurrentFiber();
		          }
		        }
		      }
		    }

		    return hostFiber.stateNode;
		  }
		}

		function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
		  var hydrate = false;
		  var initialChildren = null;
		  return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
		}
		function createHydrationContainer(initialChildren, // TODO: Remove `callback` when we delete legacy mode.
		callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
		  var hydrate = true;
		  var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor

		  root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from
		  // a regular update because the initial render must match was was rendered
		  // on the server.
		  // NOTE: This update intentionally doesn't have a payload. We're only using
		  // the update to schedule work on the root fiber (and, for legacy roots, to
		  // enqueue the callback if one is provided).

		  var current = root.current;
		  var eventTime = requestEventTime();
		  var lane = requestUpdateLane(current);
		  var update = createUpdate(eventTime, lane);
		  update.callback = callback !== undefined && callback !== null ? callback : null;
		  enqueueUpdate(current, update, lane);
		  scheduleInitialHydrationOnRoot(root, lane, eventTime);
		  return root;
		}
		function updateContainer(element, container, parentComponent, callback) {
		  {
		    onScheduleRoot(container, element);
		  }

		  var current$1 = container.current;
		  var eventTime = requestEventTime();
		  var lane = requestUpdateLane(current$1);

		  {
		    markRenderScheduled(lane);
		  }

		  var context = getContextForSubtree(parentComponent);

		  if (container.context === null) {
		    container.context = context;
		  } else {
		    container.pendingContext = context;
		  }

		  {
		    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
		      didWarnAboutNestedUpdates = true;

		      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentNameFromFiber(current) || 'Unknown');
		    }
		  }

		  var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
		  // being called "element".

		  update.payload = {
		    element: element
		  };
		  callback = callback === undefined ? null : callback;

		  if (callback !== null) {
		    {
		      if (typeof callback !== 'function') {
		        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
		      }
		    }

		    update.callback = callback;
		  }

		  var root = enqueueUpdate(current$1, update, lane);

		  if (root !== null) {
		    scheduleUpdateOnFiber(root, current$1, lane, eventTime);
		    entangleTransitions(root, current$1, lane);
		  }

		  return lane;
		}
		function getPublicRootInstance(container) {
		  var containerFiber = container.current;

		  if (!containerFiber.child) {
		    return null;
		  }

		  switch (containerFiber.child.tag) {
		    case HostComponent:
		      return getPublicInstance(containerFiber.child.stateNode);

		    default:
		      return containerFiber.child.stateNode;
		  }
		}
		function attemptSynchronousHydration$1(fiber) {
		  switch (fiber.tag) {
		    case HostRoot:
		      {
		        var root = fiber.stateNode;

		        if (isRootDehydrated(root)) {
		          // Flush the first scheduled "update".
		          var lanes = getHighestPriorityPendingLanes(root);
		          flushRoot(root, lanes);
		        }

		        break;
		      }

		    case SuspenseComponent:
		      {
		        flushSync(function () {
		          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

		          if (root !== null) {
		            var eventTime = requestEventTime();
		            scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);
		          }
		        }); // If we're still blocked after this, we need to increase
		        // the priority of any promises resolving within this
		        // boundary so that they next attempt also has higher pri.

		        var retryLane = SyncLane;
		        markRetryLaneIfNotHydrated(fiber, retryLane);
		        break;
		      }
		  }
		}

		function markRetryLaneImpl(fiber, retryLane) {
		  var suspenseState = fiber.memoizedState;

		  if (suspenseState !== null && suspenseState.dehydrated !== null) {
		    suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
		  }
		} // Increases the priority of thenables when they resolve within this boundary.


		function markRetryLaneIfNotHydrated(fiber, retryLane) {
		  markRetryLaneImpl(fiber, retryLane);
		  var alternate = fiber.alternate;

		  if (alternate) {
		    markRetryLaneImpl(alternate, retryLane);
		  }
		}
		function attemptContinuousHydration$1(fiber) {
		  if (fiber.tag !== SuspenseComponent) {
		    // We ignore HostRoots here because we can't increase
		    // their priority and they should not suspend on I/O,
		    // since you have to wrap anything that might suspend in
		    // Suspense.
		    return;
		  }

		  var lane = SelectiveHydrationLane;
		  var root = enqueueConcurrentRenderForLane(fiber, lane);

		  if (root !== null) {
		    var eventTime = requestEventTime();
		    scheduleUpdateOnFiber(root, fiber, lane, eventTime);
		  }

		  markRetryLaneIfNotHydrated(fiber, lane);
		}
		function attemptHydrationAtCurrentPriority$1(fiber) {
		  if (fiber.tag !== SuspenseComponent) {
		    // We ignore HostRoots here because we can't increase
		    // their priority other than synchronously flush it.
		    return;
		  }

		  var lane = requestUpdateLane(fiber);
		  var root = enqueueConcurrentRenderForLane(fiber, lane);

		  if (root !== null) {
		    var eventTime = requestEventTime();
		    scheduleUpdateOnFiber(root, fiber, lane, eventTime);
		  }

		  markRetryLaneIfNotHydrated(fiber, lane);
		}
		function findHostInstanceWithNoPortals(fiber) {
		  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

		  if (hostFiber === null) {
		    return null;
		  }

		  return hostFiber.stateNode;
		}

		var shouldErrorImpl = function (fiber) {
		  return null;
		};

		function shouldError(fiber) {
		  return shouldErrorImpl(fiber);
		}

		var shouldSuspendImpl = function (fiber) {
		  return false;
		};

		function shouldSuspend(fiber) {
		  return shouldSuspendImpl(fiber);
		}
		var overrideHookState = null;
		var overrideHookStateDeletePath = null;
		var overrideHookStateRenamePath = null;
		var overrideProps = null;
		var overridePropsDeletePath = null;
		var overridePropsRenamePath = null;
		var scheduleUpdate = null;
		var setErrorHandler = null;
		var setSuspenseHandler = null;

		{
		  var copyWithDeleteImpl = function (obj, path, index) {
		    var key = path[index];
		    var updated = isArray(obj) ? obj.slice() : assign({}, obj);

		    if (index + 1 === path.length) {
		      if (isArray(updated)) {
		        updated.splice(key, 1);
		      } else {
		        delete updated[key];
		      }

		      return updated;
		    } // $FlowFixMe number or string is fine here


		    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
		    return updated;
		  };

		  var copyWithDelete = function (obj, path) {
		    return copyWithDeleteImpl(obj, path, 0);
		  };

		  var copyWithRenameImpl = function (obj, oldPath, newPath, index) {
		    var oldKey = oldPath[index];
		    var updated = isArray(obj) ? obj.slice() : assign({}, obj);

		    if (index + 1 === oldPath.length) {
		      var newKey = newPath[index]; // $FlowFixMe number or string is fine here

		      updated[newKey] = updated[oldKey];

		      if (isArray(updated)) {
		        updated.splice(oldKey, 1);
		      } else {
		        delete updated[oldKey];
		      }
		    } else {
		      // $FlowFixMe number or string is fine here
		      updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here
		      obj[oldKey], oldPath, newPath, index + 1);
		    }

		    return updated;
		  };

		  var copyWithRename = function (obj, oldPath, newPath) {
		    if (oldPath.length !== newPath.length) {
		      warn('copyWithRename() expects paths of the same length');

		      return;
		    } else {
		      for (var i = 0; i < newPath.length - 1; i++) {
		        if (oldPath[i] !== newPath[i]) {
		          warn('copyWithRename() expects paths to be the same except for the deepest key');

		          return;
		        }
		      }
		    }

		    return copyWithRenameImpl(obj, oldPath, newPath, 0);
		  };

		  var copyWithSetImpl = function (obj, path, index, value) {
		    if (index >= path.length) {
		      return value;
		    }

		    var key = path[index];
		    var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here

		    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
		    return updated;
		  };

		  var copyWithSet = function (obj, path, value) {
		    return copyWithSetImpl(obj, path, 0, value);
		  };

		  var findHook = function (fiber, id) {
		    // For now, the "id" of stateful hooks is just the stateful hook index.
		    // This may change in the future with e.g. nested hooks.
		    var currentHook = fiber.memoizedState;

		    while (currentHook !== null && id > 0) {
		      currentHook = currentHook.next;
		      id--;
		    }

		    return currentHook;
		  }; // Support DevTools editable values for useState and useReducer.


		  overrideHookState = function (fiber, id, path, value) {
		    var hook = findHook(fiber, id);

		    if (hook !== null) {
		      var newState = copyWithSet(hook.memoizedState, path, value);
		      hook.memoizedState = newState;
		      hook.baseState = newState; // We aren't actually adding an update to the queue,
		      // because there is no update we can add for useReducer hooks that won't trigger an error.
		      // (There's no appropriate action type for DevTools overrides.)
		      // As a result though, React will see the scheduled update as a noop and bailout.
		      // Shallow cloning props works as a workaround for now to bypass the bailout check.

		      fiber.memoizedProps = assign({}, fiber.memoizedProps);
		      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

		      if (root !== null) {
		        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
		      }
		    }
		  };

		  overrideHookStateDeletePath = function (fiber, id, path) {
		    var hook = findHook(fiber, id);

		    if (hook !== null) {
		      var newState = copyWithDelete(hook.memoizedState, path);
		      hook.memoizedState = newState;
		      hook.baseState = newState; // We aren't actually adding an update to the queue,
		      // because there is no update we can add for useReducer hooks that won't trigger an error.
		      // (There's no appropriate action type for DevTools overrides.)
		      // As a result though, React will see the scheduled update as a noop and bailout.
		      // Shallow cloning props works as a workaround for now to bypass the bailout check.

		      fiber.memoizedProps = assign({}, fiber.memoizedProps);
		      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

		      if (root !== null) {
		        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
		      }
		    }
		  };

		  overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
		    var hook = findHook(fiber, id);

		    if (hook !== null) {
		      var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
		      hook.memoizedState = newState;
		      hook.baseState = newState; // We aren't actually adding an update to the queue,
		      // because there is no update we can add for useReducer hooks that won't trigger an error.
		      // (There's no appropriate action type for DevTools overrides.)
		      // As a result though, React will see the scheduled update as a noop and bailout.
		      // Shallow cloning props works as a workaround for now to bypass the bailout check.

		      fiber.memoizedProps = assign({}, fiber.memoizedProps);
		      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

		      if (root !== null) {
		        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
		      }
		    }
		  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


		  overrideProps = function (fiber, path, value) {
		    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

		    if (fiber.alternate) {
		      fiber.alternate.pendingProps = fiber.pendingProps;
		    }

		    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

		    if (root !== null) {
		      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
		    }
		  };

		  overridePropsDeletePath = function (fiber, path) {
		    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);

		    if (fiber.alternate) {
		      fiber.alternate.pendingProps = fiber.pendingProps;
		    }

		    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

		    if (root !== null) {
		      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
		    }
		  };

		  overridePropsRenamePath = function (fiber, oldPath, newPath) {
		    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);

		    if (fiber.alternate) {
		      fiber.alternate.pendingProps = fiber.pendingProps;
		    }

		    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

		    if (root !== null) {
		      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
		    }
		  };

		  scheduleUpdate = function (fiber) {
		    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

		    if (root !== null) {
		      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
		    }
		  };

		  setErrorHandler = function (newShouldErrorImpl) {
		    shouldErrorImpl = newShouldErrorImpl;
		  };

		  setSuspenseHandler = function (newShouldSuspendImpl) {
		    shouldSuspendImpl = newShouldSuspendImpl;
		  };
		}

		function findHostInstanceByFiber(fiber) {
		  var hostFiber = findCurrentHostFiber(fiber);

		  if (hostFiber === null) {
		    return null;
		  }

		  return hostFiber.stateNode;
		}

		function emptyFindFiberByHostInstance(instance) {
		  return null;
		}

		function getCurrentFiberForDevTools() {
		  return current;
		}

		function injectIntoDevTools(devToolsConfig) {
		  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
		  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
		  return injectInternals({
		    bundleType: devToolsConfig.bundleType,
		    version: devToolsConfig.version,
		    rendererPackageName: devToolsConfig.rendererPackageName,
		    rendererConfig: devToolsConfig.rendererConfig,
		    overrideHookState: overrideHookState,
		    overrideHookStateDeletePath: overrideHookStateDeletePath,
		    overrideHookStateRenamePath: overrideHookStateRenamePath,
		    overrideProps: overrideProps,
		    overridePropsDeletePath: overridePropsDeletePath,
		    overridePropsRenamePath: overridePropsRenamePath,
		    setErrorHandler: setErrorHandler,
		    setSuspenseHandler: setSuspenseHandler,
		    scheduleUpdate: scheduleUpdate,
		    currentDispatcherRef: ReactCurrentDispatcher,
		    findHostInstanceByFiber: findHostInstanceByFiber,
		    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
		    // React Refresh
		    findHostInstancesForRefresh:  findHostInstancesForRefresh ,
		    scheduleRefresh:  scheduleRefresh ,
		    scheduleRoot:  scheduleRoot ,
		    setRefreshHandler:  setRefreshHandler ,
		    // Enables DevTools to append owner stacks to error messages in DEV mode.
		    getCurrentFiber:  getCurrentFiberForDevTools ,
		    // Enables DevTools to detect reconciler version rather than renderer version
		    // which may not match for third party renderers.
		    reconcilerVersion: ReactVersion
		  });
		}

		/* global reportError */

		var defaultOnRecoverableError = typeof reportError === 'function' ? // In modern browsers, reportError will dispatch an error event,
		// emulating an uncaught JavaScript error.
		reportError : function (error) {
		  // In older browsers and test environments, fallback to console.error.
		  // eslint-disable-next-line react-internal/no-production-logging
		  console['error'](error);
		};

		function ReactDOMRoot(internalRoot) {
		  this._internalRoot = internalRoot;
		}

		ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function (children) {
		  var root = this._internalRoot;

		  if (root === null) {
		    throw new Error('Cannot update an unmounted root.');
		  }

		  {
		    if (typeof arguments[1] === 'function') {
		      error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
		    } else if (isValidContainer(arguments[1])) {
		      error('You passed a container to the second argument of root.render(...). ' + "You don't need to pass it again since you already passed it to create the root.");
		    } else if (typeof arguments[1] !== 'undefined') {
		      error('You passed a second argument to root.render(...) but it only accepts ' + 'one argument.');
		    }

		    var container = root.containerInfo;

		    if (container.nodeType !== COMMENT_NODE) {
		      var hostInstance = findHostInstanceWithNoPortals(root.current);

		      if (hostInstance) {
		        if (hostInstance.parentNode !== container) {
		          error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
		        }
		      }
		    }
		  }

		  updateContainer(children, root, null, null);
		};

		ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function () {
		  {
		    if (typeof arguments[0] === 'function') {
		      error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
		    }
		  }

		  var root = this._internalRoot;

		  if (root !== null) {
		    this._internalRoot = null;
		    var container = root.containerInfo;

		    {
		      if (isAlreadyRendering()) {
		        error('Attempted to synchronously unmount a root while React was already ' + 'rendering. React cannot finish unmounting the root until the ' + 'current render has completed, which may lead to a race condition.');
		      }
		    }

		    flushSync(function () {
		      updateContainer(null, root, null, null);
		    });
		    unmarkContainerAsRoot(container);
		  }
		};

		function createRoot(container, options) {
		  if (!isValidContainer(container)) {
		    throw new Error('createRoot(...): Target container is not a DOM element.');
		  }

		  warnIfReactDOMContainerInDEV(container);
		  var isStrictMode = false;
		  var concurrentUpdatesByDefaultOverride = false;
		  var identifierPrefix = '';
		  var onRecoverableError = defaultOnRecoverableError;

		  if (options !== null && options !== undefined) {
		    {
		      if (options.hydrate) {
		        warn('hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.');
		      } else {
		        if (typeof options === 'object' && options !== null && options.$$typeof === REACT_ELEMENT_TYPE) {
		          error('You passed a JSX element to createRoot. You probably meant to ' + 'call root.render instead. ' + 'Example usage:\n\n' + '  let root = createRoot(domContainer);\n' + '  root.render(<App />);');
		        }
		      }
		    }

		    if (options.unstable_strictMode === true) {
		      isStrictMode = true;
		    }

		    if (options.identifierPrefix !== undefined) {
		      identifierPrefix = options.identifierPrefix;
		    }

		    if (options.onRecoverableError !== undefined) {
		      onRecoverableError = options.onRecoverableError;
		    }

		    if (options.transitionCallbacks !== undefined) {
		      options.transitionCallbacks;
		    }
		  }

		  var root = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
		  markContainerAsRoot(root.current, container);
		  var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
		  listenToAllSupportedEvents(rootContainerElement);
		  return new ReactDOMRoot(root);
		}

		function ReactDOMHydrationRoot(internalRoot) {
		  this._internalRoot = internalRoot;
		}

		function scheduleHydration(target) {
		  if (target) {
		    queueExplicitHydrationTarget(target);
		  }
		}

		ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
		function hydrateRoot(container, initialChildren, options) {
		  if (!isValidContainer(container)) {
		    throw new Error('hydrateRoot(...): Target container is not a DOM element.');
		  }

		  warnIfReactDOMContainerInDEV(container);

		  {
		    if (initialChildren === undefined) {
		      error('Must provide initial children as second argument to hydrateRoot. ' + 'Example usage: hydrateRoot(domContainer, <App />)');
		    }
		  } // For now we reuse the whole bag of options since they contain
		  // the hydration callbacks.


		  var hydrationCallbacks = options != null ? options : null; // TODO: Delete this option

		  var mutableSources = options != null && options.hydratedSources || null;
		  var isStrictMode = false;
		  var concurrentUpdatesByDefaultOverride = false;
		  var identifierPrefix = '';
		  var onRecoverableError = defaultOnRecoverableError;

		  if (options !== null && options !== undefined) {
		    if (options.unstable_strictMode === true) {
		      isStrictMode = true;
		    }

		    if (options.identifierPrefix !== undefined) {
		      identifierPrefix = options.identifierPrefix;
		    }

		    if (options.onRecoverableError !== undefined) {
		      onRecoverableError = options.onRecoverableError;
		    }
		  }

		  var root = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
		  markContainerAsRoot(root.current, container); // This can't be a comment node since hydration doesn't work on comment nodes anyway.

		  listenToAllSupportedEvents(container);

		  if (mutableSources) {
		    for (var i = 0; i < mutableSources.length; i++) {
		      var mutableSource = mutableSources[i];
		      registerMutableSourceForHydration(root, mutableSource);
		    }
		  }

		  return new ReactDOMHydrationRoot(root);
		}
		function isValidContainer(node) {
		  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers  ));
		} // TODO: Remove this function which also includes comment nodes.
		// We only use it in places that are currently more relaxed.

		function isValidContainerLegacy(node) {
		  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
		}

		function warnIfReactDOMContainerInDEV(container) {
		  {
		    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
		      error('createRoot(): Creating roots directly with document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try using a container element created ' + 'for your app.');
		    }

		    if (isContainerMarkedAsRoot(container)) {
		      if (container._reactRootContainer) {
		        error('You are calling ReactDOMClient.createRoot() on a container that was previously ' + 'passed to ReactDOM.render(). This is not supported.');
		      } else {
		        error('You are calling ReactDOMClient.createRoot() on a container that ' + 'has already been passed to createRoot() before. Instead, call ' + 'root.render() on the existing root instead if you want to update it.');
		      }
		    }
		  }
		}

		var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
		var topLevelUpdateWarnings;

		{
		  topLevelUpdateWarnings = function (container) {
		    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
		      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);

		      if (hostInstance) {
		        if (hostInstance.parentNode !== container) {
		          error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
		        }
		      }
		    }

		    var isRootRenderedBySomeReact = !!container._reactRootContainer;
		    var rootEl = getReactRootElementInContainer(container);
		    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));

		    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
		      error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
		    }

		    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
		      error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
		    }
		  };
		}

		function getReactRootElementInContainer(container) {
		  if (!container) {
		    return null;
		  }

		  if (container.nodeType === DOCUMENT_NODE) {
		    return container.documentElement;
		  } else {
		    return container.firstChild;
		  }
		}

		function noopOnRecoverableError() {// This isn't reachable because onRecoverableError isn't called in the
		  // legacy API.
		}

		function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
		  if (isHydrationContainer) {
		    if (typeof callback === 'function') {
		      var originalCallback = callback;

		      callback = function () {
		        var instance = getPublicRootInstance(root);
		        originalCallback.call(instance);
		      };
		    }

		    var root = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, // hydrationCallbacks
		    false, // isStrictMode
		    false, // concurrentUpdatesByDefaultOverride,
		    '', // identifierPrefix
		    noopOnRecoverableError);
		    container._reactRootContainer = root;
		    markContainerAsRoot(root.current, container);
		    var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
		    listenToAllSupportedEvents(rootContainerElement);
		    flushSync();
		    return root;
		  } else {
		    // First clear any existing content.
		    var rootSibling;

		    while (rootSibling = container.lastChild) {
		      container.removeChild(rootSibling);
		    }

		    if (typeof callback === 'function') {
		      var _originalCallback = callback;

		      callback = function () {
		        var instance = getPublicRootInstance(_root);

		        _originalCallback.call(instance);
		      };
		    }

		    var _root = createContainer(container, LegacyRoot, null, // hydrationCallbacks
		    false, // isStrictMode
		    false, // concurrentUpdatesByDefaultOverride,
		    '', // identifierPrefix
		    noopOnRecoverableError);

		    container._reactRootContainer = _root;
		    markContainerAsRoot(_root.current, container);

		    var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;

		    listenToAllSupportedEvents(_rootContainerElement); // Initial mount should not be batched.

		    flushSync(function () {
		      updateContainer(initialChildren, _root, parentComponent, callback);
		    });
		    return _root;
		  }
		}

		function warnOnInvalidCallback$1(callback, callerName) {
		  {
		    if (callback !== null && typeof callback !== 'function') {
		      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
		    }
		  }
		}

		function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
		  {
		    topLevelUpdateWarnings(container);
		    warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
		  }

		  var maybeRoot = container._reactRootContainer;
		  var root;

		  if (!maybeRoot) {
		    // Initial mount
		    root = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
		  } else {
		    root = maybeRoot;

		    if (typeof callback === 'function') {
		      var originalCallback = callback;

		      callback = function () {
		        var instance = getPublicRootInstance(root);
		        originalCallback.call(instance);
		      };
		    } // Update


		    updateContainer(children, root, parentComponent, callback);
		  }

		  return getPublicRootInstance(root);
		}

		function findDOMNode(componentOrElement) {
		  {
		    var owner = ReactCurrentOwner$3.current;

		    if (owner !== null && owner.stateNode !== null) {
		      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

		      if (!warnedAboutRefsInRender) {
		        error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromType(owner.type) || 'A component');
		      }

		      owner.stateNode._warnedAboutRefsInRender = true;
		    }
		  }

		  if (componentOrElement == null) {
		    return null;
		  }

		  if (componentOrElement.nodeType === ELEMENT_NODE) {
		    return componentOrElement;
		  }

		  {
		    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
		  }
		}
		function hydrate(element, container, callback) {
		  {
		    error('ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + "if it's running React 17. Learn " + 'more: https://reactjs.org/link/switch-to-createroot');
		  }

		  if (!isValidContainerLegacy(container)) {
		    throw new Error('Target container is not a DOM element.');
		  }

		  {
		    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

		    if (isModernRoot) {
		      error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. ' + 'Did you mean to call hydrateRoot(container, element)?');
		    }
		  } // TODO: throw or warn if we couldn't hydrate?


		  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
		}
		function render(element, container, callback) {
		  {
		    error('ReactDOM.render is no longer supported in React 18. Use createRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + "if it's running React 17. Learn " + 'more: https://reactjs.org/link/switch-to-createroot');
		  }

		  if (!isValidContainerLegacy(container)) {
		    throw new Error('Target container is not a DOM element.');
		  }

		  {
		    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

		    if (isModernRoot) {
		      error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
		    }
		  }

		  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
		}
		function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
		  {
		    error('ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported ' + 'in React 18. Consider using a portal instead. Until you switch to ' + "the createRoot API, your app will behave as if it's running React " + '17. Learn more: https://reactjs.org/link/switch-to-createroot');
		  }

		  if (!isValidContainerLegacy(containerNode)) {
		    throw new Error('Target container is not a DOM element.');
		  }

		  if (parentComponent == null || !has(parentComponent)) {
		    throw new Error('parentComponent must be a valid React Component');
		  }

		  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
		}
		function unmountComponentAtNode(container) {
		  if (!isValidContainerLegacy(container)) {
		    throw new Error('unmountComponentAtNode(...): Target container is not a DOM element.');
		  }

		  {
		    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

		    if (isModernRoot) {
		      error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?');
		    }
		  }

		  if (container._reactRootContainer) {
		    {
		      var rootEl = getReactRootElementInContainer(container);
		      var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);

		      if (renderedByDifferentReact) {
		        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
		      }
		    } // Unmount should not be batched.


		    flushSync(function () {
		      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
		        // $FlowFixMe This should probably use `delete container._reactRootContainer`
		        container._reactRootContainer = null;
		        unmarkContainerAsRoot(container);
		      });
		    }); // If you call unmountComponentAtNode twice in quick succession, you'll
		    // get `true` twice. That's probably fine?

		    return true;
		  } else {
		    {
		      var _rootEl = getReactRootElementInContainer(container);

		      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.

		      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;

		      if (hasNonRootReactChild) {
		        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
		      }
		    }

		    return false;
		  }
		}

		setAttemptSynchronousHydration(attemptSynchronousHydration$1);
		setAttemptContinuousHydration(attemptContinuousHydration$1);
		setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
		setGetCurrentUpdatePriority(getCurrentUpdatePriority);
		setAttemptHydrationAtPriority(runWithPriority);

		{
		  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
		  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
		  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
		    error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
		  }
		}

		setRestoreImplementation(restoreControlledState$3);
		setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);

		function createPortal$1(children, container) {
		  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

		  if (!isValidContainer(container)) {
		    throw new Error('Target container is not a DOM element.');
		  } // TODO: pass ReactDOM portal implementation as third argument
		  // $FlowFixMe The Flow type is opaque but there's no way to actually create it.


		  return createPortal(children, container, null, key);
		}

		function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
		  return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
		}

		var Internals = {
		  usingClientEntryPoint: false,
		  // Keep in sync with ReactTestUtils.js.
		  // This is an array for better minification.
		  Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
		};

		function createRoot$1(container, options) {
		  {
		    if (!Internals.usingClientEntryPoint && !false) {
		      error('You are importing createRoot from "react-dom" which is not supported. ' + 'You should instead import it from "react-dom/client".');
		    }
		  }

		  return createRoot(container, options);
		}

		function hydrateRoot$1(container, initialChildren, options) {
		  {
		    if (!Internals.usingClientEntryPoint && !false) {
		      error('You are importing hydrateRoot from "react-dom" which is not supported. ' + 'You should instead import it from "react-dom/client".');
		    }
		  }

		  return hydrateRoot(container, initialChildren, options);
		} // Overload the definition to the two valid signatures.
		// Warning, this opts-out of checking the function body.


		// eslint-disable-next-line no-redeclare
		function flushSync$1(fn) {
		  {
		    if (isAlreadyRendering()) {
		      error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');
		    }
		  }

		  return flushSync(fn);
		}
		var foundDevTools = injectIntoDevTools({
		  findFiberByHostInstance: getClosestInstanceFromNode,
		  bundleType:  1 ,
		  version: ReactVersion,
		  rendererPackageName: 'react-dom'
		});

		{
		  if (!foundDevTools && canUseDOM && window.top === window.self) {
		    // If we're in Chrome or Firefox, provide a download link if not installed.
		    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
		      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

		      if (/^(https?|file):$/.test(protocol)) {
		        // eslint-disable-next-line react-internal/no-production-logging
		        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://reactjs.org/link/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://reactjs.org/link/react-devtools-faq' : ''), 'font-weight:bold');
		      }
		    }
		  }
		}

		reactDom_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
		reactDom_development.createPortal = createPortal$1;
		reactDom_development.createRoot = createRoot$1;
		reactDom_development.findDOMNode = findDOMNode;
		reactDom_development.flushSync = flushSync$1;
		reactDom_development.hydrate = hydrate;
		reactDom_development.hydrateRoot = hydrateRoot$1;
		reactDom_development.render = render;
		reactDom_development.unmountComponentAtNode = unmountComponentAtNode;
		reactDom_development.unstable_batchedUpdates = batchedUpdates$1;
		reactDom_development.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
		reactDom_development.version = ReactVersion;
		          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		if (
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
		    'function'
		) {
		  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
		}
		        
		  })();
		}
		return reactDom_development;
	}

	function checkDCE() {
	  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	  if (
	    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
	    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
	  ) {
	    return;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // This branch is unreachable because this function is only called
	    // in production, but the condition is true only in development.
	    // Therefore if the branch is still here, dead code elimination wasn't
	    // properly applied.
	    // Don't change the message. React DevTools relies on it. Also make sure
	    // this message doesn't occur elsewhere in this function, or it will cause
	    // a false positive.
	    throw new Error('^_^');
	  }
	  try {
	    // Verify that the code above has been dead code eliminated (DCE'd).
	    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
	  } catch (err) {
	    // DevTools shouldn't crash React, no matter what.
	    // We should still report in case we break this code.
	    console.error(err);
	  }
	}

	if (process.env.NODE_ENV === 'production') {
	  // DCE check should happen before ReactDOM bundle executes so that
	  // DevTools can report bad minification during injection.
	  checkDCE();
	  reactDom.exports = requireReactDom_production_min();
	} else {
	  reactDom.exports = requireReactDom_development();
	}

	var reactDomExports = reactDom.exports;
	var ReactDOM = /*@__PURE__*/getDefaultExportFromCjs(reactDomExports);

	var createRoot;

	var m = reactDomExports;
	if (process.env.NODE_ENV === 'production') {
	  createRoot = m.createRoot;
	  m.hydrateRoot;
	} else {
	  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
	  createRoot = function(c, o) {
	    i.usingClientEntryPoint = true;
	    try {
	      return m.createRoot(c, o);
	    } finally {
	      i.usingClientEntryPoint = false;
	    }
	  };
	}

	function useTheme() {
	  const theme = useTheme$2(defaultTheme$2);
	  if (process.env.NODE_ENV !== 'production') {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    reactExports.useDebugValue(theme);
	  }
	  return theme[THEME_ID] || theme;
	}

	const _excluded$y = ["theme"];
	function ThemeProvider(_ref) {
	  let {
	      theme: themeInput
	    } = _ref,
	    props = _objectWithoutPropertiesLoose$1(_ref, _excluded$y);
	  const scopedTheme = themeInput[THEME_ID];
	  return /*#__PURE__*/jsxRuntimeExports.jsx(ThemeProvider$1, _extends$2({}, props, {
	    themeId: scopedTheme ? THEME_ID : undefined,
	    theme: scopedTheme || themeInput
	  }));
	}
	process.env.NODE_ENV !== "production" ? ThemeProvider.propTypes = {
	  /**
	   * Your component tree.
	   */
	  children: PropTypes.node,
	  /**
	   * A theme object. You can provide a function to extend the outer theme.
	   */
	  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired
	} : void 0;

	// Inspired by https://github.com/material-components/material-components-ios/blob/bca36107405594d5b7b16265a5b0ed698f85a5ee/components/Elevation/src/UIColor%2BMaterialElevation.m#L61
	const getOverlayAlpha = elevation => {
	  let alphaValue;
	  if (elevation < 1) {
	    alphaValue = 5.11916 * elevation ** 2;
	  } else {
	    alphaValue = 4.5 * Math.log(elevation + 1) + 2;
	  }
	  return (alphaValue / 100).toFixed(2);
	};
	var getOverlayAlpha$1 = getOverlayAlpha;

	var theme = createTheme({
	  palette: {
	    primary: {
	      main: '#04BA74',
	      light: '#52C68C',
	      lightest: '#e2f5eb',
	      dark: '#009E52',
	      contrastText: '#fff'
	    },
	    secondary: {
	      main: '#78909C',
	      light: '#90A4AE',
	      dark: '#607D8B'
	    },
	    other: {
	      divider: '#CFD8DC'
	    }
	  },
	  typography: {
	    fontFamily: ['"Open Sans"', 'Helvetica', 'Arial', 'sans-serif'].join(',')
	  }
	});

	const defaultTheme = createTheme();
	const Box = createBox({
	  themeId: THEME_ID,
	  defaultTheme,
	  defaultClassName: 'MuiBox-root',
	  generateClassName: ClassNameGenerator$1.generate
	});
	process.env.NODE_ENV !== "production" ? Box.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * @ignore
	   */
	  children: PropTypes.node,
	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: PropTypes.elementType,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
	} : void 0;
	var Box$1 = Box;

	/**
	 *
	 * Demos:
	 *
	 * - [Badge](https://mui.com/base-ui/react-badge/#hook)
	 *
	 * API:
	 *
	 * - [useBadge API](https://mui.com/base-ui/react-badge/hooks-api/#use-badge)
	 */
	function useBadge(parameters) {
	  const {
	    badgeContent: badgeContentProp,
	    invisible: invisibleProp = false,
	    max: maxProp = 99,
	    showZero = false
	  } = parameters;
	  const prevProps = usePreviousProps$1({
	    badgeContent: badgeContentProp,
	    max: maxProp
	  });
	  let invisible = invisibleProp;
	  if (invisibleProp === false && badgeContentProp === 0 && !showZero) {
	    invisible = true;
	  }
	  const {
	    badgeContent,
	    max = maxProp
	  } = invisible ? prevProps : parameters;
	  const displayValue = badgeContent && Number(badgeContent) > max ? `${max}+` : badgeContent;
	  return {
	    badgeContent,
	    invisible,
	    max,
	    displayValue
	  };
	}

	/**
	 * Determines if a given element is a DOM element name (i.e. not a React component).
	 */
	function isHostComponent(element) {
	  return typeof element === 'string';
	}

	/**
	 * Type of the ownerState based on the type of an element it applies to.
	 * This resolves to the provided OwnerState for React components and `undefined` for host components.
	 * Falls back to `OwnerState | undefined` when the exact type can't be determined in development time.
	 */

	/**
	 * Appends the ownerState object to the props, merging with the existing one if necessary.
	 *
	 * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node or undefined, `ownerState` is not applied.
	 * @param otherProps Props of the element.
	 * @param ownerState
	 */
	function appendOwnerState(elementType, otherProps, ownerState) {
	  if (elementType === undefined || isHostComponent(elementType)) {
	    return otherProps;
	  }
	  return _extends$2({}, otherProps, {
	    ownerState: _extends$2({}, otherProps.ownerState, ownerState)
	  });
	}

	/**
	 * Extracts event handlers from a given object.
	 * A prop is considered an event handler if it is a function and its name starts with `on`.
	 *
	 * @param object An object to extract event handlers from.
	 * @param excludeKeys An array of keys to exclude from the returned object.
	 */
	function extractEventHandlers(object, excludeKeys = []) {
	  if (object === undefined) {
	    return {};
	  }
	  const result = {};
	  Object.keys(object).filter(prop => prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)).forEach(prop => {
	    result[prop] = object[prop];
	  });
	  return result;
	}

	/**
	 * If `componentProps` is a function, calls it with the provided `ownerState`.
	 * Otherwise, just returns `componentProps`.
	 */
	function resolveComponentProps(componentProps, ownerState, slotState) {
	  if (typeof componentProps === 'function') {
	    return componentProps(ownerState, slotState);
	  }
	  return componentProps;
	}

	/**
	 * Removes event handlers from the given object.
	 * A field is considered an event handler if it is a function with a name beginning with `on`.
	 *
	 * @param object Object to remove event handlers from.
	 * @returns Object with event handlers removed.
	 */
	function omitEventHandlers(object) {
	  if (object === undefined) {
	    return {};
	  }
	  const result = {};
	  Object.keys(object).filter(prop => !(prop.match(/^on[A-Z]/) && typeof object[prop] === 'function')).forEach(prop => {
	    result[prop] = object[prop];
	  });
	  return result;
	}

	/**
	 * Merges the slot component internal props (usually coming from a hook)
	 * with the externally provided ones.
	 *
	 * The merge order is (the latter overrides the former):
	 * 1. The internal props (specified as a getter function to work with get*Props hook result)
	 * 2. Additional props (specified internally on a Base UI component)
	 * 3. External props specified on the owner component. These should only be used on a root slot.
	 * 4. External props specified in the `slotProps.*` prop.
	 * 5. The `className` prop - combined from all the above.
	 * @param parameters
	 * @returns
	 */
	function mergeSlotProps(parameters) {
	  const {
	    getSlotProps,
	    additionalProps,
	    externalSlotProps,
	    externalForwardedProps,
	    className
	  } = parameters;
	  if (!getSlotProps) {
	    // The simpler case - getSlotProps is not defined, so no internal event handlers are defined,
	    // so we can simply merge all the props without having to worry about extracting event handlers.
	    const joinedClasses = clsx(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className, additionalProps == null ? void 0 : additionalProps.className);
	    const mergedStyle = _extends$2({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
	    const props = _extends$2({}, additionalProps, externalForwardedProps, externalSlotProps);
	    if (joinedClasses.length > 0) {
	      props.className = joinedClasses;
	    }
	    if (Object.keys(mergedStyle).length > 0) {
	      props.style = mergedStyle;
	    }
	    return {
	      props,
	      internalRef: undefined
	    };
	  }

	  // In this case, getSlotProps is responsible for calling the external event handlers.
	  // We don't need to include them in the merged props because of this.

	  const eventHandlers = extractEventHandlers(_extends$2({}, externalForwardedProps, externalSlotProps));
	  const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);
	  const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);
	  const internalSlotProps = getSlotProps(eventHandlers);

	  // The order of classes is important here.
	  // Emotion (that we use in libraries consuming Base UI) depends on this order
	  // to properly override style. It requires the most important classes to be last
	  // (see https://github.com/mui/material-ui/pull/33205) for the related discussion.
	  const joinedClasses = clsx(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
	  const mergedStyle = _extends$2({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
	  const props = _extends$2({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
	  if (joinedClasses.length > 0) {
	    props.className = joinedClasses;
	  }
	  if (Object.keys(mergedStyle).length > 0) {
	    props.style = mergedStyle;
	  }
	  return {
	    props,
	    internalRef: internalSlotProps.ref
	  };
	}

	const _excluded$x = ["elementType", "externalSlotProps", "ownerState", "skipResolvingSlotProps"];
	/**
	 * @ignore - do not document.
	 * Builds the props to be passed into the slot of an unstyled component.
	 * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.
	 * If the slot component is not a host component, it also merges in the `ownerState`.
	 *
	 * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.
	 */
	function useSlotProps(parameters) {
	  var _parameters$additiona;
	  const {
	      elementType,
	      externalSlotProps,
	      ownerState,
	      skipResolvingSlotProps = false
	    } = parameters,
	    rest = _objectWithoutPropertiesLoose$1(parameters, _excluded$x);
	  const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps(externalSlotProps, ownerState);
	  const {
	    props: mergedProps,
	    internalRef
	  } = mergeSlotProps(_extends$2({}, rest, {
	    externalSlotProps: resolvedComponentsProps
	  }));
	  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
	  const props = appendOwnerState(elementType, _extends$2({}, mergedProps, {
	    ref
	  }), ownerState);
	  return props;
	}

	// Inspired by https://github.com/focus-trap/tabbable
	const candidatesSelector = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])'].join(',');
	function getTabIndex(node) {
	  const tabindexAttr = parseInt(node.getAttribute('tabindex') || '', 10);
	  if (!Number.isNaN(tabindexAttr)) {
	    return tabindexAttr;
	  }

	  // Browsers do not return `tabIndex` correctly for contentEditable nodes;
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=661108&q=contenteditable%20tabindex&can=2
	  // so if they don't have a tabindex attribute specifically set, assume it's 0.
	  // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default
	  //  `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,
	  //  yet they are still part of the regular tab order; in FF, they get a default
	  //  `tabIndex` of 0; since Chrome still puts those elements in the regular tab
	  //  order, consider their tab index to be 0.
	  if (node.contentEditable === 'true' || (node.nodeName === 'AUDIO' || node.nodeName === 'VIDEO' || node.nodeName === 'DETAILS') && node.getAttribute('tabindex') === null) {
	    return 0;
	  }
	  return node.tabIndex;
	}
	function isNonTabbableRadio(node) {
	  if (node.tagName !== 'INPUT' || node.type !== 'radio') {
	    return false;
	  }
	  if (!node.name) {
	    return false;
	  }
	  const getRadio = selector => node.ownerDocument.querySelector(`input[type="radio"]${selector}`);
	  let roving = getRadio(`[name="${node.name}"]:checked`);
	  if (!roving) {
	    roving = getRadio(`[name="${node.name}"]`);
	  }
	  return roving !== node;
	}
	function isNodeMatchingSelectorFocusable(node) {
	  if (node.disabled || node.tagName === 'INPUT' && node.type === 'hidden' || isNonTabbableRadio(node)) {
	    return false;
	  }
	  return true;
	}
	function defaultGetTabbable(root) {
	  const regularTabNodes = [];
	  const orderedTabNodes = [];
	  Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i) => {
	    const nodeTabIndex = getTabIndex(node);
	    if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {
	      return;
	    }
	    if (nodeTabIndex === 0) {
	      regularTabNodes.push(node);
	    } else {
	      orderedTabNodes.push({
	        documentOrder: i,
	        tabIndex: nodeTabIndex,
	        node: node
	      });
	    }
	  });
	  return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map(a => a.node).concat(regularTabNodes);
	}
	function defaultIsEnabled() {
	  return true;
	}

	/**
	 * Utility component that locks focus inside the component.
	 *
	 * Demos:
	 *
	 * - [Focus Trap](https://mui.com/base-ui/react-focus-trap/)
	 *
	 * API:
	 *
	 * - [FocusTrap API](https://mui.com/base-ui/react-focus-trap/components-api/#focus-trap)
	 */
	function FocusTrap(props) {
	  const {
	    children,
	    disableAutoFocus = false,
	    disableEnforceFocus = false,
	    disableRestoreFocus = false,
	    getTabbable = defaultGetTabbable,
	    isEnabled = defaultIsEnabled,
	    open
	  } = props;
	  const ignoreNextEnforceFocus = reactExports.useRef(false);
	  const sentinelStart = reactExports.useRef(null);
	  const sentinelEnd = reactExports.useRef(null);
	  const nodeToRestore = reactExports.useRef(null);
	  const reactFocusEventTarget = reactExports.useRef(null);
	  // This variable is useful when disableAutoFocus is true.
	  // It waits for the active element to move into the component to activate.
	  const activated = reactExports.useRef(false);
	  const rootRef = reactExports.useRef(null);
	  // @ts-expect-error TODO upstream fix
	  const handleRef = useForkRef(children.ref, rootRef);
	  const lastKeydown = reactExports.useRef(null);
	  reactExports.useEffect(() => {
	    // We might render an empty child.
	    if (!open || !rootRef.current) {
	      return;
	    }
	    activated.current = !disableAutoFocus;
	  }, [disableAutoFocus, open]);
	  reactExports.useEffect(() => {
	    // We might render an empty child.
	    if (!open || !rootRef.current) {
	      return;
	    }
	    const doc = ownerDocument(rootRef.current);
	    if (!rootRef.current.contains(doc.activeElement)) {
	      if (!rootRef.current.hasAttribute('tabIndex')) {
	        if (process.env.NODE_ENV !== 'production') {
	          console.error(['MUI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to "-1".'].join('\n'));
	        }
	        rootRef.current.setAttribute('tabIndex', '-1');
	      }
	      if (activated.current) {
	        rootRef.current.focus();
	      }
	    }
	    return () => {
	      // restoreLastFocus()
	      if (!disableRestoreFocus) {
	        // In IE11 it is possible for document.activeElement to be null resulting
	        // in nodeToRestore.current being null.
	        // Not all elements in IE11 have a focus method.
	        // Once IE11 support is dropped the focus() call can be unconditional.
	        if (nodeToRestore.current && nodeToRestore.current.focus) {
	          ignoreNextEnforceFocus.current = true;
	          nodeToRestore.current.focus();
	        }
	        nodeToRestore.current = null;
	      }
	    };
	    // Missing `disableRestoreFocus` which is fine.
	    // We don't support changing that prop on an open FocusTrap
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [open]);
	  reactExports.useEffect(() => {
	    // We might render an empty child.
	    if (!open || !rootRef.current) {
	      return;
	    }
	    const doc = ownerDocument(rootRef.current);
	    const loopFocus = nativeEvent => {
	      lastKeydown.current = nativeEvent;
	      if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== 'Tab') {
	        return;
	      }

	      // Make sure the next tab starts from the right place.
	      // doc.activeElement refers to the origin.
	      if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
	        // We need to ignore the next contain as
	        // it will try to move the focus back to the rootRef element.
	        ignoreNextEnforceFocus.current = true;
	        if (sentinelEnd.current) {
	          sentinelEnd.current.focus();
	        }
	      }
	    };
	    const contain = () => {
	      const rootElement = rootRef.current;

	      // Cleanup functions are executed lazily in React 17.
	      // Contain can be called between the component being unmounted and its cleanup function being run.
	      if (rootElement === null) {
	        return;
	      }
	      if (!doc.hasFocus() || !isEnabled() || ignoreNextEnforceFocus.current) {
	        ignoreNextEnforceFocus.current = false;
	        return;
	      }

	      // The focus is already inside
	      if (rootElement.contains(doc.activeElement)) {
	        return;
	      }

	      // The disableEnforceFocus is set and the focus is outside of the focus trap (and sentinel nodes)
	      if (disableEnforceFocus && doc.activeElement !== sentinelStart.current && doc.activeElement !== sentinelEnd.current) {
	        return;
	      }

	      // if the focus event is not coming from inside the children's react tree, reset the refs
	      if (doc.activeElement !== reactFocusEventTarget.current) {
	        reactFocusEventTarget.current = null;
	      } else if (reactFocusEventTarget.current !== null) {
	        return;
	      }
	      if (!activated.current) {
	        return;
	      }
	      let tabbable = [];
	      if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
	        tabbable = getTabbable(rootRef.current);
	      }

	      // one of the sentinel nodes was focused, so move the focus
	      // to the first/last tabbable element inside the focus trap
	      if (tabbable.length > 0) {
	        var _lastKeydown$current, _lastKeydown$current2;
	        const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === 'Tab');
	        const focusNext = tabbable[0];
	        const focusPrevious = tabbable[tabbable.length - 1];
	        if (typeof focusNext !== 'string' && typeof focusPrevious !== 'string') {
	          if (isShiftTab) {
	            focusPrevious.focus();
	          } else {
	            focusNext.focus();
	          }
	        }
	        // no tabbable elements in the trap focus or the focus was outside of the focus trap
	      } else {
	        rootElement.focus();
	      }
	    };
	    doc.addEventListener('focusin', contain);
	    doc.addEventListener('keydown', loopFocus, true);

	    // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area.
	    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.
	    // Instead, we can look if the active element was restored on the BODY element.
	    //
	    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:
	    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.
	    const interval = setInterval(() => {
	      if (doc.activeElement && doc.activeElement.tagName === 'BODY') {
	        contain();
	      }
	    }, 50);
	    return () => {
	      clearInterval(interval);
	      doc.removeEventListener('focusin', contain);
	      doc.removeEventListener('keydown', loopFocus, true);
	    };
	  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
	  const onFocus = event => {
	    if (nodeToRestore.current === null) {
	      nodeToRestore.current = event.relatedTarget;
	    }
	    activated.current = true;
	    reactFocusEventTarget.current = event.target;
	    const childrenPropsHandler = children.props.onFocus;
	    if (childrenPropsHandler) {
	      childrenPropsHandler(event);
	    }
	  };
	  const handleFocusSentinel = event => {
	    if (nodeToRestore.current === null) {
	      nodeToRestore.current = event.relatedTarget;
	    }
	    activated.current = true;
	  };
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx("div", {
	      tabIndex: open ? 0 : -1,
	      onFocus: handleFocusSentinel,
	      ref: sentinelStart,
	      "data-testid": "sentinelStart"
	    }), /*#__PURE__*/reactExports.cloneElement(children, {
	      ref: handleRef,
	      onFocus
	    }), /*#__PURE__*/jsxRuntimeExports.jsx("div", {
	      tabIndex: open ? 0 : -1,
	      onFocus: handleFocusSentinel,
	      ref: sentinelEnd,
	      "data-testid": "sentinelEnd"
	    })]
	  });
	}
	process.env.NODE_ENV !== "production" ? FocusTrap.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------
	  /**
	   * A single child content element.
	   */
	  children: elementAcceptingRef$1,
	  /**
	   * If `true`, the focus trap will not automatically shift focus to itself when it opens, and
	   * replace it to the last focused element when it closes.
	   * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.
	   *
	   * Generally this should never be set to `true` as it makes the focus trap less
	   * accessible to assistive technologies, like screen readers.
	   * @default false
	   */
	  disableAutoFocus: PropTypes.bool,
	  /**
	   * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.
	   *
	   * Generally this should never be set to `true` as it makes the focus trap less
	   * accessible to assistive technologies, like screen readers.
	   * @default false
	   */
	  disableEnforceFocus: PropTypes.bool,
	  /**
	   * If `true`, the focus trap will not restore focus to previously focused element once
	   * focus trap is hidden or unmounted.
	   * @default false
	   */
	  disableRestoreFocus: PropTypes.bool,
	  /**
	   * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
	   * For instance, you can provide the "tabbable" npm dependency.
	   * @param {HTMLElement} root
	   */
	  getTabbable: PropTypes.func,
	  /**
	   * This prop extends the `open` prop.
	   * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
	   * This prop should be memoized.
	   * It can be used to support multiple focus trap mounted at the same time.
	   * @default function defaultIsEnabled(): boolean {
	   *   return true;
	   * }
	   */
	  isEnabled: PropTypes.func,
	  /**
	   * If `true`, focus is locked.
	   */
	  open: PropTypes.bool.isRequired
	} : void 0;
	if (process.env.NODE_ENV !== 'production') {
	  // eslint-disable-next-line
	  FocusTrap['propTypes' + ''] = exactProp(FocusTrap.propTypes);
	}

	function getContainer$1(container) {
	  return typeof container === 'function' ? container() : container;
	}

	/**
	 * Portals provide a first-class way to render children into a DOM node
	 * that exists outside the DOM hierarchy of the parent component.
	 *
	 * Demos:
	 *
	 * - [Portal](https://mui.com/base-ui/react-portal/)
	 *
	 * API:
	 *
	 * - [Portal API](https://mui.com/base-ui/react-portal/components-api/#portal)
	 */
	const Portal = /*#__PURE__*/reactExports.forwardRef(function Portal(props, forwardedRef) {
	  const {
	    children,
	    container,
	    disablePortal = false
	  } = props;
	  const [mountNode, setMountNode] = reactExports.useState(null);
	  // @ts-expect-error TODO upstream fix
	  const handleRef = useForkRef( /*#__PURE__*/reactExports.isValidElement(children) ? children.ref : null, forwardedRef);
	  useEnhancedEffect$1(() => {
	    if (!disablePortal) {
	      setMountNode(getContainer$1(container) || document.body);
	    }
	  }, [container, disablePortal]);
	  useEnhancedEffect$1(() => {
	    if (mountNode && !disablePortal) {
	      setRef(forwardedRef, mountNode);
	      return () => {
	        setRef(forwardedRef, null);
	      };
	    }
	    return undefined;
	  }, [forwardedRef, mountNode, disablePortal]);
	  if (disablePortal) {
	    if ( /*#__PURE__*/reactExports.isValidElement(children)) {
	      const newProps = {
	        ref: handleRef
	      };
	      return /*#__PURE__*/reactExports.cloneElement(children, newProps);
	    }
	    return /*#__PURE__*/jsxRuntimeExports.jsx(reactExports.Fragment, {
	      children: children
	    });
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsx(reactExports.Fragment, {
	    children: mountNode ? /*#__PURE__*/reactDomExports.createPortal(children, mountNode) : mountNode
	  });
	});
	process.env.NODE_ENV !== "production" ? Portal.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------
	  /**
	   * The children to render into the `container`.
	   */
	  children: PropTypes.node,
	  /**
	   * An HTML element or function that returns one.
	   * The `container` will have the portal children appended to it.
	   *
	   * By default, it uses the body of the top-level document object,
	   * so it's simply `document.body` most of the time.
	   */
	  container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),
	  /**
	   * The `children` will be under the DOM hierarchy of the parent component.
	   * @default false
	   */
	  disablePortal: PropTypes.bool
	} : void 0;
	if (process.env.NODE_ENV !== 'production') {
	  // eslint-disable-next-line
	  Portal['propTypes' + ''] = exactProp(Portal.propTypes);
	}

	// Is a vertical scrollbar displayed?
	function isOverflowing(container) {
	  const doc = ownerDocument(container);
	  if (doc.body === container) {
	    return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
	  }
	  return container.scrollHeight > container.clientHeight;
	}
	function ariaHidden(element, show) {
	  if (show) {
	    element.setAttribute('aria-hidden', 'true');
	  } else {
	    element.removeAttribute('aria-hidden');
	  }
	}
	function getPaddingRight(element) {
	  return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
	}
	function isAriaHiddenForbiddenOnElement(element) {
	  // The forbidden HTML tags are the ones from ARIA specification that
	  // can be children of body and can't have aria-hidden attribute.
	  // cf. https://www.w3.org/TR/html-aria/#docconformance
	  const forbiddenTagNames = ['TEMPLATE', 'SCRIPT', 'STYLE', 'LINK', 'MAP', 'META', 'NOSCRIPT', 'PICTURE', 'COL', 'COLGROUP', 'PARAM', 'SLOT', 'SOURCE', 'TRACK'];
	  const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
	  const isInputHidden = element.tagName === 'INPUT' && element.getAttribute('type') === 'hidden';
	  return isForbiddenTagName || isInputHidden;
	}
	function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {
	  const blacklist = [mountElement, currentElement, ...elementsToExclude];
	  [].forEach.call(container.children, element => {
	    const isNotExcludedElement = blacklist.indexOf(element) === -1;
	    const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
	    if (isNotExcludedElement && isNotForbiddenElement) {
	      ariaHidden(element, show);
	    }
	  });
	}
	function findIndexOf(items, callback) {
	  let idx = -1;
	  items.some((item, index) => {
	    if (callback(item)) {
	      idx = index;
	      return true;
	    }
	    return false;
	  });
	  return idx;
	}
	function handleContainer(containerInfo, props) {
	  const restoreStyle = [];
	  const container = containerInfo.container;
	  if (!props.disableScrollLock) {
	    if (isOverflowing(container)) {
	      // Compute the size before applying overflow hidden to avoid any scroll jumps.
	      const scrollbarSize = getScrollbarSize(ownerDocument(container));
	      restoreStyle.push({
	        value: container.style.paddingRight,
	        property: 'padding-right',
	        el: container
	      });
	      // Use computed style, here to get the real padding to add our scrollbar width.
	      container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;

	      // .mui-fixed is a global helper.
	      const fixedElements = ownerDocument(container).querySelectorAll('.mui-fixed');
	      [].forEach.call(fixedElements, element => {
	        restoreStyle.push({
	          value: element.style.paddingRight,
	          property: 'padding-right',
	          el: element
	        });
	        element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
	      });
	    }
	    let scrollContainer;
	    if (container.parentNode instanceof DocumentFragment) {
	      scrollContainer = ownerDocument(container).body;
	    } else {
	      // Support html overflow-y: auto for scroll stability between pages
	      // https://css-tricks.com/snippets/css/force-vertical-scrollbar/
	      const parent = container.parentElement;
	      const containerWindow = ownerWindow(container);
	      scrollContainer = (parent == null ? void 0 : parent.nodeName) === 'HTML' && containerWindow.getComputedStyle(parent).overflowY === 'scroll' ? parent : container;
	    }

	    // Block the scroll even if no scrollbar is visible to account for mobile keyboard
	    // screensize shrink.
	    restoreStyle.push({
	      value: scrollContainer.style.overflow,
	      property: 'overflow',
	      el: scrollContainer
	    }, {
	      value: scrollContainer.style.overflowX,
	      property: 'overflow-x',
	      el: scrollContainer
	    }, {
	      value: scrollContainer.style.overflowY,
	      property: 'overflow-y',
	      el: scrollContainer
	    });
	    scrollContainer.style.overflow = 'hidden';
	  }
	  const restore = () => {
	    restoreStyle.forEach(({
	      value,
	      el,
	      property
	    }) => {
	      if (value) {
	        el.style.setProperty(property, value);
	      } else {
	        el.style.removeProperty(property);
	      }
	    });
	  };
	  return restore;
	}
	function getHiddenSiblings(container) {
	  const hiddenSiblings = [];
	  [].forEach.call(container.children, element => {
	    if (element.getAttribute('aria-hidden') === 'true') {
	      hiddenSiblings.push(element);
	    }
	  });
	  return hiddenSiblings;
	}
	/**
	 * @ignore - do not document.
	 *
	 * Proper state management for containers and the modals in those containers.
	 * Simplified, but inspired by react-overlay's ModalManager class.
	 * Used by the Modal to ensure proper styling of containers.
	 */
	class ModalManager {
	  constructor() {
	    this.containers = void 0;
	    this.modals = void 0;
	    this.modals = [];
	    this.containers = [];
	  }
	  add(modal, container) {
	    let modalIndex = this.modals.indexOf(modal);
	    if (modalIndex !== -1) {
	      return modalIndex;
	    }
	    modalIndex = this.modals.length;
	    this.modals.push(modal);

	    // If the modal we are adding is already in the DOM.
	    if (modal.modalRef) {
	      ariaHidden(modal.modalRef, false);
	    }
	    const hiddenSiblings = getHiddenSiblings(container);
	    ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
	    const containerIndex = findIndexOf(this.containers, item => item.container === container);
	    if (containerIndex !== -1) {
	      this.containers[containerIndex].modals.push(modal);
	      return modalIndex;
	    }
	    this.containers.push({
	      modals: [modal],
	      container,
	      restore: null,
	      hiddenSiblings
	    });
	    return modalIndex;
	  }
	  mount(modal, props) {
	    const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
	    const containerInfo = this.containers[containerIndex];
	    if (!containerInfo.restore) {
	      containerInfo.restore = handleContainer(containerInfo, props);
	    }
	  }
	  remove(modal, ariaHiddenState = true) {
	    const modalIndex = this.modals.indexOf(modal);
	    if (modalIndex === -1) {
	      return modalIndex;
	    }
	    const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
	    const containerInfo = this.containers[containerIndex];
	    containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
	    this.modals.splice(modalIndex, 1);

	    // If that was the last modal in a container, clean up the container.
	    if (containerInfo.modals.length === 0) {
	      // The modal might be closed before it had the chance to be mounted in the DOM.
	      if (containerInfo.restore) {
	        containerInfo.restore();
	      }
	      if (modal.modalRef) {
	        // In case the modal wasn't in the DOM yet.
	        ariaHidden(modal.modalRef, ariaHiddenState);
	      }
	      ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
	      this.containers.splice(containerIndex, 1);
	    } else {
	      // Otherwise make sure the next top modal is visible to a screen reader.
	      const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
	      // as soon as a modal is adding its modalRef is undefined. it can't set
	      // aria-hidden because the dom element doesn't exist either
	      // when modal was unmounted before modalRef gets null
	      if (nextTop.modalRef) {
	        ariaHidden(nextTop.modalRef, false);
	      }
	    }
	    return modalIndex;
	  }
	  isTopModal(modal) {
	    return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
	  }
	}

	function getContainer(container) {
	  return typeof container === 'function' ? container() : container;
	}
	function getHasTransition(children) {
	  return children ? children.props.hasOwnProperty('in') : false;
	}

	// A modal manager used to track and manage the state of open Modals.
	// Modals don't open on the server so this won't conflict with concurrent requests.
	const defaultManager = new ModalManager();
	/**
	 *
	 * Demos:
	 *
	 * - [Modal](https://mui.com/base-ui/react-modal/#hook)
	 *
	 * API:
	 *
	 * - [useModal API](https://mui.com/base-ui/react-modal/hooks-api/#use-modal)
	 */
	function useModal(parameters) {
	  const {
	    container,
	    disableEscapeKeyDown = false,
	    disableScrollLock = false,
	    // @ts-ignore internal logic - Base UI supports the manager as a prop too
	    manager = defaultManager,
	    closeAfterTransition = false,
	    onTransitionEnter,
	    onTransitionExited,
	    children,
	    onClose,
	    open,
	    rootRef
	  } = parameters;

	  // @ts-ignore internal logic
	  const modal = reactExports.useRef({});
	  const mountNodeRef = reactExports.useRef(null);
	  const modalRef = reactExports.useRef(null);
	  const handleRef = useForkRef(modalRef, rootRef);
	  const [exited, setExited] = reactExports.useState(!open);
	  const hasTransition = getHasTransition(children);
	  let ariaHiddenProp = true;
	  if (parameters['aria-hidden'] === 'false' || parameters['aria-hidden'] === false) {
	    ariaHiddenProp = false;
	  }
	  const getDoc = () => ownerDocument(mountNodeRef.current);
	  const getModal = () => {
	    modal.current.modalRef = modalRef.current;
	    modal.current.mount = mountNodeRef.current;
	    return modal.current;
	  };
	  const handleMounted = () => {
	    manager.mount(getModal(), {
	      disableScrollLock
	    });

	    // Fix a bug on Chrome where the scroll isn't initially 0.
	    if (modalRef.current) {
	      modalRef.current.scrollTop = 0;
	    }
	  };
	  const handleOpen = useEventCallback(() => {
	    const resolvedContainer = getContainer(container) || getDoc().body;
	    manager.add(getModal(), resolvedContainer);

	    // The element was already mounted.
	    if (modalRef.current) {
	      handleMounted();
	    }
	  });
	  const isTopModal = reactExports.useCallback(() => manager.isTopModal(getModal()), [manager]);
	  const handlePortalRef = useEventCallback(node => {
	    mountNodeRef.current = node;
	    if (!node) {
	      return;
	    }
	    if (open && isTopModal()) {
	      handleMounted();
	    } else if (modalRef.current) {
	      ariaHidden(modalRef.current, ariaHiddenProp);
	    }
	  });
	  const handleClose = reactExports.useCallback(() => {
	    manager.remove(getModal(), ariaHiddenProp);
	  }, [ariaHiddenProp, manager]);
	  reactExports.useEffect(() => {
	    return () => {
	      handleClose();
	    };
	  }, [handleClose]);
	  reactExports.useEffect(() => {
	    if (open) {
	      handleOpen();
	    } else if (!hasTransition || !closeAfterTransition) {
	      handleClose();
	    }
	  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
	  const createHandleKeyDown = otherHandlers => event => {
	    var _otherHandlers$onKeyD;
	    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);

	    // The handler doesn't take event.defaultPrevented into account:
	    //
	    // event.preventDefault() is meant to stop default behaviors like
	    // clicking a checkbox to check it, hitting a button to submit a form,
	    // and hitting left arrow to move the cursor in a text input etc.
	    // Only special HTML elements have these default behaviors.
	    if (event.key !== 'Escape' || !isTopModal()) {
	      return;
	    }
	    if (!disableEscapeKeyDown) {
	      // Swallow the event, in case someone is listening for the escape key on the body.
	      event.stopPropagation();
	      if (onClose) {
	        onClose(event, 'escapeKeyDown');
	      }
	    }
	  };
	  const createHandleBackdropClick = otherHandlers => event => {
	    var _otherHandlers$onClic;
	    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
	    if (event.target !== event.currentTarget) {
	      return;
	    }
	    if (onClose) {
	      onClose(event, 'backdropClick');
	    }
	  };
	  const getRootProps = (otherHandlers = {}) => {
	    const propsEventHandlers = extractEventHandlers(parameters);

	    // The custom event handlers shouldn't be spread on the root element
	    delete propsEventHandlers.onTransitionEnter;
	    delete propsEventHandlers.onTransitionExited;
	    const externalEventHandlers = _extends$2({}, propsEventHandlers, otherHandlers);
	    return _extends$2({
	      role: 'presentation'
	    }, externalEventHandlers, {
	      onKeyDown: createHandleKeyDown(externalEventHandlers),
	      ref: handleRef
	    });
	  };
	  const getBackdropProps = (otherHandlers = {}) => {
	    const externalEventHandlers = otherHandlers;
	    return _extends$2({
	      'aria-hidden': true
	    }, externalEventHandlers, {
	      onClick: createHandleBackdropClick(externalEventHandlers),
	      open
	    });
	  };
	  const getTransitionProps = () => {
	    const handleEnter = () => {
	      setExited(false);
	      if (onTransitionEnter) {
	        onTransitionEnter();
	      }
	    };
	    const handleExited = () => {
	      setExited(true);
	      if (onTransitionExited) {
	        onTransitionExited();
	      }
	      if (closeAfterTransition) {
	        handleClose();
	      }
	    };
	    return {
	      onEnter: createChainedFunction(handleEnter, children == null ? void 0 : children.props.onEnter),
	      onExited: createChainedFunction(handleExited, children == null ? void 0 : children.props.onExited)
	    };
	  };
	  return {
	    getRootProps,
	    getBackdropProps,
	    getTransitionProps,
	    rootRef: handleRef,
	    portalRef: handlePortalRef,
	    isTopModal,
	    exited,
	    hasTransition
	  };
	}

	function getBadgeUtilityClass(slot) {
	  return generateUtilityClass('MuiBadge', slot);
	}
	const badgeClasses = generateUtilityClasses('MuiBadge', ['root', 'badge', 'dot', 'standard', 'anchorOriginTopRight', 'anchorOriginBottomRight', 'anchorOriginTopLeft', 'anchorOriginBottomLeft', 'invisible', 'colorError', 'colorInfo', 'colorPrimary', 'colorSecondary', 'colorSuccess', 'colorWarning', 'overlapRectangular', 'overlapCircular',
	// TODO: v6 remove the overlap value from these class keys
	'anchorOriginTopLeftCircular', 'anchorOriginTopLeftRectangular', 'anchorOriginTopRightCircular', 'anchorOriginTopRightRectangular', 'anchorOriginBottomLeftCircular', 'anchorOriginBottomLeftRectangular', 'anchorOriginBottomRightCircular', 'anchorOriginBottomRightRectangular']);
	var badgeClasses$1 = badgeClasses;

	const _excluded$w = ["anchorOrigin", "className", "classes", "component", "components", "componentsProps", "children", "overlap", "color", "invisible", "max", "badgeContent", "slots", "slotProps", "showZero", "variant"];
	const RADIUS_STANDARD = 10;
	const RADIUS_DOT = 4;
	const useUtilityClasses$p = ownerState => {
	  const {
	    color,
	    anchorOrigin,
	    invisible,
	    overlap,
	    variant,
	    classes = {}
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    badge: ['badge', variant, invisible && 'invisible', `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}`, `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}${capitalize(overlap)}`, `overlap${capitalize(overlap)}`, color !== 'default' && `color${capitalize(color)}`]
	  };
	  return composeClasses(slots, getBadgeUtilityClass, classes);
	};
	const BadgeRoot = styled$1('span', {
	  name: 'MuiBadge',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  position: 'relative',
	  display: 'inline-flex',
	  // For correct alignment with the text.
	  verticalAlign: 'middle',
	  flexShrink: 0
	});
	const BadgeBadge = styled$1('span', {
	  name: 'MuiBadge',
	  slot: 'Badge',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.badge, styles[ownerState.variant], styles[`anchorOrigin${capitalize(ownerState.anchorOrigin.vertical)}${capitalize(ownerState.anchorOrigin.horizontal)}${capitalize(ownerState.overlap)}`], ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], ownerState.invisible && styles.invisible];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends$2({
	  display: 'flex',
	  flexDirection: 'row',
	  flexWrap: 'wrap',
	  justifyContent: 'center',
	  alignContent: 'center',
	  alignItems: 'center',
	  position: 'absolute',
	  boxSizing: 'border-box',
	  fontFamily: theme.typography.fontFamily,
	  fontWeight: theme.typography.fontWeightMedium,
	  fontSize: theme.typography.pxToRem(12),
	  minWidth: RADIUS_STANDARD * 2,
	  lineHeight: 1,
	  padding: '0 6px',
	  height: RADIUS_STANDARD * 2,
	  borderRadius: RADIUS_STANDARD,
	  zIndex: 1,
	  // Render the badge on top of potential ripples.
	  transition: theme.transitions.create('transform', {
	    easing: theme.transitions.easing.easeInOut,
	    duration: theme.transitions.duration.enteringScreen
	  })
	}, ownerState.color !== 'default' && {
	  backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
	  color: (theme.vars || theme).palette[ownerState.color].contrastText
	}, ownerState.variant === 'dot' && {
	  borderRadius: RADIUS_DOT,
	  height: RADIUS_DOT * 2,
	  minWidth: RADIUS_DOT * 2,
	  padding: 0
	}, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'rectangular' && {
	  top: 0,
	  right: 0,
	  transform: 'scale(1) translate(50%, -50%)',
	  transformOrigin: '100% 0%',
	  [`&.${badgeClasses$1.invisible}`]: {
	    transform: 'scale(0) translate(50%, -50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'rectangular' && {
	  bottom: 0,
	  right: 0,
	  transform: 'scale(1) translate(50%, 50%)',
	  transformOrigin: '100% 100%',
	  [`&.${badgeClasses$1.invisible}`]: {
	    transform: 'scale(0) translate(50%, 50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'rectangular' && {
	  top: 0,
	  left: 0,
	  transform: 'scale(1) translate(-50%, -50%)',
	  transformOrigin: '0% 0%',
	  [`&.${badgeClasses$1.invisible}`]: {
	    transform: 'scale(0) translate(-50%, -50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'rectangular' && {
	  bottom: 0,
	  left: 0,
	  transform: 'scale(1) translate(-50%, 50%)',
	  transformOrigin: '0% 100%',
	  [`&.${badgeClasses$1.invisible}`]: {
	    transform: 'scale(0) translate(-50%, 50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'circular' && {
	  top: '14%',
	  right: '14%',
	  transform: 'scale(1) translate(50%, -50%)',
	  transformOrigin: '100% 0%',
	  [`&.${badgeClasses$1.invisible}`]: {
	    transform: 'scale(0) translate(50%, -50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'circular' && {
	  bottom: '14%',
	  right: '14%',
	  transform: 'scale(1) translate(50%, 50%)',
	  transformOrigin: '100% 100%',
	  [`&.${badgeClasses$1.invisible}`]: {
	    transform: 'scale(0) translate(50%, 50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'circular' && {
	  top: '14%',
	  left: '14%',
	  transform: 'scale(1) translate(-50%, -50%)',
	  transformOrigin: '0% 0%',
	  [`&.${badgeClasses$1.invisible}`]: {
	    transform: 'scale(0) translate(-50%, -50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'circular' && {
	  bottom: '14%',
	  left: '14%',
	  transform: 'scale(1) translate(-50%, 50%)',
	  transformOrigin: '0% 100%',
	  [`&.${badgeClasses$1.invisible}`]: {
	    transform: 'scale(0) translate(-50%, 50%)'
	  }
	}, ownerState.invisible && {
	  transition: theme.transitions.create('transform', {
	    easing: theme.transitions.easing.easeInOut,
	    duration: theme.transitions.duration.leavingScreen
	  })
	}));
	const Badge = /*#__PURE__*/reactExports.forwardRef(function Badge(inProps, ref) {
	  var _ref, _slots$root, _ref2, _slots$badge, _slotProps$root, _slotProps$badge;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiBadge'
	  });
	  const {
	      anchorOrigin: anchorOriginProp = {
	        vertical: 'top',
	        horizontal: 'right'
	      },
	      className,
	      component,
	      components = {},
	      componentsProps = {},
	      children,
	      overlap: overlapProp = 'rectangular',
	      color: colorProp = 'default',
	      invisible: invisibleProp = false,
	      max: maxProp = 99,
	      badgeContent: badgeContentProp,
	      slots,
	      slotProps,
	      showZero = false,
	      variant: variantProp = 'standard'
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$w);
	  const {
	    badgeContent,
	    invisible: invisibleFromHook,
	    max,
	    displayValue: displayValueFromHook
	  } = useBadge({
	    max: maxProp,
	    invisible: invisibleProp,
	    badgeContent: badgeContentProp,
	    showZero
	  });
	  const prevProps = usePreviousProps$1({
	    anchorOrigin: anchorOriginProp,
	    color: colorProp,
	    overlap: overlapProp,
	    variant: variantProp,
	    badgeContent: badgeContentProp
	  });
	  const invisible = invisibleFromHook || badgeContent == null && variantProp !== 'dot';
	  const {
	    color = colorProp,
	    overlap = overlapProp,
	    anchorOrigin = anchorOriginProp,
	    variant = variantProp
	  } = invisible ? prevProps : props;
	  const displayValue = variant !== 'dot' ? displayValueFromHook : undefined;
	  const ownerState = _extends$2({}, props, {
	    badgeContent,
	    invisible,
	    max,
	    displayValue,
	    showZero,
	    anchorOrigin,
	    color,
	    overlap,
	    variant
	  });
	  const classes = useUtilityClasses$p(ownerState);

	  // support both `slots` and `components` for backward compatibility
	  const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : BadgeRoot;
	  const BadgeSlot = (_ref2 = (_slots$badge = slots == null ? void 0 : slots.badge) != null ? _slots$badge : components.Badge) != null ? _ref2 : BadgeBadge;
	  const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
	  const badgeSlotProps = (_slotProps$badge = slotProps == null ? void 0 : slotProps.badge) != null ? _slotProps$badge : componentsProps.badge;
	  const rootProps = useSlotProps({
	    elementType: RootSlot,
	    externalSlotProps: rootSlotProps,
	    externalForwardedProps: other,
	    additionalProps: {
	      ref,
	      as: component
	    },
	    ownerState,
	    className: clsx(rootSlotProps == null ? void 0 : rootSlotProps.className, classes.root, className)
	  });
	  const badgeProps = useSlotProps({
	    elementType: BadgeSlot,
	    externalSlotProps: badgeSlotProps,
	    ownerState,
	    className: clsx(classes.badge, badgeSlotProps == null ? void 0 : badgeSlotProps.className)
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(RootSlot, _extends$2({}, rootProps, {
	    children: [children, /*#__PURE__*/jsxRuntimeExports.jsx(BadgeSlot, _extends$2({}, badgeProps, {
	      children: displayValue
	    }))]
	  }));
	});
	process.env.NODE_ENV !== "production" ? Badge.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * The anchor of the badge.
	   * @default {
	   *   vertical: 'top',
	   *   horizontal: 'right',
	   * }
	   */
	  anchorOrigin: PropTypes.shape({
	    horizontal: PropTypes.oneOf(['left', 'right']).isRequired,
	    vertical: PropTypes.oneOf(['bottom', 'top']).isRequired
	  }),
	  /**
	   * The content rendered within the badge.
	   */
	  badgeContent: PropTypes.node,
	  /**
	   * The badge will be added relative to this node.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
	   * @default 'default'
	   */
	  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),
	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: PropTypes.elementType,
	  /**
	   * The components used for each slot inside.
	   *
	   * This prop is an alias for the `slots` prop.
	   * It's recommended to use the `slots` prop instead.
	   *
	   * @default {}
	   */
	  components: PropTypes.shape({
	    Badge: PropTypes.elementType,
	    Root: PropTypes.elementType
	  }),
	  /**
	   * The extra props for the slot components.
	   * You can override the existing props or add new ones.
	   *
	   * This prop is an alias for the `slotProps` prop.
	   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
	   *
	   * @default {}
	   */
	  componentsProps: PropTypes.shape({
	    badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
	    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
	  }),
	  /**
	   * If `true`, the badge is invisible.
	   * @default false
	   */
	  invisible: PropTypes.bool,
	  /**
	   * Max count to show.
	   * @default 99
	   */
	  max: PropTypes.number,
	  /**
	   * Wrapped shape the badge should overlap.
	   * @default 'rectangular'
	   */
	  overlap: PropTypes.oneOf(['circular', 'rectangular']),
	  /**
	   * Controls whether the badge is hidden when `badgeContent` is zero.
	   * @default false
	   */
	  showZero: PropTypes.bool,
	  /**
	   * The props used for each slot inside the Badge.
	   * @default {}
	   */
	  slotProps: PropTypes.shape({
	    badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
	    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
	  }),
	  /**
	   * The components used for each slot inside the Badge.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  slots: PropTypes.shape({
	    badge: PropTypes.elementType,
	    root: PropTypes.elementType
	  }),
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * The variant to use.
	   * @default 'standard'
	   */
	  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['dot', 'standard']), PropTypes.string])
	} : void 0;
	var Badge$1 = Badge;

	function getTypographyUtilityClass(slot) {
	  return generateUtilityClass('MuiTypography', slot);
	}
	generateUtilityClasses('MuiTypography', ['root', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'inherit', 'button', 'caption', 'overline', 'alignLeft', 'alignRight', 'alignCenter', 'alignJustify', 'noWrap', 'gutterBottom', 'paragraph']);

	const _excluded$v = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
	const useUtilityClasses$o = ownerState => {
	  const {
	    align,
	    gutterBottom,
	    noWrap,
	    paragraph,
	    variant,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, ownerState.align !== 'inherit' && `align${capitalize(align)}`, gutterBottom && 'gutterBottom', noWrap && 'noWrap', paragraph && 'paragraph']
	  };
	  return composeClasses(slots, getTypographyUtilityClass, classes);
	};
	const TypographyRoot = styled$1('span', {
	  name: 'MuiTypography',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== 'inherit' && styles[`align${capitalize(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends$2({
	  margin: 0
	}, ownerState.variant === 'inherit' && {
	  // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
	  font: 'inherit'
	}, ownerState.variant !== 'inherit' && theme.typography[ownerState.variant], ownerState.align !== 'inherit' && {
	  textAlign: ownerState.align
	}, ownerState.noWrap && {
	  overflow: 'hidden',
	  textOverflow: 'ellipsis',
	  whiteSpace: 'nowrap'
	}, ownerState.gutterBottom && {
	  marginBottom: '0.35em'
	}, ownerState.paragraph && {
	  marginBottom: 16
	}));
	const defaultVariantMapping = {
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  subtitle1: 'h6',
	  subtitle2: 'h6',
	  body1: 'p',
	  body2: 'p',
	  inherit: 'p'
	};

	// TODO v6: deprecate these color values in v5.x and remove the transformation in v6
	const colorTransformations$1 = {
	  primary: 'primary.main',
	  textPrimary: 'text.primary',
	  secondary: 'secondary.main',
	  textSecondary: 'text.secondary',
	  error: 'error.main'
	};
	const transformDeprecatedColors$1 = color => {
	  return colorTransformations$1[color] || color;
	};
	const Typography = /*#__PURE__*/reactExports.forwardRef(function Typography(inProps, ref) {
	  const themeProps = useThemeProps({
	    props: inProps,
	    name: 'MuiTypography'
	  });
	  const color = transformDeprecatedColors$1(themeProps.color);
	  const props = extendSxProp(_extends$2({}, themeProps, {
	    color
	  }));
	  const {
	      align = 'inherit',
	      className,
	      component,
	      gutterBottom = false,
	      noWrap = false,
	      paragraph = false,
	      variant = 'body1',
	      variantMapping = defaultVariantMapping
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$v);
	  const ownerState = _extends$2({}, props, {
	    align,
	    color,
	    className,
	    component,
	    gutterBottom,
	    noWrap,
	    paragraph,
	    variant,
	    variantMapping
	  });
	  const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';
	  const classes = useUtilityClasses$o(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(TypographyRoot, _extends$2({
	    as: Component,
	    ref: ref,
	    ownerState: ownerState,
	    className: clsx(classes.root, className)
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? Typography.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * Set the text-align on the component.
	   * @default 'inherit'
	   */
	  align: PropTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),
	  /**
	   * The content of the component.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: PropTypes.elementType,
	  /**
	   * If `true`, the text will have a bottom margin.
	   * @default false
	   */
	  gutterBottom: PropTypes.bool,
	  /**
	   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
	   *
	   * Note that text overflow can only happen with block or inline-block level elements
	   * (the element needs to have a width in order to overflow).
	   * @default false
	   */
	  noWrap: PropTypes.bool,
	  /**
	   * If `true`, the element will be a paragraph element.
	   * @default false
	   */
	  paragraph: PropTypes.bool,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * Applies the theme typography styles.
	   * @default 'body1'
	   */
	  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string]),
	  /**
	   * The component maps the variant prop to a range of different HTML element types.
	   * For instance, subtitle1 to `<h6>`.
	   * If you wish to change that mapping, you can provide your own.
	   * Alternatively, you can use the `component` prop.
	   * @default {
	   *   h1: 'h1',
	   *   h2: 'h2',
	   *   h3: 'h3',
	   *   h4: 'h4',
	   *   h5: 'h5',
	   *   h6: 'h6',
	   *   subtitle1: 'h6',
	   *   subtitle2: 'h6',
	   *   body1: 'p',
	   *   body2: 'p',
	   *   inherit: 'p',
	   * }
	   */
	  variantMapping: PropTypes /* @typescript-to-proptypes-ignore */.object
	} : void 0;
	var Typography$1 = Typography;

	function getLinkUtilityClass(slot) {
	  return generateUtilityClass('MuiLink', slot);
	}
	const linkClasses = generateUtilityClasses('MuiLink', ['root', 'underlineNone', 'underlineHover', 'underlineAlways', 'button', 'focusVisible']);
	var linkClasses$1 = linkClasses;

	const colorTransformations = {
	  primary: 'primary.main',
	  textPrimary: 'text.primary',
	  secondary: 'secondary.main',
	  textSecondary: 'text.secondary',
	  error: 'error.main'
	};
	const transformDeprecatedColors = color => {
	  return colorTransformations[color] || color;
	};
	const getTextDecoration = ({
	  theme,
	  ownerState
	}) => {
	  const transformedColor = transformDeprecatedColors(ownerState.color);
	  const color = getPath(theme, `palette.${transformedColor}`, false) || ownerState.color;
	  const channelColor = getPath(theme, `palette.${transformedColor}Channel`);
	  if ('vars' in theme && channelColor) {
	    return `rgba(${channelColor} / 0.4)`;
	  }
	  return alpha(color, 0.4);
	};
	var getTextDecoration$1 = getTextDecoration;

	const _excluded$u = ["className", "color", "component", "onBlur", "onFocus", "TypographyClasses", "underline", "variant", "sx"];
	const useUtilityClasses$n = ownerState => {
	  const {
	    classes,
	    component,
	    focusVisible,
	    underline
	  } = ownerState;
	  const slots = {
	    root: ['root', `underline${capitalize(underline)}`, component === 'button' && 'button', focusVisible && 'focusVisible']
	  };
	  return composeClasses(slots, getLinkUtilityClass, classes);
	};
	const LinkRoot = styled$1(Typography$1, {
	  name: 'MuiLink',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[`underline${capitalize(ownerState.underline)}`], ownerState.component === 'button' && styles.button];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  return _extends$2({}, ownerState.underline === 'none' && {
	    textDecoration: 'none'
	  }, ownerState.underline === 'hover' && {
	    textDecoration: 'none',
	    '&:hover': {
	      textDecoration: 'underline'
	    }
	  }, ownerState.underline === 'always' && _extends$2({
	    textDecoration: 'underline'
	  }, ownerState.color !== 'inherit' && {
	    textDecorationColor: getTextDecoration$1({
	      theme,
	      ownerState
	    })
	  }, {
	    '&:hover': {
	      textDecorationColor: 'inherit'
	    }
	  }), ownerState.component === 'button' && {
	    position: 'relative',
	    WebkitTapHighlightColor: 'transparent',
	    backgroundColor: 'transparent',
	    // Reset default value
	    // We disable the focus ring for mouse, touch and keyboard users.
	    outline: 0,
	    border: 0,
	    margin: 0,
	    // Remove the margin in Safari
	    borderRadius: 0,
	    padding: 0,
	    // Remove the padding in Firefox
	    cursor: 'pointer',
	    userSelect: 'none',
	    verticalAlign: 'middle',
	    MozAppearance: 'none',
	    // Reset
	    WebkitAppearance: 'none',
	    // Reset
	    '&::-moz-focus-inner': {
	      borderStyle: 'none' // Remove Firefox dotted outline.
	    },

	    [`&.${linkClasses$1.focusVisible}`]: {
	      outline: 'auto'
	    }
	  });
	});
	const Link = /*#__PURE__*/reactExports.forwardRef(function Link(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiLink'
	  });
	  const {
	      className,
	      color = 'primary',
	      component = 'a',
	      onBlur,
	      onFocus,
	      TypographyClasses,
	      underline = 'always',
	      variant = 'inherit',
	      sx
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$u);
	  const {
	    isFocusVisibleRef,
	    onBlur: handleBlurVisible,
	    onFocus: handleFocusVisible,
	    ref: focusVisibleRef
	  } = useIsFocusVisible();
	  const [focusVisible, setFocusVisible] = reactExports.useState(false);
	  const handlerRef = useForkRef(ref, focusVisibleRef);
	  const handleBlur = event => {
	    handleBlurVisible(event);
	    if (isFocusVisibleRef.current === false) {
	      setFocusVisible(false);
	    }
	    if (onBlur) {
	      onBlur(event);
	    }
	  };
	  const handleFocus = event => {
	    handleFocusVisible(event);
	    if (isFocusVisibleRef.current === true) {
	      setFocusVisible(true);
	    }
	    if (onFocus) {
	      onFocus(event);
	    }
	  };
	  const ownerState = _extends$2({}, props, {
	    color,
	    component,
	    focusVisible,
	    underline,
	    variant
	  });
	  const classes = useUtilityClasses$n(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(LinkRoot, _extends$2({
	    color: color,
	    className: clsx(classes.root, className),
	    classes: TypographyClasses,
	    component: component,
	    onBlur: handleBlur,
	    onFocus: handleFocus,
	    ref: handlerRef,
	    ownerState: ownerState,
	    variant: variant,
	    sx: [...(!Object.keys(colorTransformations).includes(color) ? [{
	      color
	    }] : []), ...(Array.isArray(sx) ? sx : [sx])]
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? Link.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * The content of the component.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The color of the link.
	   * @default 'primary'
	   */
	  color: PropTypes /* @typescript-to-proptypes-ignore */.any,
	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: elementTypeAcceptingRef$1,
	  /**
	   * @ignore
	   */
	  onBlur: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onFocus: PropTypes.func,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * `classes` prop applied to the [`Typography`](/material-ui/api/typography/) element.
	   */
	  TypographyClasses: PropTypes.object,
	  /**
	   * Controls when the link should have an underline.
	   * @default 'always'
	   */
	  underline: PropTypes.oneOf(['always', 'hover', 'none']),
	  /**
	   * Applies the theme typography styles.
	   * @default 'inherit'
	   */
	  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string])
	} : void 0;
	var Link$1 = Link;

	/**
	 * @ignore - internal component.
	 */
	const ListContext = /*#__PURE__*/reactExports.createContext({});
	if (process.env.NODE_ENV !== 'production') {
	  ListContext.displayName = 'ListContext';
	}
	var ListContext$1 = ListContext;

	function getListUtilityClass(slot) {
	  return generateUtilityClass('MuiList', slot);
	}
	generateUtilityClasses('MuiList', ['root', 'padding', 'dense', 'subheader']);

	const _excluded$t = ["children", "className", "component", "dense", "disablePadding", "subheader"];
	const useUtilityClasses$m = ownerState => {
	  const {
	    classes,
	    disablePadding,
	    dense,
	    subheader
	  } = ownerState;
	  const slots = {
	    root: ['root', !disablePadding && 'padding', dense && 'dense', subheader && 'subheader']
	  };
	  return composeClasses(slots, getListUtilityClass, classes);
	};
	const ListRoot = styled$1('ul', {
	  name: 'MuiList',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, !ownerState.disablePadding && styles.padding, ownerState.dense && styles.dense, ownerState.subheader && styles.subheader];
	  }
	})(({
	  ownerState
	}) => _extends$2({
	  listStyle: 'none',
	  margin: 0,
	  padding: 0,
	  position: 'relative'
	}, !ownerState.disablePadding && {
	  paddingTop: 8,
	  paddingBottom: 8
	}, ownerState.subheader && {
	  paddingTop: 0
	}));
	const List = /*#__PURE__*/reactExports.forwardRef(function List(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiList'
	  });
	  const {
	      children,
	      className,
	      component = 'ul',
	      dense = false,
	      disablePadding = false,
	      subheader
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$t);
	  const context = reactExports.useMemo(() => ({
	    dense
	  }), [dense]);
	  const ownerState = _extends$2({}, props, {
	    component,
	    dense,
	    disablePadding
	  });
	  const classes = useUtilityClasses$m(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(ListContext$1.Provider, {
	    value: context,
	    children: /*#__PURE__*/jsxRuntimeExports.jsxs(ListRoot, _extends$2({
	      as: component,
	      className: clsx(classes.root, className),
	      ref: ref,
	      ownerState: ownerState
	    }, other, {
	      children: [subheader, children]
	    }))
	  });
	});
	process.env.NODE_ENV !== "production" ? List.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * The content of the component.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: PropTypes.elementType,
	  /**
	   * If `true`, compact vertical padding designed for keyboard and mouse input is used for
	   * the list and list items.
	   * The prop is available to descendant components as the `dense` context.
	   * @default false
	   */
	  dense: PropTypes.bool,
	  /**
	   * If `true`, vertical padding is removed from the list.
	   * @default false
	   */
	  disablePadding: PropTypes.bool,
	  /**
	   * The content of the subheader, normally `ListSubheader`.
	   */
	  subheader: PropTypes.node,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
	} : void 0;
	var List$1 = List;

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };
	  return _setPrototypeOf(o, p);
	}

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  _setPrototypeOf(subClass, superClass);
	}

	var config$3 = {
	  disabled: false
	};

	var timeoutsShape = process.env.NODE_ENV !== 'production' ? PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
	  enter: PropTypes.number,
	  exit: PropTypes.number,
	  appear: PropTypes.number
	}).isRequired]) : null;
	process.env.NODE_ENV !== 'production' ? PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
	  enter: PropTypes.string,
	  exit: PropTypes.string,
	  active: PropTypes.string
	}), PropTypes.shape({
	  enter: PropTypes.string,
	  enterDone: PropTypes.string,
	  enterActive: PropTypes.string,
	  exit: PropTypes.string,
	  exitDone: PropTypes.string,
	  exitActive: PropTypes.string
	})]) : null;

	var TransitionGroupContext = React.createContext(null);

	var forceReflow = function forceReflow(node) {
	  return node.scrollTop;
	};

	var UNMOUNTED = 'unmounted';
	var EXITED = 'exited';
	var ENTERING = 'entering';
	var ENTERED = 'entered';
	var EXITING = 'exiting';
	/**
	 * The Transition component lets you describe a transition from one component
	 * state to another _over time_ with a simple declarative API. Most commonly
	 * it's used to animate the mounting and unmounting of a component, but can also
	 * be used to describe in-place transition states as well.
	 *
	 * ---
	 *
	 * **Note**: `Transition` is a platform-agnostic base component. If you're using
	 * transitions in CSS, you'll probably want to use
	 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
	 * instead. It inherits all the features of `Transition`, but contains
	 * additional features necessary to play nice with CSS transitions (hence the
	 * name of the component).
	 *
	 * ---
	 *
	 * By default the `Transition` component does not alter the behavior of the
	 * component it renders, it only tracks "enter" and "exit" states for the
	 * components. It's up to you to give meaning and effect to those states. For
	 * example we can add styles to a component when it enters or exits:
	 *
	 * ```jsx
	 * import { Transition } from 'react-transition-group';
	 *
	 * const duration = 300;
	 *
	 * const defaultStyle = {
	 *   transition: `opacity ${duration}ms ease-in-out`,
	 *   opacity: 0,
	 * }
	 *
	 * const transitionStyles = {
	 *   entering: { opacity: 1 },
	 *   entered:  { opacity: 1 },
	 *   exiting:  { opacity: 0 },
	 *   exited:  { opacity: 0 },
	 * };
	 *
	 * const Fade = ({ in: inProp }) => (
	 *   <Transition in={inProp} timeout={duration}>
	 *     {state => (
	 *       <div style={{
	 *         ...defaultStyle,
	 *         ...transitionStyles[state]
	 *       }}>
	 *         I'm a fade Transition!
	 *       </div>
	 *     )}
	 *   </Transition>
	 * );
	 * ```
	 *
	 * There are 4 main states a Transition can be in:
	 *  - `'entering'`
	 *  - `'entered'`
	 *  - `'exiting'`
	 *  - `'exited'`
	 *
	 * Transition state is toggled via the `in` prop. When `true` the component
	 * begins the "Enter" stage. During this stage, the component will shift from
	 * its current transition state, to `'entering'` for the duration of the
	 * transition and then to the `'entered'` stage once it's complete. Let's take
	 * the following example (we'll use the
	 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <Transition in={inProp} timeout={500}>
	 *         {state => (
	 *           // ...
	 *         )}
	 *       </Transition>
	 *       <button onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the button is clicked the component will shift to the `'entering'` state
	 * and stay there for 500ms (the value of `timeout`) before it finally switches
	 * to `'entered'`.
	 *
	 * When `in` is `false` the same thing happens except the state moves from
	 * `'exiting'` to `'exited'`.
	 */

	var Transition = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(Transition, _React$Component);

	  function Transition(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;
	    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

	    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
	    var initialStatus;
	    _this.appearStatus = null;

	    if (props.in) {
	      if (appear) {
	        initialStatus = EXITED;
	        _this.appearStatus = ENTERING;
	      } else {
	        initialStatus = ENTERED;
	      }
	    } else {
	      if (props.unmountOnExit || props.mountOnEnter) {
	        initialStatus = UNMOUNTED;
	      } else {
	        initialStatus = EXITED;
	      }
	    }

	    _this.state = {
	      status: initialStatus
	    };
	    _this.nextCallback = null;
	    return _this;
	  }

	  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
	    var nextIn = _ref.in;

	    if (nextIn && prevState.status === UNMOUNTED) {
	      return {
	        status: EXITED
	      };
	    }

	    return null;
	  } // getSnapshotBeforeUpdate(prevProps) {
	  //   let nextStatus = null
	  //   if (prevProps !== this.props) {
	  //     const { status } = this.state
	  //     if (this.props.in) {
	  //       if (status !== ENTERING && status !== ENTERED) {
	  //         nextStatus = ENTERING
	  //       }
	  //     } else {
	  //       if (status === ENTERING || status === ENTERED) {
	  //         nextStatus = EXITING
	  //       }
	  //     }
	  //   }
	  //   return { nextStatus }
	  // }
	  ;

	  var _proto = Transition.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.updateStatus(true, this.appearStatus);
	  };

	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var nextStatus = null;

	    if (prevProps !== this.props) {
	      var status = this.state.status;

	      if (this.props.in) {
	        if (status !== ENTERING && status !== ENTERED) {
	          nextStatus = ENTERING;
	        }
	      } else {
	        if (status === ENTERING || status === ENTERED) {
	          nextStatus = EXITING;
	        }
	      }
	    }

	    this.updateStatus(false, nextStatus);
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };

	  _proto.getTimeouts = function getTimeouts() {
	    var timeout = this.props.timeout;
	    var exit, enter, appear;
	    exit = enter = appear = timeout;

	    if (timeout != null && typeof timeout !== 'number') {
	      exit = timeout.exit;
	      enter = timeout.enter; // TODO: remove fallback for next major

	      appear = timeout.appear !== undefined ? timeout.appear : enter;
	    }

	    return {
	      exit: exit,
	      enter: enter,
	      appear: appear
	    };
	  };

	  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
	    if (mounting === void 0) {
	      mounting = false;
	    }

	    if (nextStatus !== null) {
	      // nextStatus will always be ENTERING or EXITING.
	      this.cancelNextCallback();

	      if (nextStatus === ENTERING) {
	        if (this.props.unmountOnExit || this.props.mountOnEnter) {
	          var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this); // https://github.com/reactjs/react-transition-group/pull/749
	          // With unmountOnExit or mountOnEnter, the enter animation should happen at the transition between `exited` and `entering`.
	          // To make the animation happen,  we have to separate each rendering and avoid being processed as batched.

	          if (node) forceReflow(node);
	        }

	        this.performEnter(mounting);
	      } else {
	        this.performExit();
	      }
	    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
	      this.setState({
	        status: UNMOUNTED
	      });
	    }
	  };

	  _proto.performEnter = function performEnter(mounting) {
	    var _this2 = this;

	    var enter = this.props.enter;
	    var appearing = this.context ? this.context.isMounting : mounting;

	    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],
	        maybeNode = _ref2[0],
	        maybeAppearing = _ref2[1];

	    var timeouts = this.getTimeouts();
	    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
	    // if we are mounting and running this it means appear _must_ be set

	    if (!mounting && !enter || config$3.disabled) {
	      this.safeSetState({
	        status: ENTERED
	      }, function () {
	        _this2.props.onEntered(maybeNode);
	      });
	      return;
	    }

	    this.props.onEnter(maybeNode, maybeAppearing);
	    this.safeSetState({
	      status: ENTERING
	    }, function () {
	      _this2.props.onEntering(maybeNode, maybeAppearing);

	      _this2.onTransitionEnd(enterTimeout, function () {
	        _this2.safeSetState({
	          status: ENTERED
	        }, function () {
	          _this2.props.onEntered(maybeNode, maybeAppearing);
	        });
	      });
	    });
	  };

	  _proto.performExit = function performExit() {
	    var _this3 = this;

	    var exit = this.props.exit;
	    var timeouts = this.getTimeouts();
	    var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED

	    if (!exit || config$3.disabled) {
	      this.safeSetState({
	        status: EXITED
	      }, function () {
	        _this3.props.onExited(maybeNode);
	      });
	      return;
	    }

	    this.props.onExit(maybeNode);
	    this.safeSetState({
	      status: EXITING
	    }, function () {
	      _this3.props.onExiting(maybeNode);

	      _this3.onTransitionEnd(timeouts.exit, function () {
	        _this3.safeSetState({
	          status: EXITED
	        }, function () {
	          _this3.props.onExited(maybeNode);
	        });
	      });
	    });
	  };

	  _proto.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };

	  _proto.safeSetState = function safeSetState(nextState, callback) {
	    // This shouldn't be necessary, but there are weird race conditions with
	    // setState callbacks and unmounting in testing, so always make sure that
	    // we can cancel any pending setState callbacks after we unmount.
	    callback = this.setNextCallback(callback);
	    this.setState(nextState, callback);
	  };

	  _proto.setNextCallback = function setNextCallback(callback) {
	    var _this4 = this;

	    var active = true;

	    this.nextCallback = function (event) {
	      if (active) {
	        active = false;
	        _this4.nextCallback = null;
	        callback(event);
	      }
	    };

	    this.nextCallback.cancel = function () {
	      active = false;
	    };

	    return this.nextCallback;
	  };

	  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
	    this.setNextCallback(handler);
	    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
	    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

	    if (!node || doesNotHaveTimeoutOrListener) {
	      setTimeout(this.nextCallback, 0);
	      return;
	    }

	    if (this.props.addEndListener) {
	      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
	          maybeNode = _ref3[0],
	          maybeNextCallback = _ref3[1];

	      this.props.addEndListener(maybeNode, maybeNextCallback);
	    }

	    if (timeout != null) {
	      setTimeout(this.nextCallback, timeout);
	    }
	  };

	  _proto.render = function render() {
	    var status = this.state.status;

	    if (status === UNMOUNTED) {
	      return null;
	    }

	    var _this$props = this.props,
	        children = _this$props.children;
	        _this$props.in;
	        _this$props.mountOnEnter;
	        _this$props.unmountOnExit;
	        _this$props.appear;
	        _this$props.enter;
	        _this$props.exit;
	        _this$props.timeout;
	        _this$props.addEndListener;
	        _this$props.onEnter;
	        _this$props.onEntering;
	        _this$props.onEntered;
	        _this$props.onExit;
	        _this$props.onExiting;
	        _this$props.onExited;
	        _this$props.nodeRef;
	        var childProps = _objectWithoutPropertiesLoose$1(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);

	    return (
	      /*#__PURE__*/
	      // allows for nested Transitions
	      React.createElement(TransitionGroupContext.Provider, {
	        value: null
	      }, typeof children === 'function' ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))
	    );
	  };

	  return Transition;
	}(React.Component);

	Transition.contextType = TransitionGroupContext;
	Transition.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * A React reference to DOM element that need to transition:
	   * https://stackoverflow.com/a/51127130/4671932
	   *
	   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
	   *      (e.g. `onEnter`) because user already has direct access to the node.
	   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
	   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
	   *     (see
	   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
	   */
	  nodeRef: PropTypes.shape({
	    current: typeof Element === 'undefined' ? PropTypes.any : function (propValue, key, componentName, location, propFullName, secret) {
	      var value = propValue[key];
	      return PropTypes.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
	    }
	  }),

	  /**
	   * A `function` child can be used instead of a React element. This function is
	   * called with the current transition status (`'entering'`, `'entered'`,
	   * `'exiting'`, `'exited'`), which can be used to apply context
	   * specific props to a component.
	   *
	   * ```jsx
	   * <Transition in={this.state.in} timeout={150}>
	   *   {state => (
	   *     <MyComponent className={`fade fade-${state}`} />
	   *   )}
	   * </Transition>
	   * ```
	   */
	  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,

	  /**
	   * Show the component; triggers the enter or exit states
	   */
	  in: PropTypes.bool,

	  /**
	   * By default the child component is mounted immediately along with
	   * the parent `Transition` component. If you want to "lazy mount" the component on the
	   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
	   * mounted, even on "exited", unless you also specify `unmountOnExit`.
	   */
	  mountOnEnter: PropTypes.bool,

	  /**
	   * By default the child component stays mounted after it reaches the `'exited'` state.
	   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
	   */
	  unmountOnExit: PropTypes.bool,

	  /**
	   * By default the child component does not perform the enter transition when
	   * it first mounts, regardless of the value of `in`. If you want this
	   * behavior, set both `appear` and `in` to `true`.
	   *
	   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
	   * > only adds an additional enter transition. However, in the
	   * > `<CSSTransition>` component that first enter transition does result in
	   * > additional `.appear-*` classes, that way you can choose to style it
	   * > differently.
	   */
	  appear: PropTypes.bool,

	  /**
	   * Enable or disable enter transitions.
	   */
	  enter: PropTypes.bool,

	  /**
	   * Enable or disable exit transitions.
	   */
	  exit: PropTypes.bool,

	  /**
	   * The duration of the transition, in milliseconds.
	   * Required unless `addEndListener` is provided.
	   *
	   * You may specify a single timeout for all transitions:
	   *
	   * ```jsx
	   * timeout={500}
	   * ```
	   *
	   * or individually:
	   *
	   * ```jsx
	   * timeout={{
	   *  appear: 500,
	   *  enter: 300,
	   *  exit: 500,
	   * }}
	   * ```
	   *
	   * - `appear` defaults to the value of `enter`
	   * - `enter` defaults to `0`
	   * - `exit` defaults to `0`
	   *
	   * @type {number | { enter?: number, exit?: number, appear?: number }}
	   */
	  timeout: function timeout(props) {
	    var pt = timeoutsShape;
	    if (!props.addEndListener) pt = pt.isRequired;

	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    return pt.apply(void 0, [props].concat(args));
	  },

	  /**
	   * Add a custom transition end trigger. Called with the transitioning
	   * DOM node and a `done` callback. Allows for more fine grained transition end
	   * logic. Timeouts are still used as a fallback if provided.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * ```jsx
	   * addEndListener={(node, done) => {
	   *   // use the css transitionend event to mark the finish of a transition
	   *   node.addEventListener('transitionend', done, false);
	   * }}
	   * ```
	   */
	  addEndListener: PropTypes.func,

	  /**
	   * Callback fired before the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEnter: PropTypes.func,

	  /**
	   * Callback fired after the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntering: PropTypes.func,

	  /**
	   * Callback fired after the "entered" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEntered: PropTypes.func,

	  /**
	   * Callback fired before the "exiting" status is applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExit: PropTypes.func,

	  /**
	   * Callback fired after the "exiting" status is applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExiting: PropTypes.func,

	  /**
	   * Callback fired after the "exited" status is applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExited: PropTypes.func
	} : {}; // Name the function so it is clearer in the documentation

	function noop() {}

	Transition.defaultProps = {
	  in: false,
	  mountOnEnter: false,
	  unmountOnExit: false,
	  appear: false,
	  enter: true,
	  exit: true,
	  onEnter: noop,
	  onEntering: noop,
	  onEntered: noop,
	  onExit: noop,
	  onExiting: noop,
	  onExited: noop
	};
	Transition.UNMOUNTED = UNMOUNTED;
	Transition.EXITED = EXITED;
	Transition.ENTERING = ENTERING;
	Transition.ENTERED = ENTERED;
	Transition.EXITING = EXITING;
	var Transition$1 = Transition;

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	  return self;
	}

	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {*} children `this.props.children`
	 * @return {object} Mapping of key to child
	 */

	function getChildMapping(children, mapFn) {
	  var mapper = function mapper(child) {
	    return mapFn && reactExports.isValidElement(child) ? mapFn(child) : child;
	  };

	  var result = Object.create(null);
	  if (children) reactExports.Children.map(children, function (c) {
	    return c;
	  }).forEach(function (child) {
	    // run the map function here instead so that the key is the computed one
	    result[child.key] = mapper(child);
	  });
	  return result;
	}
	/**
	 * When you're adding or removing children some may be added or removed in the
	 * same render pass. We want to show *both* since we want to simultaneously
	 * animate elements in and out. This function takes a previous set of keys
	 * and a new set of keys and merges them with its best guess of the correct
	 * ordering. In the future we may expose some of the utilities in
	 * ReactMultiChild to make this easy, but for now React itself does not
	 * directly have this concept of the union of prevChildren and nextChildren
	 * so we implement it here.
	 *
	 * @param {object} prev prev children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @param {object} next next children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @return {object} a key set that contains all keys in `prev` and all keys
	 * in `next` in a reasonable order.
	 */

	function mergeChildMappings(prev, next) {
	  prev = prev || {};
	  next = next || {};

	  function getValueForKey(key) {
	    return key in next ? next[key] : prev[key];
	  } // For each key of `next`, the list of keys to insert before that key in
	  // the combined list


	  var nextKeysPending = Object.create(null);
	  var pendingKeys = [];

	  for (var prevKey in prev) {
	    if (prevKey in next) {
	      if (pendingKeys.length) {
	        nextKeysPending[prevKey] = pendingKeys;
	        pendingKeys = [];
	      }
	    } else {
	      pendingKeys.push(prevKey);
	    }
	  }

	  var i;
	  var childMapping = {};

	  for (var nextKey in next) {
	    if (nextKeysPending[nextKey]) {
	      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	        var pendingNextKey = nextKeysPending[nextKey][i];
	        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	      }
	    }

	    childMapping[nextKey] = getValueForKey(nextKey);
	  } // Finally, add the keys which didn't appear before any key in `next`


	  for (i = 0; i < pendingKeys.length; i++) {
	    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	  }

	  return childMapping;
	}

	function getProp(child, prop, props) {
	  return props[prop] != null ? props[prop] : child.props[prop];
	}

	function getInitialChildMapping(props, onExited) {
	  return getChildMapping(props.children, function (child) {
	    return reactExports.cloneElement(child, {
	      onExited: onExited.bind(null, child),
	      in: true,
	      appear: getProp(child, 'appear', props),
	      enter: getProp(child, 'enter', props),
	      exit: getProp(child, 'exit', props)
	    });
	  });
	}
	function getNextChildMapping(nextProps, prevChildMapping, onExited) {
	  var nextChildMapping = getChildMapping(nextProps.children);
	  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
	  Object.keys(children).forEach(function (key) {
	    var child = children[key];
	    if (!reactExports.isValidElement(child)) return;
	    var hasPrev = (key in prevChildMapping);
	    var hasNext = (key in nextChildMapping);
	    var prevChild = prevChildMapping[key];
	    var isLeaving = reactExports.isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)

	    if (hasNext && (!hasPrev || isLeaving)) {
	      // console.log('entering', key)
	      children[key] = reactExports.cloneElement(child, {
	        onExited: onExited.bind(null, child),
	        in: true,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    } else if (!hasNext && hasPrev && !isLeaving) {
	      // item is old (exiting)
	      // console.log('leaving', key)
	      children[key] = reactExports.cloneElement(child, {
	        in: false
	      });
	    } else if (hasNext && hasPrev && reactExports.isValidElement(prevChild)) {
	      // item hasn't changed transition states
	      // copy over the last transition props;
	      // console.log('unchanged', key)
	      children[key] = reactExports.cloneElement(child, {
	        onExited: onExited.bind(null, child),
	        in: prevChild.props.in,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    }
	  });
	  return children;
	}

	var values = Object.values || function (obj) {
	  return Object.keys(obj).map(function (k) {
	    return obj[k];
	  });
	};

	var defaultProps = {
	  component: 'div',
	  childFactory: function childFactory(child) {
	    return child;
	  }
	};
	/**
	 * The `<TransitionGroup>` component manages a set of transition components
	 * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
	 * components, `<TransitionGroup>` is a state machine for managing the mounting
	 * and unmounting of components over time.
	 *
	 * Consider the example below. As items are removed or added to the TodoList the
	 * `in` prop is toggled automatically by the `<TransitionGroup>`.
	 *
	 * Note that `<TransitionGroup>`  does not define any animation behavior!
	 * Exactly _how_ a list item animates is up to the individual transition
	 * component. This means you can mix and match animations across different list
	 * items.
	 */

	var TransitionGroup = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(TransitionGroup, _React$Component);

	  function TransitionGroup(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;

	    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear


	    _this.state = {
	      contextValue: {
	        isMounting: true
	      },
	      handleExited: handleExited,
	      firstRender: true
	    };
	    return _this;
	  }

	  var _proto = TransitionGroup.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.mounted = true;
	    this.setState({
	      contextValue: {
	        isMounting: false
	      }
	    });
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.mounted = false;
	  };

	  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
	    var prevChildMapping = _ref.children,
	        handleExited = _ref.handleExited,
	        firstRender = _ref.firstRender;
	    return {
	      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
	      firstRender: false
	    };
	  } // node is `undefined` when user provided `nodeRef` prop
	  ;

	  _proto.handleExited = function handleExited(child, node) {
	    var currentChildMapping = getChildMapping(this.props.children);
	    if (child.key in currentChildMapping) return;

	    if (child.props.onExited) {
	      child.props.onExited(node);
	    }

	    if (this.mounted) {
	      this.setState(function (state) {
	        var children = _extends$2({}, state.children);

	        delete children[child.key];
	        return {
	          children: children
	        };
	      });
	    }
	  };

	  _proto.render = function render() {
	    var _this$props = this.props,
	        Component = _this$props.component,
	        childFactory = _this$props.childFactory,
	        props = _objectWithoutPropertiesLoose$1(_this$props, ["component", "childFactory"]);

	    var contextValue = this.state.contextValue;
	    var children = values(this.state.children).map(childFactory);
	    delete props.appear;
	    delete props.enter;
	    delete props.exit;

	    if (Component === null) {
	      return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {
	        value: contextValue
	      }, children);
	    }

	    return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {
	      value: contextValue
	    }, /*#__PURE__*/React.createElement(Component, props, children));
	  };

	  return TransitionGroup;
	}(React.Component);

	TransitionGroup.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * `<TransitionGroup>` renders a `<div>` by default. You can change this
	   * behavior by providing a `component` prop.
	   * If you use React v16+ and would like to avoid a wrapping `<div>` element
	   * you can pass in `component={null}`. This is useful if the wrapping div
	   * borks your css styles.
	   */
	  component: PropTypes.any,

	  /**
	   * A set of `<Transition>` components, that are toggled `in` and out as they
	   * leave. the `<TransitionGroup>` will inject specific transition props, so
	   * remember to spread them through if you are wrapping the `<Transition>` as
	   * with our `<Fade>` example.
	   *
	   * While this component is meant for multiple `Transition` or `CSSTransition`
	   * children, sometimes you may want to have a single transition child with
	   * content that you want to be transitioned out and in when you change it
	   * (e.g. routes, images etc.) In that case you can change the `key` prop of
	   * the transition child as you change its content, this will cause
	   * `TransitionGroup` to transition the child out and back in.
	   */
	  children: PropTypes.node,

	  /**
	   * A convenience prop that enables or disables appear animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  appear: PropTypes.bool,

	  /**
	   * A convenience prop that enables or disables enter animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  enter: PropTypes.bool,

	  /**
	   * A convenience prop that enables or disables exit animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  exit: PropTypes.bool,

	  /**
	   * You may need to apply reactive updates to a child as it is exiting.
	   * This is generally done by using `cloneElement` however in the case of an exiting
	   * child the element has already been removed and not accessible to the consumer.
	   *
	   * If you do need to update a child as it leaves you can provide a `childFactory`
	   * to wrap every child, even the ones that are leaving.
	   *
	   * @type Function(child: ReactElement) -> ReactElement
	   */
	  childFactory: PropTypes.func
	} : {};
	TransitionGroup.defaultProps = defaultProps;
	var TransitionGroup$1 = TransitionGroup;

	function Ripple(props) {
	  const {
	    className,
	    classes,
	    pulsate = false,
	    rippleX,
	    rippleY,
	    rippleSize,
	    in: inProp,
	    onExited,
	    timeout
	  } = props;
	  const [leaving, setLeaving] = reactExports.useState(false);
	  const rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
	  const rippleStyles = {
	    width: rippleSize,
	    height: rippleSize,
	    top: -(rippleSize / 2) + rippleY,
	    left: -(rippleSize / 2) + rippleX
	  };
	  const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
	  if (!inProp && !leaving) {
	    setLeaving(true);
	  }
	  reactExports.useEffect(() => {
	    if (!inProp && onExited != null) {
	      // react-transition-group#onExited
	      const timeoutId = setTimeout(onExited, timeout);
	      return () => {
	        clearTimeout(timeoutId);
	      };
	    }
	    return undefined;
	  }, [onExited, inProp, timeout]);
	  return /*#__PURE__*/jsxRuntimeExports.jsx("span", {
	    className: rippleClassName,
	    style: rippleStyles,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx("span", {
	      className: childClassName
	    })
	  });
	}
	process.env.NODE_ENV !== "production" ? Ripple.propTypes = {
	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: PropTypes.object.isRequired,
	  className: PropTypes.string,
	  /**
	   * @ignore - injected from TransitionGroup
	   */
	  in: PropTypes.bool,
	  /**
	   * @ignore - injected from TransitionGroup
	   */
	  onExited: PropTypes.func,
	  /**
	   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
	   */
	  pulsate: PropTypes.bool,
	  /**
	   * Diameter of the ripple.
	   */
	  rippleSize: PropTypes.number,
	  /**
	   * Horizontal position of the ripple center.
	   */
	  rippleX: PropTypes.number,
	  /**
	   * Vertical position of the ripple center.
	   */
	  rippleY: PropTypes.number,
	  /**
	   * exit delay
	   */
	  timeout: PropTypes.number.isRequired
	} : void 0;

	const touchRippleClasses = generateUtilityClasses('MuiTouchRipple', ['root', 'ripple', 'rippleVisible', 'ripplePulsate', 'child', 'childLeaving', 'childPulsate']);
	var touchRippleClasses$1 = touchRippleClasses;

	const _excluded$s = ["center", "classes", "className"];
	let _ = t => t,
	  _t,
	  _t2,
	  _t3,
	  _t4;
	const DURATION = 550;
	const DELAY_RIPPLE = 80;
	const enterKeyframe = keyframes(_t || (_t = _`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
	const exitKeyframe = keyframes(_t2 || (_t2 = _`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
	const pulsateKeyframe = keyframes(_t3 || (_t3 = _`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
	const TouchRippleRoot = styled$1('span', {
	  name: 'MuiTouchRipple',
	  slot: 'Root'
	})({
	  overflow: 'hidden',
	  pointerEvents: 'none',
	  position: 'absolute',
	  zIndex: 0,
	  top: 0,
	  right: 0,
	  bottom: 0,
	  left: 0,
	  borderRadius: 'inherit'
	});

	// This `styled()` function invokes keyframes. `styled-components` only supports keyframes
	// in string templates. Do not convert these styles in JS object as it will break.
	const TouchRippleRipple = styled$1(Ripple, {
	  name: 'MuiTouchRipple',
	  slot: 'Ripple'
	})(_t4 || (_t4 = _`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses$1.rippleVisible, enterKeyframe, DURATION, ({
	  theme
	}) => theme.transitions.easing.easeInOut, touchRippleClasses$1.ripplePulsate, ({
	  theme
	}) => theme.transitions.duration.shorter, touchRippleClasses$1.child, touchRippleClasses$1.childLeaving, exitKeyframe, DURATION, ({
	  theme
	}) => theme.transitions.easing.easeInOut, touchRippleClasses$1.childPulsate, pulsateKeyframe, ({
	  theme
	}) => theme.transitions.easing.easeInOut);

	/**
	 * @ignore - internal component.
	 *
	 * TODO v5: Make private
	 */
	const TouchRipple = /*#__PURE__*/reactExports.forwardRef(function TouchRipple(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTouchRipple'
	  });
	  const {
	      center: centerProp = false,
	      classes = {},
	      className
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$s);
	  const [ripples, setRipples] = reactExports.useState([]);
	  const nextKey = reactExports.useRef(0);
	  const rippleCallback = reactExports.useRef(null);
	  reactExports.useEffect(() => {
	    if (rippleCallback.current) {
	      rippleCallback.current();
	      rippleCallback.current = null;
	    }
	  }, [ripples]);

	  // Used to filter out mouse emulated events on mobile.
	  const ignoringMouseDown = reactExports.useRef(false);
	  // We use a timer in order to only show the ripples for touch "click" like events.
	  // We don't want to display the ripple for touch scroll events.
	  const startTimer = reactExports.useRef(0);

	  // This is the hook called once the previous timeout is ready.
	  const startTimerCommit = reactExports.useRef(null);
	  const container = reactExports.useRef(null);
	  reactExports.useEffect(() => {
	    return () => {
	      if (startTimer.current) {
	        clearTimeout(startTimer.current);
	      }
	    };
	  }, []);
	  const startCommit = reactExports.useCallback(params => {
	    const {
	      pulsate,
	      rippleX,
	      rippleY,
	      rippleSize,
	      cb
	    } = params;
	    setRipples(oldRipples => [...oldRipples, /*#__PURE__*/jsxRuntimeExports.jsx(TouchRippleRipple, {
	      classes: {
	        ripple: clsx(classes.ripple, touchRippleClasses$1.ripple),
	        rippleVisible: clsx(classes.rippleVisible, touchRippleClasses$1.rippleVisible),
	        ripplePulsate: clsx(classes.ripplePulsate, touchRippleClasses$1.ripplePulsate),
	        child: clsx(classes.child, touchRippleClasses$1.child),
	        childLeaving: clsx(classes.childLeaving, touchRippleClasses$1.childLeaving),
	        childPulsate: clsx(classes.childPulsate, touchRippleClasses$1.childPulsate)
	      },
	      timeout: DURATION,
	      pulsate: pulsate,
	      rippleX: rippleX,
	      rippleY: rippleY,
	      rippleSize: rippleSize
	    }, nextKey.current)]);
	    nextKey.current += 1;
	    rippleCallback.current = cb;
	  }, [classes]);
	  const start = reactExports.useCallback((event = {}, options = {}, cb = () => {}) => {
	    const {
	      pulsate = false,
	      center = centerProp || options.pulsate,
	      fakeElement = false // For test purposes
	    } = options;
	    if ((event == null ? void 0 : event.type) === 'mousedown' && ignoringMouseDown.current) {
	      ignoringMouseDown.current = false;
	      return;
	    }
	    if ((event == null ? void 0 : event.type) === 'touchstart') {
	      ignoringMouseDown.current = true;
	    }
	    const element = fakeElement ? null : container.current;
	    const rect = element ? element.getBoundingClientRect() : {
	      width: 0,
	      height: 0,
	      left: 0,
	      top: 0
	    };

	    // Get the size of the ripple
	    let rippleX;
	    let rippleY;
	    let rippleSize;
	    if (center || event === undefined || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
	      rippleX = Math.round(rect.width / 2);
	      rippleY = Math.round(rect.height / 2);
	    } else {
	      const {
	        clientX,
	        clientY
	      } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
	      rippleX = Math.round(clientX - rect.left);
	      rippleY = Math.round(clientY - rect.top);
	    }
	    if (center) {
	      rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);

	      // For some reason the animation is broken on Mobile Chrome if the size is even.
	      if (rippleSize % 2 === 0) {
	        rippleSize += 1;
	      }
	    } else {
	      const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
	      const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
	      rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
	    }

	    // Touche devices
	    if (event != null && event.touches) {
	      // check that this isn't another touchstart due to multitouch
	      // otherwise we will only clear a single timer when unmounting while two
	      // are running
	      if (startTimerCommit.current === null) {
	        // Prepare the ripple effect.
	        startTimerCommit.current = () => {
	          startCommit({
	            pulsate,
	            rippleX,
	            rippleY,
	            rippleSize,
	            cb
	          });
	        };
	        // Delay the execution of the ripple effect.
	        startTimer.current = setTimeout(() => {
	          if (startTimerCommit.current) {
	            startTimerCommit.current();
	            startTimerCommit.current = null;
	          }
	        }, DELAY_RIPPLE); // We have to make a tradeoff with this value.
	      }
	    } else {
	      startCommit({
	        pulsate,
	        rippleX,
	        rippleY,
	        rippleSize,
	        cb
	      });
	    }
	  }, [centerProp, startCommit]);
	  const pulsate = reactExports.useCallback(() => {
	    start({}, {
	      pulsate: true
	    });
	  }, [start]);
	  const stop = reactExports.useCallback((event, cb) => {
	    clearTimeout(startTimer.current);

	    // The touch interaction occurs too quickly.
	    // We still want to show ripple effect.
	    if ((event == null ? void 0 : event.type) === 'touchend' && startTimerCommit.current) {
	      startTimerCommit.current();
	      startTimerCommit.current = null;
	      startTimer.current = setTimeout(() => {
	        stop(event, cb);
	      });
	      return;
	    }
	    startTimerCommit.current = null;
	    setRipples(oldRipples => {
	      if (oldRipples.length > 0) {
	        return oldRipples.slice(1);
	      }
	      return oldRipples;
	    });
	    rippleCallback.current = cb;
	  }, []);
	  reactExports.useImperativeHandle(ref, () => ({
	    pulsate,
	    start,
	    stop
	  }), [pulsate, start, stop]);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(TouchRippleRoot, _extends$2({
	    className: clsx(touchRippleClasses$1.root, classes.root, className),
	    ref: container
	  }, other, {
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(TransitionGroup$1, {
	      component: null,
	      exit: true,
	      children: ripples
	    })
	  }));
	});
	process.env.NODE_ENV !== "production" ? TouchRipple.propTypes = {
	  /**
	   * If `true`, the ripple starts at the center of the component
	   * rather than at the point of interaction.
	   */
	  center: PropTypes.bool,
	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string
	} : void 0;
	var TouchRipple$1 = TouchRipple;

	function getButtonBaseUtilityClass(slot) {
	  return generateUtilityClass('MuiButtonBase', slot);
	}
	const buttonBaseClasses = generateUtilityClasses('MuiButtonBase', ['root', 'disabled', 'focusVisible']);
	var buttonBaseClasses$1 = buttonBaseClasses;

	const _excluded$r = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];
	const useUtilityClasses$l = ownerState => {
	  const {
	    disabled,
	    focusVisible,
	    focusVisibleClassName,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']
	  };
	  const composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);
	  if (focusVisible && focusVisibleClassName) {
	    composedClasses.root += ` ${focusVisibleClassName}`;
	  }
	  return composedClasses;
	};
	const ButtonBaseRoot = styled$1('button', {
	  name: 'MuiButtonBase',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  display: 'inline-flex',
	  alignItems: 'center',
	  justifyContent: 'center',
	  position: 'relative',
	  boxSizing: 'border-box',
	  WebkitTapHighlightColor: 'transparent',
	  backgroundColor: 'transparent',
	  // Reset default value
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0,
	  border: 0,
	  margin: 0,
	  // Remove the margin in Safari
	  borderRadius: 0,
	  padding: 0,
	  // Remove the padding in Firefox
	  cursor: 'pointer',
	  userSelect: 'none',
	  verticalAlign: 'middle',
	  MozAppearance: 'none',
	  // Reset
	  WebkitAppearance: 'none',
	  // Reset
	  textDecoration: 'none',
	  // So we take precedent over the style of a native <a /> element.
	  color: 'inherit',
	  '&::-moz-focus-inner': {
	    borderStyle: 'none' // Remove Firefox dotted outline.
	  },

	  [`&.${buttonBaseClasses$1.disabled}`]: {
	    pointerEvents: 'none',
	    // Disable link interactions
	    cursor: 'default'
	  },
	  '@media print': {
	    colorAdjust: 'exact'
	  }
	});

	/**
	 * `ButtonBase` contains as few styles as possible.
	 * It aims to be a simple building block for creating a button.
	 * It contains a load of style reset and some focus/ripple logic.
	 */
	const ButtonBase = /*#__PURE__*/reactExports.forwardRef(function ButtonBase(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiButtonBase'
	  });
	  const {
	      action,
	      centerRipple = false,
	      children,
	      className,
	      component = 'button',
	      disabled = false,
	      disableRipple = false,
	      disableTouchRipple = false,
	      focusRipple = false,
	      LinkComponent = 'a',
	      onBlur,
	      onClick,
	      onContextMenu,
	      onDragLeave,
	      onFocus,
	      onFocusVisible,
	      onKeyDown,
	      onKeyUp,
	      onMouseDown,
	      onMouseLeave,
	      onMouseUp,
	      onTouchEnd,
	      onTouchMove,
	      onTouchStart,
	      tabIndex = 0,
	      TouchRippleProps,
	      touchRippleRef,
	      type
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$r);
	  const buttonRef = reactExports.useRef(null);
	  const rippleRef = reactExports.useRef(null);
	  const handleRippleRef = useForkRef(rippleRef, touchRippleRef);
	  const {
	    isFocusVisibleRef,
	    onFocus: handleFocusVisible,
	    onBlur: handleBlurVisible,
	    ref: focusVisibleRef
	  } = useIsFocusVisible();
	  const [focusVisible, setFocusVisible] = reactExports.useState(false);
	  if (disabled && focusVisible) {
	    setFocusVisible(false);
	  }
	  reactExports.useImperativeHandle(action, () => ({
	    focusVisible: () => {
	      setFocusVisible(true);
	      buttonRef.current.focus();
	    }
	  }), []);
	  const [mountedState, setMountedState] = reactExports.useState(false);
	  reactExports.useEffect(() => {
	    setMountedState(true);
	  }, []);
	  const enableTouchRipple = mountedState && !disableRipple && !disabled;
	  reactExports.useEffect(() => {
	    if (focusVisible && focusRipple && !disableRipple && mountedState) {
	      rippleRef.current.pulsate();
	    }
	  }, [disableRipple, focusRipple, focusVisible, mountedState]);
	  function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
	    return useEventCallback(event => {
	      if (eventCallback) {
	        eventCallback(event);
	      }
	      const ignore = skipRippleAction;
	      if (!ignore && rippleRef.current) {
	        rippleRef.current[rippleAction](event);
	      }
	      return true;
	    });
	  }
	  const handleMouseDown = useRippleHandler('start', onMouseDown);
	  const handleContextMenu = useRippleHandler('stop', onContextMenu);
	  const handleDragLeave = useRippleHandler('stop', onDragLeave);
	  const handleMouseUp = useRippleHandler('stop', onMouseUp);
	  const handleMouseLeave = useRippleHandler('stop', event => {
	    if (focusVisible) {
	      event.preventDefault();
	    }
	    if (onMouseLeave) {
	      onMouseLeave(event);
	    }
	  });
	  const handleTouchStart = useRippleHandler('start', onTouchStart);
	  const handleTouchEnd = useRippleHandler('stop', onTouchEnd);
	  const handleTouchMove = useRippleHandler('stop', onTouchMove);
	  const handleBlur = useRippleHandler('stop', event => {
	    handleBlurVisible(event);
	    if (isFocusVisibleRef.current === false) {
	      setFocusVisible(false);
	    }
	    if (onBlur) {
	      onBlur(event);
	    }
	  }, false);
	  const handleFocus = useEventCallback(event => {
	    // Fix for https://github.com/facebook/react/issues/7769
	    if (!buttonRef.current) {
	      buttonRef.current = event.currentTarget;
	    }
	    handleFocusVisible(event);
	    if (isFocusVisibleRef.current === true) {
	      setFocusVisible(true);
	      if (onFocusVisible) {
	        onFocusVisible(event);
	      }
	    }
	    if (onFocus) {
	      onFocus(event);
	    }
	  });
	  const isNonNativeButton = () => {
	    const button = buttonRef.current;
	    return component && component !== 'button' && !(button.tagName === 'A' && button.href);
	  };

	  /**
	   * IE11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat
	   */
	  const keydownRef = reactExports.useRef(false);
	  const handleKeyDown = useEventCallback(event => {
	    // Check if key is already down to avoid repeats being counted as multiple activations
	    if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {
	      keydownRef.current = true;
	      rippleRef.current.stop(event, () => {
	        rippleRef.current.start(event);
	      });
	    }
	    if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {
	      event.preventDefault();
	    }
	    if (onKeyDown) {
	      onKeyDown(event);
	    }

	    // Keyboard accessibility for non interactive elements
	    if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
	      event.preventDefault();
	      if (onClick) {
	        onClick(event);
	      }
	    }
	  });
	  const handleKeyUp = useEventCallback(event => {
	    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
	    // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
	    if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {
	      keydownRef.current = false;
	      rippleRef.current.stop(event, () => {
	        rippleRef.current.pulsate(event);
	      });
	    }
	    if (onKeyUp) {
	      onKeyUp(event);
	    }

	    // Keyboard accessibility for non interactive elements
	    if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {
	      onClick(event);
	    }
	  });
	  let ComponentProp = component;
	  if (ComponentProp === 'button' && (other.href || other.to)) {
	    ComponentProp = LinkComponent;
	  }
	  const buttonProps = {};
	  if (ComponentProp === 'button') {
	    buttonProps.type = type === undefined ? 'button' : type;
	    buttonProps.disabled = disabled;
	  } else {
	    if (!other.href && !other.to) {
	      buttonProps.role = 'button';
	    }
	    if (disabled) {
	      buttonProps['aria-disabled'] = disabled;
	    }
	  }
	  const handleRef = useForkRef(ref, focusVisibleRef, buttonRef);
	  if (process.env.NODE_ENV !== 'production') {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    reactExports.useEffect(() => {
	      if (enableTouchRipple && !rippleRef.current) {
	        console.error(['MUI: The `component` prop provided to ButtonBase is invalid.', 'Please make sure the children prop is rendered in this custom component.'].join('\n'));
	      }
	    }, [enableTouchRipple]);
	  }
	  const ownerState = _extends$2({}, props, {
	    centerRipple,
	    component,
	    disabled,
	    disableRipple,
	    disableTouchRipple,
	    focusRipple,
	    tabIndex,
	    focusVisible
	  });
	  const classes = useUtilityClasses$l(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(ButtonBaseRoot, _extends$2({
	    as: ComponentProp,
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    onBlur: handleBlur,
	    onClick: onClick,
	    onContextMenu: handleContextMenu,
	    onFocus: handleFocus,
	    onKeyDown: handleKeyDown,
	    onKeyUp: handleKeyUp,
	    onMouseDown: handleMouseDown,
	    onMouseLeave: handleMouseLeave,
	    onMouseUp: handleMouseUp,
	    onDragLeave: handleDragLeave,
	    onTouchEnd: handleTouchEnd,
	    onTouchMove: handleTouchMove,
	    onTouchStart: handleTouchStart,
	    ref: handleRef,
	    tabIndex: disabled ? -1 : tabIndex,
	    type: type
	  }, buttonProps, other, {
	    children: [children, enableTouchRipple ?
	    /*#__PURE__*/
	    /* TouchRipple is only needed client-side, x2 boost on the server. */
	    jsxRuntimeExports.jsx(TouchRipple$1, _extends$2({
	      ref: handleRippleRef,
	      center: centerRipple
	    }, TouchRippleProps)) : null]
	  }));
	});
	process.env.NODE_ENV !== "production" ? ButtonBase.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * A ref for imperative actions.
	   * It currently only supports `focusVisible()` action.
	   */
	  action: refType$1,
	  /**
	   * If `true`, the ripples are centered.
	   * They won't start at the cursor interaction position.
	   * @default false
	   */
	  centerRipple: PropTypes.bool,
	  /**
	   * The content of the component.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: elementTypeAcceptingRef$1,
	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: PropTypes.bool,
	  /**
	   * If `true`, the ripple effect is disabled.
	   *
	   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
	   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
	   * @default false
	   */
	  disableRipple: PropTypes.bool,
	  /**
	   * If `true`, the touch ripple effect is disabled.
	   * @default false
	   */
	  disableTouchRipple: PropTypes.bool,
	  /**
	   * If `true`, the base button will have a keyboard focus ripple.
	   * @default false
	   */
	  focusRipple: PropTypes.bool,
	  /**
	   * This prop can help identify which element has keyboard focus.
	   * The class name will be applied when the element gains the focus through keyboard interaction.
	   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
	   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
	   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
	   * if needed.
	   */
	  focusVisibleClassName: PropTypes.string,
	  /**
	   * @ignore
	   */
	  href: PropTypes /* @typescript-to-proptypes-ignore */.any,
	  /**
	   * The component used to render a link when the `href` prop is provided.
	   * @default 'a'
	   */
	  LinkComponent: PropTypes.elementType,
	  /**
	   * @ignore
	   */
	  onBlur: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onClick: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onContextMenu: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onDragLeave: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onFocus: PropTypes.func,
	  /**
	   * Callback fired when the component is focused with a keyboard.
	   * We trigger a `onFocus` callback too.
	   */
	  onFocusVisible: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onKeyDown: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onKeyUp: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onMouseDown: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onMouseLeave: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onMouseUp: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onTouchEnd: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onTouchMove: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onTouchStart: PropTypes.func,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * @default 0
	   */
	  tabIndex: PropTypes.number,
	  /**
	   * Props applied to the `TouchRipple` element.
	   */
	  TouchRippleProps: PropTypes.object,
	  /**
	   * A ref that points to the `TouchRipple` element.
	   */
	  touchRippleRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
	    current: PropTypes.shape({
	      pulsate: PropTypes.func.isRequired,
	      start: PropTypes.func.isRequired,
	      stop: PropTypes.func.isRequired
	    })
	  })]),
	  /**
	   * @ignore
	   */
	  type: PropTypes.oneOfType([PropTypes.oneOf(['button', 'reset', 'submit']), PropTypes.string])
	} : void 0;
	var ButtonBase$1 = ButtonBase;

	function getListItemUtilityClass(slot) {
	  return generateUtilityClass('MuiListItem', slot);
	}
	const listItemClasses = generateUtilityClasses('MuiListItem', ['root', 'container', 'focusVisible', 'dense', 'alignItemsFlexStart', 'disabled', 'divider', 'gutters', 'padding', 'button', 'secondaryAction', 'selected']);
	var listItemClasses$1 = listItemClasses;

	function getListItemButtonUtilityClass(slot) {
	  return generateUtilityClass('MuiListItemButton', slot);
	}
	const listItemButtonClasses = generateUtilityClasses('MuiListItemButton', ['root', 'focusVisible', 'dense', 'alignItemsFlexStart', 'disabled', 'divider', 'gutters', 'selected']);
	var listItemButtonClasses$1 = listItemButtonClasses;

	const _excluded$q = ["alignItems", "autoFocus", "component", "children", "dense", "disableGutters", "divider", "focusVisibleClassName", "selected", "className"];
	const overridesResolver$3 = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, ownerState.dense && styles.dense, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters];
	};
	const useUtilityClasses$k = ownerState => {
	  const {
	    alignItems,
	    classes,
	    dense,
	    disabled,
	    disableGutters,
	    divider,
	    selected
	  } = ownerState;
	  const slots = {
	    root: ['root', dense && 'dense', !disableGutters && 'gutters', divider && 'divider', disabled && 'disabled', alignItems === 'flex-start' && 'alignItemsFlexStart', selected && 'selected']
	  };
	  const composedClasses = composeClasses(slots, getListItemButtonUtilityClass, classes);
	  return _extends$2({}, classes, composedClasses);
	};
	const ListItemButtonRoot = styled$1(ButtonBase$1, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiListItemButton',
	  slot: 'Root',
	  overridesResolver: overridesResolver$3
	})(({
	  theme,
	  ownerState
	}) => _extends$2({
	  display: 'flex',
	  flexGrow: 1,
	  justifyContent: 'flex-start',
	  alignItems: 'center',
	  position: 'relative',
	  textDecoration: 'none',
	  minWidth: 0,
	  boxSizing: 'border-box',
	  textAlign: 'left',
	  paddingTop: 8,
	  paddingBottom: 8,
	  transition: theme.transitions.create('background-color', {
	    duration: theme.transitions.duration.shortest
	  }),
	  '&:hover': {
	    textDecoration: 'none',
	    backgroundColor: (theme.vars || theme).palette.action.hover,
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  },
	  [`&.${listItemButtonClasses$1.selected}`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
	    [`&.${listItemButtonClasses$1.focusVisible}`]: {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	    }
	  },
	  [`&.${listItemButtonClasses$1.selected}:hover`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
	    }
	  },
	  [`&.${listItemButtonClasses$1.focusVisible}`]: {
	    backgroundColor: (theme.vars || theme).palette.action.focus
	  },
	  [`&.${listItemButtonClasses$1.disabled}`]: {
	    opacity: (theme.vars || theme).palette.action.disabledOpacity
	  }
	}, ownerState.divider && {
	  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
	  backgroundClip: 'padding-box'
	}, ownerState.alignItems === 'flex-start' && {
	  alignItems: 'flex-start'
	}, !ownerState.disableGutters && {
	  paddingLeft: 16,
	  paddingRight: 16
	}, ownerState.dense && {
	  paddingTop: 4,
	  paddingBottom: 4
	}));
	const ListItemButton = /*#__PURE__*/reactExports.forwardRef(function ListItemButton(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiListItemButton'
	  });
	  const {
	      alignItems = 'center',
	      autoFocus = false,
	      component = 'div',
	      children,
	      dense = false,
	      disableGutters = false,
	      divider = false,
	      focusVisibleClassName,
	      selected = false,
	      className
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$q);
	  const context = reactExports.useContext(ListContext$1);
	  const childContext = reactExports.useMemo(() => ({
	    dense: dense || context.dense || false,
	    alignItems,
	    disableGutters
	  }), [alignItems, context.dense, dense, disableGutters]);
	  const listItemRef = reactExports.useRef(null);
	  useEnhancedEffect$1(() => {
	    if (autoFocus) {
	      if (listItemRef.current) {
	        listItemRef.current.focus();
	      } else if (process.env.NODE_ENV !== 'production') {
	        console.error('MUI: Unable to set focus to a ListItemButton whose component has not been rendered.');
	      }
	    }
	  }, [autoFocus]);
	  const ownerState = _extends$2({}, props, {
	    alignItems,
	    dense: childContext.dense,
	    disableGutters,
	    divider,
	    selected
	  });
	  const classes = useUtilityClasses$k(ownerState);
	  const handleRef = useForkRef(listItemRef, ref);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(ListContext$1.Provider, {
	    value: childContext,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(ListItemButtonRoot, _extends$2({
	      ref: handleRef,
	      href: other.href || other.to
	      // `ButtonBase` processes `href` or `to` if `component` is set to 'button'
	      ,
	      component: (other.href || other.to) && component === 'div' ? 'button' : component,
	      focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
	      ownerState: ownerState,
	      className: clsx(classes.root, className)
	    }, other, {
	      classes: classes,
	      children: children
	    }))
	  });
	});
	process.env.NODE_ENV !== "production" ? ListItemButton.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * Defines the `align-items` style property.
	   * @default 'center'
	   */
	  alignItems: PropTypes.oneOf(['center', 'flex-start']),
	  /**
	   * If `true`, the list item is focused during the first mount.
	   * Focus will also be triggered if the value changes from false to true.
	   * @default false
	   */
	  autoFocus: PropTypes.bool,
	  /**
	   * The content of the component if a `ListItemSecondaryAction` is used it must
	   * be the last child.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: PropTypes.elementType,
	  /**
	   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
	   * The prop defaults to the value inherited from the parent List component.
	   * @default false
	   */
	  dense: PropTypes.bool,
	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: PropTypes.bool,
	  /**
	   * If `true`, the left and right padding is removed.
	   * @default false
	   */
	  disableGutters: PropTypes.bool,
	  /**
	   * If `true`, a 1px light border is added to the bottom of the list item.
	   * @default false
	   */
	  divider: PropTypes.bool,
	  /**
	   * This prop can help identify which element has keyboard focus.
	   * The class name will be applied when the element gains the focus through keyboard interaction.
	   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
	   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
	   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
	   * if needed.
	   */
	  focusVisibleClassName: PropTypes.string,
	  /**
	   * @ignore
	   */
	  href: PropTypes.string,
	  /**
	   * Use to apply selected styling.
	   * @default false
	   */
	  selected: PropTypes.bool,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
	} : void 0;
	var ListItemButton$1 = ListItemButton;

	function getListItemSecondaryActionClassesUtilityClass(slot) {
	  return generateUtilityClass('MuiListItemSecondaryAction', slot);
	}
	generateUtilityClasses('MuiListItemSecondaryAction', ['root', 'disableGutters']);

	const _excluded$p = ["className"];
	const useUtilityClasses$j = ownerState => {
	  const {
	    disableGutters,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', disableGutters && 'disableGutters']
	  };
	  return composeClasses(slots, getListItemSecondaryActionClassesUtilityClass, classes);
	};
	const ListItemSecondaryActionRoot = styled$1('div', {
	  name: 'MuiListItemSecondaryAction',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.disableGutters && styles.disableGutters];
	  }
	})(({
	  ownerState
	}) => _extends$2({
	  position: 'absolute',
	  right: 16,
	  top: '50%',
	  transform: 'translateY(-50%)'
	}, ownerState.disableGutters && {
	  right: 0
	}));

	/**
	 * Must be used as the last child of ListItem to function properly.
	 */
	const ListItemSecondaryAction = /*#__PURE__*/reactExports.forwardRef(function ListItemSecondaryAction(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiListItemSecondaryAction'
	  });
	  const {
	      className
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$p);
	  const context = reactExports.useContext(ListContext$1);
	  const ownerState = _extends$2({}, props, {
	    disableGutters: context.disableGutters
	  });
	  const classes = useUtilityClasses$j(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(ListItemSecondaryActionRoot, _extends$2({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? ListItemSecondaryAction.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * The content of the component, normally an `IconButton` or selection control.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
	} : void 0;
	ListItemSecondaryAction.muiName = 'ListItemSecondaryAction';
	var ListItemSecondaryAction$1 = ListItemSecondaryAction;

	const _excluded$o = ["className"],
	  _excluded2$2 = ["alignItems", "autoFocus", "button", "children", "className", "component", "components", "componentsProps", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "disablePadding", "divider", "focusVisibleClassName", "secondaryAction", "selected", "slotProps", "slots"];
	const overridesResolver$2 = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, ownerState.dense && styles.dense, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters, !ownerState.disablePadding && styles.padding, ownerState.button && styles.button, ownerState.hasSecondaryAction && styles.secondaryAction];
	};
	const useUtilityClasses$i = ownerState => {
	  const {
	    alignItems,
	    button,
	    classes,
	    dense,
	    disabled,
	    disableGutters,
	    disablePadding,
	    divider,
	    hasSecondaryAction,
	    selected
	  } = ownerState;
	  const slots = {
	    root: ['root', dense && 'dense', !disableGutters && 'gutters', !disablePadding && 'padding', divider && 'divider', disabled && 'disabled', button && 'button', alignItems === 'flex-start' && 'alignItemsFlexStart', hasSecondaryAction && 'secondaryAction', selected && 'selected'],
	    container: ['container']
	  };
	  return composeClasses(slots, getListItemUtilityClass, classes);
	};
	const ListItemRoot = styled$1('div', {
	  name: 'MuiListItem',
	  slot: 'Root',
	  overridesResolver: overridesResolver$2
	})(({
	  theme,
	  ownerState
	}) => _extends$2({
	  display: 'flex',
	  justifyContent: 'flex-start',
	  alignItems: 'center',
	  position: 'relative',
	  textDecoration: 'none',
	  width: '100%',
	  boxSizing: 'border-box',
	  textAlign: 'left'
	}, !ownerState.disablePadding && _extends$2({
	  paddingTop: 8,
	  paddingBottom: 8
	}, ownerState.dense && {
	  paddingTop: 4,
	  paddingBottom: 4
	}, !ownerState.disableGutters && {
	  paddingLeft: 16,
	  paddingRight: 16
	}, !!ownerState.secondaryAction && {
	  // Add some space to avoid collision as `ListItemSecondaryAction`
	  // is absolutely positioned.
	  paddingRight: 48
	}), !!ownerState.secondaryAction && {
	  [`& > .${listItemButtonClasses$1.root}`]: {
	    paddingRight: 48
	  }
	}, {
	  [`&.${listItemClasses$1.focusVisible}`]: {
	    backgroundColor: (theme.vars || theme).palette.action.focus
	  },
	  [`&.${listItemClasses$1.selected}`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
	    [`&.${listItemClasses$1.focusVisible}`]: {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	    }
	  },
	  [`&.${listItemClasses$1.disabled}`]: {
	    opacity: (theme.vars || theme).palette.action.disabledOpacity
	  }
	}, ownerState.alignItems === 'flex-start' && {
	  alignItems: 'flex-start'
	}, ownerState.divider && {
	  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
	  backgroundClip: 'padding-box'
	}, ownerState.button && {
	  transition: theme.transitions.create('background-color', {
	    duration: theme.transitions.duration.shortest
	  }),
	  '&:hover': {
	    textDecoration: 'none',
	    backgroundColor: (theme.vars || theme).palette.action.hover,
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  },
	  [`&.${listItemClasses$1.selected}:hover`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
	    }
	  }
	}, ownerState.hasSecondaryAction && {
	  // Add some space to avoid collision as `ListItemSecondaryAction`
	  // is absolutely positioned.
	  paddingRight: 48
	}));
	const ListItemContainer = styled$1('li', {
	  name: 'MuiListItem',
	  slot: 'Container',
	  overridesResolver: (props, styles) => styles.container
	})({
	  position: 'relative'
	});

	/**
	 * Uses an additional container component if `ListItemSecondaryAction` is the last child.
	 */
	const ListItem = /*#__PURE__*/reactExports.forwardRef(function ListItem(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiListItem'
	  });
	  const {
	      alignItems = 'center',
	      autoFocus = false,
	      button = false,
	      children: childrenProp,
	      className,
	      component: componentProp,
	      components = {},
	      componentsProps = {},
	      ContainerComponent = 'li',
	      ContainerProps: {
	        className: ContainerClassName
	      } = {},
	      dense = false,
	      disabled = false,
	      disableGutters = false,
	      disablePadding = false,
	      divider = false,
	      focusVisibleClassName,
	      secondaryAction,
	      selected = false,
	      slotProps = {},
	      slots = {}
	    } = props,
	    ContainerProps = _objectWithoutPropertiesLoose$1(props.ContainerProps, _excluded$o),
	    other = _objectWithoutPropertiesLoose$1(props, _excluded2$2);
	  const context = reactExports.useContext(ListContext$1);
	  const childContext = reactExports.useMemo(() => ({
	    dense: dense || context.dense || false,
	    alignItems,
	    disableGutters
	  }), [alignItems, context.dense, dense, disableGutters]);
	  const listItemRef = reactExports.useRef(null);
	  useEnhancedEffect$1(() => {
	    if (autoFocus) {
	      if (listItemRef.current) {
	        listItemRef.current.focus();
	      } else if (process.env.NODE_ENV !== 'production') {
	        console.error('MUI: Unable to set focus to a ListItem whose component has not been rendered.');
	      }
	    }
	  }, [autoFocus]);
	  const children = reactExports.Children.toArray(childrenProp);

	  // v4 implementation, deprecated in v5, will be removed in v6
	  const hasSecondaryAction = children.length && isMuiElement(children[children.length - 1], ['ListItemSecondaryAction']);
	  const ownerState = _extends$2({}, props, {
	    alignItems,
	    autoFocus,
	    button,
	    dense: childContext.dense,
	    disabled,
	    disableGutters,
	    disablePadding,
	    divider,
	    hasSecondaryAction,
	    selected
	  });
	  const classes = useUtilityClasses$i(ownerState);
	  const handleRef = useForkRef(listItemRef, ref);
	  const Root = slots.root || components.Root || ListItemRoot;
	  const rootProps = slotProps.root || componentsProps.root || {};
	  const componentProps = _extends$2({
	    className: clsx(classes.root, rootProps.className, className),
	    disabled
	  }, other);
	  let Component = componentProp || 'li';
	  if (button) {
	    componentProps.component = componentProp || 'div';
	    componentProps.focusVisibleClassName = clsx(listItemClasses$1.focusVisible, focusVisibleClassName);
	    Component = ButtonBase$1;
	  }

	  // v4 implementation, deprecated in v5, will be removed in v6
	  if (hasSecondaryAction) {
	    // Use div by default.
	    Component = !componentProps.component && !componentProp ? 'div' : Component;

	    // Avoid nesting of li > li.
	    if (ContainerComponent === 'li') {
	      if (Component === 'li') {
	        Component = 'div';
	      } else if (componentProps.component === 'li') {
	        componentProps.component = 'div';
	      }
	    }
	    return /*#__PURE__*/jsxRuntimeExports.jsx(ListContext$1.Provider, {
	      value: childContext,
	      children: /*#__PURE__*/jsxRuntimeExports.jsxs(ListItemContainer, _extends$2({
	        as: ContainerComponent,
	        className: clsx(classes.container, ContainerClassName),
	        ref: handleRef,
	        ownerState: ownerState
	      }, ContainerProps, {
	        children: [/*#__PURE__*/jsxRuntimeExports.jsx(Root, _extends$2({}, rootProps, !isHostComponent(Root) && {
	          as: Component,
	          ownerState: _extends$2({}, ownerState, rootProps.ownerState)
	        }, componentProps, {
	          children: children
	        })), children.pop()]
	      }))
	    });
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsx(ListContext$1.Provider, {
	    value: childContext,
	    children: /*#__PURE__*/jsxRuntimeExports.jsxs(Root, _extends$2({}, rootProps, {
	      as: Component,
	      ref: handleRef
	    }, !isHostComponent(Root) && {
	      ownerState: _extends$2({}, ownerState, rootProps.ownerState)
	    }, componentProps, {
	      children: [children, secondaryAction && /*#__PURE__*/jsxRuntimeExports.jsx(ListItemSecondaryAction$1, {
	        children: secondaryAction
	      })]
	    }))
	  });
	});
	process.env.NODE_ENV !== "production" ? ListItem.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * Defines the `align-items` style property.
	   * @default 'center'
	   */
	  alignItems: PropTypes.oneOf(['center', 'flex-start']),
	  /**
	   * If `true`, the list item is focused during the first mount.
	   * Focus will also be triggered if the value changes from false to true.
	   * @default false
	   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
	   */
	  autoFocus: PropTypes.bool,
	  /**
	   * If `true`, the list item is a button (using `ButtonBase`). Props intended
	   * for `ButtonBase` can then be applied to `ListItem`.
	   * @default false
	   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
	   */
	  button: PropTypes.bool,
	  /**
	   * The content of the component if a `ListItemSecondaryAction` is used it must
	   * be the last child.
	   */
	  children: chainPropTypes(PropTypes.node, props => {
	    const children = reactExports.Children.toArray(props.children);

	    // React.Children.toArray(props.children).findLastIndex(isListItemSecondaryAction)
	    let secondaryActionIndex = -1;
	    for (let i = children.length - 1; i >= 0; i -= 1) {
	      const child = children[i];
	      if (isMuiElement(child, ['ListItemSecondaryAction'])) {
	        secondaryActionIndex = i;
	        break;
	      }
	    }

	    //  is ListItemSecondaryAction the last child of ListItem
	    if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {
	      return new Error('MUI: You used an element after ListItemSecondaryAction. ' + 'For ListItem to detect that it has a secondary action ' + 'you must pass it as the last child to ListItem.');
	    }
	    return null;
	  }),
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: PropTypes.elementType,
	  /**
	   * The components used for each slot inside.
	   *
	   * This prop is an alias for the `slots` prop.
	   * It's recommended to use the `slots` prop instead.
	   *
	   * @default {}
	   */
	  components: PropTypes.shape({
	    Root: PropTypes.elementType
	  }),
	  /**
	   * The extra props for the slot components.
	   * You can override the existing props or add new ones.
	   *
	   * This prop is an alias for the `slotProps` prop.
	   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
	   *
	   * @default {}
	   */
	  componentsProps: PropTypes.shape({
	    root: PropTypes.object
	  }),
	  /**
	   * The container component used when a `ListItemSecondaryAction` is the last child.
	   * @default 'li'
	   * @deprecated
	   */
	  ContainerComponent: elementTypeAcceptingRef$1,
	  /**
	   * Props applied to the container component if used.
	   * @default {}
	   * @deprecated
	   */
	  ContainerProps: PropTypes.object,
	  /**
	   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
	   * The prop defaults to the value inherited from the parent List component.
	   * @default false
	   */
	  dense: PropTypes.bool,
	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
	   */
	  disabled: PropTypes.bool,
	  /**
	   * If `true`, the left and right padding is removed.
	   * @default false
	   */
	  disableGutters: PropTypes.bool,
	  /**
	   * If `true`, all padding is removed.
	   * @default false
	   */
	  disablePadding: PropTypes.bool,
	  /**
	   * If `true`, a 1px light border is added to the bottom of the list item.
	   * @default false
	   */
	  divider: PropTypes.bool,
	  /**
	   * @ignore
	   */
	  focusVisibleClassName: PropTypes.string,
	  /**
	   * The element to display at the end of ListItem.
	   */
	  secondaryAction: PropTypes.node,
	  /**
	   * Use to apply selected styling.
	   * @default false
	   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
	   */
	  selected: PropTypes.bool,
	  /**
	   * The extra props for the slot components.
	   * You can override the existing props or add new ones.
	   *
	   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
	   *
	   * @default {}
	   */
	  slotProps: PropTypes.shape({
	    root: PropTypes.object
	  }),
	  /**
	   * The components used for each slot inside.
	   *
	   * This prop is an alias for the `components` prop, which will be deprecated in the future.
	   *
	   * @default {}
	   */
	  slots: PropTypes.shape({
	    root: PropTypes.elementType
	  }),
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
	} : void 0;
	var ListItem$1 = ListItem;

	function getListItemTextUtilityClass(slot) {
	  return generateUtilityClass('MuiListItemText', slot);
	}
	const listItemTextClasses = generateUtilityClasses('MuiListItemText', ['root', 'multiline', 'dense', 'inset', 'primary', 'secondary']);
	var listItemTextClasses$1 = listItemTextClasses;

	const _excluded$n = ["children", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"];
	const useUtilityClasses$h = ownerState => {
	  const {
	    classes,
	    inset,
	    primary,
	    secondary,
	    dense
	  } = ownerState;
	  const slots = {
	    root: ['root', inset && 'inset', dense && 'dense', primary && secondary && 'multiline'],
	    primary: ['primary'],
	    secondary: ['secondary']
	  };
	  return composeClasses(slots, getListItemTextUtilityClass, classes);
	};
	const ListItemTextRoot = styled$1('div', {
	  name: 'MuiListItemText',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${listItemTextClasses$1.primary}`]: styles.primary
	    }, {
	      [`& .${listItemTextClasses$1.secondary}`]: styles.secondary
	    }, styles.root, ownerState.inset && styles.inset, ownerState.primary && ownerState.secondary && styles.multiline, ownerState.dense && styles.dense];
	  }
	})(({
	  ownerState
	}) => _extends$2({
	  flex: '1 1 auto',
	  minWidth: 0,
	  marginTop: 4,
	  marginBottom: 4
	}, ownerState.primary && ownerState.secondary && {
	  marginTop: 6,
	  marginBottom: 6
	}, ownerState.inset && {
	  paddingLeft: 56
	}));
	const ListItemText = /*#__PURE__*/reactExports.forwardRef(function ListItemText(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiListItemText'
	  });
	  const {
	      children,
	      className,
	      disableTypography = false,
	      inset = false,
	      primary: primaryProp,
	      primaryTypographyProps,
	      secondary: secondaryProp,
	      secondaryTypographyProps
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$n);
	  const {
	    dense
	  } = reactExports.useContext(ListContext$1);
	  let primary = primaryProp != null ? primaryProp : children;
	  let secondary = secondaryProp;
	  const ownerState = _extends$2({}, props, {
	    disableTypography,
	    inset,
	    primary: !!primary,
	    secondary: !!secondary,
	    dense
	  });
	  const classes = useUtilityClasses$h(ownerState);
	  if (primary != null && primary.type !== Typography$1 && !disableTypography) {
	    primary = /*#__PURE__*/jsxRuntimeExports.jsx(Typography$1, _extends$2({
	      variant: dense ? 'body2' : 'body1',
	      className: classes.primary,
	      component: primaryTypographyProps != null && primaryTypographyProps.variant ? undefined : 'span',
	      display: "block"
	    }, primaryTypographyProps, {
	      children: primary
	    }));
	  }
	  if (secondary != null && secondary.type !== Typography$1 && !disableTypography) {
	    secondary = /*#__PURE__*/jsxRuntimeExports.jsx(Typography$1, _extends$2({
	      variant: "body2",
	      className: classes.secondary,
	      color: "text.secondary",
	      display: "block"
	    }, secondaryTypographyProps, {
	      children: secondary
	    }));
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(ListItemTextRoot, _extends$2({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    children: [primary, secondary]
	  }));
	});
	process.env.NODE_ENV !== "production" ? ListItemText.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * Alias for the `primary` prop.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * If `true`, the children won't be wrapped by a Typography component.
	   * This can be useful to render an alternative Typography variant by wrapping
	   * the `children` (or `primary`) text, and optional `secondary` text
	   * with the Typography component.
	   * @default false
	   */
	  disableTypography: PropTypes.bool,
	  /**
	   * If `true`, the children are indented.
	   * This should be used if there is no left avatar or left icon.
	   * @default false
	   */
	  inset: PropTypes.bool,
	  /**
	   * The main content element.
	   */
	  primary: PropTypes.node,
	  /**
	   * These props will be forwarded to the primary typography component
	   * (as long as disableTypography is not `true`).
	   */
	  primaryTypographyProps: PropTypes.object,
	  /**
	   * The secondary content element.
	   */
	  secondary: PropTypes.node,
	  /**
	   * These props will be forwarded to the secondary typography component
	   * (as long as disableTypography is not `true`).
	   */
	  secondaryTypographyProps: PropTypes.object,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
	} : void 0;
	var ListItemText$1 = ListItemText;

	function getListItemAvatarUtilityClass(slot) {
	  return generateUtilityClass('MuiListItemAvatar', slot);
	}
	generateUtilityClasses('MuiListItemAvatar', ['root', 'alignItemsFlexStart']);

	const _excluded$m = ["className"];
	const useUtilityClasses$g = ownerState => {
	  const {
	    alignItems,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', alignItems === 'flex-start' && 'alignItemsFlexStart']
	  };
	  return composeClasses(slots, getListItemAvatarUtilityClass, classes);
	};
	const ListItemAvatarRoot = styled$1('div', {
	  name: 'MuiListItemAvatar',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart];
	  }
	})(({
	  ownerState
	}) => _extends$2({
	  minWidth: 56,
	  flexShrink: 0
	}, ownerState.alignItems === 'flex-start' && {
	  marginTop: 8
	}));

	/**
	 * A simple wrapper to apply `List` styles to an `Avatar`.
	 */
	const ListItemAvatar = /*#__PURE__*/reactExports.forwardRef(function ListItemAvatar(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiListItemAvatar'
	  });
	  const {
	      className
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$m);
	  const context = reactExports.useContext(ListContext$1);
	  const ownerState = _extends$2({}, props, {
	    alignItems: context.alignItems
	  });
	  const classes = useUtilityClasses$g(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(ListItemAvatarRoot, _extends$2({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? ListItemAvatar.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * The content of the component, normally an `Avatar`.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
	} : void 0;
	var ListItemAvatar$1 = ListItemAvatar;

	function getPaginationUtilityClass(slot) {
	  return generateUtilityClass('MuiPagination', slot);
	}
	generateUtilityClasses('MuiPagination', ['root', 'ul', 'outlined', 'text']);

	const _excluded$l = ["boundaryCount", "componentName", "count", "defaultPage", "disabled", "hideNextButton", "hidePrevButton", "onChange", "page", "showFirstButton", "showLastButton", "siblingCount"];
	function usePagination(props = {}) {
	  // keep default values in sync with @default tags in Pagination.propTypes
	  const {
	      boundaryCount = 1,
	      componentName = 'usePagination',
	      count = 1,
	      defaultPage = 1,
	      disabled = false,
	      hideNextButton = false,
	      hidePrevButton = false,
	      onChange: handleChange,
	      page: pageProp,
	      showFirstButton = false,
	      showLastButton = false,
	      siblingCount = 1
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$l);
	  const [page, setPageState] = useControlled({
	    controlled: pageProp,
	    default: defaultPage,
	    name: componentName,
	    state: 'page'
	  });
	  const handleClick = (event, value) => {
	    if (!pageProp) {
	      setPageState(value);
	    }
	    if (handleChange) {
	      handleChange(event, value);
	    }
	  };

	  // https://dev.to/namirsab/comment/2050
	  const range = (start, end) => {
	    const length = end - start + 1;
	    return Array.from({
	      length
	    }, (_, i) => start + i);
	  };
	  const startPages = range(1, Math.min(boundaryCount, count));
	  const endPages = range(Math.max(count - boundaryCount + 1, boundaryCount + 1), count);
	  const siblingsStart = Math.max(Math.min(
	  // Natural start
	  page - siblingCount,
	  // Lower boundary when page is high
	  count - boundaryCount - siblingCount * 2 - 1),
	  // Greater than startPages
	  boundaryCount + 2);
	  const siblingsEnd = Math.min(Math.max(
	  // Natural end
	  page + siblingCount,
	  // Upper boundary when page is low
	  boundaryCount + siblingCount * 2 + 2),
	  // Less than endPages
	  endPages.length > 0 ? endPages[0] - 2 : count - 1);

	  // Basic list of items to render
	  // e.g. itemList = ['first', 'previous', 1, 'ellipsis', 4, 5, 6, 'ellipsis', 10, 'next', 'last']
	  const itemList = [...(showFirstButton ? ['first'] : []), ...(hidePrevButton ? [] : ['previous']), ...startPages,
	  // Start ellipsis
	  // eslint-disable-next-line no-nested-ternary
	  ...(siblingsStart > boundaryCount + 2 ? ['start-ellipsis'] : boundaryCount + 1 < count - boundaryCount ? [boundaryCount + 1] : []),
	  // Sibling pages
	  ...range(siblingsStart, siblingsEnd),
	  // End ellipsis
	  // eslint-disable-next-line no-nested-ternary
	  ...(siblingsEnd < count - boundaryCount - 1 ? ['end-ellipsis'] : count - boundaryCount > boundaryCount ? [count - boundaryCount] : []), ...endPages, ...(hideNextButton ? [] : ['next']), ...(showLastButton ? ['last'] : [])];

	  // Map the button type to its page number
	  const buttonPage = type => {
	    switch (type) {
	      case 'first':
	        return 1;
	      case 'previous':
	        return page - 1;
	      case 'next':
	        return page + 1;
	      case 'last':
	        return count;
	      default:
	        return null;
	    }
	  };

	  // Convert the basic item list to PaginationItem props objects
	  const items = itemList.map(item => {
	    return typeof item === 'number' ? {
	      onClick: event => {
	        handleClick(event, item);
	      },
	      type: 'page',
	      page: item,
	      selected: item === page,
	      disabled,
	      'aria-current': item === page ? 'true' : undefined
	    } : {
	      onClick: event => {
	        handleClick(event, buttonPage(item));
	      },
	      type: item,
	      page: buttonPage(item),
	      selected: false,
	      disabled: disabled || item.indexOf('ellipsis') === -1 && (item === 'next' || item === 'last' ? page >= count : page <= 1)
	    };
	  });
	  return _extends$2({
	    items
	  }, other);
	}

	function getPaginationItemUtilityClass(slot) {
	  return generateUtilityClass('MuiPaginationItem', slot);
	}
	const paginationItemClasses = generateUtilityClasses('MuiPaginationItem', ['root', 'page', 'sizeSmall', 'sizeLarge', 'text', 'textPrimary', 'textSecondary', 'outlined', 'outlinedPrimary', 'outlinedSecondary', 'rounded', 'ellipsis', 'firstLast', 'previousNext', 'focusVisible', 'disabled', 'selected', 'icon']);
	var paginationItemClasses$1 = paginationItemClasses;

	function getSvgIconUtilityClass(slot) {
	  return generateUtilityClass('MuiSvgIcon', slot);
	}
	generateUtilityClasses('MuiSvgIcon', ['root', 'colorPrimary', 'colorSecondary', 'colorAction', 'colorError', 'colorDisabled', 'fontSizeInherit', 'fontSizeSmall', 'fontSizeMedium', 'fontSizeLarge']);

	const _excluded$k = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
	const useUtilityClasses$f = ownerState => {
	  const {
	    color,
	    fontSize,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', color !== 'inherit' && `color${capitalize(color)}`, `fontSize${capitalize(fontSize)}`]
	  };
	  return composeClasses(slots, getSvgIconUtilityClass, classes);
	};
	const SvgIconRoot = styled$1('svg', {
	  name: 'MuiSvgIcon',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`], styles[`fontSize${capitalize(ownerState.fontSize)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette2, _palette3;
	  return {
	    userSelect: 'none',
	    width: '1em',
	    height: '1em',
	    display: 'inline-block',
	    // the <svg> will define the property that has `currentColor`
	    // e.g. heroicons uses fill="none" and stroke="currentColor"
	    fill: ownerState.hasSvgAsChild ? undefined : 'currentColor',
	    flexShrink: 0,
	    transition: (_theme$transitions = theme.transitions) == null || (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, 'fill', {
	      duration: (_theme$transitions2 = theme.transitions) == null || (_theme$transitions2 = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2.shorter
	    }),
	    fontSize: {
	      inherit: 'inherit',
	      small: ((_theme$typography = theme.typography) == null || (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || '1.25rem',
	      medium: ((_theme$typography2 = theme.typography) == null || (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || '1.5rem',
	      large: ((_theme$typography3 = theme.typography) == null || (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || '2.1875rem'
	    }[ownerState.fontSize],
	    // TODO v5 deprecate, v6 remove for sx
	    color: (_palette$ownerState$c = (_palette = (theme.vars || theme).palette) == null || (_palette = _palette[ownerState.color]) == null ? void 0 : _palette.main) != null ? _palette$ownerState$c : {
	      action: (_palette2 = (theme.vars || theme).palette) == null || (_palette2 = _palette2.action) == null ? void 0 : _palette2.active,
	      disabled: (_palette3 = (theme.vars || theme).palette) == null || (_palette3 = _palette3.action) == null ? void 0 : _palette3.disabled,
	      inherit: undefined
	    }[ownerState.color]
	  };
	});
	const SvgIcon = /*#__PURE__*/reactExports.forwardRef(function SvgIcon(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiSvgIcon'
	  });
	  const {
	      children,
	      className,
	      color = 'inherit',
	      component = 'svg',
	      fontSize = 'medium',
	      htmlColor,
	      inheritViewBox = false,
	      titleAccess,
	      viewBox = '0 0 24 24'
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$k);
	  const hasSvgAsChild = /*#__PURE__*/reactExports.isValidElement(children) && children.type === 'svg';
	  const ownerState = _extends$2({}, props, {
	    color,
	    component,
	    fontSize,
	    instanceFontSize: inProps.fontSize,
	    inheritViewBox,
	    viewBox,
	    hasSvgAsChild
	  });
	  const more = {};
	  if (!inheritViewBox) {
	    more.viewBox = viewBox;
	  }
	  const classes = useUtilityClasses$f(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(SvgIconRoot, _extends$2({
	    as: component,
	    className: clsx(classes.root, className),
	    focusable: "false",
	    color: htmlColor,
	    "aria-hidden": titleAccess ? undefined : true,
	    role: titleAccess ? 'img' : undefined,
	    ref: ref
	  }, more, other, hasSvgAsChild && children.props, {
	    ownerState: ownerState,
	    children: [hasSvgAsChild ? children.props.children : children, titleAccess ? /*#__PURE__*/jsxRuntimeExports.jsx("title", {
	      children: titleAccess
	    }) : null]
	  }));
	});
	process.env.NODE_ENV !== "production" ? SvgIcon.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * Node passed into the SVG element.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
	   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
	   * @default 'inherit'
	   */
	  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'action', 'disabled', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),
	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: PropTypes.elementType,
	  /**
	   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
	   * @default 'medium'
	   */
	  fontSize: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'large', 'medium', 'small']), PropTypes.string]),
	  /**
	   * Applies a color attribute to the SVG element.
	   */
	  htmlColor: PropTypes.string,
	  /**
	   * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
	   * prop will be ignored.
	   * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
	   * `component`'s viewBox to the root node.
	   * @default false
	   */
	  inheritViewBox: PropTypes.bool,
	  /**
	   * The shape-rendering attribute. The behavior of the different options is described on the
	   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
	   * If you are having issues with blurry icons you should investigate this prop.
	   */
	  shapeRendering: PropTypes.string,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * Provides a human-readable title for the element that contains it.
	   * https://www.w3.org/TR/SVG-access/#Equivalent
	   */
	  titleAccess: PropTypes.string,
	  /**
	   * Allows you to redefine what the coordinates without units mean inside an SVG element.
	   * For example, if the SVG element is 500 (width) by 200 (height),
	   * and you pass viewBox="0 0 50 20",
	   * this means that the coordinates inside the SVG will go from the top left corner (0,0)
	   * to bottom right (50,20) and each unit will be worth 10px.
	   * @default '0 0 24 24'
	   */
	  viewBox: PropTypes.string
	} : void 0;
	SvgIcon.muiName = 'SvgIcon';
	var SvgIcon$1 = SvgIcon;

	function createSvgIcon$1(path, displayName) {
	  function Component(props, ref) {
	    return /*#__PURE__*/jsxRuntimeExports.jsx(SvgIcon$1, _extends$2({
	      "data-testid": `${displayName}Icon`,
	      ref: ref
	    }, props, {
	      children: path
	    }));
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // Need to set `displayName` on the inner component for React.memo.
	    // React prior to 16.14 ignores `displayName` on the wrapper.
	    Component.displayName = `${displayName}Icon`;
	  }
	  Component.muiName = SvgIcon$1.muiName;
	  return /*#__PURE__*/reactExports.memo( /*#__PURE__*/reactExports.forwardRef(Component));
	}

	var FirstPageIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"
	}), 'FirstPage');

	var LastPageIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"
	}), 'LastPage');

	var NavigateBeforeIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
	}), 'NavigateBefore');

	var NavigateNextIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
	}), 'NavigateNext');

	const _excluded$j = ["className", "color", "component", "components", "disabled", "page", "selected", "shape", "size", "slots", "type", "variant"];
	const overridesResolver$1 = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, styles[ownerState.variant], styles[`size${capitalize(ownerState.size)}`], ownerState.variant === 'text' && styles[`text${capitalize(ownerState.color)}`], ownerState.variant === 'outlined' && styles[`outlined${capitalize(ownerState.color)}`], ownerState.shape === 'rounded' && styles.rounded, ownerState.type === 'page' && styles.page, (ownerState.type === 'start-ellipsis' || ownerState.type === 'end-ellipsis') && styles.ellipsis, (ownerState.type === 'previous' || ownerState.type === 'next') && styles.previousNext, (ownerState.type === 'first' || ownerState.type === 'last') && styles.firstLast];
	};
	const useUtilityClasses$e = ownerState => {
	  const {
	    classes,
	    color,
	    disabled,
	    selected,
	    size,
	    shape,
	    type,
	    variant
	  } = ownerState;
	  const slots = {
	    root: ['root', `size${capitalize(size)}`, variant, shape, color !== 'standard' && `${variant}${capitalize(color)}`, disabled && 'disabled', selected && 'selected', {
	      page: 'page',
	      first: 'firstLast',
	      last: 'firstLast',
	      'start-ellipsis': 'ellipsis',
	      'end-ellipsis': 'ellipsis',
	      previous: 'previousNext',
	      next: 'previousNext'
	    }[type]],
	    icon: ['icon']
	  };
	  return composeClasses(slots, getPaginationItemUtilityClass, classes);
	};
	const PaginationItemEllipsis = styled$1('div', {
	  name: 'MuiPaginationItem',
	  slot: 'Root',
	  overridesResolver: overridesResolver$1
	})(({
	  theme,
	  ownerState
	}) => _extends$2({}, theme.typography.body2, {
	  borderRadius: 32 / 2,
	  textAlign: 'center',
	  boxSizing: 'border-box',
	  minWidth: 32,
	  padding: '0 6px',
	  margin: '0 3px',
	  color: (theme.vars || theme).palette.text.primary,
	  height: 'auto',
	  [`&.${paginationItemClasses$1.disabled}`]: {
	    opacity: (theme.vars || theme).palette.action.disabledOpacity
	  }
	}, ownerState.size === 'small' && {
	  minWidth: 26,
	  borderRadius: 26 / 2,
	  margin: '0 1px',
	  padding: '0 4px'
	}, ownerState.size === 'large' && {
	  minWidth: 40,
	  borderRadius: 40 / 2,
	  padding: '0 10px',
	  fontSize: theme.typography.pxToRem(15)
	}));
	const PaginationItemPage = styled$1(ButtonBase$1, {
	  name: 'MuiPaginationItem',
	  slot: 'Root',
	  overridesResolver: overridesResolver$1
	})(({
	  theme,
	  ownerState
	}) => _extends$2({}, theme.typography.body2, {
	  borderRadius: 32 / 2,
	  textAlign: 'center',
	  boxSizing: 'border-box',
	  minWidth: 32,
	  height: 32,
	  padding: '0 6px',
	  margin: '0 3px',
	  color: (theme.vars || theme).palette.text.primary,
	  [`&.${paginationItemClasses$1.focusVisible}`]: {
	    backgroundColor: (theme.vars || theme).palette.action.focus
	  },
	  [`&.${paginationItemClasses$1.disabled}`]: {
	    opacity: (theme.vars || theme).palette.action.disabledOpacity
	  },
	  transition: theme.transitions.create(['color', 'background-color'], {
	    duration: theme.transitions.duration.short
	  }),
	  '&:hover': {
	    backgroundColor: (theme.vars || theme).palette.action.hover,
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  },
	  [`&.${paginationItemClasses$1.selected}`]: {
	    backgroundColor: (theme.vars || theme).palette.action.selected,
	    '&:hover': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: (theme.vars || theme).palette.action.selected
	      }
	    },
	    [`&.${paginationItemClasses$1.focusVisible}`]: {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	    },
	    [`&.${paginationItemClasses$1.disabled}`]: {
	      opacity: 1,
	      color: (theme.vars || theme).palette.action.disabled,
	      backgroundColor: (theme.vars || theme).palette.action.selected
	    }
	  }
	}, ownerState.size === 'small' && {
	  minWidth: 26,
	  height: 26,
	  borderRadius: 26 / 2,
	  margin: '0 1px',
	  padding: '0 4px'
	}, ownerState.size === 'large' && {
	  minWidth: 40,
	  height: 40,
	  borderRadius: 40 / 2,
	  padding: '0 10px',
	  fontSize: theme.typography.pxToRem(15)
	}, ownerState.shape === 'rounded' && {
	  borderRadius: (theme.vars || theme).shape.borderRadius
	}), ({
	  theme,
	  ownerState
	}) => _extends$2({}, ownerState.variant === 'text' && {
	  [`&.${paginationItemClasses$1.selected}`]: _extends$2({}, ownerState.color !== 'standard' && {
	    color: (theme.vars || theme).palette[ownerState.color].contrastText,
	    backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
	    '&:hover': {
	      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: (theme.vars || theme).palette[ownerState.color].main
	      }
	    },
	    [`&.${paginationItemClasses$1.focusVisible}`]: {
	      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
	    }
	  }, {
	    [`&.${paginationItemClasses$1.disabled}`]: {
	      color: (theme.vars || theme).palette.action.disabled
	    }
	  })
	}, ownerState.variant === 'outlined' && {
	  border: theme.vars ? `1px solid rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'}`,
	  [`&.${paginationItemClasses$1.selected}`]: _extends$2({}, ownerState.color !== 'standard' && {
	    color: (theme.vars || theme).palette[ownerState.color].main,
	    border: `1px solid ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : alpha(theme.palette[ownerState.color].main, 0.5)}`,
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.activatedOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.activatedOpacity),
	    '&:hover': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / calc(${theme.vars.palette.action.activatedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette[ownerState.color].main, theme.palette.action.activatedOpacity + theme.palette.action.focusOpacity),
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    },
	    [`&.${paginationItemClasses$1.focusVisible}`]: {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / calc(${theme.vars.palette.action.activatedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette[ownerState.color].main, theme.palette.action.activatedOpacity + theme.palette.action.focusOpacity)
	    }
	  }, {
	    [`&.${paginationItemClasses$1.disabled}`]: {
	      borderColor: (theme.vars || theme).palette.action.disabledBackground,
	      color: (theme.vars || theme).palette.action.disabled
	    }
	  })
	}));
	const PaginationItemPageIcon = styled$1('div', {
	  name: 'MuiPaginationItem',
	  slot: 'Icon',
	  overridesResolver: (props, styles) => styles.icon
	})(({
	  theme,
	  ownerState
	}) => _extends$2({
	  fontSize: theme.typography.pxToRem(20),
	  margin: '0 -8px'
	}, ownerState.size === 'small' && {
	  fontSize: theme.typography.pxToRem(18)
	}, ownerState.size === 'large' && {
	  fontSize: theme.typography.pxToRem(22)
	}));
	const PaginationItem = /*#__PURE__*/reactExports.forwardRef(function PaginationItem(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPaginationItem'
	  });
	  const {
	      className,
	      color = 'standard',
	      component,
	      components = {},
	      disabled = false,
	      page,
	      selected = false,
	      shape = 'circular',
	      size = 'medium',
	      slots = {},
	      type = 'page',
	      variant = 'text'
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$j);
	  const ownerState = _extends$2({}, props, {
	    color,
	    disabled,
	    selected,
	    shape,
	    size,
	    type,
	    variant
	  });
	  const theme = useTheme();
	  const classes = useUtilityClasses$e(ownerState);
	  const normalizedIcons = theme.direction === 'rtl' ? {
	    previous: slots.next || components.next || NavigateNextIcon,
	    next: slots.previous || components.previous || NavigateBeforeIcon,
	    last: slots.first || components.first || FirstPageIcon,
	    first: slots.last || components.last || LastPageIcon
	  } : {
	    previous: slots.previous || components.previous || NavigateBeforeIcon,
	    next: slots.next || components.next || NavigateNextIcon,
	    first: slots.first || components.first || FirstPageIcon,
	    last: slots.last || components.last || LastPageIcon
	  };
	  const Icon = normalizedIcons[type];
	  return type === 'start-ellipsis' || type === 'end-ellipsis' ? /*#__PURE__*/jsxRuntimeExports.jsx(PaginationItemEllipsis, {
	    ref: ref,
	    ownerState: ownerState,
	    className: clsx(classes.root, className),
	    children: "\u2026"
	  }) : /*#__PURE__*/jsxRuntimeExports.jsxs(PaginationItemPage, _extends$2({
	    ref: ref,
	    ownerState: ownerState,
	    component: component,
	    disabled: disabled,
	    className: clsx(classes.root, className)
	  }, other, {
	    children: [type === 'page' && page, Icon ? /*#__PURE__*/jsxRuntimeExports.jsx(PaginationItemPageIcon, {
	      as: Icon,
	      ownerState: ownerState,
	      className: classes.icon
	    }) : null]
	  }));
	});
	process.env.NODE_ENV !== "production" ? PaginationItem.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * @ignore
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The active color.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
	   * @default 'standard'
	   */
	  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary', 'standard']), PropTypes.string]),
	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: PropTypes.elementType,
	  /**
	   * The components used for each slot inside.
	   *
	   * This prop is an alias for the `slots` prop.
	   * It's recommended to use the `slots` prop instead.
	   *
	   * @default {}
	   */
	  components: PropTypes.shape({
	    first: PropTypes.elementType,
	    last: PropTypes.elementType,
	    next: PropTypes.elementType,
	    previous: PropTypes.elementType
	  }),
	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: PropTypes.bool,
	  /**
	   * The current page number.
	   */
	  page: PropTypes.node,
	  /**
	   * If `true` the pagination item is selected.
	   * @default false
	   */
	  selected: PropTypes.bool,
	  /**
	   * The shape of the pagination item.
	   * @default 'circular'
	   */
	  shape: PropTypes.oneOf(['circular', 'rounded']),
	  /**
	   * The size of the component.
	   * @default 'medium'
	   */
	  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),
	  /**
	   * The components used for each slot inside.
	   *
	   * This prop is an alias for the `components` prop, which will be deprecated in the future.
	   *
	   * @default {}
	   */
	  slots: PropTypes.shape({
	    first: PropTypes.elementType,
	    last: PropTypes.elementType,
	    next: PropTypes.elementType,
	    previous: PropTypes.elementType
	  }),
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * The type of pagination item.
	   * @default 'page'
	   */
	  type: PropTypes.oneOf(['end-ellipsis', 'first', 'last', 'next', 'page', 'previous', 'start-ellipsis']),
	  /**
	   * The variant to use.
	   * @default 'text'
	   */
	  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['outlined', 'text']), PropTypes.string])
	} : void 0;
	var PaginationItem$1 = PaginationItem;

	const _excluded$i = ["boundaryCount", "className", "color", "count", "defaultPage", "disabled", "getItemAriaLabel", "hideNextButton", "hidePrevButton", "onChange", "page", "renderItem", "shape", "showFirstButton", "showLastButton", "siblingCount", "size", "variant"];
	const useUtilityClasses$d = ownerState => {
	  const {
	    classes,
	    variant
	  } = ownerState;
	  const slots = {
	    root: ['root', variant],
	    ul: ['ul']
	  };
	  return composeClasses(slots, getPaginationUtilityClass, classes);
	};
	const PaginationRoot = styled$1('nav', {
	  name: 'MuiPagination',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant]];
	  }
	})({});
	const PaginationUl = styled$1('ul', {
	  name: 'MuiPagination',
	  slot: 'Ul',
	  overridesResolver: (props, styles) => styles.ul
	})({
	  display: 'flex',
	  flexWrap: 'wrap',
	  alignItems: 'center',
	  padding: 0,
	  margin: 0,
	  listStyle: 'none'
	});
	function defaultGetAriaLabel(type, page, selected) {
	  if (type === 'page') {
	    return `${selected ? '' : 'Go to '}page ${page}`;
	  }
	  return `Go to ${type} page`;
	}
	const Pagination = /*#__PURE__*/reactExports.forwardRef(function Pagination(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPagination'
	  });
	  const {
	      boundaryCount = 1,
	      className,
	      color = 'standard',
	      count = 1,
	      defaultPage = 1,
	      disabled = false,
	      getItemAriaLabel = defaultGetAriaLabel,
	      hideNextButton = false,
	      hidePrevButton = false,
	      renderItem = item => /*#__PURE__*/jsxRuntimeExports.jsx(PaginationItem$1, _extends$2({}, item)),
	      shape = 'circular',
	      showFirstButton = false,
	      showLastButton = false,
	      siblingCount = 1,
	      size = 'medium',
	      variant = 'text'
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$i);
	  const {
	    items
	  } = usePagination(_extends$2({}, props, {
	    componentName: 'Pagination'
	  }));
	  const ownerState = _extends$2({}, props, {
	    boundaryCount,
	    color,
	    count,
	    defaultPage,
	    disabled,
	    getItemAriaLabel,
	    hideNextButton,
	    hidePrevButton,
	    renderItem,
	    shape,
	    showFirstButton,
	    showLastButton,
	    siblingCount,
	    size,
	    variant
	  });
	  const classes = useUtilityClasses$d(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(PaginationRoot, _extends$2({
	    "aria-label": "pagination navigation",
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(PaginationUl, {
	      className: classes.ul,
	      ownerState: ownerState,
	      children: items.map((item, index) => /*#__PURE__*/jsxRuntimeExports.jsx("li", {
	        children: renderItem(_extends$2({}, item, {
	          color,
	          'aria-label': getItemAriaLabel(item.type, item.page, item.selected),
	          shape,
	          size,
	          variant
	        }))
	      }, index))
	    })
	  }));
	});

	// @default tags synced with default values from usePagination

	process.env.NODE_ENV !== "production" ? Pagination.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * Number of always visible pages at the beginning and end.
	   * @default 1
	   */
	  boundaryCount: integerPropType,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The active color.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
	   * @default 'standard'
	   */
	  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary', 'standard']), PropTypes.string]),
	  /**
	   * The total number of pages.
	   * @default 1
	   */
	  count: integerPropType,
	  /**
	   * The page selected by default when the component is uncontrolled.
	   * @default 1
	   */
	  defaultPage: integerPropType,
	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: PropTypes.bool,
	  /**
	   * Accepts a function which returns a string value that provides a user-friendly name for the current page.
	   * This is important for screen reader users.
	   *
	   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
	   * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous' | 'start-ellipsis' | 'end-ellipsis'). Defaults to 'page'.
	   * @param {number} page The page number to format.
	   * @param {bool} selected If true, the current page is selected.
	   * @returns {string}
	   */
	  getItemAriaLabel: PropTypes.func,
	  /**
	   * If `true`, hide the next-page button.
	   * @default false
	   */
	  hideNextButton: PropTypes.bool,
	  /**
	   * If `true`, hide the previous-page button.
	   * @default false
	   */
	  hidePrevButton: PropTypes.bool,
	  /**
	   * Callback fired when the page is changed.
	   *
	   * @param {React.ChangeEvent<unknown>} event The event source of the callback.
	   * @param {number} page The page selected.
	   */
	  onChange: PropTypes.func,
	  /**
	   * The current page.
	   */
	  page: integerPropType,
	  /**
	   * Render the item.
	   * @param {PaginationRenderItemParams} params The props to spread on a PaginationItem.
	   * @returns {ReactNode}
	   * @default (item) => <PaginationItem {...item} />
	   */
	  renderItem: PropTypes.func,
	  /**
	   * The shape of the pagination items.
	   * @default 'circular'
	   */
	  shape: PropTypes.oneOf(['circular', 'rounded']),
	  /**
	   * If `true`, show the first-page button.
	   * @default false
	   */
	  showFirstButton: PropTypes.bool,
	  /**
	   * If `true`, show the last-page button.
	   * @default false
	   */
	  showLastButton: PropTypes.bool,
	  /**
	   * Number of always visible pages before and after the current page.
	   * @default 1
	   */
	  siblingCount: integerPropType,
	  /**
	   * The size of the component.
	   * @default 'medium'
	   */
	  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * The variant to use.
	   * @default 'text'
	   */
	  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['outlined', 'text']), PropTypes.string])
	} : void 0;
	var Pagination$1 = Pagination;

	var Person = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
	}), 'Person');

	function getAvatarUtilityClass(slot) {
	  return generateUtilityClass('MuiAvatar', slot);
	}
	generateUtilityClasses('MuiAvatar', ['root', 'colorDefault', 'circular', 'rounded', 'square', 'img', 'fallback']);

	const _excluded$h = ["alt", "children", "className", "component", "imgProps", "sizes", "src", "srcSet", "variant"];
	const useUtilityClasses$c = ownerState => {
	  const {
	    classes,
	    variant,
	    colorDefault
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, colorDefault && 'colorDefault'],
	    img: ['img'],
	    fallback: ['fallback']
	  };
	  return composeClasses(slots, getAvatarUtilityClass, classes);
	};
	const AvatarRoot = styled$1('div', {
	  name: 'MuiAvatar',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], ownerState.colorDefault && styles.colorDefault];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends$2({
	  position: 'relative',
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'center',
	  flexShrink: 0,
	  width: 40,
	  height: 40,
	  fontFamily: theme.typography.fontFamily,
	  fontSize: theme.typography.pxToRem(20),
	  lineHeight: 1,
	  borderRadius: '50%',
	  overflow: 'hidden',
	  userSelect: 'none'
	}, ownerState.variant === 'rounded' && {
	  borderRadius: (theme.vars || theme).shape.borderRadius
	}, ownerState.variant === 'square' && {
	  borderRadius: 0
	}, ownerState.colorDefault && _extends$2({
	  color: (theme.vars || theme).palette.background.default
	}, theme.vars ? {
	  backgroundColor: theme.vars.palette.Avatar.defaultBg
	} : {
	  backgroundColor: theme.palette.mode === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]
	})));
	const AvatarImg = styled$1('img', {
	  name: 'MuiAvatar',
	  slot: 'Img',
	  overridesResolver: (props, styles) => styles.img
	})({
	  width: '100%',
	  height: '100%',
	  textAlign: 'center',
	  // Handle non-square image. The property isn't supported by IE11.
	  objectFit: 'cover',
	  // Hide alt text.
	  color: 'transparent',
	  // Hide the image broken icon, only works on Chrome.
	  textIndent: 10000
	});
	const AvatarFallback = styled$1(Person, {
	  name: 'MuiAvatar',
	  slot: 'Fallback',
	  overridesResolver: (props, styles) => styles.fallback
	})({
	  width: '75%',
	  height: '75%'
	});
	function useLoaded({
	  crossOrigin,
	  referrerPolicy,
	  src,
	  srcSet
	}) {
	  const [loaded, setLoaded] = reactExports.useState(false);
	  reactExports.useEffect(() => {
	    if (!src && !srcSet) {
	      return undefined;
	    }
	    setLoaded(false);
	    let active = true;
	    const image = new Image();
	    image.onload = () => {
	      if (!active) {
	        return;
	      }
	      setLoaded('loaded');
	    };
	    image.onerror = () => {
	      if (!active) {
	        return;
	      }
	      setLoaded('error');
	    };
	    image.crossOrigin = crossOrigin;
	    image.referrerPolicy = referrerPolicy;
	    image.src = src;
	    if (srcSet) {
	      image.srcset = srcSet;
	    }
	    return () => {
	      active = false;
	    };
	  }, [crossOrigin, referrerPolicy, src, srcSet]);
	  return loaded;
	}
	const Avatar = /*#__PURE__*/reactExports.forwardRef(function Avatar(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiAvatar'
	  });
	  const {
	      alt,
	      children: childrenProp,
	      className,
	      component = 'div',
	      imgProps,
	      sizes,
	      src,
	      srcSet,
	      variant = 'circular'
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$h);
	  let children = null;

	  // Use a hook instead of onError on the img element to support server-side rendering.
	  const loaded = useLoaded(_extends$2({}, imgProps, {
	    src,
	    srcSet
	  }));
	  const hasImg = src || srcSet;
	  const hasImgNotFailing = hasImg && loaded !== 'error';
	  const ownerState = _extends$2({}, props, {
	    colorDefault: !hasImgNotFailing,
	    component,
	    variant
	  });
	  const classes = useUtilityClasses$c(ownerState);
	  if (hasImgNotFailing) {
	    children = /*#__PURE__*/jsxRuntimeExports.jsx(AvatarImg, _extends$2({
	      alt: alt,
	      srcSet: srcSet,
	      src: src,
	      sizes: sizes,
	      ownerState: ownerState,
	      className: classes.img
	    }, imgProps));
	  } else if (childrenProp != null) {
	    children = childrenProp;
	  } else if (hasImg && alt) {
	    children = alt[0];
	  } else {
	    children = /*#__PURE__*/jsxRuntimeExports.jsx(AvatarFallback, {
	      ownerState: ownerState,
	      className: classes.fallback
	    });
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsx(AvatarRoot, _extends$2({
	    as: component,
	    ownerState: ownerState,
	    className: clsx(classes.root, className),
	    ref: ref
	  }, other, {
	    children: children
	  }));
	});
	process.env.NODE_ENV !== "production" ? Avatar.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * Used in combination with `src` or `srcSet` to
	   * provide an alt attribute for the rendered `img` element.
	   */
	  alt: PropTypes.string,
	  /**
	   * Used to render icon or text elements inside the Avatar if `src` is not set.
	   * This can be an element, or just a string.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: PropTypes.elementType,
	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attributes) applied to the `img` element if the component is used to display an image.
	   * It can be used to listen for the loading error event.
	   */
	  imgProps: PropTypes.object,
	  /**
	   * The `sizes` attribute for the `img` element.
	   */
	  sizes: PropTypes.string,
	  /**
	   * The `src` attribute for the `img` element.
	   */
	  src: PropTypes.string,
	  /**
	   * The `srcSet` attribute for the `img` element.
	   * Use this attribute for responsive image display.
	   */
	  srcSet: PropTypes.string,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * The shape of the avatar.
	   * @default 'circular'
	   */
	  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['circular', 'rounded', 'square']), PropTypes.string])
	} : void 0;
	var Avatar$1 = Avatar;

	function getIconButtonUtilityClass(slot) {
	  return generateUtilityClass('MuiIconButton', slot);
	}
	const iconButtonClasses = generateUtilityClasses('MuiIconButton', ['root', 'disabled', 'colorInherit', 'colorPrimary', 'colorSecondary', 'colorError', 'colorInfo', 'colorSuccess', 'colorWarning', 'edgeStart', 'edgeEnd', 'sizeSmall', 'sizeMedium', 'sizeLarge']);
	var iconButtonClasses$1 = iconButtonClasses;

	const _excluded$g = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];
	const useUtilityClasses$b = ownerState => {
	  const {
	    classes,
	    disabled,
	    color,
	    edge,
	    size
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', color !== 'default' && `color${capitalize(color)}`, edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`]
	  };
	  return composeClasses(slots, getIconButtonUtilityClass, classes);
	};
	const IconButtonRoot = styled$1(ButtonBase$1, {
	  name: 'MuiIconButton',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], ownerState.edge && styles[`edge${capitalize(ownerState.edge)}`], styles[`size${capitalize(ownerState.size)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends$2({
	  textAlign: 'center',
	  flex: '0 0 auto',
	  fontSize: theme.typography.pxToRem(24),
	  padding: 8,
	  borderRadius: '50%',
	  overflow: 'visible',
	  // Explicitly set the default value to solve a bug on IE11.
	  color: (theme.vars || theme).palette.action.active,
	  transition: theme.transitions.create('background-color', {
	    duration: theme.transitions.duration.shortest
	  })
	}, !ownerState.disableRipple && {
	  '&:hover': {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }
	}, ownerState.edge === 'start' && {
	  marginLeft: ownerState.size === 'small' ? -3 : -12
	}, ownerState.edge === 'end' && {
	  marginRight: ownerState.size === 'small' ? -3 : -12
	}), ({
	  theme,
	  ownerState
	}) => {
	  var _palette;
	  const palette = (_palette = (theme.vars || theme).palette) == null ? void 0 : _palette[ownerState.color];
	  return _extends$2({}, ownerState.color === 'inherit' && {
	    color: 'inherit'
	  }, ownerState.color !== 'inherit' && ownerState.color !== 'default' && _extends$2({
	    color: palette == null ? void 0 : palette.main
	  }, !ownerState.disableRipple && {
	    '&:hover': _extends$2({}, palette && {
	      backgroundColor: theme.vars ? `rgba(${palette.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(palette.main, theme.palette.action.hoverOpacity)
	    }, {
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    })
	  }), ownerState.size === 'small' && {
	    padding: 5,
	    fontSize: theme.typography.pxToRem(18)
	  }, ownerState.size === 'large' && {
	    padding: 12,
	    fontSize: theme.typography.pxToRem(28)
	  }, {
	    [`&.${iconButtonClasses$1.disabled}`]: {
	      backgroundColor: 'transparent',
	      color: (theme.vars || theme).palette.action.disabled
	    }
	  });
	});

	/**
	 * Refer to the [Icons](/material-ui/icons/) section of the documentation
	 * regarding the available icon options.
	 */
	const IconButton = /*#__PURE__*/reactExports.forwardRef(function IconButton(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiIconButton'
	  });
	  const {
	      edge = false,
	      children,
	      className,
	      color = 'default',
	      disabled = false,
	      disableFocusRipple = false,
	      size = 'medium'
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$g);
	  const ownerState = _extends$2({}, props, {
	    edge,
	    color,
	    disabled,
	    disableFocusRipple,
	    size
	  });
	  const classes = useUtilityClasses$b(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(IconButtonRoot, _extends$2({
	    className: clsx(classes.root, className),
	    centerRipple: true,
	    focusRipple: !disableFocusRipple,
	    disabled: disabled,
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: children
	  }));
	});
	process.env.NODE_ENV !== "production" ? IconButton.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * The icon to display.
	   */
	  children: chainPropTypes(PropTypes.node, props => {
	    const found = reactExports.Children.toArray(props.children).some(child => /*#__PURE__*/reactExports.isValidElement(child) && child.props.onClick);
	    if (found) {
	      return new Error(['MUI: You are providing an onClick event listener to a child of a button element.', 'Prefer applying it to the IconButton directly.', 'This guarantees that the whole <button> will be responsive to click events.'].join('\n'));
	    }
	    return null;
	  }),
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
	   * @default 'default'
	   */
	  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),
	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: PropTypes.bool,
	  /**
	   * If `true`, the  keyboard focus ripple is disabled.
	   * @default false
	   */
	  disableFocusRipple: PropTypes.bool,
	  /**
	   * If `true`, the ripple effect is disabled.
	   *
	   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
	   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
	   * @default false
	   */
	  disableRipple: PropTypes.bool,
	  /**
	   * If given, uses a negative margin to counteract the padding on one
	   * side (this is often helpful for aligning the left or right
	   * side of the icon with content above or below, without ruining the border
	   * size and shape).
	   * @default false
	   */
	  edge: PropTypes.oneOf(['end', 'start', false]),
	  /**
	   * The size of the component.
	   * `small` is equivalent to the dense button styling.
	   * @default 'medium'
	   */
	  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
	} : void 0;
	var IconButton$1 = IconButton;

	const _excluded$f = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];
	function nextItem(list, item, disableListWrap) {
	  if (list === item) {
	    return list.firstChild;
	  }
	  if (item && item.nextElementSibling) {
	    return item.nextElementSibling;
	  }
	  return disableListWrap ? null : list.firstChild;
	}
	function previousItem(list, item, disableListWrap) {
	  if (list === item) {
	    return disableListWrap ? list.firstChild : list.lastChild;
	  }
	  if (item && item.previousElementSibling) {
	    return item.previousElementSibling;
	  }
	  return disableListWrap ? null : list.lastChild;
	}
	function textCriteriaMatches(nextFocus, textCriteria) {
	  if (textCriteria === undefined) {
	    return true;
	  }
	  let text = nextFocus.innerText;
	  if (text === undefined) {
	    // jsdom doesn't support innerText
	    text = nextFocus.textContent;
	  }
	  text = text.trim().toLowerCase();
	  if (text.length === 0) {
	    return false;
	  }
	  if (textCriteria.repeating) {
	    return text[0] === textCriteria.keys[0];
	  }
	  return text.indexOf(textCriteria.keys.join('')) === 0;
	}
	function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
	  let wrappedOnce = false;
	  let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
	  while (nextFocus) {
	    // Prevent infinite loop.
	    if (nextFocus === list.firstChild) {
	      if (wrappedOnce) {
	        return false;
	      }
	      wrappedOnce = true;
	    }

	    // Same logic as useAutocomplete.js
	    const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';
	    if (!nextFocus.hasAttribute('tabindex') || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
	      // Move to the next element.
	      nextFocus = traversalFunction(list, nextFocus, disableListWrap);
	    } else {
	      nextFocus.focus();
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * A permanently displayed menu following https://www.w3.org/WAI/ARIA/apg/patterns/menu-button/.
	 * It's exposed to help customization of the [`Menu`](/material-ui/api/menu/) component if you
	 * use it separately you need to move focus into the component manually. Once
	 * the focus is placed inside the component it is fully keyboard accessible.
	 */
	const MenuList = /*#__PURE__*/reactExports.forwardRef(function MenuList(props, ref) {
	  const {
	      // private
	      // eslint-disable-next-line react/prop-types
	      actions,
	      autoFocus = false,
	      autoFocusItem = false,
	      children,
	      className,
	      disabledItemsFocusable = false,
	      disableListWrap = false,
	      onKeyDown,
	      variant = 'selectedMenu'
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$f);
	  const listRef = reactExports.useRef(null);
	  const textCriteriaRef = reactExports.useRef({
	    keys: [],
	    repeating: true,
	    previousKeyMatched: true,
	    lastTime: null
	  });
	  useEnhancedEffect$1(() => {
	    if (autoFocus) {
	      listRef.current.focus();
	    }
	  }, [autoFocus]);
	  reactExports.useImperativeHandle(actions, () => ({
	    adjustStyleForScrollbar: (containerElement, theme) => {
	      // Let's ignore that piece of logic if users are already overriding the width
	      // of the menu.
	      const noExplicitWidth = !listRef.current.style.width;
	      if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
	        const scrollbarSize = `${getScrollbarSize(ownerDocument(containerElement))}px`;
	        listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;
	        listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
	      }
	      return listRef.current;
	    }
	  }), []);
	  const handleKeyDown = event => {
	    const list = listRef.current;
	    const key = event.key;
	    /**
	     * @type {Element} - will always be defined since we are in a keydown handler
	     * attached to an element. A keydown event is either dispatched to the activeElement
	     * or document.body or document.documentElement. Only the first case will
	     * trigger this specific handler.
	     */
	    const currentFocus = ownerDocument(list).activeElement;
	    if (key === 'ArrowDown') {
	      // Prevent scroll of the page
	      event.preventDefault();
	      moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
	    } else if (key === 'ArrowUp') {
	      event.preventDefault();
	      moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
	    } else if (key === 'Home') {
	      event.preventDefault();
	      moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
	    } else if (key === 'End') {
	      event.preventDefault();
	      moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
	    } else if (key.length === 1) {
	      const criteria = textCriteriaRef.current;
	      const lowerKey = key.toLowerCase();
	      const currTime = performance.now();
	      if (criteria.keys.length > 0) {
	        // Reset
	        if (currTime - criteria.lastTime > 500) {
	          criteria.keys = [];
	          criteria.repeating = true;
	          criteria.previousKeyMatched = true;
	        } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
	          criteria.repeating = false;
	        }
	      }
	      criteria.lastTime = currTime;
	      criteria.keys.push(lowerKey);
	      const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
	      if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
	        event.preventDefault();
	      } else {
	        criteria.previousKeyMatched = false;
	      }
	    }
	    if (onKeyDown) {
	      onKeyDown(event);
	    }
	  };
	  const handleRef = useForkRef(listRef, ref);

	  /**
	   * the index of the item should receive focus
	   * in a `variant="selectedMenu"` it's the first `selected` item
	   * otherwise it's the very first item.
	   */
	  let activeItemIndex = -1;
	  // since we inject focus related props into children we have to do a lookahead
	  // to check if there is a `selected` item. We're looking for the last `selected`
	  // item and use the first valid item as a fallback
	  reactExports.Children.forEach(children, (child, index) => {
	    if (! /*#__PURE__*/reactExports.isValidElement(child)) {
	      if (activeItemIndex === index) {
	        activeItemIndex += 1;
	        if (activeItemIndex >= children.length) {
	          // there are no focusable items within the list.
	          activeItemIndex = -1;
	        }
	      }
	      return;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (reactIsExports$1.isFragment(child)) {
	        console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	      }
	    }
	    if (!child.props.disabled) {
	      if (variant === 'selectedMenu' && child.props.selected) {
	        activeItemIndex = index;
	      } else if (activeItemIndex === -1) {
	        activeItemIndex = index;
	      }
	    }
	    if (activeItemIndex === index && (child.props.disabled || child.props.muiSkipListHighlight || child.type.muiSkipListHighlight)) {
	      activeItemIndex += 1;
	      if (activeItemIndex >= children.length) {
	        // there are no focusable items within the list.
	        activeItemIndex = -1;
	      }
	    }
	  });
	  const items = reactExports.Children.map(children, (child, index) => {
	    if (index === activeItemIndex) {
	      const newChildProps = {};
	      if (autoFocusItem) {
	        newChildProps.autoFocus = true;
	      }
	      if (child.props.tabIndex === undefined && variant === 'selectedMenu') {
	        newChildProps.tabIndex = 0;
	      }
	      return /*#__PURE__*/reactExports.cloneElement(child, newChildProps);
	    }
	    return child;
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsx(List$1, _extends$2({
	    role: "menu",
	    ref: handleRef,
	    className: className,
	    onKeyDown: handleKeyDown,
	    tabIndex: autoFocus ? 0 : -1
	  }, other, {
	    children: items
	  }));
	});
	process.env.NODE_ENV !== "production" ? MenuList.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * If `true`, will focus the `[role="menu"]` container and move into tab order.
	   * @default false
	   */
	  autoFocus: PropTypes.bool,
	  /**
	   * If `true`, will focus the first menuitem if `variant="menu"` or selected item
	   * if `variant="selectedMenu"`.
	   * @default false
	   */
	  autoFocusItem: PropTypes.bool,
	  /**
	   * MenuList contents, normally `MenuItem`s.
	   */
	  children: PropTypes.node,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * If `true`, will allow focus on disabled items.
	   * @default false
	   */
	  disabledItemsFocusable: PropTypes.bool,
	  /**
	   * If `true`, the menu items will not wrap focus.
	   * @default false
	   */
	  disableListWrap: PropTypes.bool,
	  /**
	   * @ignore
	   */
	  onKeyDown: PropTypes.func,
	  /**
	   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
	   * and the vertical alignment relative to the anchor element.
	   * @default 'selectedMenu'
	   */
	  variant: PropTypes.oneOf(['menu', 'selectedMenu'])
	} : void 0;
	var MenuList$1 = MenuList;

	const reflow = node => node.scrollTop;
	function getTransitionProps(props, options) {
	  var _style$transitionDura, _style$transitionTimi;
	  const {
	    timeout,
	    easing,
	    style = {}
	  } = props;
	  return {
	    duration: (_style$transitionDura = style.transitionDuration) != null ? _style$transitionDura : typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,
	    easing: (_style$transitionTimi = style.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing === 'object' ? easing[options.mode] : easing,
	    delay: style.transitionDelay
	  };
	}

	const _excluded$e = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
	function getScale(value) {
	  return `scale(${value}, ${value ** 2})`;
	}
	const styles$1 = {
	  entering: {
	    opacity: 1,
	    transform: getScale(1)
	  },
	  entered: {
	    opacity: 1,
	    transform: 'none'
	  }
	};

	/*
	 TODO v6: remove
	 Conditionally apply a workaround for the CSS transition bug in Safari 15.4 / WebKit browsers.
	 */
	const isWebKit154 = typeof navigator !== 'undefined' && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);

	/**
	 * The Grow transition is used by the [Tooltip](/material-ui/react-tooltip/) and
	 * [Popover](/material-ui/react-popover/) components.
	 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
	 */
	const Grow = /*#__PURE__*/reactExports.forwardRef(function Grow(props, ref) {
	  const {
	      addEndListener,
	      appear = true,
	      children,
	      easing,
	      in: inProp,
	      onEnter,
	      onEntered,
	      onEntering,
	      onExit,
	      onExited,
	      onExiting,
	      style,
	      timeout = 'auto',
	      // eslint-disable-next-line react/prop-types
	      TransitionComponent = Transition$1
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$e);
	  const timer = reactExports.useRef();
	  const autoTimeout = reactExports.useRef();
	  const theme = useTheme();
	  const nodeRef = reactExports.useRef(null);
	  const handleRef = useForkRef(nodeRef, children.ref, ref);
	  const normalizedTransitionCallback = callback => maybeIsAppearing => {
	    if (callback) {
	      const node = nodeRef.current;

	      // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
	      if (maybeIsAppearing === undefined) {
	        callback(node);
	      } else {
	        callback(node, maybeIsAppearing);
	      }
	    }
	  };
	  const handleEntering = normalizedTransitionCallback(onEntering);
	  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
	    reflow(node); // So the animation always start from the start.

	    const {
	      duration: transitionDuration,
	      delay,
	      easing: transitionTimingFunction
	    } = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'enter'
	    });
	    let duration;
	    if (timeout === 'auto') {
	      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
	      autoTimeout.current = duration;
	    } else {
	      duration = transitionDuration;
	    }
	    node.style.transition = [theme.transitions.create('opacity', {
	      duration,
	      delay
	    }), theme.transitions.create('transform', {
	      duration: isWebKit154 ? duration : duration * 0.666,
	      delay,
	      easing: transitionTimingFunction
	    })].join(',');
	    if (onEnter) {
	      onEnter(node, isAppearing);
	    }
	  });
	  const handleEntered = normalizedTransitionCallback(onEntered);
	  const handleExiting = normalizedTransitionCallback(onExiting);
	  const handleExit = normalizedTransitionCallback(node => {
	    const {
	      duration: transitionDuration,
	      delay,
	      easing: transitionTimingFunction
	    } = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'exit'
	    });
	    let duration;
	    if (timeout === 'auto') {
	      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
	      autoTimeout.current = duration;
	    } else {
	      duration = transitionDuration;
	    }
	    node.style.transition = [theme.transitions.create('opacity', {
	      duration,
	      delay
	    }), theme.transitions.create('transform', {
	      duration: isWebKit154 ? duration : duration * 0.666,
	      delay: isWebKit154 ? delay : delay || duration * 0.333,
	      easing: transitionTimingFunction
	    })].join(',');
	    node.style.opacity = 0;
	    node.style.transform = getScale(0.75);
	    if (onExit) {
	      onExit(node);
	    }
	  });
	  const handleExited = normalizedTransitionCallback(onExited);
	  const handleAddEndListener = next => {
	    if (timeout === 'auto') {
	      timer.current = setTimeout(next, autoTimeout.current || 0);
	    }
	    if (addEndListener) {
	      // Old call signature before `react-transition-group` implemented `nodeRef`
	      addEndListener(nodeRef.current, next);
	    }
	  };
	  reactExports.useEffect(() => {
	    return () => {
	      clearTimeout(timer.current);
	    };
	  }, []);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(TransitionComponent, _extends$2({
	    appear: appear,
	    in: inProp,
	    nodeRef: nodeRef,
	    onEnter: handleEnter,
	    onEntered: handleEntered,
	    onEntering: handleEntering,
	    onExit: handleExit,
	    onExited: handleExited,
	    onExiting: handleExiting,
	    addEndListener: handleAddEndListener,
	    timeout: timeout === 'auto' ? null : timeout
	  }, other, {
	    children: (state, childProps) => {
	      return /*#__PURE__*/reactExports.cloneElement(children, _extends$2({
	        style: _extends$2({
	          opacity: 0,
	          transform: getScale(0.75),
	          visibility: state === 'exited' && !inProp ? 'hidden' : undefined
	        }, styles$1[state], style, children.props.style),
	        ref: handleRef
	      }, childProps));
	    }
	  }));
	});
	process.env.NODE_ENV !== "production" ? Grow.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * Add a custom transition end trigger. Called with the transitioning DOM
	   * node and a done callback. Allows for more fine grained transition end
	   * logic. Note: Timeouts are still used as a fallback if provided.
	   */
	  addEndListener: PropTypes.func,
	  /**
	   * Perform the enter transition when it first mounts if `in` is also `true`.
	   * Set this to `false` to disable this behavior.
	   * @default true
	   */
	  appear: PropTypes.bool,
	  /**
	   * A single child content element.
	   */
	  children: elementAcceptingRef$1.isRequired,
	  /**
	   * The transition timing function.
	   * You may specify a single easing or a object containing enter and exit values.
	   */
	  easing: PropTypes.oneOfType([PropTypes.shape({
	    enter: PropTypes.string,
	    exit: PropTypes.string
	  }), PropTypes.string]),
	  /**
	   * If `true`, the component will transition in.
	   */
	  in: PropTypes.bool,
	  /**
	   * @ignore
	   */
	  onEnter: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onEntered: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onEntering: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onExit: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onExited: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onExiting: PropTypes.func,
	  /**
	   * @ignore
	   */
	  style: PropTypes.object,
	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   *
	   * Set to 'auto' to automatically calculate transition time based on height.
	   * @default 'auto'
	   */
	  timeout: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.shape({
	    appear: PropTypes.number,
	    enter: PropTypes.number,
	    exit: PropTypes.number
	  })])
	} : void 0;
	Grow.muiSupportAuto = true;
	var Grow$1 = Grow;

	const _excluded$d = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
	const styles = {
	  entering: {
	    opacity: 1
	  },
	  entered: {
	    opacity: 1
	  }
	};

	/**
	 * The Fade transition is used by the [Modal](/material-ui/react-modal/) component.
	 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
	 */
	const Fade = /*#__PURE__*/reactExports.forwardRef(function Fade(props, ref) {
	  const theme = useTheme();
	  const defaultTimeout = {
	    enter: theme.transitions.duration.enteringScreen,
	    exit: theme.transitions.duration.leavingScreen
	  };
	  const {
	      addEndListener,
	      appear = true,
	      children,
	      easing,
	      in: inProp,
	      onEnter,
	      onEntered,
	      onEntering,
	      onExit,
	      onExited,
	      onExiting,
	      style,
	      timeout = defaultTimeout,
	      // eslint-disable-next-line react/prop-types
	      TransitionComponent = Transition$1
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$d);
	  const nodeRef = reactExports.useRef(null);
	  const handleRef = useForkRef(nodeRef, children.ref, ref);
	  const normalizedTransitionCallback = callback => maybeIsAppearing => {
	    if (callback) {
	      const node = nodeRef.current;

	      // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
	      if (maybeIsAppearing === undefined) {
	        callback(node);
	      } else {
	        callback(node, maybeIsAppearing);
	      }
	    }
	  };
	  const handleEntering = normalizedTransitionCallback(onEntering);
	  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
	    reflow(node); // So the animation always start from the start.

	    const transitionProps = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'enter'
	    });
	    node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
	    node.style.transition = theme.transitions.create('opacity', transitionProps);
	    if (onEnter) {
	      onEnter(node, isAppearing);
	    }
	  });
	  const handleEntered = normalizedTransitionCallback(onEntered);
	  const handleExiting = normalizedTransitionCallback(onExiting);
	  const handleExit = normalizedTransitionCallback(node => {
	    const transitionProps = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'exit'
	    });
	    node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
	    node.style.transition = theme.transitions.create('opacity', transitionProps);
	    if (onExit) {
	      onExit(node);
	    }
	  });
	  const handleExited = normalizedTransitionCallback(onExited);
	  const handleAddEndListener = next => {
	    if (addEndListener) {
	      // Old call signature before `react-transition-group` implemented `nodeRef`
	      addEndListener(nodeRef.current, next);
	    }
	  };
	  return /*#__PURE__*/jsxRuntimeExports.jsx(TransitionComponent, _extends$2({
	    appear: appear,
	    in: inProp,
	    nodeRef: nodeRef ,
	    onEnter: handleEnter,
	    onEntered: handleEntered,
	    onEntering: handleEntering,
	    onExit: handleExit,
	    onExited: handleExited,
	    onExiting: handleExiting,
	    addEndListener: handleAddEndListener,
	    timeout: timeout
	  }, other, {
	    children: (state, childProps) => {
	      return /*#__PURE__*/reactExports.cloneElement(children, _extends$2({
	        style: _extends$2({
	          opacity: 0,
	          visibility: state === 'exited' && !inProp ? 'hidden' : undefined
	        }, styles[state], style, children.props.style),
	        ref: handleRef
	      }, childProps));
	    }
	  }));
	});
	process.env.NODE_ENV !== "production" ? Fade.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * Add a custom transition end trigger. Called with the transitioning DOM
	   * node and a done callback. Allows for more fine grained transition end
	   * logic. Note: Timeouts are still used as a fallback if provided.
	   */
	  addEndListener: PropTypes.func,
	  /**
	   * Perform the enter transition when it first mounts if `in` is also `true`.
	   * Set this to `false` to disable this behavior.
	   * @default true
	   */
	  appear: PropTypes.bool,
	  /**
	   * A single child content element.
	   */
	  children: elementAcceptingRef$1.isRequired,
	  /**
	   * The transition timing function.
	   * You may specify a single easing or a object containing enter and exit values.
	   */
	  easing: PropTypes.oneOfType([PropTypes.shape({
	    enter: PropTypes.string,
	    exit: PropTypes.string
	  }), PropTypes.string]),
	  /**
	   * If `true`, the component will transition in.
	   */
	  in: PropTypes.bool,
	  /**
	   * @ignore
	   */
	  onEnter: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onEntered: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onEntering: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onExit: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onExited: PropTypes.func,
	  /**
	   * @ignore
	   */
	  onExiting: PropTypes.func,
	  /**
	   * @ignore
	   */
	  style: PropTypes.object,
	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   * @default {
	   *   enter: theme.transitions.duration.enteringScreen,
	   *   exit: theme.transitions.duration.leavingScreen,
	   * }
	   */
	  timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
	    appear: PropTypes.number,
	    enter: PropTypes.number,
	    exit: PropTypes.number
	  })])
	} : void 0;
	var Fade$1 = Fade;

	function getBackdropUtilityClass(slot) {
	  return generateUtilityClass('MuiBackdrop', slot);
	}
	generateUtilityClasses('MuiBackdrop', ['root', 'invisible']);

	const _excluded$c = ["children", "className", "component", "components", "componentsProps", "invisible", "open", "slotProps", "slots", "TransitionComponent", "transitionDuration"];
	const useUtilityClasses$a = ownerState => {
	  const {
	    classes,
	    invisible
	  } = ownerState;
	  const slots = {
	    root: ['root', invisible && 'invisible']
	  };
	  return composeClasses(slots, getBackdropUtilityClass, classes);
	};
	const BackdropRoot = styled$1('div', {
	  name: 'MuiBackdrop',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.invisible && styles.invisible];
	  }
	})(({
	  ownerState
	}) => _extends$2({
	  position: 'fixed',
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'center',
	  right: 0,
	  bottom: 0,
	  top: 0,
	  left: 0,
	  backgroundColor: 'rgba(0, 0, 0, 0.5)',
	  WebkitTapHighlightColor: 'transparent'
	}, ownerState.invisible && {
	  backgroundColor: 'transparent'
	}));
	const Backdrop = /*#__PURE__*/reactExports.forwardRef(function Backdrop(inProps, ref) {
	  var _slotProps$root, _ref, _slots$root;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiBackdrop'
	  });
	  const {
	      children,
	      className,
	      component = 'div',
	      components = {},
	      componentsProps = {},
	      invisible = false,
	      open,
	      slotProps = {},
	      slots = {},
	      TransitionComponent = Fade$1,
	      transitionDuration
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$c);
	  const ownerState = _extends$2({}, props, {
	    component,
	    invisible
	  });
	  const classes = useUtilityClasses$a(ownerState);
	  const rootSlotProps = (_slotProps$root = slotProps.root) != null ? _slotProps$root : componentsProps.root;
	  return /*#__PURE__*/jsxRuntimeExports.jsx(TransitionComponent, _extends$2({
	    in: open,
	    timeout: transitionDuration
	  }, other, {
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(BackdropRoot, _extends$2({
	      "aria-hidden": true
	    }, rootSlotProps, {
	      as: (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : component,
	      className: clsx(classes.root, className, rootSlotProps == null ? void 0 : rootSlotProps.className),
	      ownerState: _extends$2({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
	      classes: classes,
	      ref: ref,
	      children: children
	    }))
	  }));
	});
	process.env.NODE_ENV !== "production" ? Backdrop.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * The content of the component.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: PropTypes.elementType,
	  /**
	   * The components used for each slot inside.
	   *
	   * This prop is an alias for the `slots` prop.
	   * It's recommended to use the `slots` prop instead.
	   *
	   * @default {}
	   */
	  components: PropTypes.shape({
	    Root: PropTypes.elementType
	  }),
	  /**
	   * The extra props for the slot components.
	   * You can override the existing props or add new ones.
	   *
	   * This prop is an alias for the `slotProps` prop.
	   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
	   *
	   * @default {}
	   */
	  componentsProps: PropTypes.shape({
	    root: PropTypes.object
	  }),
	  /**
	   * If `true`, the backdrop is invisible.
	   * It can be used when rendering a popover or a custom select component.
	   * @default false
	   */
	  invisible: PropTypes.bool,
	  /**
	   * If `true`, the component is shown.
	   */
	  open: PropTypes.bool.isRequired,
	  /**
	   * The extra props for the slot components.
	   * You can override the existing props or add new ones.
	   *
	   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
	   *
	   * @default {}
	   */
	  slotProps: PropTypes.shape({
	    root: PropTypes.object
	  }),
	  /**
	   * The components used for each slot inside.
	   *
	   * This prop is an alias for the `components` prop, which will be deprecated in the future.
	   *
	   * @default {}
	   */
	  slots: PropTypes.shape({
	    root: PropTypes.elementType
	  }),
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * The component used for the transition.
	   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
	   * @default Fade
	   */
	  TransitionComponent: PropTypes.elementType,
	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   */
	  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
	    appear: PropTypes.number,
	    enter: PropTypes.number,
	    exit: PropTypes.number
	  })])
	} : void 0;
	var Backdrop$1 = Backdrop;

	function getModalUtilityClass(slot) {
	  return generateUtilityClass('MuiModal', slot);
	}
	generateUtilityClasses('MuiModal', ['root', 'hidden', 'backdrop']);

	const _excluded$b = ["BackdropComponent", "BackdropProps", "classes", "className", "closeAfterTransition", "children", "container", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onTransitionEnter", "onTransitionExited", "open", "slotProps", "slots", "theme"];
	const useUtilityClasses$9 = ownerState => {
	  const {
	    open,
	    exited,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', !open && exited && 'hidden'],
	    backdrop: ['backdrop']
	  };
	  return composeClasses(slots, getModalUtilityClass, classes);
	};
	const ModalRoot = styled$1('div', {
	  name: 'MuiModal',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, !ownerState.open && ownerState.exited && styles.hidden];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends$2({
	  position: 'fixed',
	  zIndex: (theme.vars || theme).zIndex.modal,
	  right: 0,
	  bottom: 0,
	  top: 0,
	  left: 0
	}, !ownerState.open && ownerState.exited && {
	  visibility: 'hidden'
	}));
	const ModalBackdrop = styled$1(Backdrop$1, {
	  name: 'MuiModal',
	  slot: 'Backdrop',
	  overridesResolver: (props, styles) => {
	    return styles.backdrop;
	  }
	})({
	  zIndex: -1
	});

	/**
	 * Modal is a lower-level construct that is leveraged by the following components:
	 *
	 * - [Dialog](/material-ui/api/dialog/)
	 * - [Drawer](/material-ui/api/drawer/)
	 * - [Menu](/material-ui/api/menu/)
	 * - [Popover](/material-ui/api/popover/)
	 *
	 * If you are creating a modal dialog, you probably want to use the [Dialog](/material-ui/api/dialog/) component
	 * rather than directly using Modal.
	 *
	 * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
	 */
	const Modal = /*#__PURE__*/reactExports.forwardRef(function Modal(inProps, ref) {
	  var _ref, _slots$root, _ref2, _slots$backdrop, _slotProps$root, _slotProps$backdrop;
	  const props = useThemeProps({
	    name: 'MuiModal',
	    props: inProps
	  });
	  const {
	      BackdropComponent = ModalBackdrop,
	      BackdropProps,
	      className,
	      closeAfterTransition = false,
	      children,
	      container,
	      component,
	      components = {},
	      componentsProps = {},
	      disableAutoFocus = false,
	      disableEnforceFocus = false,
	      disableEscapeKeyDown = false,
	      disablePortal = false,
	      disableRestoreFocus = false,
	      disableScrollLock = false,
	      hideBackdrop = false,
	      keepMounted = false,
	      onBackdropClick,
	      open,
	      slotProps,
	      slots
	      // eslint-disable-next-line react/prop-types
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$b);
	  const propsWithDefaults = _extends$2({}, props, {
	    closeAfterTransition,
	    disableAutoFocus,
	    disableEnforceFocus,
	    disableEscapeKeyDown,
	    disablePortal,
	    disableRestoreFocus,
	    disableScrollLock,
	    hideBackdrop,
	    keepMounted
	  });
	  const {
	    getRootProps,
	    getBackdropProps,
	    getTransitionProps,
	    portalRef,
	    isTopModal,
	    exited,
	    hasTransition
	  } = useModal(_extends$2({}, propsWithDefaults, {
	    rootRef: ref
	  }));
	  const ownerState = _extends$2({}, propsWithDefaults, {
	    exited
	  });
	  const classes = useUtilityClasses$9(ownerState);
	  const childProps = {};
	  if (children.props.tabIndex === undefined) {
	    childProps.tabIndex = '-1';
	  }

	  // It's a Transition like component
	  if (hasTransition) {
	    const {
	      onEnter,
	      onExited
	    } = getTransitionProps();
	    childProps.onEnter = onEnter;
	    childProps.onExited = onExited;
	  }
	  const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : ModalRoot;
	  const BackdropSlot = (_ref2 = (_slots$backdrop = slots == null ? void 0 : slots.backdrop) != null ? _slots$backdrop : components.Backdrop) != null ? _ref2 : BackdropComponent;
	  const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
	  const backdropSlotProps = (_slotProps$backdrop = slotProps == null ? void 0 : slotProps.backdrop) != null ? _slotProps$backdrop : componentsProps.backdrop;
	  const rootProps = useSlotProps({
	    elementType: RootSlot,
	    externalSlotProps: rootSlotProps,
	    externalForwardedProps: other,
	    getSlotProps: getRootProps,
	    additionalProps: {
	      ref,
	      as: component
	    },
	    ownerState,
	    className: clsx(className, rootSlotProps == null ? void 0 : rootSlotProps.className, classes == null ? void 0 : classes.root, !ownerState.open && ownerState.exited && (classes == null ? void 0 : classes.hidden))
	  });
	  const backdropProps = useSlotProps({
	    elementType: BackdropSlot,
	    externalSlotProps: backdropSlotProps,
	    additionalProps: BackdropProps,
	    getSlotProps: otherHandlers => {
	      return getBackdropProps(_extends$2({}, otherHandlers, {
	        onClick: e => {
	          if (onBackdropClick) {
	            onBackdropClick(e);
	          }
	          if (otherHandlers != null && otherHandlers.onClick) {
	            otherHandlers.onClick(e);
	          }
	        }
	      }));
	    },
	    className: clsx(backdropSlotProps == null ? void 0 : backdropSlotProps.className, BackdropProps == null ? void 0 : BackdropProps.className, classes == null ? void 0 : classes.backdrop),
	    ownerState
	  });
	  if (!keepMounted && !open && (!hasTransition || exited)) {
	    return null;
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsx(Portal, {
	    ref: portalRef,
	    container: container,
	    disablePortal: disablePortal,
	    children: /*#__PURE__*/jsxRuntimeExports.jsxs(RootSlot, _extends$2({}, rootProps, {
	      children: [!hideBackdrop && BackdropComponent ? /*#__PURE__*/jsxRuntimeExports.jsx(BackdropSlot, _extends$2({}, backdropProps)) : null, /*#__PURE__*/jsxRuntimeExports.jsx(FocusTrap, {
	        disableEnforceFocus: disableEnforceFocus,
	        disableAutoFocus: disableAutoFocus,
	        disableRestoreFocus: disableRestoreFocus,
	        isEnabled: isTopModal,
	        open: open,
	        children: /*#__PURE__*/reactExports.cloneElement(children, childProps)
	      })]
	    }))
	  });
	});
	process.env.NODE_ENV !== "production" ? Modal.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * A backdrop component. This prop enables custom backdrop rendering.
	   * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
	   * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
	   * @default styled(Backdrop, {
	   *   name: 'MuiModal',
	   *   slot: 'Backdrop',
	   *   overridesResolver: (props, styles) => {
	   *     return styles.backdrop;
	   *   },
	   * })({
	   *   zIndex: -1,
	   * })
	   */
	  BackdropComponent: PropTypes.elementType,
	  /**
	   * Props applied to the [`Backdrop`](/material-ui/api/backdrop/) element.
	   * @deprecated Use `slotProps.backdrop` instead.
	   */
	  BackdropProps: PropTypes.object,
	  /**
	   * A single child content element.
	   */
	  children: elementAcceptingRef$1.isRequired,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * When set to true the Modal waits until a nested Transition is completed before closing.
	   * @default false
	   */
	  closeAfterTransition: PropTypes.bool,
	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: PropTypes.elementType,
	  /**
	   * The components used for each slot inside.
	   *
	   * This prop is an alias for the `slots` prop.
	   * It's recommended to use the `slots` prop instead.
	   *
	   * @default {}
	   */
	  components: PropTypes.shape({
	    Backdrop: PropTypes.elementType,
	    Root: PropTypes.elementType
	  }),
	  /**
	   * The extra props for the slot components.
	   * You can override the existing props or add new ones.
	   *
	   * This prop is an alias for the `slotProps` prop.
	   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
	   *
	   * @default {}
	   */
	  componentsProps: PropTypes.shape({
	    backdrop: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
	    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
	  }),
	  /**
	   * An HTML element or function that returns one.
	   * The `container` will have the portal children appended to it.
	   *
	   * By default, it uses the body of the top-level document object,
	   * so it's simply `document.body` most of the time.
	   */
	  container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),
	  /**
	   * If `true`, the modal will not automatically shift focus to itself when it opens, and
	   * replace it to the last focused element when it closes.
	   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
	   *
	   * Generally this should never be set to `true` as it makes the modal less
	   * accessible to assistive technologies, like screen readers.
	   * @default false
	   */
	  disableAutoFocus: PropTypes.bool,
	  /**
	   * If `true`, the modal will not prevent focus from leaving the modal while open.
	   *
	   * Generally this should never be set to `true` as it makes the modal less
	   * accessible to assistive technologies, like screen readers.
	   * @default false
	   */
	  disableEnforceFocus: PropTypes.bool,
	  /**
	   * If `true`, hitting escape will not fire the `onClose` callback.
	   * @default false
	   */
	  disableEscapeKeyDown: PropTypes.bool,
	  /**
	   * The `children` will be under the DOM hierarchy of the parent component.
	   * @default false
	   */
	  disablePortal: PropTypes.bool,
	  /**
	   * If `true`, the modal will not restore focus to previously focused element once
	   * modal is hidden or unmounted.
	   * @default false
	   */
	  disableRestoreFocus: PropTypes.bool,
	  /**
	   * Disable the scroll lock behavior.
	   * @default false
	   */
	  disableScrollLock: PropTypes.bool,
	  /**
	   * If `true`, the backdrop is not rendered.
	   * @default false
	   */
	  hideBackdrop: PropTypes.bool,
	  /**
	   * Always keep the children in the DOM.
	   * This prop can be useful in SEO situation or
	   * when you want to maximize the responsiveness of the Modal.
	   * @default false
	   */
	  keepMounted: PropTypes.bool,
	  /**
	   * Callback fired when the backdrop is clicked.
	   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
	   */
	  onBackdropClick: PropTypes.func,
	  /**
	   * Callback fired when the component requests to be closed.
	   * The `reason` parameter can optionally be used to control the response to `onClose`.
	   *
	   * @param {object} event The event source of the callback.
	   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
	   */
	  onClose: PropTypes.func,
	  /**
	   * A function called when a transition enters.
	   */
	  onTransitionEnter: PropTypes.func,
	  /**
	   * A function called when a transition has exited.
	   */
	  onTransitionExited: PropTypes.func,
	  /**
	   * If `true`, the component is shown.
	   */
	  open: PropTypes.bool.isRequired,
	  /**
	   * The props used for each slot inside the Modal.
	   * @default {}
	   */
	  slotProps: PropTypes.shape({
	    backdrop: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
	    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
	  }),
	  /**
	   * The components used for each slot inside the Modal.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  slots: PropTypes.shape({
	    backdrop: PropTypes.elementType,
	    root: PropTypes.elementType
	  }),
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
	} : void 0;
	var Modal$1 = Modal;

	function getPaperUtilityClass(slot) {
	  return generateUtilityClass('MuiPaper', slot);
	}
	generateUtilityClasses('MuiPaper', ['root', 'rounded', 'outlined', 'elevation', 'elevation0', 'elevation1', 'elevation2', 'elevation3', 'elevation4', 'elevation5', 'elevation6', 'elevation7', 'elevation8', 'elevation9', 'elevation10', 'elevation11', 'elevation12', 'elevation13', 'elevation14', 'elevation15', 'elevation16', 'elevation17', 'elevation18', 'elevation19', 'elevation20', 'elevation21', 'elevation22', 'elevation23', 'elevation24']);

	const _excluded$a = ["className", "component", "elevation", "square", "variant"];
	const useUtilityClasses$8 = ownerState => {
	  const {
	    square,
	    elevation,
	    variant,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, !square && 'rounded', variant === 'elevation' && `elevation${elevation}`]
	  };
	  return composeClasses(slots, getPaperUtilityClass, classes);
	};
	const PaperRoot = styled$1('div', {
	  name: 'MuiPaper',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], !ownerState.square && styles.rounded, ownerState.variant === 'elevation' && styles[`elevation${ownerState.elevation}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  var _theme$vars$overlays;
	  return _extends$2({
	    backgroundColor: (theme.vars || theme).palette.background.paper,
	    color: (theme.vars || theme).palette.text.primary,
	    transition: theme.transitions.create('box-shadow')
	  }, !ownerState.square && {
	    borderRadius: theme.shape.borderRadius
	  }, ownerState.variant === 'outlined' && {
	    border: `1px solid ${(theme.vars || theme).palette.divider}`
	  }, ownerState.variant === 'elevation' && _extends$2({
	    boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
	  }, !theme.vars && theme.palette.mode === 'dark' && {
	    backgroundImage: `linear-gradient(${alpha('#fff', getOverlayAlpha$1(ownerState.elevation))}, ${alpha('#fff', getOverlayAlpha$1(ownerState.elevation))})`
	  }, theme.vars && {
	    backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
	  }));
	});
	const Paper = /*#__PURE__*/reactExports.forwardRef(function Paper(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPaper'
	  });
	  const {
	      className,
	      component = 'div',
	      elevation = 1,
	      square = false,
	      variant = 'elevation'
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$a);
	  const ownerState = _extends$2({}, props, {
	    component,
	    elevation,
	    square,
	    variant
	  });
	  const classes = useUtilityClasses$8(ownerState);
	  if (process.env.NODE_ENV !== 'production') {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    const theme = useTheme();
	    if (theme.shadows[elevation] === undefined) {
	      console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join('\n'));
	    }
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsx(PaperRoot, _extends$2({
	    as: component,
	    ownerState: ownerState,
	    className: clsx(classes.root, className),
	    ref: ref
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? Paper.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * The content of the component.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: PropTypes.elementType,
	  /**
	   * Shadow depth, corresponds to `dp` in the spec.
	   * It accepts values between 0 and 24 inclusive.
	   * @default 1
	   */
	  elevation: chainPropTypes(integerPropType, props => {
	    const {
	      elevation,
	      variant
	    } = props;
	    if (elevation > 0 && variant === 'outlined') {
	      return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
	    }
	    return null;
	  }),
	  /**
	   * If `true`, rounded corners are disabled.
	   * @default false
	   */
	  square: PropTypes.bool,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * The variant to use.
	   * @default 'elevation'
	   */
	  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['elevation', 'outlined']), PropTypes.string])
	} : void 0;
	var Paper$1 = Paper;

	function getPopoverUtilityClass(slot) {
	  return generateUtilityClass('MuiPopover', slot);
	}
	generateUtilityClasses('MuiPopover', ['root', 'paper']);

	const _excluded$9 = ["onEntering"],
	  _excluded2$1 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "slots", "slotProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps", "disableScrollLock"],
	  _excluded3 = ["slotProps"];
	function getOffsetTop(rect, vertical) {
	  let offset = 0;
	  if (typeof vertical === 'number') {
	    offset = vertical;
	  } else if (vertical === 'center') {
	    offset = rect.height / 2;
	  } else if (vertical === 'bottom') {
	    offset = rect.height;
	  }
	  return offset;
	}
	function getOffsetLeft(rect, horizontal) {
	  let offset = 0;
	  if (typeof horizontal === 'number') {
	    offset = horizontal;
	  } else if (horizontal === 'center') {
	    offset = rect.width / 2;
	  } else if (horizontal === 'right') {
	    offset = rect.width;
	  }
	  return offset;
	}
	function getTransformOriginValue(transformOrigin) {
	  return [transformOrigin.horizontal, transformOrigin.vertical].map(n => typeof n === 'number' ? `${n}px` : n).join(' ');
	}
	function resolveAnchorEl(anchorEl) {
	  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
	}
	const useUtilityClasses$7 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    paper: ['paper']
	  };
	  return composeClasses(slots, getPopoverUtilityClass, classes);
	};
	const PopoverRoot = styled$1(Modal$1, {
	  name: 'MuiPopover',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});
	const PopoverPaper = styled$1(Paper$1, {
	  name: 'MuiPopover',
	  slot: 'Paper',
	  overridesResolver: (props, styles) => styles.paper
	})({
	  position: 'absolute',
	  overflowY: 'auto',
	  overflowX: 'hidden',
	  // So we see the popover when it's empty.
	  // It's most likely on issue on userland.
	  minWidth: 16,
	  minHeight: 16,
	  maxWidth: 'calc(100% - 32px)',
	  maxHeight: 'calc(100% - 32px)',
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0
	});
	const Popover = /*#__PURE__*/reactExports.forwardRef(function Popover(inProps, ref) {
	  var _slotProps$paper, _slots$root, _slots$paper;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPopover'
	  });
	  const {
	      action,
	      anchorEl,
	      anchorOrigin = {
	        vertical: 'top',
	        horizontal: 'left'
	      },
	      anchorPosition,
	      anchorReference = 'anchorEl',
	      children,
	      className,
	      container: containerProp,
	      elevation = 8,
	      marginThreshold = 16,
	      open,
	      PaperProps: PaperPropsProp = {},
	      slots,
	      slotProps,
	      transformOrigin = {
	        vertical: 'top',
	        horizontal: 'left'
	      },
	      TransitionComponent = Grow$1,
	      transitionDuration: transitionDurationProp = 'auto',
	      TransitionProps: {
	        onEntering
	      } = {},
	      disableScrollLock = false
	    } = props,
	    TransitionProps = _objectWithoutPropertiesLoose$1(props.TransitionProps, _excluded$9),
	    other = _objectWithoutPropertiesLoose$1(props, _excluded2$1);
	  const externalPaperSlotProps = (_slotProps$paper = slotProps == null ? void 0 : slotProps.paper) != null ? _slotProps$paper : PaperPropsProp;
	  const paperRef = reactExports.useRef();
	  const handlePaperRef = useForkRef(paperRef, externalPaperSlotProps.ref);
	  const ownerState = _extends$2({}, props, {
	    anchorOrigin,
	    anchorReference,
	    elevation,
	    marginThreshold,
	    externalPaperSlotProps,
	    transformOrigin,
	    TransitionComponent,
	    transitionDuration: transitionDurationProp,
	    TransitionProps
	  });
	  const classes = useUtilityClasses$7(ownerState);

	  // Returns the top/left offset of the position
	  // to attach to on the anchor element (or body if none is provided)
	  const getAnchorOffset = reactExports.useCallback(() => {
	    if (anchorReference === 'anchorPosition') {
	      if (process.env.NODE_ENV !== 'production') {
	        if (!anchorPosition) {
	          console.error('MUI: You need to provide a `anchorPosition` prop when using ' + '<Popover anchorReference="anchorPosition" />.');
	        }
	      }
	      return anchorPosition;
	    }
	    const resolvedAnchorEl = resolveAnchorEl(anchorEl);

	    // If an anchor element wasn't provided, just use the parent body element of this Popover
	    const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument(paperRef.current).body;
	    const anchorRect = anchorElement.getBoundingClientRect();
	    if (process.env.NODE_ENV !== 'production') {
	      const box = anchorElement.getBoundingClientRect();
	      if (process.env.NODE_ENV !== 'test' && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
	        console.warn(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
	      }
	    }
	    return {
	      top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
	      left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
	    };
	  }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);

	  // Returns the base transform origin using the element
	  const getTransformOrigin = reactExports.useCallback(elemRect => {
	    return {
	      vertical: getOffsetTop(elemRect, transformOrigin.vertical),
	      horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
	    };
	  }, [transformOrigin.horizontal, transformOrigin.vertical]);
	  const getPositioningStyle = reactExports.useCallback(element => {
	    const elemRect = {
	      width: element.offsetWidth,
	      height: element.offsetHeight
	    };

	    // Get the transform origin point on the element itself
	    const elemTransformOrigin = getTransformOrigin(elemRect);
	    if (anchorReference === 'none') {
	      return {
	        top: null,
	        left: null,
	        transformOrigin: getTransformOriginValue(elemTransformOrigin)
	      };
	    }

	    // Get the offset of the anchoring element
	    const anchorOffset = getAnchorOffset();

	    // Calculate element positioning
	    let top = anchorOffset.top - elemTransformOrigin.vertical;
	    let left = anchorOffset.left - elemTransformOrigin.horizontal;
	    const bottom = top + elemRect.height;
	    const right = left + elemRect.width;

	    // Use the parent window of the anchorEl if provided
	    const containerWindow = ownerWindow(resolveAnchorEl(anchorEl));

	    // Window thresholds taking required margin into account
	    const heightThreshold = containerWindow.innerHeight - marginThreshold;
	    const widthThreshold = containerWindow.innerWidth - marginThreshold;

	    // Check if the vertical axis needs shifting
	    if (marginThreshold !== null && top < marginThreshold) {
	      const diff = top - marginThreshold;
	      top -= diff;
	      elemTransformOrigin.vertical += diff;
	    } else if (marginThreshold !== null && bottom > heightThreshold) {
	      const diff = bottom - heightThreshold;
	      top -= diff;
	      elemTransformOrigin.vertical += diff;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
	        console.error(['MUI: The popover component is too tall.', `Some part of it can not be seen on the screen (${elemRect.height - heightThreshold}px).`, 'Please consider adding a `max-height` to improve the user-experience.'].join('\n'));
	      }
	    }

	    // Check if the horizontal axis needs shifting
	    if (marginThreshold !== null && left < marginThreshold) {
	      const diff = left - marginThreshold;
	      left -= diff;
	      elemTransformOrigin.horizontal += diff;
	    } else if (right > widthThreshold) {
	      const diff = right - widthThreshold;
	      left -= diff;
	      elemTransformOrigin.horizontal += diff;
	    }
	    return {
	      top: `${Math.round(top)}px`,
	      left: `${Math.round(left)}px`,
	      transformOrigin: getTransformOriginValue(elemTransformOrigin)
	    };
	  }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
	  const [isPositioned, setIsPositioned] = reactExports.useState(open);
	  const setPositioningStyles = reactExports.useCallback(() => {
	    const element = paperRef.current;
	    if (!element) {
	      return;
	    }
	    const positioning = getPositioningStyle(element);
	    if (positioning.top !== null) {
	      element.style.top = positioning.top;
	    }
	    if (positioning.left !== null) {
	      element.style.left = positioning.left;
	    }
	    element.style.transformOrigin = positioning.transformOrigin;
	    setIsPositioned(true);
	  }, [getPositioningStyle]);
	  reactExports.useEffect(() => {
	    if (disableScrollLock) {
	      window.addEventListener('scroll', setPositioningStyles);
	    }
	    return () => window.removeEventListener('scroll', setPositioningStyles);
	  }, [anchorEl, disableScrollLock, setPositioningStyles]);
	  const handleEntering = (element, isAppearing) => {
	    if (onEntering) {
	      onEntering(element, isAppearing);
	    }
	    setPositioningStyles();
	  };
	  const handleExited = () => {
	    setIsPositioned(false);
	  };
	  reactExports.useEffect(() => {
	    if (open) {
	      setPositioningStyles();
	    }
	  });
	  reactExports.useImperativeHandle(action, () => open ? {
	    updatePosition: () => {
	      setPositioningStyles();
	    }
	  } : null, [open, setPositioningStyles]);
	  reactExports.useEffect(() => {
	    if (!open) {
	      return undefined;
	    }
	    const handleResize = debounce$1(() => {
	      setPositioningStyles();
	    });
	    const containerWindow = ownerWindow(anchorEl);
	    containerWindow.addEventListener('resize', handleResize);
	    return () => {
	      handleResize.clear();
	      containerWindow.removeEventListener('resize', handleResize);
	    };
	  }, [anchorEl, open, setPositioningStyles]);
	  let transitionDuration = transitionDurationProp;
	  if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {
	    transitionDuration = undefined;
	  }

	  // If the container prop is provided, use that
	  // If the anchorEl prop is provided, use its parent body element as the container
	  // If neither are provided let the Modal take care of choosing the container
	  const container = containerProp || (anchorEl ? ownerDocument(resolveAnchorEl(anchorEl)).body : undefined);
	  const RootSlot = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : PopoverRoot;
	  const PaperSlot = (_slots$paper = slots == null ? void 0 : slots.paper) != null ? _slots$paper : PopoverPaper;
	  const paperProps = useSlotProps({
	    elementType: PaperSlot,
	    externalSlotProps: _extends$2({}, externalPaperSlotProps, {
	      style: isPositioned ? externalPaperSlotProps.style : _extends$2({}, externalPaperSlotProps.style, {
	        opacity: 0
	      })
	    }),
	    additionalProps: {
	      elevation,
	      ref: handlePaperRef
	    },
	    ownerState,
	    className: clsx(classes.paper, externalPaperSlotProps == null ? void 0 : externalPaperSlotProps.className)
	  });
	  const _useSlotProps = useSlotProps({
	      elementType: RootSlot,
	      externalSlotProps: (slotProps == null ? void 0 : slotProps.root) || {},
	      externalForwardedProps: other,
	      additionalProps: {
	        ref,
	        slotProps: {
	          backdrop: {
	            invisible: true
	          }
	        },
	        container,
	        open
	      },
	      ownerState,
	      className: clsx(classes.root, className)
	    }),
	    {
	      slotProps: rootSlotPropsProp
	    } = _useSlotProps,
	    rootProps = _objectWithoutPropertiesLoose$1(_useSlotProps, _excluded3);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(RootSlot, _extends$2({}, rootProps, !isHostComponent(RootSlot) && {
	    slotProps: rootSlotPropsProp,
	    disableScrollLock
	  }, {
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(TransitionComponent, _extends$2({
	      appear: true,
	      in: open,
	      onEntering: handleEntering,
	      onExited: handleExited,
	      timeout: transitionDuration
	    }, TransitionProps, {
	      children: /*#__PURE__*/jsxRuntimeExports.jsx(PaperSlot, _extends$2({}, paperProps, {
	        children: children
	      }))
	    }))
	  }));
	});
	process.env.NODE_ENV !== "production" ? Popover.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * A ref for imperative actions.
	   * It currently only supports updatePosition() action.
	   */
	  action: refType$1,
	  /**
	   * An HTML element, [PopoverVirtualElement](/material-ui/react-popover/#virtual-element),
	   * or a function that returns either.
	   * It's used to set the position of the popover.
	   */
	  anchorEl: chainPropTypes(PropTypes.oneOfType([HTMLElementType, PropTypes.func]), props => {
	    if (props.open && (!props.anchorReference || props.anchorReference === 'anchorEl')) {
	      const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
	      if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
	        const box = resolvedAnchorEl.getBoundingClientRect();
	        if (process.env.NODE_ENV !== 'test' && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
	          return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
	        }
	      } else {
	        return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', `It should be an Element or PopoverVirtualElement instance but it's \`${resolvedAnchorEl}\` instead.`].join('\n'));
	      }
	    }
	    return null;
	  }),
	  /**
	   * This is the point on the anchor where the popover's
	   * `anchorEl` will attach to. This is not used when the
	   * anchorReference is 'anchorPosition'.
	   *
	   * Options:
	   * vertical: [top, center, bottom];
	   * horizontal: [left, center, right].
	   * @default {
	   *   vertical: 'top',
	   *   horizontal: 'left',
	   * }
	   */
	  anchorOrigin: PropTypes.shape({
	    horizontal: PropTypes.oneOfType([PropTypes.oneOf(['center', 'left', 'right']), PropTypes.number]).isRequired,
	    vertical: PropTypes.oneOfType([PropTypes.oneOf(['bottom', 'center', 'top']), PropTypes.number]).isRequired
	  }),
	  /**
	   * This is the position that may be used to set the position of the popover.
	   * The coordinates are relative to the application's client area.
	   */
	  anchorPosition: PropTypes.shape({
	    left: PropTypes.number.isRequired,
	    top: PropTypes.number.isRequired
	  }),
	  /**
	   * This determines which anchor prop to refer to when setting
	   * the position of the popover.
	   * @default 'anchorEl'
	   */
	  anchorReference: PropTypes.oneOf(['anchorEl', 'anchorPosition', 'none']),
	  /**
	   * The content of the component.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * An HTML element, component instance, or function that returns either.
	   * The `container` will passed to the Modal component.
	   *
	   * By default, it uses the body of the anchorEl's top-level document object,
	   * so it's simply `document.body` most of the time.
	   */
	  container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),
	  /**
	   * Disable the scroll lock behavior.
	   * @default false
	   */
	  disableScrollLock: PropTypes.bool,
	  /**
	   * The elevation of the popover.
	   * @default 8
	   */
	  elevation: integerPropType,
	  /**
	   * Specifies how close to the edge of the window the popover can appear.
	   * If null, the popover will not be constrained by the window.
	   * @default 16
	   */
	  marginThreshold: PropTypes.number,
	  /**
	   * Callback fired when the component requests to be closed.
	   * The `reason` parameter can optionally be used to control the response to `onClose`.
	   */
	  onClose: PropTypes.func,
	  /**
	   * If `true`, the component is shown.
	   */
	  open: PropTypes.bool.isRequired,
	  /**
	   * Props applied to the [`Paper`](/material-ui/api/paper/) element.
	   *
	   * This prop is an alias for `slotProps.paper` and will be overriden by it if both are used.
	   * @deprecated Use `slotProps.paper` instead.
	   *
	   * @default {}
	   */
	  PaperProps: PropTypes /* @typescript-to-proptypes-ignore */.shape({
	    component: elementTypeAcceptingRef$1
	  }),
	  /**
	   * The extra props for the slot components.
	   * You can override the existing props or add new ones.
	   *
	   * @default {}
	   */
	  slotProps: PropTypes.shape({
	    paper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
	    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
	  }),
	  /**
	   * The components used for each slot inside.
	   *
	   * @default {}
	   */
	  slots: PropTypes.shape({
	    paper: PropTypes.elementType,
	    root: PropTypes.elementType
	  }),
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * This is the point on the popover which
	   * will attach to the anchor's origin.
	   *
	   * Options:
	   * vertical: [top, center, bottom, x(px)];
	   * horizontal: [left, center, right, x(px)].
	   * @default {
	   *   vertical: 'top',
	   *   horizontal: 'left',
	   * }
	   */
	  transformOrigin: PropTypes.shape({
	    horizontal: PropTypes.oneOfType([PropTypes.oneOf(['center', 'left', 'right']), PropTypes.number]).isRequired,
	    vertical: PropTypes.oneOfType([PropTypes.oneOf(['bottom', 'center', 'top']), PropTypes.number]).isRequired
	  }),
	  /**
	   * The component used for the transition.
	   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
	   * @default Grow
	   */
	  TransitionComponent: PropTypes.elementType,
	  /**
	   * Set to 'auto' to automatically calculate transition time based on height.
	   * @default 'auto'
	   */
	  transitionDuration: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.shape({
	    appear: PropTypes.number,
	    enter: PropTypes.number,
	    exit: PropTypes.number
	  })]),
	  /**
	   * Props applied to the transition element.
	   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
	   * @default {}
	   */
	  TransitionProps: PropTypes.object
	} : void 0;
	var Popover$1 = Popover;

	function getMenuUtilityClass(slot) {
	  return generateUtilityClass('MuiMenu', slot);
	}
	generateUtilityClasses('MuiMenu', ['root', 'paper', 'list']);

	const _excluded$8 = ["onEntering"],
	  _excluded2 = ["autoFocus", "children", "className", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant", "slots", "slotProps"];
	const RTL_ORIGIN = {
	  vertical: 'top',
	  horizontal: 'right'
	};
	const LTR_ORIGIN = {
	  vertical: 'top',
	  horizontal: 'left'
	};
	const useUtilityClasses$6 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    paper: ['paper'],
	    list: ['list']
	  };
	  return composeClasses(slots, getMenuUtilityClass, classes);
	};
	const MenuRoot = styled$1(Popover$1, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiMenu',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});
	const MenuPaper = styled$1(PopoverPaper, {
	  name: 'MuiMenu',
	  slot: 'Paper',
	  overridesResolver: (props, styles) => styles.paper
	})({
	  // specZ: The maximum height of a simple menu should be one or more rows less than the view
	  // height. This ensures a tappable area outside of the simple menu with which to dismiss
	  // the menu.
	  maxHeight: 'calc(100% - 96px)',
	  // Add iOS momentum scrolling for iOS < 13.0
	  WebkitOverflowScrolling: 'touch'
	});
	const MenuMenuList = styled$1(MenuList$1, {
	  name: 'MuiMenu',
	  slot: 'List',
	  overridesResolver: (props, styles) => styles.list
	})({
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0
	});
	const Menu$1 = /*#__PURE__*/reactExports.forwardRef(function Menu(inProps, ref) {
	  var _slots$paper, _slotProps$paper;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiMenu'
	  });
	  const {
	      autoFocus = true,
	      children,
	      className,
	      disableAutoFocusItem = false,
	      MenuListProps = {},
	      onClose,
	      open,
	      PaperProps = {},
	      PopoverClasses,
	      transitionDuration = 'auto',
	      TransitionProps: {
	        onEntering
	      } = {},
	      variant = 'selectedMenu',
	      slots = {},
	      slotProps = {}
	    } = props,
	    TransitionProps = _objectWithoutPropertiesLoose$1(props.TransitionProps, _excluded$8),
	    other = _objectWithoutPropertiesLoose$1(props, _excluded2);
	  const theme = useTheme();
	  const isRtl = theme.direction === 'rtl';
	  const ownerState = _extends$2({}, props, {
	    autoFocus,
	    disableAutoFocusItem,
	    MenuListProps,
	    onEntering,
	    PaperProps,
	    transitionDuration,
	    TransitionProps,
	    variant
	  });
	  const classes = useUtilityClasses$6(ownerState);
	  const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
	  const menuListActionsRef = reactExports.useRef(null);
	  const handleEntering = (element, isAppearing) => {
	    if (menuListActionsRef.current) {
	      menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
	    }
	    if (onEntering) {
	      onEntering(element, isAppearing);
	    }
	  };
	  const handleListKeyDown = event => {
	    if (event.key === 'Tab') {
	      event.preventDefault();
	      if (onClose) {
	        onClose(event, 'tabKeyDown');
	      }
	    }
	  };

	  /**
	   * the index of the item should receive focus
	   * in a `variant="selectedMenu"` it's the first `selected` item
	   * otherwise it's the very first item.
	   */
	  let activeItemIndex = -1;
	  // since we inject focus related props into children we have to do a lookahead
	  // to check if there is a `selected` item. We're looking for the last `selected`
	  // item and use the first valid item as a fallback
	  reactExports.Children.map(children, (child, index) => {
	    if (! /*#__PURE__*/reactExports.isValidElement(child)) {
	      return;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (reactIsExports$1.isFragment(child)) {
	        console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	      }
	    }
	    if (!child.props.disabled) {
	      if (variant === 'selectedMenu' && child.props.selected) {
	        activeItemIndex = index;
	      } else if (activeItemIndex === -1) {
	        activeItemIndex = index;
	      }
	    }
	  });
	  const PaperSlot = (_slots$paper = slots.paper) != null ? _slots$paper : MenuPaper;
	  const paperExternalSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : PaperProps;
	  const rootSlotProps = useSlotProps({
	    elementType: slots.root,
	    externalSlotProps: slotProps.root,
	    ownerState,
	    className: [classes.root, className]
	  });
	  const paperSlotProps = useSlotProps({
	    elementType: PaperSlot,
	    externalSlotProps: paperExternalSlotProps,
	    ownerState,
	    className: classes.paper
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsx(MenuRoot, _extends$2({
	    onClose: onClose,
	    anchorOrigin: {
	      vertical: 'bottom',
	      horizontal: isRtl ? 'right' : 'left'
	    },
	    transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
	    slots: {
	      paper: PaperSlot,
	      root: slots.root
	    },
	    slotProps: {
	      root: rootSlotProps,
	      paper: paperSlotProps
	    },
	    open: open,
	    ref: ref,
	    transitionDuration: transitionDuration,
	    TransitionProps: _extends$2({
	      onEntering: handleEntering
	    }, TransitionProps),
	    ownerState: ownerState
	  }, other, {
	    classes: PopoverClasses,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(MenuMenuList, _extends$2({
	      onKeyDown: handleListKeyDown,
	      actions: menuListActionsRef,
	      autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
	      autoFocusItem: autoFocusItem,
	      variant: variant
	    }, MenuListProps, {
	      className: clsx(classes.list, MenuListProps.className),
	      children: children
	    }))
	  }));
	});
	process.env.NODE_ENV !== "production" ? Menu$1.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * An HTML element, or a function that returns one.
	   * It's used to set the position of the menu.
	   */
	  anchorEl: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),
	  /**
	   * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
	   * children are not focusable. If you set this prop to `false` focus will be placed
	   * on the parent modal container. This has severe accessibility implications
	   * and should only be considered if you manage focus otherwise.
	   * @default true
	   */
	  autoFocus: PropTypes.bool,
	  /**
	   * Menu contents, normally `MenuItem`s.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * When opening the menu will not focus the active item but the `[role="menu"]`
	   * unless `autoFocus` is also set to `false`. Not using the default means not
	   * following WAI-ARIA authoring practices. Please be considerate about possible
	   * accessibility implications.
	   * @default false
	   */
	  disableAutoFocusItem: PropTypes.bool,
	  /**
	   * Props applied to the [`MenuList`](/material-ui/api/menu-list/) element.
	   * @default {}
	   */
	  MenuListProps: PropTypes.object,
	  /**
	   * Callback fired when the component requests to be closed.
	   *
	   * @param {object} event The event source of the callback.
	   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
	   */
	  onClose: PropTypes.func,
	  /**
	   * If `true`, the component is shown.
	   */
	  open: PropTypes.bool.isRequired,
	  /**
	   * @ignore
	   */
	  PaperProps: PropTypes.object,
	  /**
	   * `classes` prop applied to the [`Popover`](/material-ui/api/popover/) element.
	   */
	  PopoverClasses: PropTypes.object,
	  /**
	   * The extra props for the slot components.
	   * You can override the existing props or add new ones.
	   *
	   * @default {}
	   */
	  slotProps: PropTypes.shape({
	    paper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
	    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
	  }),
	  /**
	   * The components used for each slot inside.
	   *
	   * @default {}
	   */
	  slots: PropTypes.shape({
	    paper: PropTypes.elementType,
	    root: PropTypes.elementType
	  }),
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * The length of the transition in `ms`, or 'auto'
	   * @default 'auto'
	   */
	  transitionDuration: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.shape({
	    appear: PropTypes.number,
	    enter: PropTypes.number,
	    exit: PropTypes.number
	  })]),
	  /**
	   * Props applied to the transition element.
	   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
	   * @default {}
	   */
	  TransitionProps: PropTypes.object,
	  /**
	   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.
	   * @default 'selectedMenu'
	   */
	  variant: PropTypes.oneOf(['menu', 'selectedMenu'])
	} : void 0;
	var Menu$2 = Menu$1;

	function getDividerUtilityClass(slot) {
	  return generateUtilityClass('MuiDivider', slot);
	}
	const dividerClasses = generateUtilityClasses('MuiDivider', ['root', 'absolute', 'fullWidth', 'inset', 'middle', 'flexItem', 'light', 'vertical', 'withChildren', 'withChildrenVertical', 'textAlignRight', 'textAlignLeft', 'wrapper', 'wrapperVertical']);
	var dividerClasses$1 = dividerClasses;

	const _excluded$7 = ["absolute", "children", "className", "component", "flexItem", "light", "orientation", "role", "textAlign", "variant"];
	const useUtilityClasses$5 = ownerState => {
	  const {
	    absolute,
	    children,
	    classes,
	    flexItem,
	    light,
	    orientation,
	    textAlign,
	    variant
	  } = ownerState;
	  const slots = {
	    root: ['root', absolute && 'absolute', variant, light && 'light', orientation === 'vertical' && 'vertical', flexItem && 'flexItem', children && 'withChildren', children && orientation === 'vertical' && 'withChildrenVertical', textAlign === 'right' && orientation !== 'vertical' && 'textAlignRight', textAlign === 'left' && orientation !== 'vertical' && 'textAlignLeft'],
	    wrapper: ['wrapper', orientation === 'vertical' && 'wrapperVertical']
	  };
	  return composeClasses(slots, getDividerUtilityClass, classes);
	};
	const DividerRoot = styled$1('div', {
	  name: 'MuiDivider',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.absolute && styles.absolute, styles[ownerState.variant], ownerState.light && styles.light, ownerState.orientation === 'vertical' && styles.vertical, ownerState.flexItem && styles.flexItem, ownerState.children && styles.withChildren, ownerState.children && ownerState.orientation === 'vertical' && styles.withChildrenVertical, ownerState.textAlign === 'right' && ownerState.orientation !== 'vertical' && styles.textAlignRight, ownerState.textAlign === 'left' && ownerState.orientation !== 'vertical' && styles.textAlignLeft];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends$2({
	  margin: 0,
	  // Reset browser default style.
	  flexShrink: 0,
	  borderWidth: 0,
	  borderStyle: 'solid',
	  borderColor: (theme.vars || theme).palette.divider,
	  borderBottomWidth: 'thin'
	}, ownerState.absolute && {
	  position: 'absolute',
	  bottom: 0,
	  left: 0,
	  width: '100%'
	}, ownerState.light && {
	  borderColor: theme.vars ? `rgba(${theme.vars.palette.dividerChannel} / 0.08)` : alpha(theme.palette.divider, 0.08)
	}, ownerState.variant === 'inset' && {
	  marginLeft: 72
	}, ownerState.variant === 'middle' && ownerState.orientation === 'horizontal' && {
	  marginLeft: theme.spacing(2),
	  marginRight: theme.spacing(2)
	}, ownerState.variant === 'middle' && ownerState.orientation === 'vertical' && {
	  marginTop: theme.spacing(1),
	  marginBottom: theme.spacing(1)
	}, ownerState.orientation === 'vertical' && {
	  height: '100%',
	  borderBottomWidth: 0,
	  borderRightWidth: 'thin'
	}, ownerState.flexItem && {
	  alignSelf: 'stretch',
	  height: 'auto'
	}), ({
	  ownerState
	}) => _extends$2({}, ownerState.children && {
	  display: 'flex',
	  whiteSpace: 'nowrap',
	  textAlign: 'center',
	  border: 0,
	  '&::before, &::after': {
	    content: '""',
	    alignSelf: 'center'
	  }
	}), ({
	  theme,
	  ownerState
	}) => _extends$2({}, ownerState.children && ownerState.orientation !== 'vertical' && {
	  '&::before, &::after': {
	    width: '100%',
	    borderTop: `thin solid ${(theme.vars || theme).palette.divider}`
	  }
	}), ({
	  theme,
	  ownerState
	}) => _extends$2({}, ownerState.children && ownerState.orientation === 'vertical' && {
	  flexDirection: 'column',
	  '&::before, &::after': {
	    height: '100%',
	    borderLeft: `thin solid ${(theme.vars || theme).palette.divider}`
	  }
	}), ({
	  ownerState
	}) => _extends$2({}, ownerState.textAlign === 'right' && ownerState.orientation !== 'vertical' && {
	  '&::before': {
	    width: '90%'
	  },
	  '&::after': {
	    width: '10%'
	  }
	}, ownerState.textAlign === 'left' && ownerState.orientation !== 'vertical' && {
	  '&::before': {
	    width: '10%'
	  },
	  '&::after': {
	    width: '90%'
	  }
	}));
	const DividerWrapper = styled$1('span', {
	  name: 'MuiDivider',
	  slot: 'Wrapper',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.wrapper, ownerState.orientation === 'vertical' && styles.wrapperVertical];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends$2({
	  display: 'inline-block',
	  paddingLeft: `calc(${theme.spacing(1)} * 1.2)`,
	  paddingRight: `calc(${theme.spacing(1)} * 1.2)`
	}, ownerState.orientation === 'vertical' && {
	  paddingTop: `calc(${theme.spacing(1)} * 1.2)`,
	  paddingBottom: `calc(${theme.spacing(1)} * 1.2)`
	}));
	const Divider = /*#__PURE__*/reactExports.forwardRef(function Divider(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiDivider'
	  });
	  const {
	      absolute = false,
	      children,
	      className,
	      component = children ? 'div' : 'hr',
	      flexItem = false,
	      light = false,
	      orientation = 'horizontal',
	      role = component !== 'hr' ? 'separator' : undefined,
	      textAlign = 'center',
	      variant = 'fullWidth'
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$7);
	  const ownerState = _extends$2({}, props, {
	    absolute,
	    component,
	    flexItem,
	    light,
	    orientation,
	    role,
	    textAlign,
	    variant
	  });
	  const classes = useUtilityClasses$5(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(DividerRoot, _extends$2({
	    as: component,
	    className: clsx(classes.root, className),
	    role: role,
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: children ? /*#__PURE__*/jsxRuntimeExports.jsx(DividerWrapper, {
	      className: classes.wrapper,
	      ownerState: ownerState,
	      children: children
	    }) : null
	  }));
	});

	/**
	 * The following flag is used to ensure that this component isn't tabbable i.e.
	 * does not get highlight/focus inside of MUI List.
	 */
	Divider.muiSkipListHighlight = true;
	process.env.NODE_ENV !== "production" ? Divider.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * Absolutely position the element.
	   * @default false
	   */
	  absolute: PropTypes.bool,
	  /**
	   * The content of the component.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: PropTypes.elementType,
	  /**
	   * If `true`, a vertical divider will have the correct height when used in flex container.
	   * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
	   * @default false
	   */
	  flexItem: PropTypes.bool,
	  /**
	   * If `true`, the divider will have a lighter color.
	   * @default false
	   */
	  light: PropTypes.bool,
	  /**
	   * The component orientation.
	   * @default 'horizontal'
	   */
	  orientation: PropTypes.oneOf(['horizontal', 'vertical']),
	  /**
	   * @ignore
	   */
	  role: PropTypes /* @typescript-to-proptypes-ignore */.string,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * The text alignment.
	   * @default 'center'
	   */
	  textAlign: PropTypes.oneOf(['center', 'left', 'right']),
	  /**
	   * The variant to use.
	   * @default 'fullWidth'
	   */
	  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['fullWidth', 'inset', 'middle']), PropTypes.string])
	} : void 0;
	var Divider$1 = Divider;

	function getListItemIconUtilityClass(slot) {
	  return generateUtilityClass('MuiListItemIcon', slot);
	}
	const listItemIconClasses = generateUtilityClasses('MuiListItemIcon', ['root', 'alignItemsFlexStart']);
	var listItemIconClasses$1 = listItemIconClasses;

	const _excluded$6 = ["className"];
	const useUtilityClasses$4 = ownerState => {
	  const {
	    alignItems,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', alignItems === 'flex-start' && 'alignItemsFlexStart']
	  };
	  return composeClasses(slots, getListItemIconUtilityClass, classes);
	};
	const ListItemIconRoot = styled$1('div', {
	  name: 'MuiListItemIcon',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends$2({
	  minWidth: 56,
	  color: (theme.vars || theme).palette.action.active,
	  flexShrink: 0,
	  display: 'inline-flex'
	}, ownerState.alignItems === 'flex-start' && {
	  marginTop: 8
	}));

	/**
	 * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.
	 */
	const ListItemIcon = /*#__PURE__*/reactExports.forwardRef(function ListItemIcon(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiListItemIcon'
	  });
	  const {
	      className
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$6);
	  const context = reactExports.useContext(ListContext$1);
	  const ownerState = _extends$2({}, props, {
	    alignItems: context.alignItems
	  });
	  const classes = useUtilityClasses$4(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(ListItemIconRoot, _extends$2({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? ListItemIcon.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * The content of the component, normally `Icon`, `SvgIcon`,
	   * or a `@mui/icons-material` SVG icon element.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
	} : void 0;
	var ListItemIcon$1 = ListItemIcon;

	function getMenuItemUtilityClass(slot) {
	  return generateUtilityClass('MuiMenuItem', slot);
	}
	const menuItemClasses = generateUtilityClasses('MuiMenuItem', ['root', 'focusVisible', 'dense', 'disabled', 'divider', 'gutters', 'selected']);
	var menuItemClasses$1 = menuItemClasses;

	const _excluded$5 = ["autoFocus", "component", "dense", "divider", "disableGutters", "focusVisibleClassName", "role", "tabIndex", "className"];
	const overridesResolver = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, ownerState.dense && styles.dense, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters];
	};
	const useUtilityClasses$3 = ownerState => {
	  const {
	    disabled,
	    dense,
	    divider,
	    disableGutters,
	    selected,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', dense && 'dense', disabled && 'disabled', !disableGutters && 'gutters', divider && 'divider', selected && 'selected']
	  };
	  const composedClasses = composeClasses(slots, getMenuItemUtilityClass, classes);
	  return _extends$2({}, classes, composedClasses);
	};
	const MenuItemRoot = styled$1(ButtonBase$1, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiMenuItem',
	  slot: 'Root',
	  overridesResolver
	})(({
	  theme,
	  ownerState
	}) => _extends$2({}, theme.typography.body1, {
	  display: 'flex',
	  justifyContent: 'flex-start',
	  alignItems: 'center',
	  position: 'relative',
	  textDecoration: 'none',
	  minHeight: 48,
	  paddingTop: 6,
	  paddingBottom: 6,
	  boxSizing: 'border-box',
	  whiteSpace: 'nowrap'
	}, !ownerState.disableGutters && {
	  paddingLeft: 16,
	  paddingRight: 16
	}, ownerState.divider && {
	  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
	  backgroundClip: 'padding-box'
	}, {
	  '&:hover': {
	    textDecoration: 'none',
	    backgroundColor: (theme.vars || theme).palette.action.hover,
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  },
	  [`&.${menuItemClasses$1.selected}`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
	    [`&.${menuItemClasses$1.focusVisible}`]: {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	    }
	  },
	  [`&.${menuItemClasses$1.selected}:hover`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
	    }
	  },
	  [`&.${menuItemClasses$1.focusVisible}`]: {
	    backgroundColor: (theme.vars || theme).palette.action.focus
	  },
	  [`&.${menuItemClasses$1.disabled}`]: {
	    opacity: (theme.vars || theme).palette.action.disabledOpacity
	  },
	  [`& + .${dividerClasses$1.root}`]: {
	    marginTop: theme.spacing(1),
	    marginBottom: theme.spacing(1)
	  },
	  [`& + .${dividerClasses$1.inset}`]: {
	    marginLeft: 52
	  },
	  [`& .${listItemTextClasses$1.root}`]: {
	    marginTop: 0,
	    marginBottom: 0
	  },
	  [`& .${listItemTextClasses$1.inset}`]: {
	    paddingLeft: 36
	  },
	  [`& .${listItemIconClasses$1.root}`]: {
	    minWidth: 36
	  }
	}, !ownerState.dense && {
	  [theme.breakpoints.up('sm')]: {
	    minHeight: 'auto'
	  }
	}, ownerState.dense && _extends$2({
	  minHeight: 32,
	  // https://m2.material.io/components/menus#specs > Dense
	  paddingTop: 4,
	  paddingBottom: 4
	}, theme.typography.body2, {
	  [`& .${listItemIconClasses$1.root} svg`]: {
	    fontSize: '1.25rem'
	  }
	})));
	const MenuItem = /*#__PURE__*/reactExports.forwardRef(function MenuItem(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiMenuItem'
	  });
	  const {
	      autoFocus = false,
	      component = 'li',
	      dense = false,
	      divider = false,
	      disableGutters = false,
	      focusVisibleClassName,
	      role = 'menuitem',
	      tabIndex: tabIndexProp,
	      className
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$5);
	  const context = reactExports.useContext(ListContext$1);
	  const childContext = reactExports.useMemo(() => ({
	    dense: dense || context.dense || false,
	    disableGutters
	  }), [context.dense, dense, disableGutters]);
	  const menuItemRef = reactExports.useRef(null);
	  useEnhancedEffect$1(() => {
	    if (autoFocus) {
	      if (menuItemRef.current) {
	        menuItemRef.current.focus();
	      } else if (process.env.NODE_ENV !== 'production') {
	        console.error('MUI: Unable to set focus to a MenuItem whose component has not been rendered.');
	      }
	    }
	  }, [autoFocus]);
	  const ownerState = _extends$2({}, props, {
	    dense: childContext.dense,
	    divider,
	    disableGutters
	  });
	  const classes = useUtilityClasses$3(props);
	  const handleRef = useForkRef(menuItemRef, ref);
	  let tabIndex;
	  if (!props.disabled) {
	    tabIndex = tabIndexProp !== undefined ? tabIndexProp : -1;
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsx(ListContext$1.Provider, {
	    value: childContext,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(MenuItemRoot, _extends$2({
	      ref: handleRef,
	      role: role,
	      tabIndex: tabIndex,
	      component: component,
	      focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
	      className: clsx(classes.root, className)
	    }, other, {
	      ownerState: ownerState,
	      classes: classes
	    }))
	  });
	});
	process.env.NODE_ENV !== "production" ? MenuItem.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * If `true`, the list item is focused during the first mount.
	   * Focus will also be triggered if the value changes from false to true.
	   * @default false
	   */
	  autoFocus: PropTypes.bool,
	  /**
	   * The content of the component.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: PropTypes.elementType,
	  /**
	   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
	   * The prop defaults to the value inherited from the parent Menu component.
	   * @default false
	   */
	  dense: PropTypes.bool,
	  /**
	   * @ignore
	   */
	  disabled: PropTypes.bool,
	  /**
	   * If `true`, the left and right padding is removed.
	   * @default false
	   */
	  disableGutters: PropTypes.bool,
	  /**
	   * If `true`, a 1px light border is added to the bottom of the menu item.
	   * @default false
	   */
	  divider: PropTypes.bool,
	  /**
	   * This prop can help identify which element has keyboard focus.
	   * The class name will be applied when the element gains the focus through keyboard interaction.
	   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
	   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
	   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
	   * if needed.
	   */
	  focusVisibleClassName: PropTypes.string,
	  /**
	   * @ignore
	   */
	  role: PropTypes /* @typescript-to-proptypes-ignore */.string,
	  /**
	   * If `true`, the component is selected.
	   * @default false
	   */
	  selected: PropTypes.bool,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * @default 0
	   */
	  tabIndex: PropTypes.number
	} : void 0;
	var MenuItem$1 = MenuItem;

	var MoreHoriz = {};

	var interopRequireDefault = {exports: {}};

	(function (module) {
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (interopRequireDefault));

	var interopRequireDefaultExports = interopRequireDefault.exports;

	var createSvgIcon = {};

	// TODO: remove this export once ClassNameGenerator is stable
	// eslint-disable-next-line @typescript-eslint/naming-convention
	const unstable_ClassNameGenerator = {
	  configure: generator => {
	    if (process.env.NODE_ENV !== 'production') {
	      console.warn(['MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.', '', "You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead", '', 'The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401', '', 'The updated documentation: https://mui.com/guides/classname-generator/'].join('\n'));
	    }
	    ClassNameGenerator$1.configure(generator);
	  }
	};

	var utils = /*#__PURE__*/Object.freeze({
		__proto__: null,
		capitalize: capitalize,
		createChainedFunction: createChainedFunction,
		createSvgIcon: createSvgIcon$1,
		debounce: debounce$1,
		deprecatedPropType: deprecatedPropType,
		isMuiElement: isMuiElement,
		ownerDocument: ownerDocument,
		ownerWindow: ownerWindow,
		requirePropFactory: requirePropFactory,
		setRef: setRef,
		unstable_ClassNameGenerator: unstable_ClassNameGenerator,
		unstable_useEnhancedEffect: useEnhancedEffect$1,
		unstable_useId: useId,
		unsupportedProp: unsupportedProp,
		useControlled: useControlled,
		useEventCallback: useEventCallback,
		useForkRef: useForkRef,
		useIsFocusVisible: useIsFocusVisible
	});

	var require$$0 = /*@__PURE__*/getAugmentedNamespace(utils);

	var hasRequiredCreateSvgIcon;

	function requireCreateSvgIcon () {
		if (hasRequiredCreateSvgIcon) return createSvgIcon;
		hasRequiredCreateSvgIcon = 1;
		(function (exports) {
			'use client';

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _utils.createSvgIcon;
			  }
			});
			var _utils = require$$0; 
		} (createSvgIcon));
		return createSvgIcon;
	}

	var _interopRequireDefault$b = interopRequireDefaultExports;
	Object.defineProperty(MoreHoriz, "__esModule", {
	  value: true
	});
	var default_1$b = MoreHoriz.default = void 0;
	var _createSvgIcon$b = _interopRequireDefault$b(requireCreateSvgIcon());
	var _jsxRuntime$b = jsxRuntimeExports;
	var _default$b = (0, _createSvgIcon$b.default)( /*#__PURE__*/(0, _jsxRuntime$b.jsx)("path", {
	  d: "M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
	}), 'MoreHoriz');
	default_1$b = MoreHoriz.default = _default$b;

	function useApi(url, debug = false) {
	  const [state, setState] = reactExports.useState({
	    loading: true,
	    data: {},
	    error: null
	  });
	  reactExports.useEffect(() => {
	    debug && console.log(`API fetching from: ${url}`);
	    fetch(url).then(response => {
	      if (response.ok) {
	        response.json().then(data => {
	          debug && console.log(data);
	          setState({
	            loading: false,
	            error: null,
	            data
	          });
	        });
	      } else {
	        debug && console.log('Error', response);
	        setState({
	          loading: false,
	          data: null,
	          error: {
	            response: response,
	            message: `Error fetching from API URL: ${url}`
	          }
	        });
	      }
	    });
	  }, []);
	  return [{
	    ...state.data
	  }, state.loading, state.error];
	}

	const OuterContentWrap = styled$1(Box$1)(({
	  theme
	}) => ({
	  padding: theme.spacing(8),
	  paddingTop: 0
	}));

	function permission_translate() {
	  return {
	    author: window.gettext('Owner'),
	    edit: window.gettext('Editor'),
	    comment: window.gettext('Commenter'),
	    view: window.gettext('Viewer')
	  };
	}

	// Get the little tag that sits in front of usernames signifying the role
	function getUserTag(user_type) {
	  return /*#__PURE__*/reactExports.createElement("span", {
	    className: 'user-tag permission-' + user_type
	  }, permission_translate()[user_type]);
	}

	/**
	 *  this has been refactored to remove jquery
	 */
	class Loader {
	  constructor(identifier) {
	    // Create a new div element
	    this.load_screen = document.createElement('div');
	    this.load_screen.className = 'load-screen';

	    // Prevent default click behavior
	    this.load_screen.addEventListener('click', evt => {
	      evt.preventDefault();
	    });
	    let parentElement;
	    if (identifier instanceof jQuery) {
	      // Use the first element in the jQuery object
	      parentElement = identifier.get(0);
	    } else {
	      // Use querySelector to find the element
	      parentElement = document.querySelector(identifier);
	    }
	    if (parentElement) {
	      parentElement.appendChild(this.load_screen);
	    } else {
	      console.error(`Element with identifier "${identifier}" not found.`);
	    }
	  }
	  endLoad() {
	    // Remove the load screen from its parent
	    if (this.load_screen && this.load_screen.parentNode) {
	      this.load_screen.parentNode.removeChild(this.load_screen);
	    }
	  }
	}

	//Check if an object (such as a node or an outcome) should be hidden based on its sets and the currently active object sets
	function checkSetHidden(data, objectsets) {
	  let hidden = false;
	  if (data.sets.length > 0 && objectsets) {
	    hidden = true;
	    for (var i = 0; i < objectsets.length; i++) {
	      if (!objectsets[i].hidden && data.sets.indexOf(objectsets[i].id) >= 0) {
	        hidden = false;
	        break;
	      }
	    }
	  }
	  return hidden;
	}

	// Do a bit of cleaning to unescape certain characters and display them correctly
	function unescapeCharacters(string) {
	  return string.replace(/\&amp;/g, '&').replace(/\&gt;/g, '>').replace(/\&lt;/g, '<');
	}

	//Get translate from an svg transform
	function getSVGTranslation(transform) {
	  return transform.substring(transform.indexOf('translate(') + 10, transform.indexOf(')')).split(',');
	}
	function pushOrCreate(obj, index, value) {
	  if (obj[index]) obj[index].push(value);else obj[index] = [value];
	}

	// Find and return the best way to display a user's name, username, or email (if that's all we have)
	function getUserDisplay(user) {
	  let str = '';
	  if (user.first_name) str += user.first_name + ' ';
	  if (user.last_name) str += user.last_name + ' ';
	  if (!str && user.username) str = user.username + ' ';
	  return str || user.email;
	}
	function cantorPairing(k1, k2) {
	  return parseInt((k1 + k2) * (k1 + k2 + 1) / 2 + k2);
	}

	//take a list of objects, then filter it based on which appear in the id list. The list is then resorted to match the order in the id list.
	function filterThenSortByID(object_list, id_list) {
	  return object_list.filter(obj => id_list.includes(obj.id)).sort((a, b) => id_list.indexOf(a.id) - id_list.indexOf(b.id));
	}

	//capitalize first letter of each word in a string
	function capWords(str) {
	  return str.split(' ').map(entry => {
	    if (entry.length === 0) return entry;
	    return entry[0].toUpperCase() + entry.substr(1);
	  }).join(' ');
	}
	function capFirst(str) {
	  return str[0].toUpperCase() + str.substr(1);
	}

	//Get the offset from the canvas of a specific jquery object
	function getCanvasOffset(node_dom) {
	  let node_offset = node_dom.offset();
	  let canvasElement = document.querySelector('.workflow-canvas');
	  let canvas_offset = getElementOffset(canvasElement);
	  node_offset.left -= canvas_offset.left;
	  node_offset.top -= canvas_offset.top;
	  return node_offset;
	}

	//Check if the mouse event is within a box with the given padding around the element
	function mouseOutsidePadding(evt, elem, padding) {
	  if (elem.length === 0) return true;
	  let offset = elem.offset();
	  let width = elem.outerWidth();
	  let height = elem.outerHeight();
	  return evt.pageX < offset.left - padding || evt.pageY < offset.top - padding || evt.pageX > offset.left + width + padding || evt.pageY > offset.top + height + padding;
	}

	//A utility function to trigger an event on each element. This is used to avoid .trigger, which bubbles (we will be careful to only trigger events on the elements that need them)
	function triggerHandlerEach(trigger, eventname) {
	  // @todo this has beeen moved away from jQuery but we aren't sure yet whether the passed element
	  // trigger will work outside a jquery object yet
	  return trigger.each((i, element) => {
	    if (element) {
	      var event = new Event(eventname, {
	        bubbles: true,
	        // This makes the event bubble up
	        cancelable: true // This makes the event cancelable
	      });

	      element.dispatchEvent(event);
	    }
	  });
	}
	function getElementOffset(element) {
	  let rect = element.getBoundingClientRect();
	  let scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
	  let scrollTop = window.pageYOffset || document.documentElement.scrollTop;
	  return {
	    top: rect.top + scrollTop,
	    left: rect.left + scrollLeft
	  };
	}

	// use the enum proxy stopgap
	function Enum(baseEnum) {
	  return new Proxy(baseEnum, {
	    get(target, name) {
	      if (!baseEnum.hasOwnProperty(name)) {
	        throw new Error(`"${name}" value does not exist in the enum`);
	      }
	      return baseEnum[name];
	    },
	    set(target, name, value) {
	      throw new Error('Cannot add a new value to the enum');
	    }
	  });
	}

	const DATA_ACTIONS = Enum({
	  POSTED: 'posted'
	});
	Enum({
	  OUTCOME: 'outcome',
	  PROJECT: 'project'
	});

	const NotificationsWrap = styled$1(Box$1)({});
	const NotificationsHeader$1 = styled$1(Box$1)(({
	  theme
	}) => ({
	  paddingTop: theme.spacing(4),
	  paddingBottom: theme.spacing(2),
	  '& .MuiTypography-h1': {
	    color: 'currentColor',
	    fontWeight: 400,
	    fontSize: '34px'
	  }
	}));
	const MarkAsRead = styled$1(Box$1)(({
	  theme
	}) => ({
	  paddingTop: theme.spacing(2),
	  textAlign: 'right'
	}));
	const NotificationsList$1 = styled$1(List$1)(({
	  theme
	}) => ({
	  paddingTop: 0,
	  paddingBottom: 0,
	  marginBottom: theme.spacing(1),
	  '& .MuiListItem-root': {
	    padding: 0
	  },
	  '& .MuiListItemButton-root': {
	    paddingTop: theme.spacing(1.5),
	    paddingBottom: theme.spacing(1.5),
	    paddingLeft: theme.spacing(4),
	    borderBottom: `1px solid ${theme.palette.divider}`
	  },
	  '& .MuiBadge-root': {
	    position: 'absolute',
	    left: theme.spacing(1.7),
	    top: '50%'
	  }
	}));
	const StyledListItem = styled$1(ListItem$1)({
	  '& > .MuiButtonBase-root': {
	    paddingRight: '4em'
	  }
	});
	const StyledPagination = styled$1(Pagination$1)(({
	  theme
	}) => ({
	  marginTop: theme.spacing(4),
	  '& .MuiPagination-ul': {
	    justifyContent: 'center'
	  },
	  '& .MuiPaginationItem-root.Mui-selected': {
	    backgroundColor: theme.palette.primary.main,
	    color: theme.palette.common.white,
	    '&:hover': {
	      backgroundColor: theme.palette.primary.dark
	    }
	  }
	}));
	function API_POST(url = '', data = {}) {
	  if (!url) {
	    return Promise.reject('You need to specify an URL in for API_POST to run.');
	  }
	  return new Promise((res, rej) => {
	    fetch(url, {
	      method: 'POST',
	      headers: {
	        'Content-Type': 'application/json',
	        'X-CSRFToken': root.getCsrfToken()
	      },
	      body: JSON.stringify(data)
	    })
	    // convert to JSON
	    .then(response => response.json()).then(data => {
	      // and if the action successfully posted, resolve the initial promise
	      if (data.action === DATA_ACTIONS.POSTED) {
	        res(data);
	      } else {
	        rej(url, 'post action !== "posted".');
	      }
	    })
	    // otherwise reject if anything fishy is going on
	    .catch(err => rej(err));
	  });
	}
	const NotificationsPage = () => {
	  const [pagination, setPagination] = reactExports.useState({
	    page: 0,
	    countPerPage: 10
	  });
	  const [apiData, loading, error] = useApi(config.json_api_paths.get_notifications_page);
	  const [pageState, setPageState] = reactExports.useState({
	    notifications: [],
	    allRead: false,
	    menuAnchor: null,
	    notification: null
	  });
	  reactExports.useEffect(() => {
	    if (pageState.notifications.length === 0 && apiData.notifications) {
	      setPageState({
	        ...pageState,
	        notifications: apiData.notifications
	      });
	    }
	  }, [apiData]);
	  if (loading || error) {
	    return null;
	  }
	  const paginateFrom = pagination.page * pagination.countPerPage;
	  const paginateTo = (pagination.page + 1) * pagination.countPerPage;
	  function handleMenuOpen(event, notification) {
	    // a11y
	    event.currentTarget.setAttribute('aria-controls', 'notification-men');
	    event.currentTarget.setAttribute('aria-expanded', true);
	    setPageState({
	      ...pageState,
	      notification,
	      menuAnchor: event.currentTarget
	    });
	  }
	  function handleMenuClose() {
	    // a11y
	    pageState.menuAnchor.removeAttribute('aria-controls', null);
	    pageState.menuAnchor.setAttribute('aria-expanded', false);
	    setPageState(state => {
	      return {
	        ...state,
	        notification: null,
	        menuAnchor: null
	      };
	    });
	  }
	  function onMarkAsReadClick() {
	    const {
	      notification
	    } = pageState;

	    // fire the post request
	    API_POST(config.json_api_paths.mark_all_notifications_as_read, {
	      notification_id: notification.id
	    }).then(() => {
	      const updated = [...pageState.notifications];
	      const index = updated.findIndex(n => n.id === notification.id);
	      updated[index].unread = false;
	      setPageState({
	        ...pageState,
	        allRead: updated.every(n => n.unread === false),
	        notifications: updated
	      });
	    }).catch(err => console.log('error -', err)).finally(() => {
	      handleMenuClose();
	    });
	  }
	  function onDeleteClick() {
	    const {
	      notification
	    } = pageState;
	    API_POST(config.json_api_paths.delete_notification, {
	      notification_id: notification.id
	    }).then(() => {
	      let updated = [...pageState.notifications];
	      const index = updated.findIndex(n => n.id === notification.id);
	      updated.splice(index, 1);
	      setPageState({
	        ...pageState,
	        allRead: updated.every(n => n.unread === false),
	        notifications: updated
	      });
	    }).catch(err => console.log('error -', err)).finally(() => {
	      handleMenuClose();
	    });
	  }
	  function onMarkAllAsReadClick(e) {
	    e.preventDefault();
	    API_POST(config.json_api_paths.mark_all_notifications_as_read).then(() => {
	      setPageState({
	        ...pageState,
	        allRead: true
	      });
	    }).catch(err => console.log('error -', err));
	  }
	  function onPaginationChange(e, page) {
	    setPagination({
	      ...pagination,
	      page: page - 1
	    });
	  }
	  const totalPaginationPages = Math.ceil(pageState.notifications.length / pagination.countPerPage);
	  return /*#__PURE__*/React.createElement(OuterContentWrap, null, pageState.notifications.length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NotificationsWrap, null, /*#__PURE__*/React.createElement(NotificationsHeader$1, null, /*#__PURE__*/React.createElement(Typography$1, {
	    variant: "h1"
	  }, COURSEFLOW_APP.strings.notifications), apiData.unread > 0 && !pageState?.allRead && /*#__PURE__*/React.createElement(MarkAsRead, null, /*#__PURE__*/React.createElement(Link$1, {
	    href: "#",
	    underline: "always",
	    onClick: onMarkAllAsReadClick
	  }, COURSEFLOW_APP.strings.mark_all_as_read))), /*#__PURE__*/React.createElement(NotificationsList$1, null, pageState.notifications.slice(paginateFrom, paginateTo).map((n, idx) => /*#__PURE__*/React.createElement(StyledListItem, {
	    key: idx,
	    alignItems: "flex-start",
	    sx: {
	      backgroundColor: n.unread && !pageState.allRead ? 'primary.lightest' : null
	    },
	    secondaryAction: /*#__PURE__*/React.createElement(IconButton$1, {
	      onClick: e => handleMenuOpen(e, n),
	      "aria-label": COURSEFLOW_APP.strings.show_notifications_menu,
	      "aria-haspopup": "true"
	    }, /*#__PURE__*/React.createElement(default_1$b, null))
	  }, /*#__PURE__*/React.createElement(ListItemButton$1, null, n.unread && !pageState.allRead && /*#__PURE__*/React.createElement(Badge$1, {
	    color: "primary",
	    variant: "dot"
	  }), /*#__PURE__*/React.createElement(ListItemAvatar$1, null, /*#__PURE__*/React.createElement(Avatar$1, {
	    alt: n.from
	  }, `${n.from.split(' ')[0][0]}${n.from.split(' ')[1][0]}`)), /*#__PURE__*/React.createElement(ListItemText$1, {
	    primary: `${n.from} • ${n.date}`,
	    secondary: /*#__PURE__*/React.createElement(Typography$1, {
	      sx: {
	        display: 'inline'
	      },
	      component: "span",
	      variant: "body2",
	      color: "text.primary"
	    }, n.text)
	  }))))), /*#__PURE__*/React.createElement(Menu$2, {
	    id: "notification-menu",
	    anchorOrigin: {
	      vertical: 'bottom',
	      horizontal: 'right'
	    },
	    transformOrigin: {
	      vertical: 'top',
	      horizontal: 'right'
	    },
	    anchorEl: pageState.menuAnchor,
	    open: !!pageState.menuAnchor,
	    onClose: handleMenuClose,
	    MenuListProps: {
	      'aria-label': COURSEFLOW_APP.strings.notification_options
	    }
	  }, pageState.notification?.unread && !pageState.allRead && /*#__PURE__*/React.createElement(MenuItem$1, {
	    onClick: onMarkAsReadClick
	  }, COURSEFLOW_APP.strings.mark_as_read), /*#__PURE__*/React.createElement(MenuItem$1, {
	    onClick: onDeleteClick
	  }, COURSEFLOW_APP.strings.delete))), totalPaginationPages > 1 && /*#__PURE__*/React.createElement(StyledPagination, {
	    count: totalPaginationPages,
	    page: pagination.page + 1,
	    onChange: onPaginationChange,
	    showFirstButton: true,
	    showLastButton: true
	  })) : /*#__PURE__*/React.createElement(NotificationsWrap, null, /*#__PURE__*/React.createElement(NotificationsHeader$1, null, /*#__PURE__*/React.createElement(Typography$1, {
	    variant: "h1"
	  }, COURSEFLOW_APP.strings.notifications), /*#__PURE__*/React.createElement(Typography$1, {
	    sx: {
	      marginTop: 3
	    }
	  }, COURSEFLOW_APP.strings.no_notifications_yet))));
	};

	function getFabUtilityClass(slot) {
	  return generateUtilityClass('MuiFab', slot);
	}
	const fabClasses = generateUtilityClasses('MuiFab', ['root', 'primary', 'secondary', 'extended', 'circular', 'focusVisible', 'disabled', 'colorInherit', 'sizeSmall', 'sizeMedium', 'sizeLarge', 'info', 'error', 'warning', 'success']);
	var fabClasses$1 = fabClasses;

	const _excluded$4 = ["children", "className", "color", "component", "disabled", "disableFocusRipple", "focusVisibleClassName", "size", "variant"];
	const useUtilityClasses$2 = ownerState => {
	  const {
	    color,
	    variant,
	    classes,
	    size
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, `size${capitalize(size)}`, color === 'inherit' ? 'colorInherit' : color]
	  };
	  const composedClasses = composeClasses(slots, getFabUtilityClass, classes);
	  return _extends$2({}, classes, composedClasses);
	};
	const FabRoot = styled$1(ButtonBase$1, {
	  name: 'MuiFab',
	  slot: 'Root',
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], styles[`size${capitalize(ownerState.size)}`], ownerState.color === 'inherit' && styles.colorInherit, styles[capitalize(ownerState.size)], styles[ownerState.color]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  var _theme$palette$getCon, _theme$palette;
	  return _extends$2({}, theme.typography.button, {
	    minHeight: 36,
	    transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color'], {
	      duration: theme.transitions.duration.short
	    }),
	    borderRadius: '50%',
	    padding: 0,
	    minWidth: 0,
	    width: 56,
	    height: 56,
	    zIndex: (theme.vars || theme).zIndex.fab,
	    boxShadow: (theme.vars || theme).shadows[6],
	    '&:active': {
	      boxShadow: (theme.vars || theme).shadows[12]
	    },
	    color: theme.vars ? theme.vars.palette.text.primary : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
	    backgroundColor: (theme.vars || theme).palette.grey[300],
	    '&:hover': {
	      backgroundColor: (theme.vars || theme).palette.grey.A100,
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: (theme.vars || theme).palette.grey[300]
	      },
	      textDecoration: 'none'
	    },
	    [`&.${fabClasses$1.focusVisible}`]: {
	      boxShadow: (theme.vars || theme).shadows[6]
	    }
	  }, ownerState.size === 'small' && {
	    width: 40,
	    height: 40
	  }, ownerState.size === 'medium' && {
	    width: 48,
	    height: 48
	  }, ownerState.variant === 'extended' && {
	    borderRadius: 48 / 2,
	    padding: '0 16px',
	    width: 'auto',
	    minHeight: 'auto',
	    minWidth: 48,
	    height: 48
	  }, ownerState.variant === 'extended' && ownerState.size === 'small' && {
	    width: 'auto',
	    padding: '0 8px',
	    borderRadius: 34 / 2,
	    minWidth: 34,
	    height: 34
	  }, ownerState.variant === 'extended' && ownerState.size === 'medium' && {
	    width: 'auto',
	    padding: '0 16px',
	    borderRadius: 40 / 2,
	    minWidth: 40,
	    height: 40
	  }, ownerState.color === 'inherit' && {
	    color: 'inherit'
	  });
	}, ({
	  theme,
	  ownerState
	}) => _extends$2({}, ownerState.color !== 'inherit' && ownerState.color !== 'default' && (theme.vars || theme).palette[ownerState.color] != null && {
	  color: (theme.vars || theme).palette[ownerState.color].contrastText,
	  backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
	  '&:hover': {
	    backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: (theme.vars || theme).palette[ownerState.color].main
	    }
	  }
	}), ({
	  theme
	}) => ({
	  [`&.${fabClasses$1.disabled}`]: {
	    color: (theme.vars || theme).palette.action.disabled,
	    boxShadow: (theme.vars || theme).shadows[0],
	    backgroundColor: (theme.vars || theme).palette.action.disabledBackground
	  }
	}));
	const Fab = /*#__PURE__*/reactExports.forwardRef(function Fab(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiFab'
	  });
	  const {
	      children,
	      className,
	      color = 'default',
	      component = 'button',
	      disabled = false,
	      disableFocusRipple = false,
	      focusVisibleClassName,
	      size = 'large',
	      variant = 'circular'
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$4);
	  const ownerState = _extends$2({}, props, {
	    color,
	    component,
	    disabled,
	    disableFocusRipple,
	    size,
	    variant
	  });
	  const classes = useUtilityClasses$2(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(FabRoot, _extends$2({
	    className: clsx(classes.root, className),
	    component: component,
	    disabled: disabled,
	    focusRipple: !disableFocusRipple,
	    focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    classes: classes,
	    children: children
	  }));
	});
	process.env.NODE_ENV !== "production" ? Fab.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * The content of the component.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
	   * @default 'default'
	   */
	  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'error', 'info', 'inherit', 'primary', 'secondary', 'success', 'warning']), PropTypes.string]),
	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: PropTypes.elementType,
	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: PropTypes.bool,
	  /**
	   * If `true`, the  keyboard focus ripple is disabled.
	   * @default false
	   */
	  disableFocusRipple: PropTypes.bool,
	  /**
	   * If `true`, the ripple effect is disabled.
	   */
	  disableRipple: PropTypes.bool,
	  /**
	   * @ignore
	   */
	  focusVisibleClassName: PropTypes.string,
	  /**
	   * The URL to link to when the button is clicked.
	   * If defined, an `a` element will be used as the root node.
	   */
	  href: PropTypes.string,
	  /**
	   * The size of the component.
	   * `small` is equivalent to the dense button styling.
	   * @default 'large'
	   */
	  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * The variant to use.
	   * @default 'circular'
	   */
	  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['circular', 'extended']), PropTypes.string])
	} : void 0;
	var Fab$1 = Fab;

	var Home = {};

	var _interopRequireDefault$a = interopRequireDefaultExports;
	Object.defineProperty(Home, "__esModule", {
	  value: true
	});
	var default_1$a = Home.default = void 0;
	var _createSvgIcon$a = _interopRequireDefault$a(requireCreateSvgIcon());
	var _jsxRuntime$a = jsxRuntimeExports;
	var _default$a = (0, _createSvgIcon$a.default)( /*#__PURE__*/(0, _jsxRuntime$a.jsx)("path", {
	  d: "M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"
	}), 'Home');
	default_1$a = Home.default = _default$a;

	var CollectionsBookmark = {};

	var _interopRequireDefault$9 = interopRequireDefaultExports;
	Object.defineProperty(CollectionsBookmark, "__esModule", {
	  value: true
	});
	var default_1$9 = CollectionsBookmark.default = void 0;
	var _createSvgIcon$9 = _interopRequireDefault$9(requireCreateSvgIcon());
	var _jsxRuntime$9 = jsxRuntimeExports;
	var _default$9 = (0, _createSvgIcon$9.default)([/*#__PURE__*/(0, _jsxRuntime$9.jsx)("path", {
	  d: "M4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6z"
	}, "0"), /*#__PURE__*/(0, _jsxRuntime$9.jsx)("path", {
	  d: "M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 10-2.5-1.5L15 12V4h5v8z"
	}, "1")], 'CollectionsBookmark');
	default_1$9 = CollectionsBookmark.default = _default$9;

	var ManageSearch = {};

	var _interopRequireDefault$8 = interopRequireDefaultExports;
	Object.defineProperty(ManageSearch, "__esModule", {
	  value: true
	});
	var default_1$8 = ManageSearch.default = void 0;
	var _createSvgIcon$8 = _interopRequireDefault$8(requireCreateSvgIcon());
	var _jsxRuntime$8 = jsxRuntimeExports;
	var _default$8 = (0, _createSvgIcon$8.default)( /*#__PURE__*/(0, _jsxRuntime$8.jsx)("path", {
	  d: "M7 9H2V7h5v2zm0 3H2v2h5v-2zm13.59 7-3.83-3.83c-.8.52-1.74.83-2.76.83-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5c0 1.02-.31 1.96-.83 2.75L22 17.59 20.59 19zM17 11c0-1.65-1.35-3-3-3s-3 1.35-3 3 1.35 3 3 3 3-1.35 3-3zM2 19h10v-2H2v2z"
	}), 'ManageSearch');
	default_1$8 = ManageSearch.default = _default$8;

	var CalendarMonth = {};

	var _interopRequireDefault$7 = interopRequireDefaultExports;
	Object.defineProperty(CalendarMonth, "__esModule", {
	  value: true
	});
	var default_1$7 = CalendarMonth.default = void 0;
	var _createSvgIcon$7 = _interopRequireDefault$7(requireCreateSvgIcon());
	var _jsxRuntime$7 = jsxRuntimeExports;
	var _default$7 = (0, _createSvgIcon$7.default)( /*#__PURE__*/(0, _jsxRuntime$7.jsx)("path", {
	  d: "M19 4h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V10h14v10zM9 14H7v-2h2v2zm4 0h-2v-2h2v2zm4 0h-2v-2h2v2zm-8 4H7v-2h2v2zm4 0h-2v-2h2v2zm4 0h-2v-2h2v2z"
	}), 'CalendarMonth');
	default_1$7 = CalendarMonth.default = _default$7;

	var HelpRounded = {};

	var _interopRequireDefault$6 = interopRequireDefaultExports;
	Object.defineProperty(HelpRounded, "__esModule", {
	  value: true
	});
	var default_1$6 = HelpRounded.default = void 0;
	var _createSvgIcon$6 = _interopRequireDefault$6(requireCreateSvgIcon());
	var _jsxRuntime$6 = jsxRuntimeExports;
	var _default$6 = (0, _createSvgIcon$6.default)( /*#__PURE__*/(0, _jsxRuntime$6.jsx)("path", {
	  d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75-.9.92c-.5.51-.86.97-1.04 1.69-.08.32-.13.68-.13 1.14h-2v-.5c0-.46.08-.9.22-1.31.2-.58.53-1.1.95-1.52l1.24-1.26c.46-.44.68-1.1.55-1.8-.13-.72-.69-1.33-1.39-1.53-1.11-.31-2.14.32-2.47 1.27-.12.37-.43.65-.82.65h-.3C8.4 9 8 8.44 8.16 7.88c.43-1.47 1.68-2.59 3.23-2.83 1.52-.24 2.97.55 3.87 1.8 1.18 1.63.83 3.38-.19 4.4z"
	}), 'HelpRounded');
	default_1$6 = HelpRounded.default = _default$6;

	var ArrowBack = {};

	var _interopRequireDefault$5 = interopRequireDefaultExports;
	Object.defineProperty(ArrowBack, "__esModule", {
	  value: true
	});
	var default_1$5 = ArrowBack.default = void 0;
	var _createSvgIcon$5 = _interopRequireDefault$5(requireCreateSvgIcon());
	var _jsxRuntime$5 = jsxRuntimeExports;
	var _default$5 = (0, _createSvgIcon$5.default)( /*#__PURE__*/(0, _jsxRuntime$5.jsx)("path", {
	  d: "M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"
	}), 'ArrowBack');
	default_1$5 = ArrowBack.default = _default$5;

	var Menu = {};

	var _interopRequireDefault$4 = interopRequireDefaultExports;
	Object.defineProperty(Menu, "__esModule", {
	  value: true
	});
	var default_1$4 = Menu.default = void 0;
	var _createSvgIcon$4 = _interopRequireDefault$4(requireCreateSvgIcon());
	var _jsxRuntime$4 = jsxRuntimeExports;
	var _default$4 = (0, _createSvgIcon$4.default)( /*#__PURE__*/(0, _jsxRuntime$4.jsx)("path", {
	  d: "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
	}), 'Menu');
	default_1$4 = Menu.default = _default$4;

	const SidebarRootStyles = {
	  height: '100%'
	};
	const LogoWrap = styled$1(Box$1)(({
	  theme
	}) => ({
	  position: 'relative',
	  display: 'flex',
	  alignItems: 'center',
	  paddingTop: theme.spacing(2),
	  paddingLeft: 16,
	  paddingRight: 16,
	  paddingBottom: theme.spacing(6),
	  '& > svg': {
	    marginRight: theme.spacing(2)
	  }
	}));
	const Collapse = styled$1(Fab$1)(({
	  theme,
	  collapsed
	}) => ({
	  position: 'absolute',
	  right: 0,
	  top: '60px',
	  transform: 'translateX(50%)',
	  transition: 'opacity 0.15s ease, visibility 0.15s ease',
	  color: theme.palette.common.white,
	  ...(collapsed && {
	    backgroundColor: 'transparent',
	    color: theme.palette.primary.main,
	    boxShadow: 'none',
	    transform: 'translate(4em, -58px)',
	    transition: 'color 0.3s ease, background-color 0.3s ease',
	    '&:hover': {
	      color: theme.palette.common.white,
	      backgroundColor: theme.palette.common.light
	    }
	  })
	}));
	const SidebarWrap = styled$1(Box$1)(({
	  theme,
	  collapsed
	}) => ({
	  display: 'flex',
	  flexDirection: 'column',
	  height: '100%',
	  ...(collapsed && {
	    [`& .MuiPaper-root`]: {
	      display: 'none'
	    }
	  }),
	  ...(!collapsed && {
	    '&:not(:hover) .MuiFab-root': {
	      opacity: 0,
	      visibility: 'hidden'
	    }
	  })
	}));
	const SidebarInner = styled$1(Paper$1)({
	  display: 'flex',
	  flexDirection: 'column',
	  width: '256px',
	  height: '100%',
	  '& .MuiListItemIcon-root': {
	    minWidth: 0,
	    marginRight: 12
	  }
	});
	const MainMenuWrap = styled$1(List$1)({
	  '& .MuiListItemText-primary': {
	    fontSize: '16px'
	  }
	});
	const FavouritesWrap = styled$1(Box$1)({
	  overflow: 'auto',
	  '& .MuiListItemText-primary': {
	    whiteSpace: 'nowrap',
	    textOverflow: 'ellipsis',
	    overflow: 'hidden'
	  },
	  '& .MuiList-root': {
	    padding: 0
	  }
	});
	const FavouritesLabel = styled$1(Typography$1)(({
	  theme
	}) => ({
	  marginTop: theme.spacing(2),
	  marginBottom: theme.spacing(1),
	  paddingLeft: 16,
	  paddingRight: 16,
	  color: theme.palette.text.disabled
	}));
	const SeeAllLink = styled$1(Link$1)({
	  display: 'block',
	  width: '100%',
	  fontSize: '14px'
	});
	const HelpLink = styled$1(List$1)(({
	  theme
	}) => ({
	  marginTop: 'auto',
	  paddingTop: theme.spacing(1),
	  borderTop: '1px solid rgba(0, 0, 0, 0.12)'
	}));
	const Sidebar = () => {
	  const [collapsed, setCollapsed] = reactExports.useState(sessionStorage.getItem('collapsed_sidebar'));
	  const [apiData, loading, error] = useApi(window.config.json_api_paths.get_sidebar);
	  function toggleCollapse() {
	    if (!collapsed) {
	      sessionStorage.setItem('collapsed_sidebar', true);
	    } else {
	      sessionStorage.removeItem('collapsed_sidebar');
	    }
	    setCollapsed(!collapsed);
	  }
	  return /*#__PURE__*/React.createElement(SidebarWrap, {
	    collapsed: collapsed
	  }, /*#__PURE__*/React.createElement(Collapse, {
	    color: "primary",
	    size: "small",
	    "aria-label": "collapse sidebar",
	    collapsed: collapsed,
	    onClick: toggleCollapse
	  }, collapsed ? /*#__PURE__*/React.createElement(default_1$4, null) : /*#__PURE__*/React.createElement(default_1$5, null)), /*#__PURE__*/React.createElement(SidebarInner, {
	    elevation: 8
	  }, /*#__PURE__*/React.createElement(LogoWrap, null, /*#__PURE__*/React.createElement(CFLogo, null), /*#__PURE__*/React.createElement(Typography$1, {
	    component: "span"
	  }, "CourseFlow")), /*#__PURE__*/React.createElement(MainMenuWrap, {
	    sx: {
	      pt: 0
	    }
	  }, /*#__PURE__*/React.createElement(ListItem$1, {
	    disablePadding: true,
	    dense: true
	  }, /*#__PURE__*/React.createElement(ListItemButton$1, {
	    component: "a",
	    id: "panel-home",
	    href: window.config.home_path,
	    selected: window.location.pathname === window.config.home_path
	  }, /*#__PURE__*/React.createElement(ListItemIcon$1, null, /*#__PURE__*/React.createElement(default_1$a, null)), /*#__PURE__*/React.createElement(ListItemText$1, {
	    primary: window.COURSEFLOW_APP.strings.home
	  }))), apiData.is_teacher ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListItem$1, {
	    disablePadding: true,
	    dense: true
	  }, /*#__PURE__*/React.createElement(ListItemButton$1, {
	    component: "a",
	    id: "panel-my-library",
	    href: window.config.my_library_path,
	    selected: window.location.pathname === window.config.my_library_path
	  }, /*#__PURE__*/React.createElement(ListItemIcon$1, null, /*#__PURE__*/React.createElement(default_1$9, null)), /*#__PURE__*/React.createElement(ListItemText$1, {
	    primary: window.COURSEFLOW_APP.strings.my_library
	  }))), /*#__PURE__*/React.createElement(ListItem$1, {
	    disablePadding: true,
	    dense: true
	  }, /*#__PURE__*/React.createElement(ListItemButton$1, {
	    component: "a",
	    id: "panel-explore",
	    href: window.config.explore_path,
	    selected: window.location.pathname === window.config.explore_path
	  }, /*#__PURE__*/React.createElement(ListItemIcon$1, null, /*#__PURE__*/React.createElement(default_1$8, null)), /*#__PURE__*/React.createElement(ListItemText$1, {
	    primary: window.COURSEFLOW_APP.strings.explore
	  })))) : null, !apiData.is_anonymous ? /*#__PURE__*/React.createElement(ListItem$1, {
	    disablePadding: true,
	    dense: true
	  }, /*#__PURE__*/React.createElement(ListItemButton$1, {
	    component: "a",
	    id: "panel-my-live-projects",
	    href: window.config.my_liveprojects_path,
	    selected: window.location.pathname === window.config.my_liveprojects_path
	  }, /*#__PURE__*/React.createElement(ListItemIcon$1, null, /*#__PURE__*/React.createElement(default_1$7, null)), /*#__PURE__*/React.createElement(ListItemText$1, {
	    primary: window.COURSEFLOW_APP.strings.my_classrooms
	  }))) : null), apiData.is_teacher && apiData.favourites.length ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Divider$1, null), /*#__PURE__*/React.createElement(FavouritesWrap, null, /*#__PURE__*/React.createElement(FavouritesLabel, {
	    variant: "body1"
	  }, window.COURSEFLOW_APP.strings.favourites), /*#__PURE__*/React.createElement(List$1, null, apiData.favourites.map((favourite, id) => /*#__PURE__*/React.createElement(ListItem$1, {
	    disablePadding: true,
	    dense: true,
	    key: id
	  }, /*#__PURE__*/React.createElement(ListItemButton$1, {
	    component: "a",
	    href: favourite.url,
	    "data-test-id": "panel-favourite",
	    selected: window.location.pathname === favourite.url
	  }, /*#__PURE__*/React.createElement(ListItemText$1, {
	    primary: favourite.title
	  })))), apiData.favourites.length >= 5 ? /*#__PURE__*/React.createElement(ListItem$1, {
	    disablePadding: true,
	    dense: true,
	    sx: {
	      mt: 1
	    }
	  }, /*#__PURE__*/React.createElement(ListItemButton$1, {
	    component: "a",
	    href: window.config.my_favourites_path
	  }, /*#__PURE__*/React.createElement(ListItemText$1, {
	    primary: /*#__PURE__*/React.createElement(SeeAllLink, {
	      href: window.config.my_favourites_path
	    }, window.COURSEFLOW_APP.strings.view_all)
	  }))) : null))) : null, /*#__PURE__*/React.createElement(HelpLink, null, /*#__PURE__*/React.createElement(ListItem$1, {
	    disablePadding: true,
	    dense: true
	  }, /*#__PURE__*/React.createElement(ListItemButton$1, {
	    component: "a",
	    href: "https://courseflow.freshdesk.com/support/home"
	  }, /*#__PURE__*/React.createElement(ListItemIcon$1, null, /*#__PURE__*/React.createElement(default_1$6, {
	    color: "primary"
	  })), /*#__PURE__*/React.createElement(ListItemText$1, {
	    primary: window.COURSEFLOW_APP.strings.help_support
	  }))))));
	};
	const CFLogo = () => /*#__PURE__*/React.createElement("svg", {
	  width: "40",
	  height: "40",
	  fill: "none"
	}, /*#__PURE__*/React.createElement("rect", {
	  width: "40",
	  height: "40",
	  rx: "3",
	  fill: "#027A4C"
	}), /*#__PURE__*/React.createElement("mask", {
	  id: "cf-logo-a",
	  style: {
	    maskType: 'luminance'
	  },
	  maskUnits: "userSpaceOnUse",
	  x: "0",
	  y: "0",
	  width: "40",
	  height: "40"
	}, /*#__PURE__*/React.createElement("rect", {
	  width: "40",
	  height: "40",
	  rx: "3",
	  fill: "#fff"
	})), /*#__PURE__*/React.createElement("g", {
	  mask: "url(#cf-logo-a)",
	  fillRule: "evenodd",
	  clipRule: "evenodd"
	}, /*#__PURE__*/React.createElement("path", {
	  d: "M34.018 1.333 73.37 42.667H-5.333L34.018 1.333Z",
	  fill: "#04BA74"
	}), /*#__PURE__*/React.createElement("path", {
	  d: "m4.685 25.333 39.352 41.334h-78.704L4.685 25.333Z",
	  fill: "#12AE72"
	}), /*#__PURE__*/React.createElement("path", {
	  d: "m26 18.667 28 30H-2l28-30Z",
	  fill: "#07E08D"
	})), /*#__PURE__*/React.createElement("circle", {
	  cx: "20",
	  cy: "20",
	  r: "11.333",
	  fill: "#fff"
	}), /*#__PURE__*/React.createElement("mask", {
	  id: "cf-logo-b",
	  style: {
	    maskType: 'luminance'
	  },
	  maskUnits: "userSpaceOnUse",
	  x: "13",
	  y: "13",
	  width: "14",
	  height: "14"
	}, /*#__PURE__*/React.createElement("path", {
	  fillRule: "evenodd",
	  clipRule: "evenodd",
	  d: "M17.957 20.306h1.569c-.462 1.224-.938 2.413-1.572 3.374l.003-3.374Zm-2.37 0h1.76v4.167a4.643 4.643 0 0 1-1.39 1.071 4.51 4.51 0 0 1-.37.162v-5.4Zm4.82-.61c.488-1.294.991-2.547 1.683-3.539v3.54h-1.684Zm4.047 0h-1.759V15.4a4.569 4.569 0 0 1 1.768-1.152v5.455l-.009-.006Zm-.734-5.8a5.37 5.37 0 0 0-1.798 1.468c-.977 1.206-1.576 2.776-2.166 4.334H13.66a.305.305 0 0 0-.274.136.309.309 0 0 0 .234.477h1.358v5.6a5.775 5.775 0 0 1-1.319.141.307.307 0 0 0-.04.613h.04a5.701 5.701 0 0 0 2.569-.553 5.35 5.35 0 0 0 1.786-1.474c.977-1.207 1.578-2.77 2.162-4.332h6.186a.305.305 0 0 0 .305-.306.305.305 0 0 0-.305-.306h-1.295v-5.627a5.929 5.929 0 0 1 1.223-.12.305.305 0 0 0 .304-.307.305.305 0 0 0-.304-.306h-.005a5.707 5.707 0 0 0-2.564.554l-.001.009Z",
	  fill: "#fff"
	})), /*#__PURE__*/React.createElement("g", {
	  mask: "url(#cf-logo-b)"
	}, /*#__PURE__*/React.createElement("path", {
	  fill: "#027A4C",
	  d: "M13.333 13.333h13.333v13.461H13.333z"
	}), /*#__PURE__*/React.createElement("mask", {
	  id: "cf-logo-c",
	  style: {
	    maskType: 'luminance'
	  },
	  maskUnits: "userSpaceOnUse",
	  x: "13",
	  y: "13",
	  width: "14",
	  height: "14"
	}, /*#__PURE__*/React.createElement("path", {
	  fill: "#fff",
	  d: "M13.333 13.333h13.333v13.461H13.333z"
	}))));

	function getAppBarUtilityClass(slot) {
	  return generateUtilityClass('MuiAppBar', slot);
	}
	generateUtilityClasses('MuiAppBar', ['root', 'positionFixed', 'positionAbsolute', 'positionSticky', 'positionStatic', 'positionRelative', 'colorDefault', 'colorPrimary', 'colorSecondary', 'colorInherit', 'colorTransparent', 'colorError', 'colorInfo', 'colorSuccess', 'colorWarning']);

	const _excluded$3 = ["className", "color", "enableColorOnDark", "position"];
	const useUtilityClasses$1 = ownerState => {
	  const {
	    color,
	    position,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', `color${capitalize(color)}`, `position${capitalize(position)}`]
	  };
	  return composeClasses(slots, getAppBarUtilityClass, classes);
	};

	// var2 is the fallback.
	// Ex. var1: 'var(--a)', var2: 'var(--b)'; return: 'var(--a, var(--b))'
	const joinVars = (var1, var2) => var1 ? `${var1 == null ? void 0 : var1.replace(')', '')}, ${var2})` : var2;
	const AppBarRoot = styled$1(Paper$1, {
	  name: 'MuiAppBar',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[`position${capitalize(ownerState.position)}`], styles[`color${capitalize(ownerState.color)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  const backgroundColorDefault = theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[900];
	  return _extends$2({
	    display: 'flex',
	    flexDirection: 'column',
	    width: '100%',
	    boxSizing: 'border-box',
	    // Prevent padding issue with the Modal and fixed positioned AppBar.
	    flexShrink: 0
	  }, ownerState.position === 'fixed' && {
	    position: 'fixed',
	    zIndex: (theme.vars || theme).zIndex.appBar,
	    top: 0,
	    left: 'auto',
	    right: 0,
	    '@media print': {
	      // Prevent the app bar to be visible on each printed page.
	      position: 'absolute'
	    }
	  }, ownerState.position === 'absolute' && {
	    position: 'absolute',
	    zIndex: (theme.vars || theme).zIndex.appBar,
	    top: 0,
	    left: 'auto',
	    right: 0
	  }, ownerState.position === 'sticky' && {
	    // ⚠️ sticky is not supported by IE11.
	    position: 'sticky',
	    zIndex: (theme.vars || theme).zIndex.appBar,
	    top: 0,
	    left: 'auto',
	    right: 0
	  }, ownerState.position === 'static' && {
	    position: 'static'
	  }, ownerState.position === 'relative' && {
	    position: 'relative'
	  }, !theme.vars && _extends$2({}, ownerState.color === 'default' && {
	    backgroundColor: backgroundColorDefault,
	    color: theme.palette.getContrastText(backgroundColorDefault)
	  }, ownerState.color && ownerState.color !== 'default' && ownerState.color !== 'inherit' && ownerState.color !== 'transparent' && {
	    backgroundColor: theme.palette[ownerState.color].main,
	    color: theme.palette[ownerState.color].contrastText
	  }, ownerState.color === 'inherit' && {
	    color: 'inherit'
	  }, theme.palette.mode === 'dark' && !ownerState.enableColorOnDark && {
	    backgroundColor: null,
	    color: null
	  }, ownerState.color === 'transparent' && _extends$2({
	    backgroundColor: 'transparent',
	    color: 'inherit'
	  }, theme.palette.mode === 'dark' && {
	    backgroundImage: 'none'
	  })), theme.vars && _extends$2({}, ownerState.color === 'default' && {
	    '--AppBar-background': ownerState.enableColorOnDark ? theme.vars.palette.AppBar.defaultBg : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette.AppBar.defaultBg),
	    '--AppBar-color': ownerState.enableColorOnDark ? theme.vars.palette.text.primary : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette.text.primary)
	  }, ownerState.color && !ownerState.color.match(/^(default|inherit|transparent)$/) && {
	    '--AppBar-background': ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].main : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette[ownerState.color].main),
	    '--AppBar-color': ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].contrastText : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette[ownerState.color].contrastText)
	  }, {
	    backgroundColor: 'var(--AppBar-background)',
	    color: ownerState.color === 'inherit' ? 'inherit' : 'var(--AppBar-color)'
	  }, ownerState.color === 'transparent' && {
	    backgroundImage: 'none',
	    backgroundColor: 'transparent',
	    color: 'inherit'
	  }));
	});
	const AppBar = /*#__PURE__*/reactExports.forwardRef(function AppBar(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiAppBar'
	  });
	  const {
	      className,
	      color = 'primary',
	      enableColorOnDark = false,
	      position = 'fixed'
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$3);
	  const ownerState = _extends$2({}, props, {
	    color,
	    position,
	    enableColorOnDark
	  });
	  const classes = useUtilityClasses$1(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(AppBarRoot, _extends$2({
	    square: true,
	    component: "header",
	    ownerState: ownerState,
	    elevation: 4,
	    className: clsx(classes.root, className, position === 'fixed' && 'mui-fixed'),
	    ref: ref
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? AppBar.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * The content of the component.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
	   * @default 'primary'
	   */
	  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary', 'transparent', 'error', 'info', 'success', 'warning']), PropTypes.string]),
	  /**
	   * If true, the `color` prop is applied in dark mode.
	   * @default false
	   */
	  enableColorOnDark: PropTypes.bool,
	  /**
	   * The positioning type. The behavior of the different options is described
	   * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).
	   * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.
	   * @default 'fixed'
	   */
	  position: PropTypes.oneOf(['absolute', 'fixed', 'relative', 'static', 'sticky']),
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
	} : void 0;
	var AppBar$1 = AppBar;

	function getToolbarUtilityClass(slot) {
	  return generateUtilityClass('MuiToolbar', slot);
	}
	generateUtilityClasses('MuiToolbar', ['root', 'gutters', 'regular', 'dense']);

	const _excluded$2 = ["className", "component", "disableGutters", "variant"];
	const useUtilityClasses = ownerState => {
	  const {
	    classes,
	    disableGutters,
	    variant
	  } = ownerState;
	  const slots = {
	    root: ['root', !disableGutters && 'gutters', variant]
	  };
	  return composeClasses(slots, getToolbarUtilityClass, classes);
	};
	const ToolbarRoot = styled$1('div', {
	  name: 'MuiToolbar',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, !ownerState.disableGutters && styles.gutters, styles[ownerState.variant]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends$2({
	  position: 'relative',
	  display: 'flex',
	  alignItems: 'center'
	}, !ownerState.disableGutters && {
	  paddingLeft: theme.spacing(2),
	  paddingRight: theme.spacing(2),
	  [theme.breakpoints.up('sm')]: {
	    paddingLeft: theme.spacing(3),
	    paddingRight: theme.spacing(3)
	  }
	}, ownerState.variant === 'dense' && {
	  minHeight: 48
	}), ({
	  theme,
	  ownerState
	}) => ownerState.variant === 'regular' && theme.mixins.toolbar);
	const Toolbar = /*#__PURE__*/reactExports.forwardRef(function Toolbar(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiToolbar'
	  });
	  const {
	      className,
	      component = 'div',
	      disableGutters = false,
	      variant = 'regular'
	    } = props,
	    other = _objectWithoutPropertiesLoose$1(props, _excluded$2);
	  const ownerState = _extends$2({}, props, {
	    component,
	    disableGutters,
	    variant
	  });
	  const classes = useUtilityClasses(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(ToolbarRoot, _extends$2({
	    as: component,
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? Toolbar.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * The Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
	   * The Toolbar is a flex container, allowing flex item properties to be used to lay out the children.
	   */
	  children: PropTypes.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: PropTypes.object,
	  /**
	   * @ignore
	   */
	  className: PropTypes.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: PropTypes.elementType,
	  /**
	   * If `true`, disables gutter padding.
	   * @default false
	   */
	  disableGutters: PropTypes.bool,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * The variant to use.
	   * @default 'regular'
	   */
	  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['dense', 'regular']), PropTypes.string])
	} : void 0;
	var Toolbar$1 = Toolbar;

	var AccountCircle = {};

	var _interopRequireDefault$3 = interopRequireDefaultExports;
	Object.defineProperty(AccountCircle, "__esModule", {
	  value: true
	});
	var default_1$3 = AccountCircle.default = void 0;
	var _createSvgIcon$3 = _interopRequireDefault$3(requireCreateSvgIcon());
	var _jsxRuntime$3 = jsxRuntimeExports;
	var _default$3 = (0, _createSvgIcon$3.default)( /*#__PURE__*/(0, _jsxRuntime$3.jsx)("path", {
	  d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 4c1.93 0 3.5 1.57 3.5 3.5S13.93 13 12 13s-3.5-1.57-3.5-3.5S10.07 6 12 6zm0 14c-2.03 0-4.43-.82-6.14-2.88C7.55 15.8 9.68 15 12 15s4.45.8 6.14 2.12C16.43 19.18 14.03 20 12 20z"
	}), 'AccountCircle');
	default_1$3 = AccountCircle.default = _default$3;

	var Logout = {};

	var _interopRequireDefault$2 = interopRequireDefaultExports;
	Object.defineProperty(Logout, "__esModule", {
	  value: true
	});
	var default_1$2 = Logout.default = void 0;
	var _createSvgIcon$2 = _interopRequireDefault$2(requireCreateSvgIcon());
	var _jsxRuntime$2 = jsxRuntimeExports;
	var _default$2 = (0, _createSvgIcon$2.default)( /*#__PURE__*/(0, _jsxRuntime$2.jsx)("path", {
	  d: "m17 7-1.41 1.41L18.17 11H8v2h10.17l-2.58 2.58L17 17l5-5zM4 5h8V3H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h8v-2H4V5z"
	}), 'Logout');
	default_1$2 = Logout.default = _default$2;

	var Notifications = {};

	var _interopRequireDefault$1 = interopRequireDefaultExports;
	Object.defineProperty(Notifications, "__esModule", {
	  value: true
	});
	var default_1$1 = Notifications.default = void 0;
	var _createSvgIcon$1 = _interopRequireDefault$1(requireCreateSvgIcon());
	var _jsxRuntime$1 = jsxRuntimeExports;
	var _default$1 = (0, _createSvgIcon$1.default)( /*#__PURE__*/(0, _jsxRuntime$1.jsx)("path", {
	  d: "M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z"
	}), 'Notifications');
	default_1$1 = Notifications.default = _default$1;

	var AddCircle = {};

	var _interopRequireDefault = interopRequireDefaultExports;
	Object.defineProperty(AddCircle, "__esModule", {
	  value: true
	});
	var default_1 = AddCircle.default = void 0;
	var _createSvgIcon = _interopRequireDefault(requireCreateSvgIcon());
	var _jsxRuntime = jsxRuntimeExports;
	var _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
	  d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z"
	}), 'AddCircle');
	default_1 = AddCircle.default = _default;

	/*
	Determines how long an action locks an object
	by default, in ms. Once the action ends, the lock
	is cleared (so this is a maximum time).
	*/
	const lock_times = {
	  move: 5000,
	  update: 5000,
	  select: 60000
	};
	const node_keys = ['activity', 'course', 'program'];
	const columnwidth = 160;
	const node_ports = {
	  source: {
	    e: [1, 0.6],
	    w: [0, 0.6],
	    s: [0.5, 1]
	  },
	  target: {
	    n: [0.5, 0],
	    e: [1, 0.4],
	    w: [0, 0.4]
	  }
	};
	const port_keys = ['n', 'e', 's', 'w'];
	const port_direction = [[0, -1], [1, 0], [0, 1], [-1, 0]];
	const port_padding = 10;
	const task_keys = {
	  0: '',
	  1: 'research',
	  2: 'discuss',
	  3: 'problem',
	  4: 'analyze',
	  5: 'peerreview',
	  6: 'debate',
	  7: 'play',
	  8: 'create',
	  9: 'practice',
	  10: 'reading',
	  11: 'write',
	  12: 'present',
	  13: 'experiment',
	  14: 'quiz',
	  15: 'curation',
	  16: 'orchestration',
	  17: 'instrevaluate',
	  18: 'other',
	  101: 'jigsaw',
	  102: 'peer-instruction',
	  103: 'case-studies',
	  104: 'gallery-walk',
	  105: 'reflective-writing',
	  106: 'two-stage-exam',
	  107: 'toolkit',
	  108: 'one-minute-paper',
	  109: 'distributed-problem-solving',
	  110: 'peer-assessment'
	};
	const context_keys = {
	  0: '',
	  1: 'solo',
	  2: 'group',
	  3: 'class',
	  101: 'exercise',
	  102: 'test',
	  103: 'exam'
	};
	const strategy_keys = {
	  0: '',
	  1: 'jigsaw',
	  2: 'peer-instruction',
	  3: 'case-studies',
	  4: 'gallery-walk',
	  5: 'reflective-writing',
	  6: 'two-stage-exam',
	  7: 'toolkit',
	  8: 'one-minute-paper',
	  9: 'distributed-problem-solving',
	  10: 'peer-assessment',
	  11: 'other'
	};
	const default_column_settings = {
	  0: {
	    colour: '#6738ff',
	    icon: 'other'
	  },
	  1: {
	    colour: '#0b118a',
	    icon: 'ooci'
	  },
	  2: {
	    colour: '#114cd4',
	    icon: 'home'
	  },
	  3: {
	    colour: '#11b3d4',
	    icon: 'instruct'
	  },
	  4: {
	    colour: '#04d07d',
	    icon: 'students'
	  },
	  10: {
	    colour: '#6738ff',
	    icon: 'other'
	  },
	  11: {
	    colour: '#ad351d',
	    icon: 'homework'
	  },
	  12: {
	    colour: '#ed4a28',
	    icon: 'lesson'
	  },
	  13: {
	    colour: '#ed8934',
	    icon: 'artifact'
	  },
	  14: {
	    colour: '#f7ba2a',
	    icon: 'assessment'
	  },
	  20: {
	    colour: '#369934',
	    icon: 'other'
	  }
	};
	const node_type_keys = {
	  0: 'activity node',
	  1: 'course node',
	  2: 'program node'
	};
	const object_dictionary = {
	  nodelink: 'nodelink',
	  node: 'node',
	  week: 'week',
	  column: 'column',
	  outcome: 'outcome',
	  outcome_base: 'outcome',
	  workflow: 'workflow',
	  outcomenode: 'outcomenode'
	};
	const parent_dictionary = {
	  nodelink: 'node',
	  node: 'week',
	  week: 'workflow',
	  column: 'workflow',
	  outcome: 'outcome',
	  outcome_base: 'workflow'
	};
	const through_parent_dictionary = {
	  node: 'nodeweek',
	  week: 'weekworkflow',
	  column: 'columnworkflow',
	  outcome: 'outcomeoutcome',
	  outcome_base: 'outcomeworkflow'
	};
	const get_verbose = function (data, object_type) {
	  switch (object_type) {
	    case 'node':
	      return data.node_type_display;
	    case 'workflow':
	    case 'activity':
	    case 'course':
	    case 'program':
	      return {
	        activity: window.gettext('Activity'),
	        course: window.gettext('Course'),
	        program: window.gettext('Program'),
	        workflow: window.gettext('Workflow')
	      }[data.type];
	    case 'week':
	      return data.week_type_display;
	  }
	  return {
	    outcome_base: window.gettext('Outcome'),
	    nodelink: window.gettext('Node Link'),
	    outcome: window.gettext('Outcome'),
	    column: window.gettext('Column'),
	    project: window.gettext('Project'),
	    outcomehorizontallink: window.gettext('Association to the parent outcome'),
	    outcomenode: window.gettext('Association to the outcome')
	  }[object_type];
	};
	const permission_keys = {
	  none: 0,
	  view: 1,
	  edit: 2,
	  comment: 3,
	  student: 4
	};
	const role_keys = {
	  none: 0,
	  student: 1,
	  teacher: 2
	};
	const default_drop_state = {
	  node: false,
	  week: true,
	  outcome: [true, false, false, false, false]
	};
	const get_default_drop_state = (objectID, objectType, depth = 1) => {
	  let default_drop = default_drop_state[objectType];
	  if (objectType === 'outcome') {
	    if (depth < default_drop.length) default_drop = default_drop[depth];else default_drop = false;
	  }
	  return default_drop;
	};

	// Get the colour from a column
	function getColumnColour(data) {
	  if (data.colour == null) return default_column_settings[data.column_type].colour;else return '#' + ('000000' + data.colour?.toString(16)).slice(-6);
	}

	//get all possible object sets
	function object_sets_types() {
	  return {
	    'program outcome': capFirst(window.gettext('program outcome')),
	    'course outcome': capFirst(window.gettext('course outcome')),
	    'activity outcome': capFirst(window.gettext('activity outcome')),
	    'program node': capFirst(window.gettext('program node')),
	    'course node': capFirst(window.gettext('course node')),
	    'activity node': capFirst(window.gettext('activity node'))
	  };
	}

	/**
	 * Manages the current selection, ensuring we only have one at a time
	 */
	class SelectionManager {
	  constructor(read_only) {
	    this.currentSelection;
	    this.mouse_isclick = false;
	    this.read_only = read_only;
	    var selector = this;
	    $(document).on('mousedown', () => {
	      selector.mouse_isclick = true;
	      setTimeout(() => {
	        selector.mouse_isclick = false;
	      }, 500);
	    });
	    $(document).on('mousemove', () => {
	      selector.mouse_isclick = false;
	    });
	    $(document).on('mouseup', (evt, newSelection) => {
	      if (selector.mouse_isclick) {
	        selector.changeSelection(evt, null);
	      }
	    });
	    this.last_sidebar_tab = $('#sidebar').tabs('option', 'active');
	  }
	  changeSelection(evt, newSelection) {
	    if (evt) {
	      evt.stopPropagation();
	    }
	    if (!this.read_only && newSelection && newSelection.props.data && newSelection.props.data.lock) {
	      return;
	    }
	    if (this.currentSelection) {
	      this.currentSelection.setState({
	        selected: false
	      });
	      if (!this.read_only) {
	        this.currentSelection.props.renderer.lock_update({
	          object_id: this.currentSelection.props.data.id,
	          object_type: object_dictionary[this.currentSelection.objectType]
	        }, 60 * 1000, false);
	      }
	    }
	    this.currentSelection = newSelection;
	    if (this.currentSelection) {
	      if (!this.read_only) {
	        this.currentSelection.props.renderer.lock_update({
	          object_id: this.currentSelection.props.data.id,
	          object_type: object_dictionary[this.currentSelection.objectType]
	        }, 60 * 1000, true);
	      }
	      if ($('#sidebar').tabs('option', 'active') !== 0) {
	        this.last_sidebar_tab = $('#sidebar').tabs('option', 'active');
	      }
	      $('#sidebar').tabs('enable', 0);
	      $('#sidebar').tabs('option', 'active', 0);
	      this.currentSelection.setState({
	        selected: true
	      });
	    } else {
	      if ($('#sidebar').tabs('option', 'active') === 0) {
	        $('#sidebar').tabs('option', 'active', this.last_sidebar_tab);
	      }
	      $('#sidebar').tabs('disable', 0);
	    }
	  }
	  deleted(selection) {
	    if (selection === this.currentSelection) {
	      this.changeSelection(null, null);
	    }
	  }
	}

	// @todo this should be a component with managed state
	class TinyLoader {
	  constructor(identifier) {
	    this.identifier = identifier;
	    this.loadings = 0;
	  }
	  startLoad() {
	    $(this.identifier).addClass('waiting');
	    this.loadings++;
	  }
	  endLoad() {
	    if (this.loadings > 0) {
	      this.loadings--;
	    }
	    if (this.loadings <= 0) {
	      $(this.identifier).removeClass('waiting');
	    }
	  }
	}

	// REACT
	// import { renderMessageBox } from '../Components/components/MenuComponents/MenuComponents.js'

	//Get a list of possible workflows we can add to this project
	function getAddedWorkflowMenu(projectPk, type_filter, get_strategies, self_only, updateFunction) {
	  $.post(window.config.post_paths.get_possible_added_workflows, {
	    projectPk: JSON.stringify(projectPk),
	    type_filter: JSON.stringify(type_filter),
	    get_strategies: JSON.stringify(get_strategies),
	    self_only: JSON.stringify(self_only)
	  }, data => {
	    // @TODO call to react render
	    //   openAddedWorkflowMenu(data, updateFunction)
	  });
	}

	//Get the workflows that can be selected for the project, shaped for a menu
	function getWorkflowSelectMenu(projectPk, type_filter, get_strategies, self_only, updateFunction, receiptFunction) {
	  $.post(window.config.post_paths.get_possible_added_workflows, {
	    projectPk: JSON.stringify(projectPk),
	    type_filter: JSON.stringify(type_filter),
	    get_strategies: JSON.stringify(get_strategies),
	    self_only: JSON.stringify(self_only)
	  }, data => {
	    // @TODO call to react render
	    //  openWorkflowSelectMenu(data, updateFunction)
	    if (receiptFunction) receiptFunction();
	  });
	}

	//Get possible projects that can be a target for the workflow to be duplicated into
	function getTargetProjectMenu(workflowPk, updateFunction, callBackFunction = () => console.log('success')) {
	  $.post(window.config.post_paths.get_target_projects, {
	    workflowPk: JSON.stringify(workflowPk)
	  }, data => {
	    callBackFunction();
	    // @TODO call to react render
	    // openTargetProjectMenu(data, updateFunction)
	  });
	}

	//Get the list of workflows we can link to a node
	function getLinkedWorkflowMenu(nodeData, updateFunction, callBackFunction = () => console.log('success')) {
	  $.post(window.config.post_paths.get_possible_linked_workflows, {
	    nodePk: JSON.stringify(nodeData.id)
	  }, data => {
	    callBackFunction();
	    // @TODO call to react render
	    //  openLinkedWorkflowMenu(data, updateFunction)
	  });
	}

	// not sure where this lives yet
	function createNew(create_url) {
	  let tiny_loader = new TinyLoader($('body')[0]);
	  tiny_loader.startLoad();
	  getTargetProjectMenu(-1, response_data => {
	    if (response_data.parentID !== null) {
	      window.location = create_url.replace('/0/', '/' + response_data.parentID + '/');
	    }
	  }, () => {
	    tiny_loader.endLoad();
	  });
	}

	const StyledMenu = styled$1(Menu$2)(({
	  theme
	}) => ({
	  '& .MuiPaper-root': {
	    minWidth: 220,
	    '& .MuiMenuItem-root': {
	      '& .MuiSvgIcon-root': {
	        marginRight: theme.spacing(1.5)
	      }
	    }
	  }
	}));
	const NotificationsMenu = styled$1(Popover$1)({
	  '& .MuiPaper-root': {
	    marginLeft: '3em',
	    width: 500
	  }
	});
	const NotificationsHeader = styled$1(Box$1)(({
	  theme
	}) => ({
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'space-between',
	  paddingTop: theme.spacing(2),
	  paddingBottom: theme.spacing(2),
	  paddingLeft: theme.spacing(3),
	  paddingRight: theme.spacing(1),
	  borderBottom: `1px solid ${theme.palette.divider}`,
	  '& .MuiTypography-root:not(a)': {
	    color: 'currentColor'
	  }
	}));
	const NotificationsList = styled$1(List$1)(({
	  theme
	}) => ({
	  paddingTop: 0,
	  paddingBottom: 0,
	  marginBottom: theme.spacing(1),
	  '& .MuiListItem-root': {
	    padding: 0
	  },
	  '& .MuiListItemButton-root': {
	    paddingTop: theme.spacing(1.5),
	    paddingBottom: theme.spacing(1.5),
	    paddingLeft: theme.spacing(4),
	    borderBottom: `1px solid ${theme.palette.divider}`
	  },
	  '& .MuiBadge-root': {
	    position: 'absolute',
	    left: theme.spacing(1.7),
	    top: '50%'
	  }
	}));
	const TopBar = () => {
	  const [anchorEl, setAnchorEl] = reactExports.useState(null);
	  const isMenuOpen = Boolean(anchorEl);
	  const [addMenuAnchorEl, setAddMenuAnchorEl] = reactExports.useState(null);
	  const isAddMenuOpen = Boolean(addMenuAnchorEl);
	  const [notificationsMenuAnchorEl, setNotificationsMenuAnchorEl] = reactExports.useState(null);
	  const isNotificationsMenuOpen = Boolean(notificationsMenuAnchorEl);
	  const [apiData, loading, error] = useApi(window.config.json_api_paths.get_top_bar);
	  if (loading || error) {
	    return null;
	  }
	  const handleMenuOpen = event => {
	    setAnchorEl(event.currentTarget);
	  };
	  const handleAddMenuOpen = event => {
	    setAddMenuAnchorEl(event.currentTarget);
	  };
	  const handleNotificationsMenuOpen = event => {
	    setNotificationsMenuAnchorEl(event.currentTarget);
	  };
	  const handleLogout = () => [window.location.replace(window.config.logout_path)];
	  const closeAllMenus = () => {
	    setAnchorEl(null);
	    setAddMenuAnchorEl(null);
	    setNotificationsMenuAnchorEl(null);
	  };
	  const handleCreateClick = type => {
	    switch (type) {
	      case 'program':
	        createNew(window.config.create_path.program);
	        break;
	      case 'activity':
	        createNew(window.config.create_path.activity);
	        break;
	      case 'course':
	        createNew(window.config.create_path.course);
	        break;
	    }
	    closeAllMenus();
	  };
	  const addMenu = /*#__PURE__*/React.createElement(StyledMenu, {
	    anchorEl: addMenuAnchorEl,
	    id: "add-menu",
	    keepMounted: true,
	    anchorOrigin: {
	      vertical: 'bottom',
	      horizontal: 'center'
	    },
	    transformOrigin: {
	      vertical: 'top',
	      horizontal: 'center'
	    },
	    open: isAddMenuOpen,
	    onClose: closeAllMenus
	  }, /*#__PURE__*/React.createElement(MenuItem$1, {
	    component: "a",
	    href: apiData.menus.add.projectUrl
	  }, window.COURSEFLOW_APP.strings.project), /*#__PURE__*/React.createElement(MenuItem$1, {
	    onClick: () => handleCreateClick('program')
	  }, window.COURSEFLOW_APP.strings.program), /*#__PURE__*/React.createElement(MenuItem$1, {
	    onClick: () => handleCreateClick('course')
	  }, window.COURSEFLOW_APP.strings.course), /*#__PURE__*/React.createElement(MenuItem$1, {
	    onClick: () => handleCreateClick('activity')
	  }, window.COURSEFLOW_APP.strings.activity));
	  const notificationsMenu = /*#__PURE__*/React.createElement(NotificationsMenu, {
	    anchorEl: notificationsMenuAnchorEl,
	    id: "notifications-menu",
	    keepMounted: true,
	    anchorOrigin: {
	      vertical: 'bottom',
	      horizontal: 'right'
	    },
	    transformOrigin: {
	      vertical: 'top',
	      horizontal: 'right'
	    },
	    open: isNotificationsMenuOpen,
	    onClose: closeAllMenus
	  }, /*#__PURE__*/React.createElement(NotificationsHeader, null, /*#__PURE__*/React.createElement(Typography$1, {
	    variant: "h5"
	  }, window.COURSEFLOW_APP.strings.notifications), /*#__PURE__*/React.createElement(Link$1, {
	    href: apiData.notifications.url,
	    underline: "always"
	  }, window.COURSEFLOW_APP.strings.see_all)), /*#__PURE__*/React.createElement(NotificationsList, null, apiData.notifications.items.map((n, idx) => /*#__PURE__*/React.createElement(ListItem$1, {
	    key: idx,
	    alignItems: "flex-start",
	    sx: {
	      backgroundColor: n.unread ? 'primary.lightest' : null
	    }
	  }, /*#__PURE__*/React.createElement(ListItemButton$1, {
	    component: "a",
	    href: n.url
	  }, n.unread && /*#__PURE__*/React.createElement(Badge$1, {
	    color: "primary",
	    variant: "dot"
	  }), /*#__PURE__*/React.createElement(ListItemAvatar$1, null, /*#__PURE__*/React.createElement(Avatar$1, {
	    alt: n.from
	  }, `${n.from.split(' ')[0][0]}${n.from.split(' ')[1][0]}`)), /*#__PURE__*/React.createElement(ListItemText$1, {
	    primary: `${n.from} • ${n.date}`,
	    secondary: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography$1, {
	      sx: {
	        display: 'inline'
	      },
	      component: "span",
	      variant: "body2",
	      color: "text.primary"
	    }, n.text))
	  }))))));
	  const accountMenu = /*#__PURE__*/React.createElement(StyledMenu, {
	    anchorEl: anchorEl,
	    id: "account-menu",
	    keepMounted: true,
	    anchorOrigin: {
	      vertical: 'bottom',
	      horizontal: 'right'
	    },
	    transformOrigin: {
	      vertical: 'top',
	      horizontal: 'right'
	    },
	    open: isMenuOpen,
	    onClose: closeAllMenus
	  }, /*#__PURE__*/React.createElement(MenuItem$1, {
	    component: "a",
	    href: apiData.menus.account.profileUrl
	  }, window.COURSEFLOW_APP.strings.profile), /*#__PURE__*/React.createElement(MenuItem$1, {
	    component: "a",
	    href: apiData.menus.account.resetPasswordUrl
	  }, window.COURSEFLOW_APP.strings.password_reset), /*#__PURE__*/React.createElement(MenuItem$1, {
	    component: "a",
	    href: apiData.menus.account.profileUrl
	  }, window.COURSEFLOW_APP.strings.notification_settings), /*#__PURE__*/React.createElement(Divider$1, null), /*#__PURE__*/React.createElement(MenuItem$1, {
	    component: "a",
	    href: apiData.menus.account.daliteUrl
	  }, "Go to ", apiData.menus.account.daliteText), /*#__PURE__*/React.createElement(MenuItem$1, {
	    onClick: handleLogout
	  }, /*#__PURE__*/React.createElement(default_1$2, null), " ", window.COURSEFLOW_APP.strings.sign_out));
	  return /*#__PURE__*/React.createElement(Box$1, null, /*#__PURE__*/React.createElement(AppBar$1, {
	    position: "static"
	  }, /*#__PURE__*/React.createElement(Paper$1, null, /*#__PURE__*/React.createElement(Toolbar$1, {
	    variant: "dense"
	  }, /*#__PURE__*/React.createElement(Box$1, {
	    sx: {
	      flexGrow: 1
	    },
	    className: "title"
	  }), /*#__PURE__*/React.createElement(Box$1, {
	    sx: {
	      display: 'flex'
	    }
	  }, apiData.is_teacher ? /*#__PURE__*/React.createElement(IconButton$1, {
	    size: "large",
	    "aria-label": "add menu",
	    "aria-controls": "add-menu",
	    "aria-haspopup": "true",
	    color: "primary",
	    onClick: handleAddMenuOpen
	  }, /*#__PURE__*/React.createElement(default_1, null)) : null, /*#__PURE__*/React.createElement(IconButton$1, {
	    size: "large",
	    "aria-label": apiData.notifications.unread >= 1 ? `show ${apiData.notifications.unread} new notifications` : 'no new notifications',
	    "aria-controls": "notifications-menu",
	    "aria-haspopup": "true",
	    onClick: handleNotificationsMenuOpen
	  }, /*#__PURE__*/React.createElement(Badge$1, {
	    badgeContent: apiData.notifications.unread,
	    color: "primary"
	  }, /*#__PURE__*/React.createElement(default_1$1, null))), /*#__PURE__*/React.createElement(IconButton$1, {
	    size: "large",
	    edge: "end",
	    "aria-label": "account of current user",
	    "aria-controls": "account-menu",
	    "aria-haspopup": "true",
	    onClick: handleMenuOpen
	  }, /*#__PURE__*/React.createElement(default_1$3, null)))))), apiData.is_teacher && addMenu, notificationsMenu, accountMenu);
	};

	/**
	 * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js
	 *
	 * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes
	 * during build.
	 * @param {number} code
	 */
	function formatProdErrorMessage(code) {
	  return "Minified Redux error #" + code + "; visit https://redux.js.org/Errors?code=" + code + " for the full message or " + 'use the non-minified dev environment for full errors. ';
	}

	// Inlined version of the `symbol-observable` polyfill
	var $$observable = (function () {
	  return typeof Symbol === 'function' && Symbol.observable || '@@observable';
	})();

	/**
	 * These are private action types reserved by Redux.
	 * For any unknown actions, you must return the current state.
	 * If the current state is undefined, you must return the initial state.
	 * Do not reference these action types directly in your code.
	 */
	var randomString = function randomString() {
	  return Math.random().toString(36).substring(7).split('').join('.');
	};

	var ActionTypes = {
	  INIT: "@@redux/INIT" + randomString(),
	  REPLACE: "@@redux/REPLACE" + randomString(),
	  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
	    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
	  }
	};

	/**
	 * @param {any} obj The object to inspect.
	 * @returns {boolean} True if the argument appears to be a plain object.
	 */
	function isPlainObject$2(obj) {
	  if (typeof obj !== 'object' || obj === null) return false;
	  var proto = obj;

	  while (Object.getPrototypeOf(proto) !== null) {
	    proto = Object.getPrototypeOf(proto);
	  }

	  return Object.getPrototypeOf(obj) === proto;
	}

	// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of
	function miniKindOf(val) {
	  if (val === void 0) return 'undefined';
	  if (val === null) return 'null';
	  var type = typeof val;

	  switch (type) {
	    case 'boolean':
	    case 'string':
	    case 'number':
	    case 'symbol':
	    case 'function':
	      {
	        return type;
	      }
	  }

	  if (Array.isArray(val)) return 'array';
	  if (isDate$1(val)) return 'date';
	  if (isError(val)) return 'error';
	  var constructorName = ctorName(val);

	  switch (constructorName) {
	    case 'Symbol':
	    case 'Promise':
	    case 'WeakMap':
	    case 'WeakSet':
	    case 'Map':
	    case 'Set':
	      return constructorName;
	  } // other


	  return type.slice(8, -1).toLowerCase().replace(/\s/g, '');
	}

	function ctorName(val) {
	  return typeof val.constructor === 'function' ? val.constructor.name : null;
	}

	function isError(val) {
	  return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';
	}

	function isDate$1(val) {
	  if (val instanceof Date) return true;
	  return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';
	}

	function kindOf(val) {
	  var typeOfVal = typeof val;

	  if (process.env.NODE_ENV !== 'production') {
	    typeOfVal = miniKindOf(val);
	  }

	  return typeOfVal;
	}

	/**
	 * @deprecated
	 *
	 * **We recommend using the `configureStore` method
	 * of the `@reduxjs/toolkit` package**, which replaces `createStore`.
	 *
	 * Redux Toolkit is our recommended approach for writing Redux logic today,
	 * including store setup, reducers, data fetching, and more.
	 *
	 * **For more details, please read this Redux docs page:**
	 * **https://redux.js.org/introduction/why-rtk-is-redux-today**
	 *
	 * `configureStore` from Redux Toolkit is an improved version of `createStore` that
	 * simplifies setup and helps avoid common bugs.
	 *
	 * You should not be using the `redux` core package by itself today, except for learning purposes.
	 * The `createStore` method from the core `redux` package will not be removed, but we encourage
	 * all users to migrate to using Redux Toolkit for all Redux code.
	 *
	 * If you want to use `createStore` without this visual deprecation warning, use
	 * the `legacy_createStore` import instead:
	 *
	 * `import { legacy_createStore as createStore} from 'redux'`
	 *
	 */

	function createStore(reducer, preloadedState, enhancer) {
	  var _ref2;

	  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
	    throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(0) : 'It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.');
	  }

	  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
	    enhancer = preloadedState;
	    preloadedState = undefined;
	  }

	  if (typeof enhancer !== 'undefined') {
	    if (typeof enhancer !== 'function') {
	      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(1) : "Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
	    }

	    return enhancer(createStore)(reducer, preloadedState);
	  }

	  if (typeof reducer !== 'function') {
	    throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(2) : "Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer) + "'");
	  }

	  var currentReducer = reducer;
	  var currentState = preloadedState;
	  var currentListeners = [];
	  var nextListeners = currentListeners;
	  var isDispatching = false;
	  /**
	   * This makes a shallow copy of currentListeners so we can use
	   * nextListeners as a temporary list while dispatching.
	   *
	   * This prevents any bugs around consumers calling
	   * subscribe/unsubscribe in the middle of a dispatch.
	   */

	  function ensureCanMutateNextListeners() {
	    if (nextListeners === currentListeners) {
	      nextListeners = currentListeners.slice();
	    }
	  }
	  /**
	   * Reads the state tree managed by the store.
	   *
	   * @returns {any} The current state tree of your application.
	   */


	  function getState() {
	    if (isDispatching) {
	      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(3) : 'You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');
	    }

	    return currentState;
	  }
	  /**
	   * Adds a change listener. It will be called any time an action is dispatched,
	   * and some part of the state tree may potentially have changed. You may then
	   * call `getState()` to read the current state tree inside the callback.
	   *
	   * You may call `dispatch()` from a change listener, with the following
	   * caveats:
	   *
	   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
	   * If you subscribe or unsubscribe while the listeners are being invoked, this
	   * will not have any effect on the `dispatch()` that is currently in progress.
	   * However, the next `dispatch()` call, whether nested or not, will use a more
	   * recent snapshot of the subscription list.
	   *
	   * 2. The listener should not expect to see all state changes, as the state
	   * might have been updated multiple times during a nested `dispatch()` before
	   * the listener is called. It is, however, guaranteed that all subscribers
	   * registered before the `dispatch()` started will be called with the latest
	   * state by the time it exits.
	   *
	   * @param {Function} listener A callback to be invoked on every dispatch.
	   * @returns {Function} A function to remove this change listener.
	   */


	  function subscribe(listener) {
	    if (typeof listener !== 'function') {
	      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(4) : "Expected the listener to be a function. Instead, received: '" + kindOf(listener) + "'");
	    }

	    if (isDispatching) {
	      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(5) : 'You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');
	    }

	    var isSubscribed = true;
	    ensureCanMutateNextListeners();
	    nextListeners.push(listener);
	    return function unsubscribe() {
	      if (!isSubscribed) {
	        return;
	      }

	      if (isDispatching) {
	        throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(6) : 'You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');
	      }

	      isSubscribed = false;
	      ensureCanMutateNextListeners();
	      var index = nextListeners.indexOf(listener);
	      nextListeners.splice(index, 1);
	      currentListeners = null;
	    };
	  }
	  /**
	   * Dispatches an action. It is the only way to trigger a state change.
	   *
	   * The `reducer` function, used to create the store, will be called with the
	   * current state tree and the given `action`. Its return value will
	   * be considered the **next** state of the tree, and the change listeners
	   * will be notified.
	   *
	   * The base implementation only supports plain object actions. If you want to
	   * dispatch a Promise, an Observable, a thunk, or something else, you need to
	   * wrap your store creating function into the corresponding middleware. For
	   * example, see the documentation for the `redux-thunk` package. Even the
	   * middleware will eventually dispatch plain object actions using this method.
	   *
	   * @param {Object} action A plain object representing “what changed”. It is
	   * a good idea to keep actions serializable so you can record and replay user
	   * sessions, or use the time travelling `redux-devtools`. An action must have
	   * a `type` property which may not be `undefined`. It is a good idea to use
	   * string constants for action types.
	   *
	   * @returns {Object} For convenience, the same action object you dispatched.
	   *
	   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
	   * return something else (for example, a Promise you can await).
	   */


	  function dispatch(action) {
	    if (!isPlainObject$2(action)) {
	      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(7) : "Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
	    }

	    if (typeof action.type === 'undefined') {
	      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
	    }

	    if (isDispatching) {
	      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(9) : 'Reducers may not dispatch actions.');
	    }

	    try {
	      isDispatching = true;
	      currentState = currentReducer(currentState, action);
	    } finally {
	      isDispatching = false;
	    }

	    var listeners = currentListeners = nextListeners;

	    for (var i = 0; i < listeners.length; i++) {
	      var listener = listeners[i];
	      listener();
	    }

	    return action;
	  }
	  /**
	   * Replaces the reducer currently used by the store to calculate the state.
	   *
	   * You might need this if your app implements code splitting and you want to
	   * load some of the reducers dynamically. You might also need this if you
	   * implement a hot reloading mechanism for Redux.
	   *
	   * @param {Function} nextReducer The reducer for the store to use instead.
	   * @returns {void}
	   */


	  function replaceReducer(nextReducer) {
	    if (typeof nextReducer !== 'function') {
	      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(10) : "Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
	    }

	    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.
	    // Any reducers that existed in both the new and old rootReducer
	    // will receive the previous state. This effectively populates
	    // the new state tree with any relevant data from the old one.

	    dispatch({
	      type: ActionTypes.REPLACE
	    });
	  }
	  /**
	   * Interoperability point for observable/reactive libraries.
	   * @returns {observable} A minimal observable of state changes.
	   * For more information, see the observable proposal:
	   * https://github.com/tc39/proposal-observable
	   */


	  function observable() {
	    var _ref;

	    var outerSubscribe = subscribe;
	    return _ref = {
	      /**
	       * The minimal observable subscription method.
	       * @param {Object} observer Any object that can be used as an observer.
	       * The observer object should have a `next` method.
	       * @returns {subscription} An object with an `unsubscribe` method that can
	       * be used to unsubscribe the observable from the store, and prevent further
	       * emission of values from the observable.
	       */
	      subscribe: function subscribe(observer) {
	        if (typeof observer !== 'object' || observer === null) {
	          throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(11) : "Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
	        }

	        function observeState() {
	          if (observer.next) {
	            observer.next(getState());
	          }
	        }

	        observeState();
	        var unsubscribe = outerSubscribe(observeState);
	        return {
	          unsubscribe: unsubscribe
	        };
	      }
	    }, _ref[$$observable] = function () {
	      return this;
	    }, _ref;
	  } // When a store is created, an "INIT" action is dispatched so that every
	  // reducer returns their initial state. This effectively populates
	  // the initial state tree.


	  dispatch({
	    type: ActionTypes.INIT
	  });
	  return _ref2 = {
	    dispatch: dispatch,
	    subscribe: subscribe,
	    getState: getState,
	    replaceReducer: replaceReducer
	  }, _ref2[$$observable] = observable, _ref2;
	}

	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning$1(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */


	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	  } catch (e) {} // eslint-disable-line no-empty

	}

	function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
	  var reducerKeys = Object.keys(reducers);
	  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

	  if (reducerKeys.length === 0) {
	    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
	  }

	  if (!isPlainObject$2(inputState)) {
	    return "The " + argumentName + " has unexpected type of \"" + kindOf(inputState) + "\". Expected argument to be an object with the following " + ("keys: \"" + reducerKeys.join('", "') + "\"");
	  }

	  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
	    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
	  });
	  unexpectedKeys.forEach(function (key) {
	    unexpectedKeyCache[key] = true;
	  });
	  if (action && action.type === ActionTypes.REPLACE) return;

	  if (unexpectedKeys.length > 0) {
	    return "Unexpected " + (unexpectedKeys.length > 1 ? 'keys' : 'key') + " " + ("\"" + unexpectedKeys.join('", "') + "\" found in " + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ("\"" + reducerKeys.join('", "') + "\". Unexpected keys will be ignored.");
	  }
	}

	function assertReducerShape(reducers) {
	  Object.keys(reducers).forEach(function (key) {
	    var reducer = reducers[key];
	    var initialState = reducer(undefined, {
	      type: ActionTypes.INIT
	    });

	    if (typeof initialState === 'undefined') {
	      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(12) : "The slice reducer for key \"" + key + "\" returned undefined during initialization. " + "If the state passed to the reducer is undefined, you must " + "explicitly return the initial state. The initial state may " + "not be undefined. If you don't want to set a value for this reducer, " + "you can use null instead of undefined.");
	    }

	    if (typeof reducer(undefined, {
	      type: ActionTypes.PROBE_UNKNOWN_ACTION()
	    }) === 'undefined') {
	      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(13) : "The slice reducer for key \"" + key + "\" returned undefined when probed with a random type. " + ("Don't try to handle '" + ActionTypes.INIT + "' or other actions in \"redux/*\" ") + "namespace. They are considered private. Instead, you must return the " + "current state for any unknown actions, unless it is undefined, " + "in which case you must return the initial state, regardless of the " + "action type. The initial state may not be undefined, but can be null.");
	    }
	  });
	}
	/**
	 * Turns an object whose values are different reducer functions, into a single
	 * reducer function. It will call every child reducer, and gather their results
	 * into a single state object, whose keys correspond to the keys of the passed
	 * reducer functions.
	 *
	 * @param {Object} reducers An object whose values correspond to different
	 * reducer functions that need to be combined into one. One handy way to obtain
	 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
	 * undefined for any action. Instead, they should return their initial state
	 * if the state passed to them was undefined, and the current state for any
	 * unrecognized action.
	 *
	 * @returns {Function} A reducer function that invokes every reducer inside the
	 * passed object, and builds a state object with the same shape.
	 */


	function combineReducers(reducers) {
	  var reducerKeys = Object.keys(reducers);
	  var finalReducers = {};

	  for (var i = 0; i < reducerKeys.length; i++) {
	    var key = reducerKeys[i];

	    if (process.env.NODE_ENV !== 'production') {
	      if (typeof reducers[key] === 'undefined') {
	        warning$1("No reducer provided for key \"" + key + "\"");
	      }
	    }

	    if (typeof reducers[key] === 'function') {
	      finalReducers[key] = reducers[key];
	    }
	  }

	  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same
	  // keys multiple times.

	  var unexpectedKeyCache;

	  if (process.env.NODE_ENV !== 'production') {
	    unexpectedKeyCache = {};
	  }

	  var shapeAssertionError;

	  try {
	    assertReducerShape(finalReducers);
	  } catch (e) {
	    shapeAssertionError = e;
	  }

	  return function combination(state, action) {
	    if (state === void 0) {
	      state = {};
	    }

	    if (shapeAssertionError) {
	      throw shapeAssertionError;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);

	      if (warningMessage) {
	        warning$1(warningMessage);
	      }
	    }

	    var hasChanged = false;
	    var nextState = {};

	    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
	      var _key = finalReducerKeys[_i];
	      var reducer = finalReducers[_key];
	      var previousStateForKey = state[_key];
	      var nextStateForKey = reducer(previousStateForKey, action);

	      if (typeof nextStateForKey === 'undefined') {
	        var actionType = action && action.type;
	        throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(14) : "When called with an action of type " + (actionType ? "\"" + String(actionType) + "\"" : '(unknown type)') + ", the slice reducer for key \"" + _key + "\" returned undefined. " + "To ignore an action, you must explicitly return the previous state. " + "If you want this reducer to hold no value, you can return null instead of undefined.");
	      }

	      nextState[_key] = nextStateForKey;
	      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
	    }

	    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
	    return hasChanged ? nextState : state;
	  };
	}

	const createLockAction = (object_id, object_type, lock, user_id, user_colour) => {
	  if (lock) return {
	    type: object_type + '/createLock',
	    payload: {
	      id: object_id,
	      lock: {
	        user_id: user_id,
	        user_colour: user_colour
	      }
	    }
	  };else return {
	    type: object_type + '/createLock',
	    payload: {
	      id: object_id,
	      lock: null
	    }
	  };
	};
	const reloadCommentsAction = (id, objectType, comment_data) => {
	  return {
	    type: objectType + '/reloadComments',
	    payload: {
	      id: id,
	      objectType: objectType,
	      comment_data
	    }
	  };
	};
	const reloadAssignmentsAction = (id, has_assignment) => {
	  return {
	    type: 'node/reloadAssignments',
	    payload: {
	      id: id,
	      has_assignment: has_assignment
	    }
	  };
	};
	const moveColumnWorkflow = (id, new_position, new_parent, child_id) => {
	  return {
	    type: 'columnworkflow/movedTo',
	    payload: {
	      id: id,
	      new_index: new_position,
	      new_parent: new_parent,
	      child_id: child_id
	    }
	  };
	};
	const moveWeekWorkflow = (id, new_position, new_parent, child_id) => {
	  return {
	    type: 'weekworkflow/movedTo',
	    payload: {
	      id: id,
	      new_index: new_position,
	      new_parent: new_parent,
	      child_id: child_id
	    }
	  };
	};
	const columnChangeNode = (id, new_column) => {
	  return {
	    type: 'node/changedColumn',
	    payload: {
	      id: id,
	      new_column: new_column
	    }
	  };
	};
	const moveNodeWeek = (id, new_position, new_parent, child_id) => {
	  return {
	    type: 'nodeweek/movedTo',
	    payload: {
	      id: id,
	      new_index: new_position,
	      new_parent: new_parent,
	      child_id: child_id
	    }
	  };
	};
	const changeField = (id, objectType, json) => {
	  return {
	    type: objectType + '/changeField',
	    payload: {
	      id: id,
	      objectType: objectType,
	      json: json
	    }
	  };
	};
	const moveOutcomeOutcome = (id, new_position, new_parent, child_id) => {
	  return {
	    type: 'outcomeoutcome/movedTo',
	    payload: {
	      id: id,
	      new_index: new_position,
	      new_parent: new_parent,
	      child_id: child_id
	    }
	  };
	};
	const moveOutcomeWorkflow = (id, new_position, new_parent, child_id) => {
	  return {
	    type: 'outcomeworkflow/movedTo',
	    payload: {
	      id: id,
	      new_index: new_position,
	      new_parent: new_parent,
	      child_id: child_id
	    }
	  };
	};
	const toggleObjectSet = (id, hidden) => {
	  return {
	    type: 'objectset/toggleObjectSet',
	    payload: {
	      id: id,
	      hidden: hidden
	    }
	  };
	};
	const replaceStoreData = data_package => {
	  return {
	    type: 'replaceStoreData',
	    payload: data_package
	  };
	};
	const refreshStoreData = data_package => {
	  return {
	    type: 'refreshStoreData',
	    payload: data_package
	  };
	};
	function workflowReducer(state = {}, action) {
	  switch (action.type) {
	    case 'replaceStoreData':
	      if (action.payload.workflow) return action.payload.workflow;
	      return state;
	    case 'refreshStoreData':
	      if (action.payload.workflow) return action.payload.workflow;
	      return state;
	    case 'workflow/createLock':
	      if (state.id == action.payload.id) {
	        var new_state = {
	          ...state,
	          lock: action.payload.lock
	        };
	        return new_state;
	      }
	      return state;
	    case 'weekworkflow/changeID':
	      var new_state = {
	        ...state
	      };
	      var old_index = state.weekworkflow_set.indexOf(action.payload.old_id);
	      if (old_index >= 0) {
	        new_state.weekworklow_set = new_state.weekworkflow_set.slice();
	        new_state.weekworkflow_set.splice(old_index, 1, action.payload.new_id);
	      }
	      return new_state;
	    case 'outcomeworkflow/changeID':
	      var new_state = {
	        ...state
	      };
	      var old_index = state.outcomeworkflow_set.indexOf(action.payload.old_id);
	      if (old_index >= 0) {
	        new_state.outcomeworklow_set = new_state.outcomeworkflow_set.slice();
	        new_state.outcomeworkflow_set.splice(old_index, 1, action.payload.new_id);
	      }
	      return new_state;
	    case 'columnworkflow/changeID':
	      var new_state = {
	        ...state
	      };
	      var old_index = state.columnworkflow_set.indexOf(action.payload.old_id);
	      if (old_index >= 0) {
	        new_state.columnworklow_set = new_state.columnworkflow_set.slice();
	        new_state.columnworkflow_set.splice(old_index, 1, action.payload.new_id);
	      }
	      return new_state;
	    case 'columnworkflow/movedTo':
	      var new_columnworkflow_set = state.columnworkflow_set.slice();
	      for (var i = 0; i < new_columnworkflow_set.length; i++) {
	        if (new_columnworkflow_set[i] == action.payload.id) {
	          new_columnworkflow_set.splice(action.payload.new_index, 0, new_columnworkflow_set.splice(i, 1)[0]);
	          break;
	        }
	      }
	      //insertedAt(action.payload.child_id,"column",action.payload.new_parent,"workflow",action.payload.new_index,"columnworkflow");
	      return {
	        ...state,
	        columnworkflow_set: new_columnworkflow_set
	      };
	    case 'weekworkflow/movedTo':
	      var new_weekworkflow_set = state.weekworkflow_set.slice();
	      for (var i = 0; i < new_weekworkflow_set.length; i++) {
	        if (new_weekworkflow_set[i] == action.payload.id) {
	          new_weekworkflow_set.splice(action.payload.new_index, 0, new_weekworkflow_set.splice(i, 1)[0]);
	          break;
	        }
	      }
	      //insertedAt(action.payload.child_id,"week",action.payload.new_parent,"workflow",action.payload.new_index,"weekworkflow");
	      return {
	        ...state,
	        weekworkflow_set: new_weekworkflow_set
	      };
	    case 'outcomeworkflow/movedTo':
	      var new_outcomeworkflow_set = state.outcomeworkflow_set.slice();
	      for (var i = 0; i < new_outcomeworkflow_set.length; i++) {
	        if (new_outcomeworkflow_set[i] == action.payload.id) {
	          new_outcomeworkflow_set.splice(action.payload.new_index, 0, new_outcomeworkflow_set.splice(i, 1)[0]);
	          break;
	        }
	      }
	      //insertedAt(action.payload.child_id,"outcome",action.payload.new_parent,"workflow",action.payload.new_index,"outcomeworkflow");
	      return {
	        ...state,
	        outcomeworkflow_set: new_outcomeworkflow_set
	      };
	    case 'workflow/deleteSelfSoft':
	      return {
	        ...state,
	        deleted: true
	      };
	    case 'workflow/restoreSelf':
	      return {
	        ...state,
	        deleted: false
	      };
	    case 'week/deleteSelf':
	    case 'week/deleteSelfSoft':
	      if (state.weekworkflow_set.indexOf(action.payload.parent_id) >= 0) {
	        var new_state = {
	          ...state
	        };
	        new_state.weekworkflow_set = state.weekworkflow_set.slice();
	        new_state.weekworkflow_set.splice(new_state.weekworkflow_set.indexOf(action.payload.parent_id), 1);
	        return new_state;
	      }
	      return state;
	    case 'week/restoreSelf':
	      var new_state = {
	        ...state
	      };
	      new_state.weekworkflow_set = state.weekworkflow_set.slice();
	      new_state.weekworkflow_set.splice(action.payload.throughparent_index, 0, action.payload.throughparent_id);
	      return new_state;
	    case 'week/insertBelow':
	      new_state = {
	        ...state
	      };
	      var new_weekworkflow_set = state.weekworkflow_set.slice();
	      new_weekworkflow_set.splice(action.payload.new_through.rank, 0, action.payload.new_through.id);
	      new_state.weekworkflow_set = new_weekworkflow_set;
	      return new_state;
	    case 'outcome_base/deleteSelf':
	    case 'outcome_base/deleteSelfSoft':
	      if (state.outcomeworkflow_set.indexOf(action.payload.parent_id) >= 0) {
	        var new_state = {
	          ...state
	        };
	        new_state.outcomeworkflow_set = state.outcomeworkflow_set.slice();
	        new_state.outcomeworkflow_set.splice(new_state.outcomeworkflow_set.indexOf(action.payload.parent_id), 1);
	        return new_state;
	      }
	      return state;
	    case 'outcome_base/restoreSelf':
	      var new_state = {
	        ...state
	      };
	      new_state.outcomeworkflow_set = state.outcomeworkflow_set.slice();
	      new_state.outcomeworkflow_set.splice(action.payload.throughparent_index, 0, action.payload.throughparent_id);
	      return new_state;
	    case 'outcome_base/insertBelow':
	    case 'outcome/newOutcome':
	      if (state.id != action.payload.new_through.workflow) return state;
	      new_state = {
	        ...state
	      };
	      var new_outcomeworkflow_set = state.outcomeworkflow_set.slice();
	      new_outcomeworkflow_set.splice(action.payload.new_through.rank, 0, action.payload.new_through.id);
	      new_state.outcomeworkflow_set = new_outcomeworkflow_set;
	      return new_state;
	    case 'strategy/addStrategy':
	      new_state = {
	        ...state
	      };
	      var new_weekworkflow_set = state.weekworkflow_set.slice();
	      new_weekworkflow_set.splice(action.payload.index, 0, action.payload.new_through.id);
	      new_state.weekworkflow_set = new_weekworkflow_set;
	      if (action.payload.columnworkflows_added.length > 0) {
	        let new_columnworkflow_set = state.columnworkflow_set.slice();
	        new_columnworkflow_set.push(...action.payload.columnworkflows_added.map(columnworkflow => columnworkflow.id));
	        new_state.columnworkflow_set = new_columnworkflow_set;
	      }
	      return new_state;
	    case 'column/deleteSelf':
	    case 'column/deleteSelfSoft':
	      if (state.columnworkflow_set.indexOf(action.payload.parent_id) >= 0) {
	        var new_state = {
	          ...state
	        };
	        new_state.columnworkflow_set = state.columnworkflow_set.slice();
	        new_state.columnworkflow_set.splice(new_state.columnworkflow_set.indexOf(action.payload.parent_id), 1);
	        return new_state;
	      }
	      return state;
	    case 'column/restoreSelf':
	      var new_state = {
	        ...state
	      };
	      new_state.columnworkflow_set = state.columnworkflow_set.slice();
	      new_state.columnworkflow_set.splice(action.payload.throughparent_index, 0, action.payload.throughparent_id);
	      return new_state;
	    case 'node/newNode':
	      if (state.columnworkflow_set.indexOf(action.payload.columnworkflow.id) >= 0) return state;
	      new_state = {
	        ...state
	      };
	      var new_columnworkflow_set = state.columnworkflow_set.slice();
	      new_columnworkflow_set.push(action.payload.columnworkflow.id);
	      new_state.columnworkflow_set = new_columnworkflow_set;
	      return new_state;
	    case 'column/insertBelow':
	      new_state = {
	        ...state
	      };
	      var new_columnworkflow_set = state.columnworkflow_set.slice();
	      new_columnworkflow_set.splice(action.payload.new_through.rank, 0, action.payload.new_through.id);
	      new_state.columnworkflow_set = new_columnworkflow_set;
	      return new_state;
	    case 'workflow/changeField':
	      if (action.payload.changeFieldID == changeFieldID) return state;
	      var new_state = {
	        ...state,
	        ...action.payload.json
	      };
	      return new_state;
	    default:
	      return state;
	  }
	}
	function outcomeworkflowReducer(state = [], action) {
	  switch (action.type) {
	    case 'replaceStoreData':
	      if (action.payload.outcomeworkflow) return action.payload.outcomeworkflow;
	      return state;
	    case 'refreshStoreData':
	      var new_state = state.slice();
	      if (action.payload.outcomeworkflow) {
	        for (var i = 0; i < action.payload.outcomeworkflow.length; i++) {
	          let new_obj = action.payload.outcomeworkflow[i];
	          let added = false;
	          for (var j = 0; j < new_state.length; j++) {
	            if (new_state[j].id == new_obj.id) {
	              new_state.splice(j, 1, new_obj);
	              added = true;
	              break;
	            }
	          }
	          if (added) continue;
	          new_state.push(new_obj);
	        }
	      }
	      return new_state;
	    case 'outcomeworkflow/movedTo':
	      new_state = state.slice();
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          new_state[i] = {
	            ...state[i],
	            no_drag: true
	          };
	        }
	      }
	      return new_state;
	    case 'outcomeworkflow/changeID':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.old_id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            id: action.payload.new_id,
	            no_drag: false
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'outcome_base/deleteSelf':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].outcome == action.payload.id) {
	          var new_state = state.slice();
	          new_state.splice(i, 1);
	          return new_state;
	        }
	      }
	      return state;
	    case 'outcome_base/insertBelow':
	      new_state = state.slice();
	      new_state.push(action.payload.new_through);
	      return new_state;
	    case 'outcome/newOutcome':
	      new_state = state.slice();
	      new_state.push(action.payload.new_through);
	      return new_state;
	    default:
	      return state;
	  }
	}
	function columnworkflowReducer(state = [], action) {
	  switch (action.type) {
	    case 'replaceStoreData':
	      if (action.payload.columnworkflow) return action.payload.columnworkflow;
	      return state;
	    case 'refreshStoreData':
	      var new_state = state.slice();
	      if (action.payload.columnworkflow) {
	        for (var i = 0; i < action.payload.columnworkflow.length; i++) {
	          let new_obj = action.payload.columnworkflow[i];
	          let added = false;
	          for (var j = 0; j < new_state.length; j++) {
	            if (new_state[j].id == new_obj.id) {
	              new_state.splice(j, 1, new_obj);
	              added = true;
	              break;
	            }
	          }
	          if (added) continue;
	          new_state.push(new_obj);
	        }
	      }
	      return new_state;
	    case 'columnworkflow/changeID':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.old_id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            id: action.payload.new_id,
	            no_drag: false
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'columnworkflow/movedTo':
	      new_state = state.slice();
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          new_state[i] = {
	            ...state[i],
	            no_drag: true
	          };
	        }
	      }
	      return new_state;
	    case 'column/deleteSelf':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.parent_id) {
	          var new_state = state.slice();
	          new_state.splice(i, 1);
	          return new_state;
	        }
	      }
	      return state;
	    case 'node/newNode':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.columnworkflow.id) return state;
	      }
	      new_state = state.slice();
	      new_state.push(action.payload.columnworkflow);
	      return new_state;
	    case 'column/insertBelow':
	      new_state = state.slice();
	      new_state.push(action.payload.new_through);
	      return new_state;
	    case 'strategy/addStrategy':
	      if (action.payload.columnworkflows_added.length == 0) return state;
	      new_state = state.slice();
	      new_state.push(...action.payload.columnworkflows_added);
	      return new_state;
	    default:
	      return state;
	  }
	}
	function columnReducer(state = [], action) {
	  switch (action.type) {
	    case 'replaceStoreData':
	      if (action.payload.column) return action.payload.column;
	      return state;
	    case 'refreshStoreData':
	      var new_state = state.slice();
	      if (action.payload.column) {
	        for (var i = 0; i < action.payload.column.length; i++) {
	          let new_obj = action.payload.collumn[i];
	          let added = false;
	          for (var j = 0; j < new_state.length; j++) {
	            if (new_state[j].id == new_obj.id) {
	              new_state.splice(j, 1, new_obj);
	              added = true;
	              break;
	            }
	          }
	          if (added) continue;
	          new_state.push(new_obj);
	        }
	      }
	      return new_state;
	    case 'column/createLock':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            lock: action.payload.lock
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'column/deleteSelf':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state.splice(i, 1);
	          return new_state;
	        }
	      }
	      return state;
	    case 'column/deleteSelfSoft':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            deleted: true,
	            deleted_on: window.gettext('This session')
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'column/restoreSelf':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            deleted: false
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'node/newNode':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.column.id) return state;
	      }
	      new_state = state.slice();
	      new_state.push(action.payload.column);
	      return new_state;
	    case 'column/insertBelow':
	      new_state = state.slice();
	      new_state.push(action.payload.new_model);
	      return new_state;
	    case 'column/changeField':
	      if (action.payload.changeFieldID == changeFieldID) return state;
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...state[i],
	            ...action.payload.json
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'strategy/addStrategy':
	      if (action.payload.columns_added.length == 0) return state;
	      new_state = state.slice();
	      new_state.push(...action.payload.columns_added);
	      return new_state;
	    case 'column/reloadComments':
	      var new_state = state.slice();
	      for (var i = 0; i < new_state.length; i++) {
	        let obj = new_state[i];
	        if (obj.id == action.payload.id) {
	          new_state[i] = {
	            ...obj,
	            comments: action.payload.comment_data
	          };
	          return new_state;
	        }
	      }
	      return state;
	    default:
	      return state;
	  }
	}
	function weekworkflowReducer(state = [], action) {
	  switch (action.type) {
	    case 'replaceStoreData':
	      if (action.payload.weekworkflow) return action.payload.weekworkflow;
	      return state;
	    case 'refreshStoreData':
	      var new_state = state.slice();
	      if (action.payload.weekworkflow) {
	        for (var i = 0; i < action.payload.weekworkflow.length; i++) {
	          let new_obj = action.payload.weekworkflow[i];
	          let added = false;
	          for (var j = 0; j < new_state.length; j++) {
	            if (new_state[j].id == new_obj.id) {
	              new_state.splice(j, 1, new_obj);
	              added = true;
	              break;
	            }
	          }
	          if (added) continue;
	          new_state.push(new_obj);
	        }
	      }
	      return new_state;
	    case 'weekworkflow/movedTo':
	      new_state = state.slice();
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          new_state[i] = {
	            ...state[i],
	            no_drag: true
	          };
	        }
	      }
	      return new_state;
	    case 'weekworkflow/changeID':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.old_id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            id: action.payload.new_id,
	            no_drag: false
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'week/deleteSelf':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.parent_id) {
	          var new_state = state.slice();
	          new_state.splice(i, 1);
	          return new_state;
	        }
	      }
	      return state;
	    case 'week/insertBelow':
	      new_state = state.slice();
	      new_state.push(action.payload.new_through);
	      return new_state;
	    case 'strategy/addStrategy':
	      new_state = state.slice();
	      new_state.push(action.payload.new_through);
	      return new_state;
	    default:
	      return state;
	  }
	}
	function weekReducer(state = [], action) {
	  switch (action.type) {
	    case 'replaceStoreData':
	      if (action.payload.week) return action.payload.week;
	      return state;
	    case 'refreshStoreData':
	      var new_state = state.slice();
	      if (action.payload.week) {
	        for (var i = 0; i < action.payload.week.length; i++) {
	          let new_obj = action.payload.week[i];
	          let added = false;
	          for (var j = 0; j < new_state.length; j++) {
	            if (new_state[j].id == new_obj.id) {
	              new_state.splice(j, 1, new_obj);
	              added = true;
	              break;
	            }
	          }
	          if (added) continue;
	          new_state.push(new_obj);
	        }
	      }
	      return new_state;
	    case 'week/createLock':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            lock: action.payload.lock
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'nodeweek/changeID':
	      var new_state = state.slice();
	      for (var i = 0; i < state.length; i++) {
	        let old_index = state[i].nodeweek_set.indexOf(action.payload.old_id);
	        if (old_index >= 0) {
	          new_state[i] = {
	            ...new_state[i]
	          };
	          new_state[i].nodeweek_set = new_state[i].nodeweek_set.slice();
	          new_state[i].nodeweek_set.splice(old_index, 1, action.payload.new_id);
	        }
	      }
	      return new_state;
	    case 'nodeweek/movedTo':
	      let old_parent, old_parent_index, new_parent, new_parent_index;
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].nodeweek_set.indexOf(action.payload.id) >= 0) {
	          old_parent_index = i;
	          old_parent = {
	            ...state[i]
	          };
	        }
	        if (state[i].id == action.payload.new_parent) {
	          new_parent_index = i;
	          new_parent = {
	            ...state[i]
	          };
	        }
	      }
	      var new_index = action.payload.new_index;
	      var new_state = state.slice();
	      old_parent.nodeweek_set = old_parent.nodeweek_set.slice();
	      old_parent.nodeweek_set.splice(old_parent.nodeweek_set.indexOf(action.payload.id), 1);
	      if (old_parent_index == new_parent_index) {
	        old_parent.nodeweek_set.splice(new_index, 0, action.payload.id);
	      } else {
	        new_parent.nodeweek_set = new_parent.nodeweek_set.slice();
	        new_parent.nodeweek_set.splice(new_index, 0, action.payload.id);
	        new_state.splice(new_parent_index, 1, new_parent);
	      }
	      new_state.splice(old_parent_index, 1, old_parent);
	      return new_state;
	    case 'node/deleteSelf':
	    case 'node/deleteSelfSoft':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].nodeweek_set.indexOf(action.payload.parent_id) >= 0) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i]
	          };
	          new_state[i].nodeweek_set = state[i].nodeweek_set.slice();
	          new_state[i].nodeweek_set.splice(new_state[i].nodeweek_set.indexOf(action.payload.parent_id), 1);
	          return new_state;
	        }
	      }
	      return state;
	    case 'node/restoreSelf':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.parent_id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i]
	          };
	          new_state[i].nodeweek_set = state[i].nodeweek_set.slice();
	          new_state[i].nodeweek_set.splice(action.payload.throughparent_index, 0, action.payload.throughparent_id);
	          return new_state;
	        }
	      }
	      return state;
	    case 'node/insertBelow':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.parentID) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...state[i]
	          };
	          var new_nodeweek_set = state[i].nodeweek_set.slice();
	          new_nodeweek_set.splice(action.payload.new_through.rank, 0, action.payload.new_through.id);
	          new_state[i].nodeweek_set = new_nodeweek_set;
	          return new_state;
	        }
	      }
	      return state;
	    case 'node/newNode':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.parentID) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...state[i]
	          };
	          var new_nodeweek_set = state[i].nodeweek_set.slice();
	          new_nodeweek_set.splice(action.payload.index, 0, action.payload.new_through.id);
	          new_state[i].nodeweek_set = new_nodeweek_set;
	          return new_state;
	        }
	      }
	      return state;
	    case 'week/insertBelow':
	      new_state = state.slice();
	      new_state.push(action.payload.new_model);
	      return new_state;
	    case 'week/deleteSelf':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state.splice(i, 1);
	          return new_state;
	        }
	      }
	      return state;
	    case 'week/deleteSelfSoft':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            deleted: true,
	            deleted_on: window.gettext('This session')
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'week/restoreSelf':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            deleted: false
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'week/changeField':
	      if (action.payload.changeFieldID == changeFieldID) return state;
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...state[i],
	            ...action.payload.json
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'strategy/toggleStrategy':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...state[i]
	          };
	          new_state[i].is_strategy = action.payload.is_strategy;
	          return new_state;
	        }
	      }
	      return state;
	    case 'strategy/addStrategy':
	      new_state = state.slice();
	      new_state.push(action.payload.strategy);
	      return new_state;
	    case 'week/reloadComments':
	      var new_state = state.slice();
	      for (var i = 0; i < new_state.length; i++) {
	        let obj = new_state[i];
	        if (obj.id == action.payload.id) {
	          new_state[i] = {
	            ...obj,
	            comments: action.payload.comment_data
	          };
	          return new_state;
	        }
	      }
	      return state;
	    default:
	      return state;
	  }
	}
	function nodeweekReducer(state = [], action) {
	  switch (action.type) {
	    case 'replaceStoreData':
	      if (action.payload.nodeweek) return action.payload.nodeweek;
	      return state;
	    case 'refreshStoreData':
	      var new_state = state.slice();
	      if (action.payload.nodeweek) {
	        for (var i = 0; i < action.payload.nodeweek.length; i++) {
	          let new_obj = action.payload.nodeweek[i];
	          let added = false;
	          for (var j = 0; j < new_state.length; j++) {
	            if (new_state[j].id == new_obj.id) {
	              new_state.splice(j, 1, new_obj);
	              added = true;
	              break;
	            }
	          }
	          if (added) continue;
	          new_state.push(new_obj);
	        }
	      }
	      return new_state;
	    case 'nodeweek/changeID':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.old_id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            id: action.payload.new_id,
	            no_drag: false
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'node/deleteSelf':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.parent_id) {
	          var new_state = state.slice();
	          new_state.splice(i, 1);
	          return new_state;
	        }
	      }
	      return state;
	    case 'nodeweek/movedTo':
	      new_state = state.slice();
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          new_state[i] = {
	            ...state[i],
	            week: action.payload.new_parent,
	            no_drag: true
	          };
	        }
	      }
	      return new_state;
	    case 'week/insertBelow':
	      if (!action.payload.children) return state;
	      new_state = state.slice();
	      for (var i = 0; i < action.payload.children.nodeweek.length; i++) {
	        new_state.push(action.payload.children.nodeweek[i]);
	      }
	      return new_state;
	    case 'node/insertBelow':
	    case 'node/newNode':
	      new_state = state.slice();
	      new_state.push(action.payload.new_through);
	      return new_state;
	    case 'strategy/addStrategy':
	      if (action.payload.nodeweeks_added.length == 0) return state;
	      new_state = state.slice();
	      new_state.push(...action.payload.nodeweeks_added);
	      return new_state;
	    default:
	      return state;
	  }
	}
	function nodeReducer(state = [], action) {
	  switch (action.type) {
	    case 'replaceStoreData':
	      if (action.payload.node) return action.payload.node;
	      return state;
	    case 'refreshStoreData':
	      var new_state = state.slice();
	      if (action.payload.node) {
	        for (var i = 0; i < action.payload.node.length; i++) {
	          let new_obj = action.payload.node[i];
	          let added = false;
	          for (var j = 0; j < new_state.length; j++) {
	            if (new_state[j].id == new_obj.id) {
	              new_state.splice(j, 1, new_obj);
	              added = true;
	              break;
	            }
	          }
	          if (added) continue;
	          new_state.push(new_obj);
	        }
	      }
	      return new_state;
	    case 'node/createLock':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            lock: action.payload.lock
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'column/deleteSelf':
	    case 'column/deleteSelfSoft':
	      var new_state = state.slice();
	      var new_column;
	      if (action.payload.extra_data) {
	        new_column = action.payload.extra_data;
	      }
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].column == action.payload.id) {
	          new_state[i] = {
	            ...state[i],
	            column: new_column
	          };
	        }
	      }
	      triggerHandlerEach($('.week .node'), 'component-updated');
	      return new_state;
	    case 'column/restoreSelf':
	      var new_state = state.slice();
	      var new_column;
	      if (action.payload.id) {
	        new_column = action.payload.id;
	      }
	      for (var i = 0; i < state.length; i++) {
	        if (action.payload.extra_data.indexOf(state[i].id) >= 0) {
	          new_state[i] = {
	            ...state[i],
	            column: new_column
	          };
	        }
	      }
	      triggerHandlerEach($('.week .node'), 'component-updated');
	      return new_state;
	    case 'node/changedColumn':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            column: action.payload.new_column
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'node/deleteSelf':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state.splice(i, 1);
	          triggerHandlerEach($('.week .node'), 'component-updated');
	          return new_state;
	        }
	      }
	      return state;
	    case 'node/deleteSelfSoft':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            deleted: true,
	            deleted_on: window.gettext('This session')
	          };
	          triggerHandlerEach($('.week .node'), 'component-updated');
	          return new_state;
	        }
	      }
	      return state;
	    case 'node/restoreSelf':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            deleted: false
	          };
	          triggerHandlerEach($('.week .node'), 'component-updated');
	          return new_state;
	        }
	      }
	      return state;
	    case 'nodelink/deleteSelf':
	    case 'nodelink/deleteSelfSoft':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].outgoing_links.indexOf(action.payload.id) >= 0) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i]
	          };
	          new_state[i].outgoing_links = state[i].outgoing_links.slice();
	          new_state[i].outgoing_links.splice(new_state[i].outgoing_links.indexOf(action.payload.id), 1);
	          return new_state;
	        }
	      }
	      return state;
	    case 'nodelink/restoreSelf':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.parent_id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i]
	          };
	          new_state[i].outgoing_links = state[i].outgoing_links.slice();
	          new_state[i].outgoing_links.push(action.payload.id);
	          return new_state;
	        }
	      }
	      return state;
	    case 'week/insertBelow':
	      if (!action.payload.children) return state;
	      new_state = state.slice();
	      for (var i = 0; i < action.payload.children.node.length; i++) {
	        new_state.push(action.payload.children.node[i]);
	      }
	      return new_state;
	    case 'node/insertBelow':
	    case 'node/newNode':
	      new_state = state.slice();
	      new_state.push(action.payload.new_model);
	      return new_state;
	    case 'node/changeField':
	      if (action.payload.changeFieldID == changeFieldID) return state;
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...state[i],
	            ...action.payload.json
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'node/setLinkedWorkflow':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...state[i]
	          };
	          new_state[i].linked_workflow = action.payload.linked_workflow;
	          new_state[i].linked_workflow_data = action.payload.linked_workflow_data;
	          return new_state;
	        }
	      }
	      return state;
	    case 'nodelink/newNodeLink':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.new_model.source_node) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...state[i]
	          };
	          var new_outgoing_links = state[i].outgoing_links.slice();
	          new_outgoing_links.push(action.payload.new_model.id);
	          new_state[i].outgoing_links = new_outgoing_links;
	          return new_state;
	        }
	      }
	      return state;
	    case 'outcomenode/updateDegree':
	      //Returns -1 if the outcome had already been added to the node at the given degree
	      if (action.payload.outcomenode == -1) return state;
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.data_package[0].node) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i]
	          };
	          new_state[i].outcomenode_set = action.payload.new_outcomenode_set;
	          new_state[i].outcomenode_unique_set = action.payload.new_outcomenode_unique_set;
	          return new_state;
	        }
	      }
	      return state;
	    case 'strategy/addStrategy':
	      if (action.payload.nodes_added.length == 0) return state;
	      new_state = state.slice();
	      new_state.push(...action.payload.nodes_added);
	      return new_state;
	    case 'outcome/deleteSelf':
	    case 'outcome/deleteSelfSoft':
	    case 'outcome_base/deleteSelf':
	    case 'outcome_base/deleteSelfSoft':
	    case 'outcome/restoreSelf':
	    case 'outcome_base/restoreSelf':
	      new_state = state.slice();
	      for (var i = 0; i < action.payload.extra_data.length; i++) {
	        let new_node_data = action.payload.extra_data[i];
	        for (var j = 0; j < new_state.length; j++) {
	          if (new_node_data.id == new_state[j].id) {
	            new_state[j] = {
	              ...new_state[j],
	              ...new_node_data
	            };
	          }
	        }
	      }
	      return new_state;
	    case 'node/reloadComments':
	      var new_state = state.slice();
	      for (var i = 0; i < new_state.length; i++) {
	        let obj = new_state[i];
	        if (obj.id == action.payload.id) {
	          new_state[i] = {
	            ...obj,
	            comments: action.payload.comment_data
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'node/reloadAssignments':
	      var new_state = state.slice();
	      for (var i = 0; i < new_state.length; i++) {
	        let obj = new_state[i];
	        if (obj.id == action.payload.id) {
	          new_state[i] = {
	            ...obj,
	            has_assignment: action.payload.has_assignment
	          };
	          return new_state;
	        }
	      }
	    case 'outcome/insertChild':
	    case 'outcome/insertBelow':
	    case 'outcome_base/insertChild':
	    case 'outcomeoutcome/changeID':
	      if (action.payload.node_updates.length == 0) return state;
	      var new_state = state.slice();
	      for (var i = 0; i < action.payload.node_updates.length; i++) {
	        for (var j = 0; j < state.length; j++) {
	          if (action.payload.node_updates[i].id == state[j].id) {
	            new_state[j] = {
	              ...new_state[j],
	              outcomenode_set: action.payload.node_updates[i].outcomenode_set,
	              outcomenode_unique_set: action.payload.node_updates[i].outcomenode_unique_set
	            };
	          }
	        }
	      }
	      return new_state;
	    default:
	      return state;
	  }
	}
	function nodelinkReducer(state = [], action) {
	  switch (action.type) {
	    case 'replaceStoreData':
	      if (action.payload.nodelink) return action.payload.nodelink;
	      return state;
	    case 'refreshStoreData':
	      var new_state = state.slice();
	      if (action.payload.nodelink) {
	        for (var i = 0; i < action.payload.nodelink.length; i++) {
	          let new_obj = action.payload.nodelink[i];
	          let added = false;
	          for (var j = 0; j < new_state.length; j++) {
	            if (new_state[j].id == new_obj.id) {
	              new_state.splice(j, 1, new_obj);
	              added = true;
	              break;
	            }
	          }
	          if (added) continue;
	          new_state.push(new_obj);
	        }
	      }
	      return new_state;
	    case 'nodelink/createLock':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            lock: action.payload.lock
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'nodelink/changeField':
	      if (action.payload.changeFieldID == changeFieldID) return state;
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...state[i],
	            ...action.payload.json
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'node/insertBelow':
	    case 'node/newNode':
	    case 'node/deleteSelf':
	      return state;
	    case 'nodelink/newNodeLink':
	      new_state = state.slice();
	      new_state.push(action.payload.new_model);
	      return new_state;
	    case 'nodelink/deleteSelf':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state.splice(i, 1);
	          return new_state;
	        }
	      }
	      return state;
	    case 'nodelink/deleteSelfSoft':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            deleted: true,
	            deleted_on: window.gettext('This session')
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'nodelink/restoreSelf':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            deleted: false
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'week/insertBelow':
	      if (!action.payload.children) return state;
	      new_state = state.slice();
	      for (var i = 0; i < action.payload.children.nodelink.length; i++) {
	        new_state.push(action.payload.children.nodelink[i]);
	      }
	      return new_state;
	    case 'strategy/addStrategy':
	      if (action.payload.nodelinks_added.length == 0) return state;
	      new_state = state.slice();
	      new_state.push(...action.payload.nodelinks_added);
	      return new_state;
	    default:
	      return state;
	  }
	}
	function outcomeReducer(state = [], action) {
	  switch (action.type) {
	    case 'replaceStoreData':
	      if (action.payload.outcome) return action.payload.outcome;
	      return state;
	    case 'refreshStoreData':
	      var new_state = state.slice();
	      if (action.payload.outcome) {
	        for (var i = 0; i < action.payload.outcome.length; i++) {
	          let new_obj = action.payload.outcome[i];
	          let added = false;
	          for (var j = 0; j < new_state.length; j++) {
	            if (new_state[j].id == new_obj.id) {
	              new_state.splice(j, 1, new_obj);
	              added = true;
	              break;
	            }
	          }
	          if (added) continue;
	          new_state.push(new_obj);
	        }
	      }
	      return new_state;
	    case 'outcome/createLock':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            lock: action.payload.lock
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'outcomeoutcome/changeID':
	      var new_state = state.slice();
	      for (var i = 0; i < state.length; i++) {
	        let old_index = state[i].child_outcome_links.indexOf(action.payload.old_id);
	        if (old_index >= 0) {
	          new_state[i] = {
	            ...new_state[i]
	          };
	          new_state[i].child_outcome_links = new_state[i].child_outcome_links.slice();
	          new_state[i].child_outcome_links.splice(old_index, 1, action.payload.new_id);
	        }
	      }
	      return new_state;
	    case 'outcomeoutcome/movedTo':
	      let old_parent, old_parent_index, new_parent, new_parent_index;
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].child_outcome_links.indexOf(action.payload.id) >= 0) {
	          old_parent_index = i;
	          old_parent = {
	            ...state[i]
	          };
	        }
	        if (state[i].id == action.payload.new_parent) {
	          new_parent_index = i;
	          new_parent = {
	            ...state[i]
	          };
	        }
	      }
	      var new_index = action.payload.new_index;
	      var new_state = state.slice();
	      old_parent.child_outcome_links = old_parent.child_outcome_links.slice();
	      old_parent.child_outcome_links.splice(old_parent.child_outcome_links.indexOf(action.payload.id), 1);
	      if (old_parent_index == new_parent_index) {
	        old_parent.child_outcome_links.splice(new_index, 0, action.payload.id);
	      } else {
	        new_parent.child_outcome_links = new_parent.child_outcome_links.slice();
	        new_parent.child_outcome_links.splice(new_index, 0, action.payload.id);
	        new_state.splice(new_parent_index, 1, new_parent);
	      }
	      new_state.splice(old_parent_index, 1, old_parent);
	      //insertedAt(action.payload.child_id,"outcome",new_parent.id,"outcome",new_index,"outcomeoutcome");
	      return new_state;
	    case 'outcome_base/deleteSelf':
	      var new_state = state.slice();
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          new_state.splice(i, 1);
	          return new_state;
	        }
	      }
	      return state;
	    case 'outcome/deleteSelf':
	      var new_state = state.slice();
	      for (var i = 0; i < new_state.length; i++) {
	        if (new_state[i].child_outcome_links.indexOf(action.payload.parent_id) >= 0) {
	          new_state[i] = {
	            ...new_state[i]
	          };
	          new_state[i].child_outcome_links = new_state[i].child_outcome_links.slice();
	          new_state[i].child_outcome_links.splice(new_state[i].child_outcome_links.indexOf(action.payload.parent_id), 1);
	        } else if (new_state[i].id == action.payload.id) {
	          new_state.splice(i, 1);
	          i--;
	        }
	      }
	      return new_state;
	    case 'outcome/deleteSelfSoft':
	      var new_state = state.slice();
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].child_outcome_links.indexOf(action.payload.parent_id) >= 0) {
	          new_state[i] = {
	            ...new_state[i]
	          };
	          new_state[i].child_outcome_links = state[i].child_outcome_links.slice();
	          new_state[i].child_outcome_links.splice(new_state[i].child_outcome_links.indexOf(action.payload.parent_id), 1);
	        } else if (state[i].id == action.payload.id) {
	          new_state[i] = {
	            ...new_state[i],
	            deleted: true,
	            deleted_on: window.gettext('This session')
	          };
	        }
	      }
	      return new_state;
	    case 'outcome/restoreSelf':
	      var new_state = state.slice();
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.parent_id) {
	          new_state[i] = {
	            ...new_state[i]
	          };
	          new_state[i].child_outcome_links = state[i].child_outcome_links.slice();
	          new_state[i].child_outcome_links.splice(action.payload.throughparent_index, 0, action.payload.throughparent_id);
	        } else if (state[i].id == action.payload.id) {
	          new_state[i] = {
	            ...new_state[i],
	            deleted: false
	          };
	        }
	      }
	      return new_state;
	    case 'outcome_base/deleteSelfSoft':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            deleted: true,
	            deleted_on: window.gettext('This session')
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'outcome_base/restoreSelf':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            deleted: false
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'outcome_base/insertBelow':
	    case 'outcome/newOutcome':
	      var new_state = state.slice();
	      new_state.push(action.payload.new_model);
	      if (action.payload.children) {
	        for (var i = 0; i < action.payload.children.outcome.length; i++) {
	          new_state.push(action.payload.children.outcome[i]);
	        }
	      }
	      return new_state;
	    case 'outcome/insertChild':
	    case 'outcome_base/insertChild':
	    case 'outcome/insertBelow':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.parentID) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...state[i]
	          };
	          var new_child_outcome_links = state[i].child_outcome_links.slice();
	          let new_index;
	          new_index = action.payload.new_through.rank;
	          new_child_outcome_links.splice(new_index, 0, action.payload.new_through.id);
	          new_state[i].child_outcome_links = new_child_outcome_links;
	          new_state.push(action.payload.new_model);
	          if (action.payload.children) {
	            for (var i = 0; i < action.payload.children.outcome.length; i++) {
	              new_state.push(action.payload.children.outcome[i]);
	            }
	          }
	          return new_state;
	        }
	      }
	      return state;
	    case 'outcome/changeField':
	    case 'outcome_base/changeField':
	      if (action.payload.changeFieldID == changeFieldID) return state;
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...state[i],
	            ...action.payload.json
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'outcome/changeFieldMany':
	    case 'outcome_base/changeFieldMany':
	      if (action.payload.changeFieldID == changeFieldID) return state;
	      var new_state = state.slice();
	      for (var i = 0; i < state.length; i++) {
	        if (action.payload.ids.indexOf(state[i].id) >= 0) {
	          new_state[i] = {
	            ...state[i],
	            ...action.payload.json
	          };
	        }
	      }
	      return new_state;
	    case 'outcomehorizontallink/updateDegree':
	      //Returns -1 if the outcome had already been added to the node
	      if (action.payload.outcomehorizontallink == -1) return state;
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.data_package[0].outcome) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i]
	          };
	          new_state[i].outcome_horizontal_links = action.payload.new_outcome_horizontal_links;
	          new_state[i].outcome_horizontal_links_unique = action.payload.new_outcome_horizontal_links_unique;
	          return new_state;
	        }
	      }
	      return state;
	    case 'outcome/updateHorizontalLinks':
	      var new_state = state.slice();
	      for (var i = 0; i < action.payload.data.length; i++) {
	        let new_outcome_data = action.payload.data[i];
	        for (var j = 0; j < new_state.length; j++) {
	          if (new_outcome_data.id == new_state[j].id) {
	            new_state[j] = {
	              ...new_state[j],
	              ...new_outcome_data
	            };
	          }
	        }
	      }
	      return new_state;
	    case 'outcome/reloadComments':
	    case 'outcome_base/reloadComments':
	      var new_state = state.slice();
	      for (var i = 0; i < new_state.length; i++) {
	        let obj = new_state[i];
	        if (obj.id == action.payload.id) {
	          new_state[i] = {
	            ...obj,
	            comments: action.payload.comment_data
	          };
	          return new_state;
	        }
	      }
	      return state;
	    default:
	      return state;
	  }
	}
	function outcomeOutcomeReducer(state = [], action) {
	  switch (action.type) {
	    case 'replaceStoreData':
	      if (action.payload.outcomeoutcome) return action.payload.outcomeoutcome;
	      return state;
	    case 'refreshStoreData':
	      var new_state = state.slice();
	      if (action.payload.outcomeoutcome) {
	        for (var i = 0; i < action.payload.outcomeoutcome.length; i++) {
	          let new_obj = action.payload.outcomeoutcome[i];
	          let added = false;
	          for (var j = 0; j < new_state.length; j++) {
	            if (new_state[j].id == new_obj.id) {
	              new_state.splice(j, 1, new_obj);
	              added = true;
	              break;
	            }
	          }
	          if (added) continue;
	          new_state.push(new_obj);
	        }
	      }
	      return new_state;
	    case 'outcomeoutcome/changeID':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.old_id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            id: action.payload.new_id,
	            no_drag: false
	          };
	          return new_state;
	        }
	      }
	      return state;
	    case 'outcomeoutcome/movedTo':
	      new_state = state.slice();
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          new_state[i] = {
	            ...state[i],
	            parent: action.payload.new_parent,
	            no_drag: true
	          };
	        }
	      }
	      return new_state;
	    case 'outcome/deleteSelf':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.parent_id) {
	          var new_state = state.slice();
	          new_state.splice(i, 1);
	          return new_state;
	        }
	      }
	      return state;
	    case 'outcome_base/insertBelow':
	      var new_state = state.slice();
	      if (action.payload.children) {
	        for (var i = 0; i < action.payload.children.outcomeoutcome.length; i++) {
	          new_state.push(action.payload.children.outcomeoutcome[i]);
	        }
	      }
	      return new_state;
	    case 'outcome/insertChild':
	    case 'outcome/insertBelow':
	      var new_state = state.slice();
	      new_state.push(action.payload.new_through);
	      if (action.payload.children) {
	        for (var i = 0; i < action.payload.children.outcomeoutcome.length; i++) {
	          new_state.push(action.payload.children.outcomeoutcome[i]);
	        }
	      }
	      return new_state;
	    default:
	      return state;
	  }
	}
	function outcomeNodeReducer(state = [], action) {
	  switch (action.type) {
	    case 'replaceStoreData':
	      if (action.payload.outcomenode) return action.payload.outcomenode;
	      return state;
	    case 'refreshStoreData':
	      var new_state = state.slice();
	      if (action.payload.outcomenode) {
	        for (var i = 0; i < action.payload.outcomenode.length; i++) {
	          let new_obj = action.payload.outcomenode[i];
	          let added = false;
	          for (var j = 0; j < new_state.length; j++) {
	            if (new_state[j].id == new_obj.id) {
	              new_state.splice(j, 1, new_obj);
	              added = true;
	              break;
	            }
	          }
	          if (added) continue;
	          new_state.push(new_obj);
	        }
	      }
	      return new_state;
	    case 'outcomenode/updateDegree':
	      //Returns -1 if the outcome had already been added to the node
	      if (action.payload.outcomenode == -1) return state;
	      var new_state = state.slice();
	      let new_outcomenode_outcomes = action.payload.data_package.map(outcomenode => cantorPairing(outcomenode.node, outcomenode.outcome));
	      let data_package_copy = action.payload.data_package.slice();
	      for (var i = 0; i < new_state.length; i++) {
	        let new_outcomenode_index = new_outcomenode_outcomes.indexOf(cantorPairing(new_state[i].node, new_state[i].outcome));
	        if (new_outcomenode_index >= 0) {
	          new_state[i] = data_package_copy[new_outcomenode_index];
	          data_package_copy[new_outcomenode_index] = null;
	        }
	      }
	      for (var i = 0; i < data_package_copy.length; i++) {
	        if (data_package_copy[i] != null) new_state.push(data_package_copy[i]);
	      }
	      new_state = new_state.filter(outcomenode => outcomenode.degree > 0);
	      return new_state;
	    case 'outcome/deleteSelf':
	    case 'outcome_base/deleteSelf':
	      new_state = state.slice();
	      for (var i = 0; i < new_state.length; i++) {
	        if (new_state[i].outcome == action.payload.id) {
	          new_state.splice(i, 1);
	          i--;
	        }
	      }
	      return new_state;
	    case 'week/insertBelow':
	    case 'node/insertBelow':
	    case 'outcome/insertChild':
	    case 'outcome_base/insertChild':
	    case 'outcome/insertBelow':
	    case 'outcomeoutcome/changeID':
	      if (!action.payload.children) return state;
	      new_state = state.slice();
	      for (var i = 0; i < action.payload.children.outcomenode.length; i++) {
	        new_state.push(action.payload.children.outcomenode[i]);
	      }
	      return new_state;
	    default:
	      return state;
	  }
	}
	function outcomeHorizontalLinkReducer(state = [], action) {
	  switch (action.type) {
	    case 'replaceStoreData':
	      if (action.payload.outcomehorizontallink) return action.payload.outcomehorizontallink;
	      return state;
	    case 'refreshStoreData':
	      var new_state = state.slice();
	      if (action.payload.outcomehorizontallink) {
	        for (var i = 0; i < action.payload.outcomehorizontallink.length; i++) {
	          let new_obj = action.payload.outcomehorizontallink[i];
	          let added = false;
	          for (var j = 0; j < new_state.length; j++) {
	            if (new_state[j].id == new_obj.id) {
	              new_state.splice(j, 1, new_obj);
	              added = true;
	              break;
	            }
	          }
	          if (added) continue;
	          new_state.push(new_obj);
	        }
	      }
	      return new_state;
	    case 'outcomehorizontallink/updateDegree':
	      //Returns -1 if the outcome had already been added to the node
	      if (action.payload.outcomehorizontallink == -1) return state;
	      var new_state = state.slice();
	      let new_outcomehorizontallink_outcomes = action.payload.data_package.map(outcomehorizontallink => cantorPairing(outcomehorizontallink.outcome, outcomehorizontallink.parent_outcome));
	      let data_package_copy = action.payload.data_package.slice();
	      for (var i = 0; i < new_state.length; i++) {
	        let new_outcomehorizontallink_index = new_outcomehorizontallink_outcomes.indexOf(cantorPairing(new_state[i].outcome, new_state[i].parent_outcome));
	        if (new_outcomehorizontallink_index >= 0) {
	          new_state[i] = data_package_copy[new_outcomehorizontallink_index];
	          data_package_copy[new_outcomehorizontallink_index] = null;
	        }
	      }
	      for (var i = 0; i < data_package_copy.length; i++) {
	        if (data_package_copy[i] != null) new_state.push(data_package_copy[i]);
	      }
	      new_state = new_state.filter(outcomehorizontallink => outcomehorizontallink.degree > 0);
	      return new_state;
	    default:
	      return state;
	  }
	}
	function parentNodeReducer(state = [], action) {
	  switch (action.type) {
	    case 'replaceStoreData':
	      if (action.payload.parent_node) return action.payload.parent_node;
	      return state;
	    case 'refreshStoreData':
	      var new_state = state.slice();
	      if (action.payload.parent_node) {
	        for (var i = 0; i < action.payload.parent_node.length; i++) {
	          let new_obj = action.payload.parent_node[i];
	          let added = false;
	          for (var j = 0; j < new_state.length; j++) {
	            if (new_state[j].id == new_obj.id) {
	              new_state.splice(j, 1, new_obj);
	              added = true;
	              break;
	            }
	          }
	          if (added) continue;
	          new_state.push(new_obj);
	        }
	      }
	      return new_state;
	    case 'outcomenode/updateDegree':
	      //Returns -1 if the outcome had already been added to the node at the given degree
	      if (action.payload.outcomenode == -1) return state;
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.data_package[0].node) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i]
	          };
	          new_state[i].outcomenode_set = action.payload.new_outcomenode_set;
	          new_state[i].outcomenode_unique_set = action.payload.new_outcomenode_unique_set;
	          return new_state;
	        }
	      }
	      return state;
	    case 'outcome/deleteSelf':
	    case 'outcome/deleteSelfSoft':
	    case 'outcome_base/deleteSelf':
	    case 'outcome_base/deleteSelfSoft':
	    case 'outcome/restoreSelf':
	    case 'outcome_base/restoreSelf':
	      new_state = state.slice();
	      for (var i = 0; i < action.payload.extra_data.length; i++) {
	        let new_node_data = action.payload.extra_data[i];
	        for (var j = 0; j < new_state.length; j++) {
	          if (new_node_data.id == new_state[j].id) {
	            new_state[j] = {
	              ...new_state[j],
	              ...new_node_data
	            };
	          }
	        }
	      }
	      return new_state;
	    default:
	      return state;
	  }
	}
	function parentWorkflowReducer(state = [], action) {
	  switch (action.type) {
	    case 'replaceStoreData':
	      if (action.payload.parent_workflow) return action.payload.parent_workflow;
	      return state;
	    case 'refreshStoreData':
	      var new_state = state.slice();
	      if (action.payload.parent_workflow) {
	        for (var i = 0; i < action.payload.parent_workflow.length; i++) {
	          let new_obj = action.payload.parent_workflow[i];
	          let added = false;
	          for (var j = 0; j < new_state.length; j++) {
	            if (new_state[j].id == new_obj.id) {
	              new_state.splice(j, 1, new_obj);
	              added = true;
	              break;
	            }
	          }
	          if (added) continue;
	          new_state.push(new_obj);
	        }
	      }
	      return new_state;
	    default:
	      return state;
	  }
	}
	function childWorkflowReducer(state = [], action) {
	  switch (action.type) {
	    case 'replaceStoreData':
	      if (action.payload.child_workflow) return action.payload.child_workflow;
	      return state;
	    case 'refreshStoreData':
	      var new_state = state.slice();
	      if (action.payload.child_workflow) {
	        for (var i = 0; i < action.payload.child_workflow.length; i++) {
	          let new_obj = action.payload.child_workflow[i];
	          let added = false;
	          for (var j = 0; j < new_state.length; j++) {
	            if (new_state[j].id == new_obj.id) {
	              new_state.splice(j, 1, new_obj);
	              added = true;
	              break;
	            }
	          }
	          if (added) continue;
	          new_state.push(new_obj);
	        }
	      }
	      return new_state;
	    case 'outcome_base/deleteSelf':
	    case 'outcome_base/deleteSelfSoft':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].outcomeworkflow_set.indexOf(action.payload.parent_id) >= 0) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...state[i]
	          };
	          new_state[i].outcomeworkflow_set = state[i].outcomeworkflow_set.slice();
	          new_state[i].outcomeworkflow_set.splice(new_state[i].outcomeworkflow_set.indexOf(action.payload.parent_id), 1);
	          return new_state;
	        }
	      }
	      return state;
	    case 'outcome_base/restoreSelf':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.parent_id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...state[i]
	          };
	          new_state[i].outcomeworkflow_set = state[i].outcomeworkflow_set.slice();
	          new_state[i].outcomeworkflow_set.splice(action.payload.throughparent_index, 0, action.payload.throughparent_id);
	          return new_state;
	        }
	      }
	      return state;
	    case 'outcome_base/insertBelow':
	    case 'outcome/newOutcome':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.new_through.workflow) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...state[i]
	          };
	          var new_outcomeworkflow_set = state[i].outcomeworkflow_set.slice();
	          new_outcomeworkflow_set.splice(action.payload.new_through.rank, 0, action.payload.new_through.id);
	          new_state[i].outcomeworkflow_set = new_outcomeworkflow_set;
	          return new_state;
	        }
	      }
	      return state;
	    default:
	      return state;
	  }
	}
	function strategyReducer(state = [], action) {
	  switch (action.type) {
	    case 'strategy/toggleStrategy':
	      if (!action.payload.is_strategy) return state;
	      let new_state = state.slice();
	      new_state.push(action.payload.strategy);
	      return new_state;
	    default:
	      return state;
	  }
	}
	function saltiseStrategyReducer(state = [], action) {
	  switch (action.type) {
	    default:
	      return state;
	  }
	}
	function objectSetReducer(state = [], action) {
	  switch (action.type) {
	    case 'objectset/toggleObjectSet':
	      for (var i = 0; i < state.length; i++) {
	        if (state[i].id == action.payload.id) {
	          var new_state = state.slice();
	          new_state[i] = {
	            ...new_state[i],
	            hidden: action.payload.hidden
	          };
	          return new_state;
	        }
	      }
	      return state;
	    default:
	      return state;
	  }
	}
	function gridMenuReducer(state = {}, action) {
	  switch (action.type) {
	    case 'gridmenu/itemAdded':
	      var new_state = {
	        ...state
	      };
	      if (action.payload.type != 'project') {
	        new_state.owned_strategies = {
	          ...new_state.owned_strategies
	        };
	        new_state.owned_strategies.sections = new_state.owned_strategies.sections.slice();
	        for (var i = 0; i < new_state.owned_projects.sections.length; i++) {
	          if (new_state.owned_strategies.sections[i].object_type == action.payload.type) {
	            new_state.owned_strategies.sections[i].objects = new_state.owned_strategies.sections[i].objects.slice();
	            new_state.owned_strategies.sections[i].objects.push(action.payload.new_item);
	          }
	        }
	      } else {
	        new_state.owned_projects = {
	          ...new_state.owned_projects
	        };
	        new_state.owned_projects.sections = new_state.owned_projects.sections.slice();
	        for (var i = 0; i < new_state.owned_projects.sections.length; i++) {
	          if (new_state.owned_projects.sections[i].object_type == action.payload.type) {
	            new_state.owned_projects.sections[i].objects = new_state.owned_projects.sections[i].objects.slice();
	            new_state.owned_projects.sections[i].objects.push(action.payload.new_item);
	          }
	        }
	      }
	      return new_state;
	    default:
	      return state;
	  }
	}
	const rootWorkflowReducer = combineReducers({
	  workflow: workflowReducer,
	  outcomeworkflow: outcomeworkflowReducer,
	  columnworkflow: columnworkflowReducer,
	  column: columnReducer,
	  weekworkflow: weekworkflowReducer,
	  week: weekReducer,
	  nodeweek: nodeweekReducer,
	  node: nodeReducer,
	  nodelink: nodelinkReducer,
	  outcome: outcomeReducer,
	  outcomeoutcome: outcomeOutcomeReducer,
	  outcomenode: outcomeNodeReducer,
	  parent_workflow: parentWorkflowReducer,
	  parent_node: parentNodeReducer,
	  outcomehorizontallink: outcomeHorizontalLinkReducer,
	  child_workflow: childWorkflowReducer,
	  strategy: strategyReducer,
	  saltise_strategy: saltiseStrategyReducer,
	  objectset: objectSetReducer
	});
	combineReducers({
	  outcome: outcomeReducer,
	  outcomeoutcome: outcomeOutcomeReducer
	});

	/*
	All functions for API calls.
	// @todo rename this file to 'XMLHttp' or 'ajax' etc (not just doing POST requests)
	// @todo intermixed calls to DOM via jQuery
	*/

	//get the workflow's context data
	function getWorkflowContext(workflowPk, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.get_workflow_context, {
	      workflowPk: JSON.stringify(workflowPk)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Set the linked workflow for the node
	function setLinkedWorkflow(node_id, workflow_id, callBackFunction = () => console.log('success')) {
	  $.post(window.config.post_paths.set_linked_workflow, {
	    nodePk: node_id,
	    workflowPk: workflow_id
	  }).done(function (data) {
	    if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	  });
	}

	//Update the value of an object in database. JSON may be partial. Debounced in case the user is typing a lot.
	function updateValue(objectID, objectType, json, changeField = false, callBackFunction = () => console.log('success')) {
	  var t = 1000;
	  let previousCall = document.lastUpdateCall;
	  document.lastUpdateCall = {
	    time: Date.now(),
	    id: objectID,
	    type: objectType,
	    field: Object.keys(json)[0]
	  };
	  if (previousCall && document.lastUpdateCall.time - previousCall.time <= t) {
	    clearTimeout(document.lastUpdateCallTimer);
	  }
	  if (previousCall && (previousCall.id !== document.lastUpdateCall.id || previousCall.type !== document.lastUpdateCall.type || previousCall.field !== document.lastUpdateCall.field)) {
	    document.lastUpdateCallFunction();
	  }
	  let post_object = {
	    objectID: JSON.stringify(objectID),
	    objectType: JSON.stringify(objectType),
	    data: JSON.stringify(json)
	  };
	  if (changeField) post_object.changeFieldID = changeFieldID;else post_object.changeFieldID = 0;
	  document.lastUpdateCallFunction = () => {
	    try {
	      $.post(window.config.post_paths.update_value, post_object).done(function (data) {
	        if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	      });
	    } catch (err) {
	      window.fail_function();
	    }
	  };
	  document.lastUpdateCallTimer = setTimeout(document.lastUpdateCallFunction, t);
	}

	//As above, but not debounced
	function updateValueInstant(objectID, objectType, json, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.update_value, {
	      objectID: JSON.stringify(objectID),
	      objectType: JSON.stringify(objectType),
	      data: JSON.stringify(json)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Toggles whether or not an object is dropped. No longer sent to database.
	function toggleDrop$1(objectID, objectType, is_dropped, dispatch, depth = 1) {
	  try {
	    let default_drop = get_default_drop_state(objectID, objectType, depth);
	    if (is_dropped !== default_drop) window.localStorage.setItem(objectType + objectID, is_dropped);else window.localStorage.removeItem(objectType + objectID);
	  } catch (err) {
	    if (err.name === 'QuotaExceededError' || err.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
	      window.localStorage.clear();
	    }
	  }
	  dispatch(changeField(objectID, objectType, {
	    is_dropped: is_dropped
	  }));
	}

	//Add a new node to a week
	function newNode(weekPk, position = -1, column = -1, column_type = -1, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.new_node, {
	      weekPk: JSON.stringify(weekPk),
	      position: JSON.stringify(position),
	      columnPk: JSON.stringify(column),
	      columnType: JSON.stringify(column_type)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Add a new outcome to a workflow
	function newOutcome(workflowPk, object_set_id, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.new_outcome, {
	      workflowPk: JSON.stringify(workflowPk),
	      objectsetPk: JSON.stringify(object_set_id)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Create a nodelink from the source to the target, at the given ports
	function newNodeLink(source_node, target_node, source_port, target_port, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.new_node_link, {
	      nodePk: JSON.stringify(source_node),
	      objectID: JSON.stringify(target_node),
	      objectType: JSON.stringify('node'),
	      sourcePort: JSON.stringify(source_port),
	      targetPort: JSON.stringify(target_port)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Add a strategy to the workflow
	function addStrategy(workflowPk, position = -1, strategyPk = -1, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.add_strategy, {
	      workflowPk: JSON.stringify(workflowPk),
	      position: JSON.stringify(position),
	      objectID: JSON.stringify(strategyPk),
	      objectType: JSON.stringify('workflow')
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}
	//Turn a week into a strategy or vice versa
	function toggleStrategy(weekPk, is_strategy, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.toggle_strategy, {
	      weekPk: JSON.stringify(weekPk),
	      is_strategy: JSON.stringify(is_strategy)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Causes the specified object to delete itself
	function deleteSelf(objectID, objectType, soft = false, callBackFunction = () => console.log('success')) {
	  let path;
	  if (soft) path = window.config.post_paths.delete_self_soft;else path = window.config.post_paths.delete_self;
	  try {
	    $.post(path, {
	      objectID: JSON.stringify(objectID),
	      objectType: JSON.stringify(objectType)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Causes the specified object to delete itself
	function deleteSelfLive(objectID, objectType, callBackFunction = () => console.log('success')) {
	  let path = window.config.post_paths.delete_self_live;
	  try {
	    $.post(path, {
	      objectID: JSON.stringify(objectID),
	      objectType: JSON.stringify(objectType)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Causes the specified object to undelete itself
	function restoreSelf(objectID, objectType, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.restore_self, {
	      objectID: JSON.stringify(objectID),
	      objectType: JSON.stringify(objectType)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Removes the specified comment from the object
	function removeComment(objectID, objectType, commentPk, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.remove_comment, {
	      objectID: JSON.stringify(objectID),
	      commentPk: JSON.stringify(commentPk),
	      objectType: JSON.stringify(objectType)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Removes all comments from the object
	function removeAllComments(objectID, objectType, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.remove_all_comments, {
	      objectID: JSON.stringify(objectID),
	      objectType: JSON.stringify(objectType)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Causes the specified throughmodel to update its degree
	function updateOutcomenodeDegree(nodeID, outcomeID, value, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.update_outcomenode_degree, {
	      nodePk: JSON.stringify(nodeID),
	      outcomePk: JSON.stringify(outcomeID),
	      degree: JSON.stringify(value)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Causes the specified object to insert a sibling after itself
	function duplicateSelf(objectID, objectType, parentID, parentType, throughType, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.duplicate_self, {
	      parentID: JSON.stringify(parentID),
	      parentType: JSON.stringify(parentType),
	      objectID: JSON.stringify(objectID),
	      objectType: JSON.stringify(objectType),
	      throughType: JSON.stringify(throughType)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}
	//Causes the specified object to insert a sibling after itself
	function insertSibling(objectID, objectType, parentID, parentType, throughType, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.insert_sibling, {
	      parentID: JSON.stringify(parentID),
	      parentType: JSON.stringify(parentType),
	      objectID: JSON.stringify(objectID),
	      objectType: JSON.stringify(objectType),
	      throughType: JSON.stringify(throughType)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Causes the specified object to insert a child to itself
	function insertChild(objectID, objectType, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.insert_child, {
	      objectID: JSON.stringify(objectID),
	      objectType: JSON.stringify(objectType)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Called when a node should have its column changed
	function columnChanged(renderer, objectID, columnID) {
	  if (!renderer.dragAction) renderer.dragAction = {};
	  if (!renderer.dragAction['nodeweek']) renderer.dragAction['nodeweek'] = {};
	  renderer.dragAction['nodeweek'] = {
	    ...renderer.dragAction['nodeweek'],
	    objectID: JSON.stringify(objectID),
	    objectType: JSON.stringify('node'),
	    columnPk: JSON.stringify(columnID),
	    columnChange: JSON.stringify(true)
	  };
	  $(document).off('nodeweek-dropped');
	  $(document).on('nodeweek-dropped', () => {
	    dragAction(renderer, renderer.dragAction['nodeweek']);
	    renderer.dragAction['nodeweek'] = null;
	    $(document).off('nodeweek-dropped');
	  });
	}

	//Called when an object in a list is reordered
	function insertedAt(renderer, objectID, objectType, parentID, parentType, newPosition, throughType) {
	  if (!renderer.dragAction) renderer.dragAction = {};
	  if (!renderer.dragAction[throughType]) renderer.dragAction[throughType] = {};
	  renderer.dragAction[throughType] = {
	    ...renderer.dragAction[throughType],
	    objectID: JSON.stringify(objectID),
	    objectType: JSON.stringify(objectType),
	    parentID: JSON.stringify(parentID),
	    parentType: JSON.stringify(parentType),
	    newPosition: JSON.stringify(newPosition),
	    throughType: JSON.stringify(throughType),
	    inserted: JSON.stringify(true)
	  };
	  $(document).off(throughType + '-dropped');
	  if (objectID) $(document).on(throughType + '-dropped', () => {
	    dragAction(renderer, renderer.dragAction[throughType]);
	    renderer.dragAction[throughType] = null;
	    $(document).off(throughType + '-dropped');
	  });
	}

	//When the drag is complete, this is called to actually update the back-end
	function dragAction(renderer, action_data, callBackFunction = () => console.log('success')) {
	  try {
	    renderer.tiny_loader.startLoad();
	    $('.ui-draggable').draggable('disable');
	    $.post(window.config.post_paths.inserted_at, action_data).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	      $('.ui-draggable').draggable('enable');
	      renderer.tiny_loader.endLoad();
	    });
	  } catch (err) {
	    window.fail_function('The item failed to be inserted.');
	    console.log(err);
	  }
	}

	//Called when an object in a list is reordered
	function insertedAtInstant(renderer, objectID, objectType, parentID, parentType, newPosition, throughType, callBackFunction = () => console.log('success')) {
	  try {
	    renderer.tiny_loader.startLoad();
	    $('.ui-draggable').draggable('disable');
	    $.post(window.config.post_paths.inserted_at, {
	      objectID: JSON.stringify(objectID),
	      objectType: JSON.stringify(objectType),
	      parentID: JSON.stringify(parentID),
	      parentType: JSON.stringify(parentType),
	      newPosition: JSON.stringify(newPosition),
	      throughType: JSON.stringify(throughType),
	      inserted: JSON.stringify(true),
	      allowDifferent: JSON.stringify(true)
	    }).done(function (data) {
	      if (data.action === 'posted') callBackFunction(data);else window.fail_function(data.action);
	      $('.ui-draggable').draggable('enable');
	      renderer.tiny_loader.endLoad();
	    });
	  } catch (err) {
	    window.fail_function('The item failed to be inserted.');
	    console.log(err);
	  }
	}
	//Add an outcome from the parent workflow to an outcome from the current one
	function updateOutcomehorizontallinkDegree(outcomePk, outcome2Pk, degree, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.update_outcomehorizontallink_degree, {
	      outcomePk: JSON.stringify(outcomePk),
	      objectID: JSON.stringify(outcome2Pk),
	      objectType: JSON.stringify('outcome'),
	      degree: JSON.stringify(degree)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Add an outcome to a node
	function toggleFavourite(objectID, objectType, favourite, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.toggle_favourite, {
	      objectID: JSON.stringify(objectID),
	      objectType: JSON.stringify(objectType),
	      favourite: JSON.stringify(favourite)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Duplicate a project workflow, strategy, or outcome
	function duplicateBaseItem(itemPk, objectType, projectID, callBackFunction = () => console.log('success')) {
	  try {
	    if (objectType === OBJECT_TYPE.PROJECT) {
	      $.post(window.config.post_paths.duplicate_project_ajax, {
	        projectPk: JSON.stringify(itemPk)
	      }).done(function (data) {
	        if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	      });
	    } else if (objectType === OBJECT_TYPE.OUTCOME) {
	      $.post(window.config.post_paths.duplicate_outcome_ajax, {
	        outcomePk: JSON.stringify(itemPk),
	        projectPk: JSON.stringify(projectID)
	      }).done(function (data) {
	        if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	      });
	    } else if (!projectID && projectID !== 0) {
	      $.post(window.config.post_paths.duplicate_strategy_ajax, {
	        workflowPk: JSON.stringify(itemPk)
	      }).done(function (data) {
	        if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	      });
	    } else {
	      $.post(window.config.post_paths.duplicate_workflow_ajax, {
	        workflowPk: JSON.stringify(itemPk),
	        projectPk: JSON.stringify(projectID)
	      }).done(function (data) {
	        if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	      });
	    }
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Get the data from the workflow
	function getWorkflowData(workflowPk, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.get_workflow_data, {
	      workflowPk: JSON.stringify(workflowPk)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Get the data from all parent workflows
	function getWorkflowParentData(workflowPk, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.get_workflow_parent_data, {
	      workflowPk: JSON.stringify(workflowPk)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Get the data from all child workflows
	function getWorkflowChildData(nodePk, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.get_workflow_child_data, {
	      nodePk: JSON.stringify(nodePk)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Get the public data from the workflow
	function getPublicWorkflowData(workflowPk, callBackFunction = () => console.log('success')) {
	  try {
	    $.get(window.config.get_paths.get_public_workflow_data.replace('0', workflowPk)).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Get the public data from all parent workflows
	function getPublicWorkflowParentData(workflowPk, callBackFunction = () => console.log('success')) {
	  try {
	    $.get(window.config.get_paths.get_public_workflow_parent_data.replace('0', workflowPk)).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Get the public data from all child workflows
	function getPublicWorkflowChildData(nodePk, callBackFunction = () => console.log('success')) {
	  try {
	    $.get(window.config.get_paths.get_public_workflow_child_data.replace('0', nodePk)).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//set the permission for a user
	function setUserPermission(user_id, objectID, objectType, permission_type, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.set_permission, {
	      objectID: JSON.stringify(objectID),
	      objectType: JSON.stringify(objectType),
	      permission_user: JSON.stringify(user_id),
	      permission_type: JSON.stringify(permission_type)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.error);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//set the permission for a user
	function setLiveProjectRole(user_id, liveprojectPk, permission_type, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.set_liveproject_role, {
	      liveprojectPk: JSON.stringify(liveprojectPk),
	      permission_user: JSON.stringify(user_id),
	      role_type: JSON.stringify(permission_type)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.error);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Get the list of users for a project
	function getUsersForObject(objectID, objectType, callBackFunction = () => console.log('success')) {
	  if (['program', 'course', 'activity'].indexOf(objectType) >= 0) objectType = 'workflow';
	  try {
	    $.post(window.config.post_paths.get_users_for_object, {
	      objectID: JSON.stringify(objectID),
	      objectType: JSON.stringify(objectType)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}
	//Get the list of users for a liveproject
	function getUsersForLiveProject(liveprojectPk, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.get_users_for_liveproject, {
	      liveprojectPk: JSON.stringify(liveprojectPk)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Get a list of users, filtered by name
	function getUserList(filter, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.get_user_list, {
	      filter: JSON.stringify(filter)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Get the comments for a particular object
	function getCommentsForObject(objectID, objectType, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.get_comments_for_object, {
	      objectID: JSON.stringify(objectID),
	      objectType: JSON.stringify(objectType)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//add a comment to an object
	function addComment(objectID, objectType, text, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.add_comment, {
	      objectID: JSON.stringify(objectID),
	      objectType: JSON.stringify(objectType),
	      text: JSON.stringify(text)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//add a comment to an object
	function addTerminology(projectPk, term, title, translation_plural, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.add_terminology, {
	      projectPk: JSON.stringify(projectPk),
	      term: JSON.stringify(term),
	      title: JSON.stringify(title),
	      translation_plural: JSON.stringify(translation_plural)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//add a comment to an object
	function updateObjectSet(objectID, objectType, objectsetPk, add, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.update_object_set, {
	      objectID: JSON.stringify(objectID),
	      objectType: JSON.stringify(objectType),
	      objectsetPk: JSON.stringify(objectsetPk),
	      add: JSON.stringify(add)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Get the public data from the workflow
	function getPublicParentWorkflowInfo(workflowPk, callBackFunction = () => console.log('success')) {
	  try {
	    $.get(window.config.get_paths.get_public_parent_workflow_info.replace('0', workflowPk)).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//create live project
	function makeProjectLive(projectPk, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.make_project_live, {
	      projectPk: JSON.stringify(projectPk)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//set visibility of workflow
	function setWorkflowVisibility(liveprojectPk, workflowPk, visible, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.set_workflow_visibility, {
	      liveprojectPk: JSON.stringify(liveprojectPk),
	      workflowPk: JSON.stringify(workflowPk),
	      visible: JSON.stringify(visible)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//get live project data
	function getLiveProjectData(projectPk, data_type, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.get_live_project_data, {
	      liveprojectPk: JSON.stringify(projectPk),
	      data_type: JSON.stringify(data_type)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//get live project data
	function getLiveProjectDataStudent(projectPk, data_type, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.get_live_project_data_student, {
	      liveprojectPk: JSON.stringify(projectPk),
	      data_type: JSON.stringify(data_type)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//get assignment data
	function getAssignmentData(liveassignmentPk, data_type, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.get_assignment_data, {
	      liveassignmentPk: JSON.stringify(liveassignmentPk),
	      data_type: JSON.stringify(data_type)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//get nodes for the workflow
	function getWorkflowNodes(workflowPk, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.get_workflow_nodes, {
	      workflowPk: JSON.stringify(workflowPk)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//add or remove users to/from assignment
	function addUsersToAssignment(liveassignmentPk, user_list, add, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.add_users_to_assignment, {
	      liveassignmentPk: JSON.stringify(liveassignmentPk),
	      user_list: JSON.stringify(user_list),
	      add: JSON.stringify(add)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}
	function updateLiveProjectValue(objectID, objectType, json, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.update_liveproject_value, {
	      objectID: JSON.stringify(objectID),
	      objectType: JSON.stringify(objectType),
	      data: JSON.stringify(json)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}
	function setAssignmentCompletion(userassignmentPk, completed, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.set_assignment_completion, {
	      userassignmentPk: JSON.stringify(userassignmentPk),
	      completed: JSON.stringify(completed)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}
	function getAssignmentsForNode(nodePk, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.get_assignments_for_node, {
	      nodePk: JSON.stringify(nodePk)
	    }).done(function (data) {
	      if (data.action === DATA_ACTIONS.POSTED) callBackFunction(data);else window.fail_function(data.action);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Get the library projects
	function getLibrary(callBackFunction = () => console.log('success')) {
	  try {
	    $.get(window.config.get_paths.get_library).done(function (data) {
	      callBackFunction(data);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Get the library projects
	function getFavourites(callBackFunction = () => console.log('success')) {
	  try {
	    $.get(window.config.get_paths.get_favourites).done(function (data) {
	      callBackFunction(data);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Get the home projects
	function getHome(callBackFunction = () => console.log('success')) {
	  try {
	    $.get(window.config.get_paths.get_home).done(function (data) {
	      callBackFunction(data);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Get the workflows for a project
	function getWorkflowsForProject(projectPk, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.get_workflows_for_project, {
	      projectPk: projectPk
	    }).done(function (data) {
	      callBackFunction(data);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Search entire library
	function searchAllObjects(filter, data, callBackFunction = () => console.log('success')) {
	  try {
	    $.post(window.config.post_paths.search_all_objects, {
	      filter: JSON.stringify(filter),
	      additional_data: JSON.stringify(data)
	    }).done(function (data) {
	      callBackFunction(data);
	    });
	  } catch (err) {
	    window.fail_function();
	  }
	}

	//Text that can be passed a default value. HTML is dangerously set.
	class TitleText extends reactExports.Component {
	  render() {
	    var text = this.props.text;
	    if ((this.props.text == null || this.props.text == '') && this.props.defaultText != null) {
	      text = this.props.defaultText;
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "title-text",
	      title: text,
	      dangerouslySetInnerHTML: {
	        __html: text
	      }
	    });
	  }
	}

	//Title text for a workflow
	class WorkflowTitle extends reactExports.Component {
	  render() {
	    let data = this.props.data;
	    let text = data.title;
	    if (data.code) text = data.code + ' - ' + text;
	    if (text == null || text == '') {
	      text = window.gettext('Untitled');
	    }
	    if (data.url == 'noaccess' || data.url == 'nouser') {
	      text += window.gettext(' (no access)');
	    }
	    if (data.deleted) {
	      text += ' (deleted)';
	    }
	    let href = data.url;
	    if (!data.url) href = window.config.update_path[data.type].replace('0', data.id);
	    if (this.props.no_hyperlink || data.url == 'noaccess' || data.url == 'nouser') {
	      return /*#__PURE__*/reactExports.createElement("div", {
	        className: this.props.class_name,
	        "data-test-id": this.props.test_id,
	        title: text,
	        dangerouslySetInnerHTML: {
	          __html: text
	        }
	      });
	    } else {
	      return /*#__PURE__*/reactExports.createElement("a", {
	        onClick: evt => evt.stopPropagation(),
	        href: href,
	        className: this.props.class_name,
	        "data-test-id": this.props.test_id,
	        title: text,
	        dangerouslySetInnerHTML: {
	          __html: text
	        }
	      });
	    }
	  }
	}

	//Title text for a week
	class WeekTitle extends reactExports.Component {
	  render() {
	    let data = this.props.data;
	    let default_text = data.week_type_display + ' ' + (this.props.rank + 1);
	    return /*#__PURE__*/reactExports.createElement(TitleText, {
	      text: data.title,
	      defaultText: default_text
	    });
	  }
	}

	//Title text for a node
	class NodeTitle extends reactExports.Component {
	  render() {
	    let data = this.props.data;
	    let text;
	    if (data.represents_workflow && data.linked_workflow_data) {
	      text = data.linked_workflow_data.title;
	      if (data.linked_workflow_data.code) text = data.linked_workflow_data.code + ' - ' + text;
	    } else text = data.title;
	    if (text == null || text == '') {
	      text = window.gettext('Untitled');
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-title",
	      title: text,
	      dangerouslySetInnerHTML: {
	        __html: text
	      }
	    });
	  }
	}

	//Title text for an assignment
	class AssignmentTitle extends reactExports.Component {
	  render() {
	    let data = this.props.data;
	    let text;
	    if (data.task.represents_workflow && data.task.linked_workflow_data) {
	      text = data.task.linked_workflow_data.title;
	      if (data.task.linked_workflow_data.code) text = data.task.linked_workflow_data.code + ' - ' + text;
	    } else text = data.task.title;
	    if (text == null || text == '') {
	      text = window.gettext('Untitled');
	    }
	    if (this.props.user_role == role_keys.teacher) {
	      return /*#__PURE__*/reactExports.createElement("a", {
	        href: window.config.update_path.liveassignment.replace('0', data.id),
	        className: "workflow-title hover-shade",
	        title: text,
	        dangerouslySetInnerHTML: {
	          __html: text
	        }
	      });
	    } else {
	      return /*#__PURE__*/reactExports.createElement("span", {
	        className: "workflow-title",
	        title: text,
	        dangerouslySetInnerHTML: {
	          __html: text
	        }
	      });
	    }
	  }
	}

	//Title for an outcome
	class OutcomeTitle extends reactExports.Component {
	  render() {
	    let data = this.props.data;
	    let text = data.title;
	    if (data.title == null || data.title == '') {
	      text = window.gettext('Untitled');
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      title: this.props.hovertext,
	      className: "title-text"
	    }, /*#__PURE__*/reactExports.createElement("span", null, this.props.prefix + ' - '), /*#__PURE__*/reactExports.createElement("span", {
	      dangerouslySetInnerHTML: {
	        __html: text
	      }
	    }));
	  }
	}

	//Returns the outcome title as a string
	function getOutcomeTitle(data, prefix) {
	  let text = data.title;
	  if (data.title == null || data.title == '') {
	    text = window.gettext('Untitled');
	  }
	  return prefix + ' - ' + text;
	}

	// Only used in classroom view. Should be removed/replaced.
	class SimpleWorkflow extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.maindiv = reactExports.createRef();
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  clickAction() {
	    if (this.props.selectAction) {
	      this.props.selectAction(this.props.workflow_data.id);
	    } else {
	      window.location.href = window.config.update_path[this.props.workflow_data.type].replace('0', this.props.workflow_data.id);
	    }
	  }
	  getTypeIndicator() {
	    let data = this.props.workflow_data;
	    let type = data.type;
	    let type_text = window.gettext(type);
	    if (type == 'liveproject') type_text = window.gettext('classroom');
	    if (data.is_strategy) type_text += window.gettext(' strategy');
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: 'workflow-type-indicator ' + type
	    }, type_text);
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    var data = this.props.workflow_data;
	    var css_class = 'simple-workflow workflow-for-menu hover-shade ' + data.type;
	    return /*#__PURE__*/reactExports.createElement("div", {
	      ref: this.maindiv,
	      className: css_class,
	      onClick: this.clickAction.bind(this),
	      onMouseDown: evt => {
	        evt.preventDefault();
	      }
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-top-row"
	    }, /*#__PURE__*/reactExports.createElement(WorkflowTitle, {
	      class_name: "workflow-title",
	      data: data
	    }), this.getTypeIndicator()));
	  }
	}

	// Creates a slider input
	class Slider extends reactExports.Component {
	  render() {
	    return /*#__PURE__*/reactExports.createElement("label", {
	      className: "switch"
	    }, /*#__PURE__*/reactExports.createElement("input", {
	      type: "checkbox",
	      checked: this.props.checked,
	      onChange: this.props.toggleAction.bind(this)
	    }), /*#__PURE__*/reactExports.createElement("span", {
	      className: "slider round"
	    }));
	  }
	}

	// Creates a datetime picker using flatpickr
	class DatePicker extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.input = reactExports.createRef();
	  }
	  componentDidMount() {
	    $(this.input.current).flatpickr({
	      enableTime: true,
	      dateFormat: 'Z',
	      altInput: true,
	      altFormat: 'D M J, Y - H:i',
	      onChange: (dates, datestring) => {
	        this.props.onChange(datestring);
	      }
	    });
	  }
	  render() {
	    let disabled = false;
	    if (this.props.disabled) disabled = true;
	    return /*#__PURE__*/reactExports.createElement("input", {
	      disabled: disabled,
	      ref: this.input,
	      id: this.props.id,
	      defaultValue: this.props.default_value
	    });
	  }
	}

	//Extends the react component to add a few features that are used in a large number of components
	class Component extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.state = {};
	    this.maindiv = reactExports.createRef();
	  }

	  // @todo inheritance not approporiate here, create a hook
	  toggleDrop(evt) {
	    evt.stopPropagation();
	    toggleDrop(this.props.objectID, object_dictionary[this.objectType], !this.props.data.is_dropped, this.props.dispatch, this.props.data.depth);
	  }
	}

	// A block of collapsible text.
	class CollapsibleText extends Component {
	  componentDidMount() {
	    this.checkSize();
	  }
	  componentDidUpdate() {
	    this.checkSize();
	  }
	  checkSize() {
	    if (this.state.is_dropped) return;
	    if (this.maindiv.current.scrollHeight > this.maindiv.current.clientHeight) {
	      if (!this.state.overflow) this.setState({
	        overflow: true
	      });
	    } else {
	      if (this.state.overflow) this.setState({
	        overflow: false
	      });
	    }
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let css_class = '';
	    if (this.props.css_class) css_class = this.props.css_class + ' ';
	    css_class += 'title-text collapsible-text';
	    let drop_text = window.gettext('show more');
	    if (this.state.is_dropped) {
	      css_class += ' dropped';
	      drop_text = window.gettext('show less');
	    }
	    let overflow;
	    if (this.state.overflow) overflow = /*#__PURE__*/reactExports.createElement("div", {
	      onClick: evt => {
	        this.setState({
	          is_dropped: !this.state.is_dropped
	        });
	        evt.stopPropagation();
	      },
	      className: "collapsed-text-show-more"
	    }, drop_text);
	    var text = this.props.text;
	    if ((this.props.text == null || this.props.text == '') && this.props.defaultText != null) {
	      text = this.props.defaultText;
	    }
	    return [/*#__PURE__*/reactExports.createElement("div", {
	      ref: this.maindiv,
	      className: css_class,
	      title: text,
	      dangerouslySetInnerHTML: {
	        __html: text
	      }
	    }), overflow];
	  }
	}

	/*******************************************************
	 * A workflow card for a menu
	 *
	 * Props must include workflow_data (serialized model) and context.
	 * Context will determine which actions are added.
	 *
	 * Can also optionally receive a clickAction prop to override the behaviour
	 * on c
	 *******************************************************/
	// @todo define props
	class WorkflowForMenu extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      favourite: props.workflow_data.favourite
	    };
	    this.maindiv = reactExports.createRef();
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  getTypeIndicator() {
	    let data = this.props.workflow_data;
	    let type = data.type;
	    let type_text = window.gettext(type);
	    if (type === 'liveproject') type_text = window.gettext('classroom');
	    if (data.is_strategy) type_text += window.gettext(' strategy');
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: 'workflow-type-indicator ' + type
	    }, capWords(type_text));
	  }
	  getButtons() {
	    let fav_class = '';
	    if (this.state.favourite) fav_class = ' filled';
	    let buttons = [];
	    if (this.props.workflow_data.type !== 'liveproject') buttons.push( /*#__PURE__*/reactExports.createElement("div", {
	      key: "btn-workflow-toggle-favourite",
	      className: "workflow-toggle-favourite hover-shade",
	      onClick: evt => {
	        toggleFavourite(this.props.workflow_data.id, this.props.workflow_data.type, !this.state.favourite);
	        let state = this.state;
	        this.setState({
	          favourite: !state.favourite
	        });
	        evt.stopPropagation();
	      }
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: 'material-symbols-outlined' + fav_class,
	      title: window.gettext('Favourite')
	    }, "star")));
	    let workflows = [];
	    if (this.props.workflow_data.type === 'project' && !(this.props.workflow_data.workflow_count == null)) workflows.push( /*#__PURE__*/reactExports.createElement("div", {
	      key: "workflow-created-count",
	      className: "workflow-created"
	    }, this.props.workflow_data.workflow_count + ' ' + window.gettext('workflows')));
	    if (this.props.workflow_data.type == 'project' && this.props.workflow_data.has_liveproject && this.props.workflow_data.object_permission.role_type !== role_keys['none']) workflows.push( /*#__PURE__*/reactExports.createElement("div", {
	      key: "workflow-created-group",
	      className: "workflow-created workflow-live-classroom"
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded small-inline",
	      title: window.gettext('Live Classroom')
	    }, "group"), ' ' + window.gettext('Live Classroom')));
	    if (this.props.workflow_data.is_linked) workflows.push( /*#__PURE__*/reactExports.createElement("div", {
	      key: "workflow-created-warning",
	      className: "workflow-created linked-workflow-warning",
	      title: window.gettext('Warning: linking the same workflow to multiple nodes can result in loss of readability if you are associating parent workflow outcomes with child workflow outcomes.')
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded red filled small-inline"
	    }, "error"), ' ' + window.gettext('Already in use')));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-buttons-row"
	    }, /*#__PURE__*/reactExports.createElement("div", null, buttons), /*#__PURE__*/reactExports.createElement("div", null, workflows));
	  }
	  clickAction() {
	    if (this.props.selectAction) {
	      this.props.selectAction(this.props.workflow_data.id);
	    } else {
	      window.location.href = window.config.update_path[this.props.workflow_data.type].replace('0', this.props.workflow_data.id);
	    }
	  }
	  getVisible() {
	    let component = this;
	    if (this.props.renderer && !this.props.renderer.read_only && this.props.renderer.user_role === role_keys.teacher && this.props.workflow_data.type !== 'project' && this.props.workflow_data.type !== 'liveproject' && this.props.renderer && this.props.renderer.user_role === role_keys.teacher) return /*#__PURE__*/reactExports.createElement("div", {
	      className: "permission-select",
	      onClick: evt => evt.stopPropagation(),
	      onMouseDown: evt => evt.stopPropagation()
	    }, /*#__PURE__*/reactExports.createElement("select", {
	      value: this.props.workflow_data.is_visible,
	      onChange: evt => component.visibilityFunction(this.props.workflow_data.id, evt.target.value)
	    }, /*#__PURE__*/reactExports.createElement("option", {
	      value: 'false'
	    }, window.gettext('Not Visible')), /*#__PURE__*/reactExports.createElement("option", {
	      value: 'true'
	    }, window.gettext('Visible'))));
	    return null;
	  }
	  visibilityFunction(id, is_visible) {
	    is_visible = is_visible === 'true';
	    this.props.updateWorkflow(id, {
	      is_visible: is_visible
	    });
	    setWorkflowVisibility(this.props.renderer.project_data.id, id, is_visible);
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let data = this.props.workflow_data;
	    let css_class = 'workflow-for-menu hover-shade ' + data.type;
	    if (this.props.selected) css_class += ' selected';
	    let creation_text = window.gettext('Created');
	    if (data.author && data.author !== 'None') creation_text += ' ' + window.gettext('by') + ' ' + data.author;
	    creation_text += window.gettext(' on ') + data.created_on;
	    let description = data.description;
	    if (!description) description = ' ';
	    return /*#__PURE__*/reactExports.createElement("div", {
	      ref: this.maindiv,
	      className: css_class,
	      onClick: this.clickAction.bind(this),
	      onMouseDown: evt => {
	        evt.preventDefault();
	      }
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-top-row"
	    }, /*#__PURE__*/reactExports.createElement(WorkflowTitle, {
	      no_hyperlink: this.props.no_hyperlink,
	      class_name: "workflow-title",
	      data: data
	    }), this.getVisible(), this.getTypeIndicator()), /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-created"
	    }, creation_text), /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-description collapsible-text",
	      dangerouslySetInnerHTML: {
	        __html: description
	      }
	    }), this.getButtons());
	  }
	}

	//Quill div for inputs, as a react component
	class QuillDiv extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.maindiv = reactExports.createRef();
	    if (props.text) this.state = {
	      charlength: props.text.length
	    };else this.state = {
	      charlength: 0
	    };
	  }
	  render() {
	    return /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("div", {
	      ref: this.maindiv,
	      className: "quill-div"
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: 'character-length'
	    }, this.state.charlength + ' ' + window.gettext('characters')));
	  }
	  componentDidMount() {
	    let renderer = this.props.renderer;
	    let quill_container = this.maindiv.current;
	    let toolbarOptions = [['bold', 'italic', 'underline'], [{
	      script: 'sub'
	    }, {
	      script: 'super'
	    }], [{
	      list: 'bullet'
	    }, {
	      list: 'ordered'
	    }], ['link'] /*,['formula']*/];

	    let quill = new Quill(quill_container, {
	      theme: 'snow',
	      modules: {
	        toolbar: toolbarOptions
	      },
	      placeholder: this.props.placeholder
	    });
	    this.quill = quill;
	    if (this.props.text) quill.clipboard.dangerouslyPasteHTML(this.props.text);
	    quill.on('text-change', () => {
	      let text = quill_container.childNodes[0].innerHTML.replace(/\<p\>\<br\>\<\/p\>\<ul\>/g, '<ul>');
	      this.props.textChangeFunction(text);
	      this.setState({
	        charlength: text.length
	      });
	    });
	    let toolbar = quill.getModule('toolbar');
	    toolbar.defaultLinkFunction = toolbar.handlers['link'];
	    toolbar.addHandler('link', function customLinkFunction(value) {
	      var select = quill.getSelection();
	      if (value && select['length'] == 0 && !renderer.read_only) {
	        quill.insertText(select['index'], 'link');
	        quill.setSelection(select['index'], 4);
	      }
	      this.defaultLinkFunction(value);
	    });
	    this.quill.enable(!this.props.disabled);
	  }
	  componentDidUpdate(prevProps, prevState) {
	    if (prevProps.disabled != this.props.disabled) {
	      if (prevProps.text != this.props.text) this.quill.clipboard.dangerouslyPasteHTML(this.props.text, 'silent');
	      this.quill.enable(!this.props.disabled);
	    }
	    $(this.maindiv.current).find('a').click(() => {
	      $(this).attr('target', '_blank');
	    });
	  }
	}

	//Extends the react component to add a few features that are used in a large number of components
	class EditableComponent extends Component {
	  //Makes the item selectable
	  addEditable(data, no_delete = false) {
	    let read_only = this.props.renderer.read_only;
	    if (this.state.selected) {
	      var type = object_dictionary[this.objectType];
	      let title_length = '100';
	      if (type == 'outcome') title_length = '500';
	      var props = this.props;
	      let override = false;
	      let title = unescapeCharacters(data.title || '');
	      let description = data.description || '';
	      if (data.represents_workflow) override = true;
	      let sets;
	      if (this.props.object_sets && ['node', 'outcome'].indexOf(type) >= 0) {
	        let term_type = data.type;
	        if (type == 'node') term_type = node_type_keys[data.node_type];
	        let allowed_sets = this.props.object_sets.filter(set => set.term == term_type);
	        if (allowed_sets.length >= 0) {
	          let disable_sets = false;
	          if (data.depth || read_only) disable_sets = true;
	          let set_options = allowed_sets.map(set => /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("input", {
	            disabled: disable_sets,
	            type: "checkbox",
	            name: set.id,
	            checked: data.sets.indexOf(set.id) >= 0,
	            onChange: this.setChanged.bind(this, set.id)
	          }), /*#__PURE__*/reactExports.createElement("label", {
	            htmlFor: set.id
	          }, set.title)));
	          sets = [/*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Sets')), set_options];
	        }
	      }
	      return reactDomExports.createPortal( /*#__PURE__*/reactExports.createElement("div", {
	        className: "right-panel-inner",
	        onClick: evt => evt.stopPropagation()
	      }, /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('Edit ') + get_verbose(data, this.objectType)), ['node', 'week', 'column', 'workflow', 'outcome', 'nodelink'].indexOf(type) >= 0 && /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Title')), /*#__PURE__*/reactExports.createElement("textarea", {
	        resize: "none",
	        disabled: override || read_only,
	        autoComplete: "off",
	        id: "title-editor",
	        type: "text",
	        value: title,
	        maxLength: title_length,
	        onChange: this.inputChanged.bind(this, 'title')
	      }), /*#__PURE__*/reactExports.createElement("div", {
	        className: "character-length"
	      }, title.length, "/", title_length, " ", window.gettext('characters'))), ['node', 'workflow', 'outcome'].indexOf(type) >= 0 && /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Description')), /*#__PURE__*/reactExports.createElement(QuillDiv, {
	        disabled: override || read_only,
	        text: description,
	        maxlength: "500",
	        textChangeFunction: this.valueChanged.bind(this, 'description'),
	        placholder: "Insert description here"
	      })), type == 'column' && /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Custom Icon')), /*#__PURE__*/reactExports.createElement("p", null, "Browse options", ' ', /*#__PURE__*/reactExports.createElement("a", {
	        href: "https://fonts.google.com/icons?icon.style=Rounded&icon.platform=android&icon.category=Activities"
	      }, "here"), "."), /*#__PURE__*/reactExports.createElement("input", {
	        disabled: override || read_only,
	        autoComplete: "off",
	        id: "column-icon-editor",
	        type: "text",
	        value: data.icon,
	        maxLength: 50,
	        onChange: this.inputChanged.bind(this, 'icon')
	      })), (type == 'outcome' && data.depth == 0 || type == 'workflow' && data.type == 'course') && /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Code (Optional)')), /*#__PURE__*/reactExports.createElement("input", {
	        autoComplete: "off",
	        disabled: read_only,
	        id: "code-editor",
	        type: "text",
	        value: data.code,
	        maxLength: "50",
	        onChange: this.inputChanged.bind(this, 'code')
	      })), type == 'node' && data.node_type < 2 && /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Context')), /*#__PURE__*/reactExports.createElement("select", {
	        id: "context-editor",
	        disabled: read_only,
	        value: data.context_classification,
	        onChange: this.inputChanged.bind(this, 'context_classification')
	      }, this.props.renderer.context_choices.filter(choice => Math.floor(choice.type / 100) == data.node_type || choice.type == 0).map(choice => /*#__PURE__*/reactExports.createElement("option", {
	        value: choice.type
	      }, choice.name)))), type == 'node' && data.node_type < 2 && /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Task')), /*#__PURE__*/reactExports.createElement("select", {
	        id: "task-editor",
	        disabled: read_only,
	        value: data.task_classification,
	        onChange: this.inputChanged.bind(this, 'task_classification')
	      }, this.props.renderer.task_choices.filter(choice => Math.floor(choice.type / 100) == data.node_type || choice.type == 0).map(choice => /*#__PURE__*/reactExports.createElement("option", {
	        value: choice.type
	      }, choice.name)))), (type == 'node' || type == 'workflow') && /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Time')), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("input", {
	        disabled: override || read_only,
	        autoComplete: "off",
	        id: "time-editor",
	        className: "half-width",
	        type: "text",
	        value: data.time_required,
	        maxLength: "30",
	        onChange: this.inputChanged.bind(this, 'time_required')
	      }), /*#__PURE__*/reactExports.createElement("select", {
	        disabled: override || read_only,
	        id: "time-units-editor",
	        className: "half-width",
	        value: data.time_units,
	        onChange: this.inputChanged.bind(this, 'time_units')
	      }, this.props.renderer.time_choices.map(choice => /*#__PURE__*/reactExports.createElement("option", {
	        value: choice.type
	      }, choice.name))))), type == 'column' && /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Colour')), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("input", {
	        disabled: read_only,
	        autoComplete: "off",
	        id: "colour-editor",
	        className: "half-width",
	        type: "color",
	        value: '#' + data.colour?.toString(16),
	        maxLength: "30",
	        onChange: this.inputChanged.bind(this, 'colour')
	      }))), (type == 'workflow' && data.type == 'course' || type == 'node' && data.node_type == 2) && /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Ponderation')), /*#__PURE__*/reactExports.createElement("input", {
	        disabled: override || read_only,
	        autoComplete: "off",
	        className: "half-width",
	        id: "ponderation-theory",
	        type: "number",
	        value: data.ponderation_theory,
	        onChange: this.inputChanged.bind(this, 'ponderation_theory')
	      }), /*#__PURE__*/reactExports.createElement("div", {
	        className: "half-width"
	      }, window.gettext('hrs. Theory')), /*#__PURE__*/reactExports.createElement("input", {
	        disabled: override || read_only,
	        autoComplete: "off",
	        className: "half-width",
	        id: "ponderation-practical",
	        type: "number",
	        value: data.ponderation_practical,
	        onChange: this.inputChanged.bind(this, 'ponderation_practical')
	      }), /*#__PURE__*/reactExports.createElement("div", {
	        className: "half-width"
	      }, window.gettext('hrs. Practical')), /*#__PURE__*/reactExports.createElement("input", {
	        disabled: override || read_only,
	        className: "half-width",
	        autoComplete: "off",
	        id: "ponderation-individual",
	        type: "number",
	        value: data.ponderation_individual,
	        onChange: this.inputChanged.bind(this, 'ponderation_individual')
	      }), /*#__PURE__*/reactExports.createElement("div", {
	        className: "half-width"
	      }, window.gettext('hrs. Individual')), /*#__PURE__*/reactExports.createElement("input", {
	        disabled: override || read_only,
	        className: "half-width",
	        autoComplete: "off",
	        id: "time-general-hours",
	        type: "number",
	        value: data.time_general_hours,
	        onChange: this.inputChanged.bind(this, 'time_general_hours')
	      }), /*#__PURE__*/reactExports.createElement("div", {
	        className: "half-width"
	      }, window.gettext('hrs. General Education')), /*#__PURE__*/reactExports.createElement("input", {
	        disabled: override || read_only,
	        className: "half-width",
	        autoComplete: "off",
	        id: "time-specific-hours",
	        type: "number",
	        value: data.time_specific_hours,
	        onChange: this.inputChanged.bind(this, 'time_specific_hours')
	      }), /*#__PURE__*/reactExports.createElement("div", {
	        className: "half-width"
	      }, window.gettext('hrs. Specific Education'))), type == 'node' && data.node_type != 0 && /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Linked Workflow')), /*#__PURE__*/reactExports.createElement("div", null, data.linked_workflow && data.linked_workflow_data.title), /*#__PURE__*/reactExports.createElement("button", {
	        className: "primary-button",
	        disabled: read_only,
	        id: "linked-workflow-editor",
	        onClick: () => {
	          props.renderer.tiny_loader.startLoad();
	          getLinkedWorkflowMenu(data, response_data => {
	            console.log('linked a workflow');
	          }, () => {
	            props.renderer.tiny_loader.endLoad();
	          });
	        }
	      }, window.gettext('Change')), /*#__PURE__*/reactExports.createElement("input", {
	        disabled: read_only,
	        type: "checkbox",
	        name: "respresents_workflow",
	        checked: data.represents_workflow,
	        onChange: this.checkboxChanged.bind(this, 'represents_workflow')
	      }), /*#__PURE__*/reactExports.createElement("label", {
	        htmlFor: "repesents_workflow"
	      }, window.gettext('Display linked workflow data'))), type == 'node' && data.node_type != 2 && /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Other')), /*#__PURE__*/reactExports.createElement("input", {
	        disabled: read_only,
	        type: "checkbox",
	        name: "has_autolink",
	        checked: data.has_autolink,
	        onChange: this.checkboxChanged.bind(this, 'has_autolink')
	      }), /*#__PURE__*/reactExports.createElement("label", {
	        htmlFor: "has_autolink"
	      }, window.gettext('Draw arrow to next node'))), type == 'nodelink' && /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Style')), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("input", {
	        disabled: read_only,
	        type: "checkbox",
	        name: "dashed",
	        checked: data.dashed,
	        onChange: this.checkboxChanged.bind(this, 'dashed')
	      }), /*#__PURE__*/reactExports.createElement("label", {
	        htmlFor: "dashed"
	      }, window.gettext('Dashed Line'))), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("label", {
	        htmlFor: "text-position-range"
	      }, window.gettext('Text Position')), /*#__PURE__*/reactExports.createElement("div", {
	        className: "slidecontainer"
	      }, /*#__PURE__*/reactExports.createElement("input", {
	        disabled: read_only,
	        type: "range",
	        min: "1",
	        max: "100",
	        value: data.text_position,
	        className: "range-slider",
	        id: "text-position-range",
	        onChange: this.inputChanged.bind(this, 'text_position')
	      })))), type == 'workflow' && /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Settings')), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("label", {
	        htmlFor: "outcomes_type"
	      }, window.gettext('Outcomes Style')), /*#__PURE__*/reactExports.createElement("select", {
	        disabled: read_only,
	        name: "outcomes_type",
	        value: data.outcomes_type,
	        onChange: this.inputChanged.bind(this, 'outcomes_type')
	      }, this.props.renderer.outcome_type_choices.map(choice => /*#__PURE__*/reactExports.createElement("option", {
	        value: choice.type
	      }, choice.name)))), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("label", {
	        htmlFor: "condensed"
	      }, window.gettext('Condensed View')), /*#__PURE__*/reactExports.createElement("input", {
	        disabled: read_only,
	        type: "checkbox",
	        name: "condensed",
	        checked: data.condensed,
	        onChange: this.checkboxChanged.bind(this, 'condensed')
	      })), data.is_strategy && /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("label", {
	        htmlFor: "is_published"
	      }, window.gettext('Published')), /*#__PURE__*/reactExports.createElement("input", {
	        disabled: read_only,
	        type: "checkbox",
	        name: "is_published",
	        checked: data.published,
	        onChange: this.checkboxChanged.bind(this, 'published')
	      }))), type == 'week' && data.week_type < 2 && /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Strategy')), /*#__PURE__*/reactExports.createElement("select", {
	        disabled: read_only,
	        value: data.strategy_classification,
	        onChange: this.inputChanged.bind(this, 'strategy_classification')
	      }, this.props.renderer.strategy_classification_choices.map(choice => /*#__PURE__*/reactExports.createElement("option", {
	        value: choice.type
	      }, choice.name))), /*#__PURE__*/reactExports.createElement("button", {
	        disabled: read_only,
	        id: "toggle-strategy-editor",
	        onClick: () => {
	          let loader = new Loader('body');
	          toggleStrategy(data.id, data.is_strategy, response_data => {
	            loader.endLoad();
	          });
	        }
	      }, data.is_strategy && window.gettext('Remove Strategy Status'), !data.is_strategy && window.gettext('Save as Template'))), sets, this.getDeleteForSidebar(read_only, no_delete, type, data)), $('#edit-menu')[0]);
	    }
	  }
	  getDeleteForSidebar(read_only, no_delete, type, data) {
	    if (!read_only && !no_delete && (type != 'outcome' || data.depth > 0)) {
	      if (type == 'workflow') return [null];else return [/*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Delete')), this.addDeleteSelf(data)];
	    }
	  }
	  inputChanged(field, evt) {
	    let value = evt.target.value;
	    if (evt.target.type == 'number') value = parseInt(value) || 0;else if (!value) value = '';
	    if (field == 'colour') value = parseInt(value.replace('#', ''), 16);
	    if (evt.target.type == 'number' && value == '') value = 0;
	    this.props.renderer.change_field(this.props.data.id, object_dictionary[this.objectType], field, value);
	  }
	  setChanged(set_id, evt) {
	    this.props.renderer.tiny_loader.startLoad();
	    updateObjectSet(this.props.data.id, object_dictionary[this.objectType], set_id, evt.target.checked, () => {
	      this.props.renderer.tiny_loader.endLoad();
	    });
	  }
	  checkboxChanged(field, evt) {
	    this.props.renderer.change_field(this.props.data.id, object_dictionary[this.objectType], field, evt.target.checked);
	  }
	  valueChanged(field, new_value) {
	    this.props.renderer.change_field(this.props.data.id, object_dictionary[this.objectType], field, new_value);
	  }
	  get_border_style() {
	    let data = this.props.data;
	    if (!data) return;
	    let style = {};
	    if (data.lock) {
	      style.border = '2px solid ' + data.lock.user_colour;
	    }
	    return style;
	  }
	}

	//A button which causes an item to delete itself or insert a new item below itself.
	class ActionButton extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.handleClick = this.handleClick.bind(this);
	  }
	  handleClick(evt) {
	    this.props.handleClick(evt);
	    evt.stopPropagation();
	  }
	  render() {
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: this.props.button_class + ' action-button',
	      title: this.props.titletext,
	      onClick: this.handleClick
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + this.props.button_icon
	    }));
	  }
	}

	/*******************************************************
	 * @CommentBox
	 *
	 * @todo description
	 *******************************************************/
	class CommentBox extends Component {
	  constructor(props) {
	    super(props);
	    this.input = reactExports.createRef();
	    this.submit = reactExports.createRef();
	    this.state = {};
	  }

	  /*******************************************************
	   * LIFECYCLE
	   *******************************************************/
	  componentDidMount() {
	    this.setState({
	      has_rendered: true
	    });
	  }
	  componentDidUpdate(prevProps) {
	    if (prevProps.show && !this.props.show) {
	      this.commentsSeen();
	      if (this.state.tagging) this.setState({
	        tagging: false
	      });
	    }
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/

	  addUserTag(user) {
	    let cursor_pos = this.tag_position;
	    let current_value = this.input.current.value;
	    let to_add = '';
	    if (cursor_pos > 0 && current_value[cursor_pos - 1] != ' ') to_add += ' ';
	    to_add += '@' + user.username + ' ';
	    let new_value = current_value.slice(0, cursor_pos) + to_add + current_value.slice(cursor_pos + 1);
	    this.input.current.value = new_value;
	    this.input.current.selectionStart = this.input.current.value.length;
	    this.setState({
	      tagging: false
	    });
	  }
	  textChange(evt) {
	    if ($(this.input.current)[0].value && $(this.input.current)[0].value != '') {
	      $(this.submit.current).removeClass('hidden');
	    } else {
	      $(this.submit.current).addClass('hidden');
	    }
	    if (evt.nativeEvent && evt.nativeEvent.data == '@') {
	      this.tag_position = this.input.current.selectionStart - 1;
	      let renderer = this.props.renderer;
	      renderer.tiny_loader.startLoad();
	      getUsersForObject(this.props.renderer.workflowID, 'workflow', response => {
	        renderer.tiny_loader.endLoad();
	        this.setState({
	          tagging: true,
	          user_list: response.editors.concat(response.commentors)
	        });
	      });
	    } else if (this.state.tagging) {
	      this.setState({
	        tagging: false
	      });
	    }
	  }
	  removeComment(id) {
	    let parent = this.props.parent;
	    let props = parent.props;
	    if (window.confirm(window.gettext('Are you sure you want to permanently clear this comment?'))) {
	      removeComment(props.objectID, object_dictionary[parent.objectType], id, parent.reloadComments.bind(parent));
	    }
	  }
	  removeAllComments() {
	    let parent = this.props.parent;
	    let props = parent.props;
	    if (window.confirm(window.gettext('Are you sure you want to permanently clear all comments from this object?'))) {
	      removeAllComments(props.objectID, object_dictionary[parent.objectType], parent.reloadComments.bind(parent));
	    }
	  }
	  appendComment() {
	    let text = $(this.input.current)[0].value;
	    if (!text) return;
	    let parent = this.props.parent;
	    let props = parent.props;
	    $(this.input.current)[0].value = '';
	    $(this.submit.current).addClass('hidden');
	    addComment(props.objectID, object_dictionary[parent.objectType], text, parent.reloadComments.bind(parent));
	  }
	  commentsSeen() {
	    let unread_comments = this.props.renderer.unread_comments.slice();
	    let comments = this.props.comments.map(comment => comment.id);
	    this.props.renderer.unread_comments = unread_comments.filter(comment => comments.indexOf(comment) < 0);
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let has_comments = false;
	    let has_unread = this.props.comments.filter(value => {
	      // @todo unread_comments is undefined
	      return this.props?.renderer?.unread_comments?.includes(value);
	    }).length > 0;
	    if (this.state.has_rendered) {
	      has_comments = this.props.comments.length > 0;
	    }
	    let render_div;
	    let side_actions = $(this.props.parent.maindiv.current).children('.side-actions').children('.comment-indicator-container');
	    if (side_actions.length > 0) render_div = side_actions[0];else render_div = this.props.parent.maindiv.current;
	    let comment_indicator = null;
	    if (has_comments) {
	      let indicator_class = 'comment-indicator hover-shade';
	      if (has_unread) indicator_class += ' unread';
	      comment_indicator = reactDomExports.createPortal( /*#__PURE__*/reactExports.createElement("div", {
	        className: indicator_class,
	        onClick: this.props.parent.commentClick.bind(this.props.parent)
	      }, /*#__PURE__*/reactExports.createElement("img", {
	        src: window.config.icon_path + 'comment_new.svg'
	      })), render_div);
	    }
	    if (!this.props.show) {
	      return comment_indicator;
	    }
	    let comments;
	    if (this.props.comments) comments = this.props.comments.map(comment => {
	      let is_unread = this.props.renderer.unread_comments.indexOf(comment.id) >= 0;
	      let comment_class = 'comment';
	      if (is_unread) comment_class += ' unread';
	      let text = comment.text.replace(/@\w[@a-zA-Z0-9_.]{1,}/g, val => '<b>' + val + '</b>');
	      return /*#__PURE__*/reactExports.createElement("div", {
	        className: comment_class
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "comment-by"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "comment-user"
	      }, getUserDisplay(comment.user)), /*#__PURE__*/reactExports.createElement("div", {
	        className: "comment-on"
	      }, comment.created_on)), /*#__PURE__*/reactExports.createElement("div", {
	        className: "comment-text",
	        dangerouslySetInnerHTML: {
	          __html: text
	        }
	      }), !this.props.renderer.read_only && /*#__PURE__*/reactExports.createElement("div", {
	        className: "mouseover-actions"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "action-button",
	        title: window.gettext('Delete Comment'),
	        onClick: this.removeComment.bind(this, comment.id)
	      }, /*#__PURE__*/reactExports.createElement("img", {
	        src: window.config.icon_path + 'rubbish.svg'
	      }))));
	    });
	    let top_contents = [];
	    top_contents.push( /*#__PURE__*/reactExports.createElement("div", {
	      className: "hover-shade",
	      title: window.gettext('Close'),
	      onClick: this.props.parent.commentClick.bind(this.props.parent)
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + 'close.svg'
	    })));
	    if (!this.props.renderer.read_only && comments.length > 1) top_contents.push( /*#__PURE__*/reactExports.createElement("div", {
	      className: "hover-shade",
	      title: window.gettext('Clear All Comments'),
	      onClick: this.removeAllComments.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + 'rubbish.svg'
	    })));
	    let input_default = window.gettext('Add a comment');
	    if (this.props.comments && this.props.comments.length > 0) input_default = window.gettext('Reply');
	    let tag_box;
	    if (this.state.tagging) {
	      tag_box = /*#__PURE__*/reactExports.createElement("div", {
	        className: "comment-tag-box"
	      }, this.state.user_list.map(user => /*#__PURE__*/reactExports.createElement("div", {
	        className: "user-name hover-shade",
	        onClick: this.addUserTag.bind(this, user)
	      }, getUserDisplay(user))));
	    }
	    return reactDomExports.createPortal([/*#__PURE__*/reactExports.createElement("div", {
	      className: "comment-box",
	      onClick: evt => evt.stopPropagation(),
	      onMouseDown: evt => evt.stopPropagation()
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "comment-top-row"
	    }, top_contents), /*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement("div", {
	      className: "comment-block"
	    }, comments), this.props.renderer.add_comments && /*#__PURE__*/reactExports.createElement("div", {
	      className: "comment-input-line"
	    }, /*#__PURE__*/reactExports.createElement("textarea", {
	      className: "comment-input",
	      placeholder: input_default,
	      contentEditable: "true",
	      onInput: this.textChange.bind(this),
	      ref: this.input
	    }), /*#__PURE__*/reactExports.createElement("img", {
	      ref: this.submit,
	      src: window.config.icon_path + 'add_new.svg',
	      className: "add-comment-button hidden hover-shade",
	      onClick: this.appendComment.bind(this),
	      title: window.gettext('Submit')
	    }))), tag_box, comment_indicator], render_div);
	  }
	}

	//Extends the react component to add a few features that are used in a large number of components
	class EditableComponentWithComments extends EditableComponent {
	  //Adds a button that opens/closes the comments dialogue
	  addCommenting(data) {
	    return [/*#__PURE__*/reactExports.createElement(ActionButton, {
	      button_icon: "comment_new.svg",
	      button_class: "comment-button",
	      titletext: window.gettext('Comments'),
	      handleClick: this.commentClick.bind(this)
	    }), /*#__PURE__*/reactExports.createElement(CommentBox, {
	      show: this.state.show_comments,
	      comments: this.props.data.comments,
	      parent: this,
	      renderer: this.props.renderer
	    })];
	  }
	  commentClick(evt) {
	    evt.stopPropagation();
	    if (!this.state.show_comments) {
	      this.reloadComments(true);
	    } else this.setState({
	      show_comments: false
	    });
	  }
	  reloadComments(show_comments) {
	    let props = this.props;
	    let data = props.data;
	    props.renderer.tiny_loader.startLoad();
	    getCommentsForObject(data.id, object_dictionary[this.objectType], response_data => {
	      this.props.dispatch(reloadCommentsAction(this.props.data.id, object_dictionary[this.objectType], response_data.data_package));
	      if (show_comments) {
	        this.setState({
	          show_comments: true
	        });
	      }
	      //this.setState({show_comments:true,comment_data:response_data.data_package});
	      props.renderer.tiny_loader.endLoad();
	    });
	  }
	}

	//Extends the react component to add a few features that are used in a large number of components
	class EditableComponentWithActions extends EditableComponentWithComments {
	  //Adds a button that restores the item.
	  addRestoreSelf(data, alt_icon) {
	    let icon = alt_icon || 'restore.svg';
	    return /*#__PURE__*/reactExports.createElement(ActionButton, {
	      button_icon: icon,
	      button_class: "delete-self-button",
	      titletext: window.gettext('Restore'),
	      handleClick: this.restoreSelf.bind(this, data)
	    });
	  }
	  restoreSelf(data) {
	    var props = this.props;
	    props.renderer.tiny_loader.startLoad();
	    restoreSelf(data.id, object_dictionary[this.objectType], response_data => {
	      props.renderer.tiny_loader.endLoad();
	    });
	  }

	  //Adds a button that deletes the item (with a confirmation). The callback function is called after the object is removed from the DOM
	  addDeleteSelf(data, alt_icon) {
	    let icon = alt_icon || 'rubbish.svg';
	    return /*#__PURE__*/reactExports.createElement(ActionButton, {
	      button_icon: icon,
	      button_class: "delete-self-button",
	      titletext: window.gettext('Delete'),
	      handleClick: this.deleteSelf.bind(this, data)
	    });
	  }
	  deleteSelf(data) {
	    var props = this.props;
	    //Temporary confirmation; add better confirmation dialogue later
	    if (this.props.renderer) this.props.renderer.selection_manager.deleted(this);
	    if ((this.objectType == 'week' || this.objectType == 'column') && this.props.sibling_count < 2) {
	      alert(window.gettext('You cannot delete the last ') + this.objectType);
	      return;
	    }
	    if (window.confirm(window.gettext('Are you sure you want to delete this ') + get_verbose(this.props.data, this.objectType).toLowerCase() + '?')) {
	      props.renderer.tiny_loader.startLoad();
	      deleteSelf(data.id, object_dictionary[this.objectType], true, response_data => {
	        props.renderer.tiny_loader.endLoad();
	      });
	    }
	  }

	  //Adds a button that duplicates the item (with a confirmation).
	  addDuplicateSelf(data) {
	    return /*#__PURE__*/reactExports.createElement(ActionButton, {
	      button_icon: "duplicate.svg",
	      button_class: "duplicate-self-button",
	      titletext: window.gettext('Duplicate'),
	      handleClick: this.duplicateSelf.bind(this, data)
	    });
	  }
	  duplicateSelf(data) {
	    var props = this.props;
	    var type = this.objectType;
	    props.renderer.tiny_loader.startLoad();
	    duplicateSelf(data.id, object_dictionary[type], props.parentID, parent_dictionary[type], through_parent_dictionary[type], response_data => {
	      props.renderer.tiny_loader.endLoad();
	    });
	  }

	  //Adds a button that inserts a sibling below the item.
	  addInsertSibling(data) {
	    return /*#__PURE__*/reactExports.createElement(ActionButton, {
	      button_icon: "add_new.svg",
	      button_class: "insert-sibling-button",
	      titletext: window.gettext('Insert Below'),
	      handleClick: this.insertSibling.bind(this, data)
	    });
	  }
	  insertSibling(data) {
	    var props = this.props;
	    var type = this.objectType;
	    props.renderer.tiny_loader.startLoad();
	    insertSibling(data.id, object_dictionary[type], props.parentID, parent_dictionary[type], through_parent_dictionary[type], response_data => {
	      props.renderer.tiny_loader.endLoad();
	    });
	  }

	  //Adds a button that inserts a child to them item
	  addInsertChild(data) {
	    return /*#__PURE__*/reactExports.createElement(ActionButton, {
	      button_icon: "create_new_child.svg",
	      button_class: "insert-child-button",
	      titletext: window.gettext('Insert Child'),
	      handleClick: this.insertChild.bind(this, data)
	    });
	  }
	  insertChild(data) {
	    var props = this.props;
	    var type = this.objectType;
	    props.renderer.tiny_loader.startLoad();
	    insertChild(data.id, object_dictionary[type], response_data => {
	      props.renderer.tiny_loader.endLoad();
	    });
	  }
	}

	//Extends the react component to add a few features that are used in a large number of components
	class EditableComponentWithSorting extends EditableComponentWithActions {
	  makeSortableNode(sortable_block, parent_id, draggable_type, draggable_selector, axis = false, grid = false, restrictTo = null, handle = false, containment = '.workflow-container') {
	    if (this.props.renderer.read_only) return;
	    let cursorAt = {};
	    if (draggable_type == 'weekworkflow') cursorAt = {
	      top: 20
	    };
	    if (draggable_type == 'nodeweek') cursorAt = {
	      top: 20,
	      left: 50
	    };
	    var props = this.props;
	    sortable_block.draggable({
	      containment: containment,
	      axis: axis,
	      cursor: 'move',
	      cursorAt: cursorAt,
	      handle: handle,
	      distance: 10,
	      refreshPositions: true,
	      helper: (e, item) => {
	        var helper = $(document.createElement('div'));
	        helper.addClass(draggable_type + '-ghost');
	        helper.appendTo('.workflow-wrapper > .workflow-container');
	        helper.width($(e.target).width());
	        return helper;
	      },
	      start: (e, ui) => {
	        var drag_item = $(e.target);
	        if (drag_item.hasClass('placeholder') || drag_item.hasClass('no-drag')) {
	          e.preventDefault();
	          return false;
	        }
	        if (drag_item.children('.locked:not(.locked-' + user_id + ')').length > 0) {
	          e.preventDefault();
	          return false;
	        }
	        $('.workflow-canvas').addClass('dragging-' + draggable_type);
	        $(draggable_selector).addClass('dragging');
	        drag_item.attr('data-old-parent-id', parent_id);
	        drag_item.attr('data-restrict-to', restrictTo);
	        var old_index = drag_item.prevAll().length;
	        drag_item.attr('data-old-index', old_index);
	        props.renderer.selection_manager.changeSelection(null, null);
	        this.startSortFunction(parseInt(drag_item.attr('data-child-id')), draggable_type);
	      },
	      drag: (e, ui) => {
	        if (draggable_type == 'nodeweek') {
	          let new_target = $('#' + $(e.target).attr('id') + draggable_selector);
	          var delta_x = Math.round((ui.helper.offset().left - $('#' + $(e.target).attr('id') + draggable_selector).children(handle).first().offset().left) / columnwidth);
	          if (delta_x != 0) {
	            let child_id = parseInt($(e.target).attr('data-child-id'));
	            this.sortableColumnChangedFunction(child_id, delta_x, parseInt(new_target.attr('data-column-id')));
	          }
	        }
	        //$("#"+$(e.target).attr("id")+draggable_selector).addClass("selected");
	      },

	      stop: (e, ui) => {
	        $('.workflow-canvas').removeClass('dragging-' + draggable_type);
	        $(draggable_selector).removeClass('dragging');
	        $(document).triggerHandler(draggable_type + '-dropped');
	        //$("#"+$(e.target).attr("id")+draggable_selector).removeClass("selected");
	      }
	    });

	    sortable_block.droppable({
	      tolerance: 'pointer',
	      droppable: '.node-ghost',
	      over: (e, ui) => {
	        var drop_item = $(e.target);
	        var drag_item = ui.draggable;
	        var drag_helper = ui.helper;
	        var new_index = drop_item.prevAll().length;
	        var new_parent_id = parseInt(drop_item.parent().attr('id'));
	        if (draggable_type == 'nodeweek' && drag_item.hasClass('new-node')) {
	          drag_helper.addClass('valid-drop');
	          drop_item.addClass('new-node-drop-over');
	        } else if (drag_item.is(draggable_selector)) {
	          var old_parent_id = parseInt(drag_item.attr('data-old-parent-id'));
	          var old_index = parseInt(drag_item.attr('data-old-index'));
	          if (old_parent_id != new_parent_id || old_index != new_index) {
	            let child_id = parseInt(drag_item.attr('data-child-id'));
	            if (restrictTo && drag_item.attr('data-restrict-to') != restrictTo) {
	              this.sortableMovedOutFunction(parseInt(drag_item.attr('id')), new_index, draggable_type, new_parent_id, child_id);
	            } else {
	              drag_item.attr('data-old-parent-id', new_parent_id);
	              drag_item.attr('data-old-index', new_index);
	              this.sortableMovedFunction(parseInt(drag_item.attr('id')), new_index, draggable_type, new_parent_id, child_id);
	            }
	            this.lockChild(child_id, true, draggable_type);
	          }
	        } else ;
	      },
	      out: (e, ui) => {
	        var drag_item = ui.draggable;
	        var drag_helper = ui.helper;
	        var drop_item = $(e.target);
	        if (draggable_type == 'nodeweek' && drag_item.hasClass('new-node')) {
	          drag_helper.removeClass('valid-drop');
	          drop_item.removeClass('new-node-drop-over');
	        }
	      },
	      drop: (e, ui) => {
	        $('.new-node-drop-over').removeClass('new-node-drop-over');
	        var drop_item = $(e.target);
	        var drag_item = ui.draggable;
	        var new_index = drop_item.prevAll().length + 1;
	        if (draggable_type == 'nodeweek' && drag_item.hasClass('new-node')) {
	          newNode(this.props.objectID, new_index, drag_item[0].dataDraggable.column, drag_item[0].dataDraggable.column_type, response_data => {});
	        }
	      }
	    });
	  }
	  sortableMovedOutFunction() {
	    console.log('A sortable was moved out, but no specific function was given to the component.');
	  }
	  stopSortFunction() {}
	  startSortFunction(id, through_type) {
	    this.lockChild(id, true, through_type);
	  }
	  lockChild(id, lock, through_type) {
	    let object_type;
	    if (through_type == 'nodeweek') object_type = 'node';
	    if (through_type == 'weekworkflow') object_type = 'week';
	    if (through_type == 'columnworkflow') object_type = 'column';
	    if (through_type == 'outcomeoutcome') object_type = 'outcome';
	    if (through_type == 'outcomeworkflow') object_type = 'outcome';
	    this.props.renderer.lock_update({
	      object_id: id,
	      object_type: object_type
	    }, lock_times.move, lock);
	  }
	}

	const WorkflowLoader = () => {
	  return /*#__PURE__*/React.createElement("div", {
	    className: "load-screen"
	  });
	};

	/*******************************************************
	A container for workflow cards that allows searching and filtering

	Accepts a list of workflows as props.
	Optional prop search_within restricts searches to the existing list of workflows.
	 *******************************************************/
	// @todo define props
	class WorkflowForMenuCondensed extends WorkflowForMenu {
	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  getButtons() {
	    return null;
	  }
	  getProjectTitle() {
	    if (this.props.workflow_data.project_title) {
	      return /*#__PURE__*/reactExports.createElement("div", {
	        className: "project-title"
	      }, this.props.workflow_data.project_title);
	    } else {
	      return '-';
	    }
	  }
	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let data = this.props.workflow_data;
	    let css_class = 'workflow-for-menu simple-workflow hover-shade ' + data.type;
	    return /*#__PURE__*/reactExports.createElement("div", {
	      ref: this.maindiv,
	      className: css_class,
	      onClick: this.clickAction.bind(this),
	      onMouseDown: evt => {
	        evt.preventDefault();
	      }
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-top-row"
	    }, this.getTypeIndicator(), /*#__PURE__*/reactExports.createElement(WorkflowTitle, {
	      no_hyperlink: this.props.no_hyperlink,
	      class_name: "workflow-title",
	      data: data
	    }), this.getButtons(), this.getProjectTitle()));
	  }
	}

	/*******************************************************
	 * @todo, what is this doing
	 *******************************************************/
	class WorkflowFilter extends Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      workflows: props.workflows,
	      active_filter: 0,
	      active_sort: 0,
	      reversed: false,
	      search_results: []
	    };
	    this.filters = [{
	      name: 'all',
	      display: window.gettext('All')
	    }, {
	      name: 'owned',
	      display: window.gettext('Owned')
	    }, {
	      name: 'shared',
	      display: window.gettext('Shared')
	    }, {
	      name: 'favourite',
	      display: window.gettext('My Favourites')
	    }, {
	      name: 'archived',
	      display: window.gettext('Archived')
	    }];
	    this.sorts = [{
	      name: 'last_viewed',
	      display: window.gettext('Recent')
	    }, {
	      name: 'title',
	      display: window.gettext('A-Z')
	    }, {
	      name: 'created_on',
	      display: window.gettext('Creation date')
	    }, {
	      name: 'type',
	      display: window.gettext('Type')
	    }];
	    let url_params = new URL(window.location.href).searchParams;
	    if (url_params.get('favourites') === 'true') this.state.active_filter = this.filters.findIndex(elem => elem.name === 'favourite');
	    if (this.props.context === 'library') this.search_without = true;
	    this.filterDOM = reactExports.createRef();
	    this.searchDOM = reactExports.createRef();
	    this.sortDOM = reactExports.createRef();
	  }

	  /*******************************************************
	   * LIFECYCLE
	   *******************************************************/
	  componentDidMount() {
	    makeDropdown(this.filterDOM.current);
	    makeDropdown(this.sortDOM.current);
	    makeDropdown(this.searchDOM.current);
	  }
	  componentDidUpdate(prevProps, prevState) {
	    if (prevProps.workflows !== this.props.workflows) this.setState({
	      workflows: this.props.workflows
	    });
	  }

	  /*******************************************************
	   *  FUNCTIONS
	   *******************************************************/
	  getPlaceholder() {
	    if (this.props.context === 'project') {
	      return window.gettext('Search the project');
	    } else {
	      return window.gettext('Search the library');
	    }
	  }
	  sortWorkflows(workflows) {
	    let sort = this.sorts[this.state.active_sort].name;
	    if (sort === 'last_viewed') {
	      workflows = workflows.sort((a, b) => ('' + a.object_permission[sort]).localeCompare(b.object_permission[sort]));
	      if (!this.state.reversed) return workflows.reverse();
	      return workflows;
	    } else workflows = workflows.sort((a, b) => ('' + a[sort]).localeCompare(b[sort]));
	    if (this.state.reversed) return workflows.reverse();
	    return workflows;
	  }
	  filterWorkflows(workflows) {
	    let filter = this.filters[this.state.active_filter].name;
	    if (filter !== 'archived') workflows = workflows.filter(workflow => !workflow.deleted);else return workflows.filter(workflow => workflow.deleted);
	    if (filter === 'owned') return workflows.filter(workflow => workflow.is_owned);
	    if (filter === 'shared') return workflows.filter(workflow => !workflow.is_owned);
	    if (filter === 'favourite') return workflows.filter(workflow => workflow.favourite);
	    return workflows;
	  }
	  getFilter() {
	    let active_filter = this.filters[this.state.active_filter];
	    return /*#__PURE__*/reactExports.createElement("div", {
	      id: "workflow-filter",
	      ref: this.filterDOM,
	      className: "hover-shade"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: 'workflow-sort-indicator hover-shade item-' + this.state.active_filter
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded"
	    }, "filter_alt"), /*#__PURE__*/reactExports.createElement("div", null, active_filter.display)), /*#__PURE__*/reactExports.createElement("div", {
	      className: "create-dropdown"
	    }, this.filters.map((filter, i) => {
	      let css_class = 'filter-option';
	      if (this.state.active_filter === i) css_class += ' active';
	      return /*#__PURE__*/reactExports.createElement("div", {
	        className: css_class,
	        onClick: () => this.setState({
	          active_filter: i
	        })
	      }, filter.display);
	    })));
	  }
	  getSort() {
	    let active_sort = this.sorts[this.state.active_sort];
	    return /*#__PURE__*/reactExports.createElement("div", {
	      id: "workflow-sort",
	      ref: this.sortDOM,
	      className: "hover-shade"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: 'workflow-sort-indicator hover-shade item-' + this.state.active_sort
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded"
	    }, "sort"), /*#__PURE__*/reactExports.createElement("div", null, active_sort.display)), /*#__PURE__*/reactExports.createElement("div", {
	      className: "create-dropdown"
	    }, this.sorts.map((sort, i) => {
	      let sort_dir;
	      let css_class = 'filter-option';
	      if (this.state.active_sort === i) {
	        css_class += ' active';
	        if (this.state.reversed) sort_dir = /*#__PURE__*/reactExports.createElement("span", {
	          className: "material-symbols-rounded"
	        }, "north");else sort_dir = /*#__PURE__*/reactExports.createElement("span", {
	          className: "material-symbols-rounded"
	        }, "south");
	      }
	      return /*#__PURE__*/reactExports.createElement("div", {
	        className: css_class,
	        onClick: evt => {
	          evt.stopPropagation();
	          this.sortChange(i);
	          //This is very hacky, but if we're updating we need to re-open the sort dropdown
	          $(this.sortDOM.current).children('.create-dropdown').addClass('active');
	        }
	      }, sort_dir, sort.display);
	    })));
	  }
	  sortChange(index) {
	    if (this.state.active_sort === index) this.setState({
	      reversed: !this.state.reversed
	    });else this.setState({
	      active_sort: index,
	      reversed: false
	    });
	  }
	  searchChange(evt) {
	    let component = this;
	    if (evt.target.value && evt.target.value !== '') {
	      let filter = evt.target.value.toLowerCase();
	      if (this.search_without) component.searchWithout(filter, response => {
	        component.setState({
	          search_results: response,
	          search_filter: filter
	        });
	        $(this.searchDOM.current).addClass('active');
	      });else component.searchWithin(filter, response => {
	        component.setState({
	          search_results: response,
	          search_filter: filter
	        });
	        $(this.searchDOM.current).addClass('active');
	      });
	    } else {
	      component.setState({
	        search_results: [],
	        search_filter: ''
	      });
	      $(this.searchDOM.current).removeClass('active');
	    }
	  }
	  searchWithin(request, response_function) {
	    let workflows = this.state.workflows.filter(workflow => workflow.title.toLowerCase().indexOf(request) >= 0);
	    response_function(workflows);
	  }
	  searchWithout(request, response_function) {
	    searchAllObjects(request, {
	      nresults: 10
	    }, response_data => {
	      response_function(response_data.workflow_list);
	    });
	  }
	  seeAll() {
	    this.props.renderer.tiny_loader.startLoad();
	    let search_filter = this.state.search_filter;
	    searchAllObjects(search_filter, {
	      nresults: 0
	    }, response_data => {
	      this.setState({
	        workflows: response_data.workflow_list,
	        search_filter_lock: search_filter
	      });
	      this.props.renderer.tiny_loader.endLoad();

	      // Remove class from elements
	      var dropdowns = document.querySelectorAll('#workflow-search .create-dropdown');
	      dropdowns.forEach(function (dropdown) {
	        dropdown.classList.remove('active');
	      });

	      // Set attribute 'disabled' to true for elements
	      var workflowSearch = document.getElementById('workflow-search');
	      if (workflowSearch) {
	        workflowSearch.setAttribute('disabled', true);
	      }
	      var workflowSearchInput = document.getElementById('workflow-search-input');
	      if (workflowSearchInput) {
	        workflowSearchInput.setAttribute('disabled', true);
	      }
	    });
	  }
	  clearSearchLock(evt) {
	    this.setState({
	      workflows: this.props.workflows,
	      search_filter_lock: null
	    });
	    $('#workflow-search').attr('disabled', false);
	    $('#workflow-search-input').attr('disabled', false);
	    evt.stopPropagation();
	  }
	  defaultRender() {
	    return /*#__PURE__*/reactExports.createElement(WorkflowLoader, null);
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let workflows;
	    if (!this.state.workflows) workflows = this.defaultRender();else {
	      workflows = this.sortWorkflows(this.filterWorkflows(this.state.workflows));
	      workflows = workflows.map(workflow => /*#__PURE__*/reactExports.createElement(WorkflowForMenu, {
	        renderer: this.props.renderer,
	        key: workflow.type + workflow.id,
	        workflow_data: workflow,
	        context: this.props.context,
	        updateWorkflow: this.props.updateWorkflow
	      }));
	    }
	    let search_results = this.state.search_results.map(workflow => /*#__PURE__*/reactExports.createElement(WorkflowForMenuCondensed, {
	      key: workflow.type + workflow.id,
	      workflow_data: workflow,
	      context: this.props.context
	    }));
	    if (this.state.search_filter && this.state.search_filter.length > 0 && this.state.search_results.length === 0) {
	      search_results.push( /*#__PURE__*/reactExports.createElement("div", null, window.gettext('No results found')));
	    } else if (search_results.length === 10) {
	      search_results.push( /*#__PURE__*/reactExports.createElement("div", {
	        className: "hover-shade",
	        onClick: () => this.seeAll()
	      }, window.gettext('+ See all')));
	    }
	    let search_filter_lock;
	    if (this.state.search_filter_lock) {
	      search_filter_lock = /*#__PURE__*/reactExports.createElement("div", {
	        className: "search-filter-lock"
	      }, /*#__PURE__*/reactExports.createElement("span", {
	        onClick: this.clearSearchLock.bind(this),
	        className: "material-symbols-rounded hover-shade"
	      }, "close"), window.gettext('Search: ' + this.state.search_filter_lock));
	    }
	    return [/*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-filter-top"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      id: "workflow-search",
	      ref: this.searchDOM
	    }, /*#__PURE__*/reactExports.createElement("input", {
	      placeholder: this.getPlaceholder(),
	      onChange: debounce(this.searchChange.bind(this)),
	      id: "workflow-search-input",
	      className: "search-input",
	      autoComplete: "off"
	    }), /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded"
	    }, "search"), /*#__PURE__*/reactExports.createElement("div", {
	      className: "create-dropdown"
	    }, search_results), search_filter_lock), /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-filter-sort"
	    }, this.getFilter(), this.getSort())), /*#__PURE__*/reactExports.createElement("div", {
	      className: "menu-grid"
	    }, workflows)];
	  }
	}

	function _extends$1() {
	  _extends$1 = Object.assign ? Object.assign.bind() : function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];
	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }
	    return target;
	  };
	  return _extends$1.apply(this, arguments);
	}

	var DEFAULT_CONFIG = {
	  // minimum relative difference between two compared values,
	  // used by all comparison functions
	  epsilon: 1e-12,
	  // type of default matrix output. Choose 'matrix' (default) or 'array'
	  matrix: 'Matrix',
	  // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction
	  number: 'number',
	  // number of significant digits in BigNumbers
	  precision: 64,
	  // predictable output type of functions. When true, output type depends only
	  // on the input types. When false (default), output type can vary depending
	  // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when
	  // predictable is false, and returns `NaN` when true.
	  predictable: false,
	  // random seed for seeded pseudo random number generation
	  // null = randomly seed
	  randomSeed: null
	};

	// type checks for all known types
	//
	// note that:
	//
	// - check by duck-typing on a property like `isUnit`, instead of checking instanceof.
	//   instanceof cannot be used because that would not allow to pass data from
	//   one instance of math.js to another since each has it's own instance of Unit.
	// - check the `isUnit` property via the constructor, so there will be no
	//   matches for "fake" instances like plain objects with a property `isUnit`.
	//   That is important for security reasons.
	// - It must not be possible to override the type checks used internally,
	//   for security reasons, so these functions are not exposed in the expression
	//   parser.

	function isNumber(x) {
	  return typeof x === 'number';
	}
	function isBigNumber(x) {
	  if (!x || typeof x !== 'object' || typeof x.constructor !== 'function') {
	    return false;
	  }
	  if (x.isBigNumber === true && typeof x.constructor.prototype === 'object' && x.constructor.prototype.isBigNumber === true) {
	    return true;
	  }
	  if (typeof x.constructor.isDecimal === 'function' && x.constructor.isDecimal(x) === true) {
	    return true;
	  }
	  return false;
	}
	function isComplex(x) {
	  return x && typeof x === 'object' && Object.getPrototypeOf(x).isComplex === true || false;
	}
	function isFraction(x) {
	  return x && typeof x === 'object' && Object.getPrototypeOf(x).isFraction === true || false;
	}
	function isUnit(x) {
	  return x && x.constructor.prototype.isUnit === true || false;
	}
	function isString(x) {
	  return typeof x === 'string';
	}
	var isArray = Array.isArray;
	function isMatrix(x) {
	  return x && x.constructor.prototype.isMatrix === true || false;
	}

	/**
	 * Test whether a value is a collection: an Array or Matrix
	 * @param {*} x
	 * @returns {boolean} isCollection
	 */
	function isCollection(x) {
	  return Array.isArray(x) || isMatrix(x);
	}
	function isDenseMatrix(x) {
	  return x && x.isDenseMatrix && x.constructor.prototype.isMatrix === true || false;
	}
	function isSparseMatrix(x) {
	  return x && x.isSparseMatrix && x.constructor.prototype.isMatrix === true || false;
	}
	function isRange(x) {
	  return x && x.constructor.prototype.isRange === true || false;
	}
	function isIndex(x) {
	  return x && x.constructor.prototype.isIndex === true || false;
	}
	function isBoolean(x) {
	  return typeof x === 'boolean';
	}
	function isResultSet(x) {
	  return x && x.constructor.prototype.isResultSet === true || false;
	}
	function isHelp(x) {
	  return x && x.constructor.prototype.isHelp === true || false;
	}
	function isFunction(x) {
	  return typeof x === 'function';
	}
	function isDate(x) {
	  return x instanceof Date;
	}
	function isRegExp(x) {
	  return x instanceof RegExp;
	}
	function isObject(x) {
	  return !!(x && typeof x === 'object' && x.constructor === Object && !isComplex(x) && !isFraction(x));
	}
	function isNull(x) {
	  return x === null;
	}
	function isUndefined(x) {
	  return x === undefined;
	}
	function isAccessorNode(x) {
	  return x && x.isAccessorNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isArrayNode(x) {
	  return x && x.isArrayNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isAssignmentNode(x) {
	  return x && x.isAssignmentNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isBlockNode(x) {
	  return x && x.isBlockNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isConditionalNode(x) {
	  return x && x.isConditionalNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isConstantNode(x) {
	  return x && x.isConstantNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isFunctionAssignmentNode(x) {
	  return x && x.isFunctionAssignmentNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isFunctionNode(x) {
	  return x && x.isFunctionNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isIndexNode(x) {
	  return x && x.isIndexNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isNode(x) {
	  return x && x.isNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isObjectNode(x) {
	  return x && x.isObjectNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isOperatorNode(x) {
	  return x && x.isOperatorNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isParenthesisNode(x) {
	  return x && x.isParenthesisNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isRangeNode(x) {
	  return x && x.isRangeNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isRelationalNode(x) {
	  return x && x.isRelationalNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isSymbolNode(x) {
	  return x && x.isSymbolNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isChain(x) {
	  return x && x.constructor.prototype.isChain === true || false;
	}
	function typeOf(x) {
	  var t = typeof x;
	  if (t === 'object') {
	    if (x === null) return 'null';
	    if (isBigNumber(x)) return 'BigNumber'; // Special: weird mashup with Decimal
	    if (x.constructor && x.constructor.name) return x.constructor.name;
	    return 'Object'; // just in case
	  }

	  return t; // can be 'string', 'number', 'boolean', 'function', 'bigint', ...
	}

	/**
	 * Clone an object
	 *
	 *     clone(x)
	 *
	 * Can clone any primitive type, array, and object.
	 * If x has a function clone, this function will be invoked to clone the object.
	 *
	 * @param {*} x
	 * @return {*} clone
	 */
	function clone$2(x) {
	  var type = typeof x;

	  // immutable primitive types
	  if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {
	    return x;
	  }

	  // use clone function of the object when available
	  if (typeof x.clone === 'function') {
	    return x.clone();
	  }

	  // array
	  if (Array.isArray(x)) {
	    return x.map(function (value) {
	      return clone$2(value);
	    });
	  }
	  if (x instanceof Date) return new Date(x.valueOf());
	  if (isBigNumber(x)) return x; // bignumbers are immutable
	  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp

	  // object
	  return mapObject(x, clone$2);
	}

	/**
	 * Apply map to all properties of an object
	 * @param {Object} object
	 * @param {function} callback
	 * @return {Object} Returns a copy of the object with mapped properties
	 */
	function mapObject(object, callback) {
	  var clone = {};
	  for (var key in object) {
	    if (hasOwnProperty(object, key)) {
	      clone[key] = callback(object[key]);
	    }
	  }
	  return clone;
	}

	/**
	 * Extend object a with the properties of object b
	 * @param {Object} a
	 * @param {Object} b
	 * @return {Object} a
	 */
	function extend(a, b) {
	  for (var prop in b) {
	    if (hasOwnProperty(b, prop)) {
	      a[prop] = b[prop];
	    }
	  }
	  return a;
	}

	/**
	 * Deep test equality of all fields in two pairs of arrays or objects.
	 * Compares values and functions strictly (ie. 2 is not the same as '2').
	 * @param {Array | Object} a
	 * @param {Array | Object} b
	 * @returns {boolean}
	 */
	function deepStrictEqual(a, b) {
	  var prop, i, len;
	  if (Array.isArray(a)) {
	    if (!Array.isArray(b)) {
	      return false;
	    }
	    if (a.length !== b.length) {
	      return false;
	    }
	    for (i = 0, len = a.length; i < len; i++) {
	      if (!deepStrictEqual(a[i], b[i])) {
	        return false;
	      }
	    }
	    return true;
	  } else if (typeof a === 'function') {
	    return a === b;
	  } else if (a instanceof Object) {
	    if (Array.isArray(b) || !(b instanceof Object)) {
	      return false;
	    }
	    for (prop in a) {
	      // noinspection JSUnfilteredForInLoop
	      if (!(prop in b) || !deepStrictEqual(a[prop], b[prop])) {
	        return false;
	      }
	    }
	    for (prop in b) {
	      // noinspection JSUnfilteredForInLoop
	      if (!(prop in a)) {
	        return false;
	      }
	    }
	    return true;
	  } else {
	    return a === b;
	  }
	}

	/**
	 * A safe hasOwnProperty
	 * @param {Object} object
	 * @param {string} property
	 */
	function hasOwnProperty(object, property) {
	  return object && Object.hasOwnProperty.call(object, property);
	}

	/**
	 * Shallow version of pick, creating an object composed of the picked object properties
	 * but not for nested properties
	 * @param {Object} object
	 * @param {string[]} properties
	 * @return {Object}
	 */
	function pickShallow(object, properties) {
	  var copy = {};
	  for (var i = 0; i < properties.length; i++) {
	    var key = properties[i];
	    var value = object[key];
	    if (value !== undefined) {
	      copy[key] = value;
	    }
	  }
	  return copy;
	}

	var MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix
	var NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number

	// create a read-only version of config
	var config$2 = function config(options) {
	  if (options) {
	    throw new Error('The global config is readonly. \n' + 'Please create a mathjs instance if you want to change the default configuration. \n' + 'Example:\n' + '\n' + '  import { create, all } from \'mathjs\';\n' + '  const mathjs = create(all);\n' + '  mathjs.config({ number: \'BigNumber\' });\n');
	  }
	  return Object.freeze(DEFAULT_CONFIG);
	};
	_extends$1(config$2, DEFAULT_CONFIG, {
	  MATRIX_OPTIONS,
	  NUMBER_OPTIONS
	});

	var typedFunction$1 = {exports: {}};

	(function (module, exports) {
		(function (global, factory) {
		  module.exports = factory() ;
		})(commonjsGlobal, (function () {
		  function ok() {
		    return true;
		  }

		  function notOk() {
		    return false;
		  }

		  function undef() {
		    return undefined;
		  }

		  const NOT_TYPED_FUNCTION = 'Argument is not a typed-function.';
		  /**
		   * @typedef {{
		   *   params: Param[],
		   *   fn: function,
		   *   test: function,
		   *   implementation: function
		   * }} Signature
		   *
		   * @typedef {{
		   *   types: Type[],
		   *   hasAny: boolean,
		   *   hasConversion: boolean,
		   *   restParam: boolean
		   * }} Param
		   *
		   * @typedef {{
		   *   name: string,
		   *   typeIndex: number,
		   *   test: function,
		   *   isAny: boolean,
		   *   conversion?: ConversionDef,
		   *   conversionIndex: number,
		   * }} Type
		   *
		   * @typedef {{
		   *   from: string,
		   *   to: string,
		   *   convert: function (*) : *
		   * }} ConversionDef
		   *
		   * @typedef {{
		   *   name: string,
		   *   test: function(*) : boolean,
		   *   isAny?: boolean
		   * }} TypeDef
		   */

		  /**
		   * @returns {() => function}
		   */

		  function create() {
		    // data type tests

		    /**
		     * Returns true if the argument is a non-null "plain" object
		     */
		    function isPlainObject(x) {
		      return typeof x === 'object' && x !== null && x.constructor === Object;
		    }

		    const _types = [{
		      name: 'number',
		      test: function (x) {
		        return typeof x === 'number';
		      }
		    }, {
		      name: 'string',
		      test: function (x) {
		        return typeof x === 'string';
		      }
		    }, {
		      name: 'boolean',
		      test: function (x) {
		        return typeof x === 'boolean';
		      }
		    }, {
		      name: 'Function',
		      test: function (x) {
		        return typeof x === 'function';
		      }
		    }, {
		      name: 'Array',
		      test: Array.isArray
		    }, {
		      name: 'Date',
		      test: function (x) {
		        return x instanceof Date;
		      }
		    }, {
		      name: 'RegExp',
		      test: function (x) {
		        return x instanceof RegExp;
		      }
		    }, {
		      name: 'Object',
		      test: isPlainObject
		    }, {
		      name: 'null',
		      test: function (x) {
		        return x === null;
		      }
		    }, {
		      name: 'undefined',
		      test: function (x) {
		        return x === undefined;
		      }
		    }];
		    const anyType = {
		      name: 'any',
		      test: ok,
		      isAny: true
		    }; // Data structures to track the types. As these are local variables in
		    // create(), each typed universe will get its own copy, but the variables
		    // will only be accessible through the (closures of the) functions supplied
		    // as properties of the typed object, not directly.
		    // These will be initialized in clear() below

		    let typeMap; // primary store of all types

		    let typeList; // Array of just type names, for the sake of ordering
		    // And similar data structures for the type conversions:

		    let nConversions = 0; // the actual conversions are stored on a property of the destination types
		    // This is a temporary object, will be replaced with a function at the end

		    let typed = {
		      createCount: 0
		    };
		    /**
		     * Takes a type name and returns the corresponding official type object
		     * for that type.
		     *
		     * @param {string} typeName
		     * @returns {TypeDef} type
		     */

		    function findType(typeName) {
		      const type = typeMap.get(typeName);

		      if (type) {
		        return type;
		      } // Remainder is error handling


		      let message = 'Unknown type "' + typeName + '"';
		      const name = typeName.toLowerCase();
		      let otherName;

		      for (otherName of typeList) {
		        if (otherName.toLowerCase() === name) {
		          message += '. Did you mean "' + otherName + '" ?';
		          break;
		        }
		      }

		      throw new TypeError(message);
		    }
		    /**
		     * Adds an array `types` of type definitions to this typed instance.
		     * Each type definition should be an object with properties:
		     * 'name' - a string giving the name of the type; 'test' - function
		     * returning a boolean that tests membership in the type; and optionally
		     * 'isAny' - true only for the 'any' type.
		     *
		     * The second optional argument, `before`, gives the name of a type that
		     * these types should be added before. The new types are added in the
		     * order specified.
		     * @param {TypeDef[]} types
		     * @param {string | boolean} [beforeSpec='any'] before
		     */


		    function addTypes(types) {
		      let beforeSpec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'any';
		      const beforeIndex = beforeSpec ? findType(beforeSpec).index : typeList.length;
		      const newTypes = [];

		      for (let i = 0; i < types.length; ++i) {
		        if (!types[i] || typeof types[i].name !== 'string' || typeof types[i].test !== 'function') {
		          throw new TypeError('Object with properties {name: string, test: function} expected');
		        }

		        const typeName = types[i].name;

		        if (typeMap.has(typeName)) {
		          throw new TypeError('Duplicate type name "' + typeName + '"');
		        }

		        newTypes.push(typeName);
		        typeMap.set(typeName, {
		          name: typeName,
		          test: types[i].test,
		          isAny: types[i].isAny,
		          index: beforeIndex + i,
		          conversionsTo: [] // Newly added type can't have any conversions to it

		        });
		      } // update the typeList


		      const affectedTypes = typeList.slice(beforeIndex);
		      typeList = typeList.slice(0, beforeIndex).concat(newTypes).concat(affectedTypes); // Fix the indices

		      for (let i = beforeIndex + newTypes.length; i < typeList.length; ++i) {
		        typeMap.get(typeList[i]).index = i;
		      }
		    }
		    /**
		     * Removes all types and conversions from this typed instance.
		     * May cause previously constructed typed-functions to throw
		     * strange errors when they are called with types that do not
		     * match any of their signatures.
		     */


		    function clear() {
		      typeMap = new Map();
		      typeList = [];
		      nConversions = 0;
		      addTypes([anyType], false);
		    } // initialize the types to the default list


		    clear();
		    addTypes(_types);
		    /**
		     * Removes all conversions, leaving the types alone.
		     */

		    function clearConversions() {
		      let typeName;

		      for (typeName of typeList) {
		        typeMap.get(typeName).conversionsTo = [];
		      }

		      nConversions = 0;
		    }
		    /**
		     * Find the type names that match a value.
		     * @param {*} value
		     * @return {string[]} Array of names of types for which
		     *                  the type test matches the value.
		     */


		    function findTypeNames(value) {
		      const matches = typeList.filter(name => {
		        const type = typeMap.get(name);
		        return !type.isAny && type.test(value);
		      });

		      if (matches.length) {
		        return matches;
		      }

		      return ['any'];
		    }
		    /**
		     * Check if an entity is a typed function created by any instance
		     * @param {any} entity
		     * @returns {boolean}
		     */


		    function isTypedFunction(entity) {
		      return entity && typeof entity === 'function' && '_typedFunctionData' in entity;
		    }
		    /**
		     * Find a specific signature from a (composed) typed function, for example:
		     *
		     *   typed.findSignature(fn, ['number', 'string'])
		     *   typed.findSignature(fn, 'number, string')
		     *   typed.findSignature(fn, 'number,string', {exact: true})
		     *
		     * This function findSignature will by default return the best match to
		     * the given signature, possibly employing type conversions.
		     *
		     * The (optional) third argument is a plain object giving options
		     * controlling the signature search. Currently the only implemented
		     * option is `exact`: if specified as true (default is false), only
		     * exact matches will be returned (i.e. signatures for which `fn` was
		     * directly defined). Note that a (possibly different) type matching
		     * `any`, or one or more instances of TYPE matching `...TYPE` are
		     * considered exact matches in this regard, as no conversions are used.
		     *
		     * This function returns a "signature" object, as does `typed.resolve()`,
		     * which is a plain object with four keys: `params` (the array of parameters
		     * for this signature), `fn` (the originally supplied function for this
		     * signature), `test` (a generated function that determines if an argument
		     * list matches this signature, and `implementation` (the function to call
		     * on a matching argument list, that performs conversions if necessary and
		     * then calls the originally supplied function).
		     *
		     * @param {Function} fn                   A typed-function
		     * @param {string | string[]} signature
		     *     Signature to be found, can be an array or a comma separated string.
		     * @param {object} options  Controls the signature search as documented
		     * @return {{ params: Param[], fn: function, test: function, implementation: function }}
		     *     Returns the matching signature, or throws an error when no signature
		     *     is found.
		     */


		    function findSignature(fn, signature, options) {
		      if (!isTypedFunction(fn)) {
		        throw new TypeError(NOT_TYPED_FUNCTION);
		      } // Canonicalize input


		      const exact = options && options.exact;
		      const stringSignature = Array.isArray(signature) ? signature.join(',') : signature;
		      const params = parseSignature(stringSignature);
		      const canonicalSignature = stringifyParams(params); // First hope we get lucky and exactly match a signature

		      if (!exact || canonicalSignature in fn.signatures) {
		        // OK, we can check the internal signatures
		        const match = fn._typedFunctionData.signatureMap.get(canonicalSignature);

		        if (match) {
		          return match;
		        }
		      } // Oh well, we did not; so we have to go back and check the parameters
		      // one by one, in order to catch things like `any` and rest params.
		      // Note here we can assume there is at least one parameter, because
		      // the empty signature would have matched successfully above.


		      const nParams = params.length;
		      let remainingSignatures;

		      if (exact) {
		        remainingSignatures = [];
		        let name;

		        for (name in fn.signatures) {
		          remainingSignatures.push(fn._typedFunctionData.signatureMap.get(name));
		        }
		      } else {
		        remainingSignatures = fn._typedFunctionData.signatures;
		      }

		      for (let i = 0; i < nParams; ++i) {
		        const want = params[i];
		        const filteredSignatures = [];
		        let possibility;

		        for (possibility of remainingSignatures) {
		          const have = getParamAtIndex(possibility.params, i);

		          if (!have || want.restParam && !have.restParam) {
		            continue;
		          }

		          if (!have.hasAny) {
		            // have to check all of the wanted types are available
		            const haveTypes = paramTypeSet(have);

		            if (want.types.some(wtype => !haveTypes.has(wtype.name))) {
		              continue;
		            }
		          } // OK, this looks good


		          filteredSignatures.push(possibility);
		        }

		        remainingSignatures = filteredSignatures;
		        if (remainingSignatures.length === 0) break;
		      } // Return the first remaining signature that was totally matched:


		      let candidate;

		      for (candidate of remainingSignatures) {
		        if (candidate.params.length <= nParams) {
		          return candidate;
		        }
		      }

		      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + stringifyParams(params, ', ') + '))');
		    }
		    /**
		     * Find the proper function to call for a specific signature from
		     * a (composed) typed function, for example:
		     *
		     *   typed.find(fn, ['number', 'string'])
		     *   typed.find(fn, 'number, string')
		     *   typed.find(fn, 'number,string', {exact: true})
		     *
		     * This function find will by default return the best match to
		     * the given signature, possibly employing type conversions (and returning
		     * a function that will perform those conversions as needed). The
		     * (optional) third argument is a plain object giving options contolling
		     * the signature search. Currently only the option `exact` is implemented,
		     * which defaults to "false". If `exact` is specified as true, then only
		     * exact matches will be returned (i.e. signatures for which `fn` was
		     * directly defined). Uses of `any` and `...TYPE` are considered exact if
		     * no conversions are necessary to apply the corresponding function.
		     *
		     * @param {Function} fn                   A typed-function
		     * @param {string | string[]} signature
		     *     Signature to be found, can be an array or a comma separated string.
		     * @param {object} options  Controls the signature match as documented
		     * @return {function}
		     *     Returns the function to call for the given signature, or throws an
		     *     error if no match is found.
		     */


		    function find(fn, signature, options) {
		      return findSignature(fn, signature, options).implementation;
		    }
		    /**
		     * Convert a given value to another data type, specified by type name.
		     *
		     * @param {*} value
		     * @param {string} typeName
		     */


		    function convert(value, typeName) {
		      // check conversion is needed
		      const type = findType(typeName);

		      if (type.test(value)) {
		        return value;
		      }

		      const conversions = type.conversionsTo;

		      if (conversions.length === 0) {
		        throw new Error('There are no conversions to ' + typeName + ' defined.');
		      }

		      for (let i = 0; i < conversions.length; i++) {
		        const fromType = findType(conversions[i].from);

		        if (fromType.test(value)) {
		          return conversions[i].convert(value);
		        }
		      }

		      throw new Error('Cannot convert ' + value + ' to ' + typeName);
		    }
		    /**
		     * Stringify parameters in a normalized way
		     * @param {Param[]} params
		     * @param {string} [','] separator
		     * @return {string}
		     */


		    function stringifyParams(params) {
		      let separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';
		      return params.map(p => p.name).join(separator);
		    }
		    /**
		     * Parse a parameter, like "...number | boolean"
		     * @param {string} param
		     * @return {Param} param
		     */


		    function parseParam(param) {
		      const restParam = param.indexOf('...') === 0;
		      const types = !restParam ? param : param.length > 3 ? param.slice(3) : 'any';
		      const typeDefs = types.split('|').map(s => findType(s.trim()));
		      let hasAny = false;
		      let paramName = restParam ? '...' : '';
		      const exactTypes = typeDefs.map(function (type) {
		        hasAny = type.isAny || hasAny;
		        paramName += type.name + '|';
		        return {
		          name: type.name,
		          typeIndex: type.index,
		          test: type.test,
		          isAny: type.isAny,
		          conversion: null,
		          conversionIndex: -1
		        };
		      });
		      return {
		        types: exactTypes,
		        name: paramName.slice(0, -1),
		        // remove trailing '|' from above
		        hasAny,
		        hasConversion: false,
		        restParam
		      };
		    }
		    /**
		     * Expands a parsed parameter with the types available from currently
		     * defined conversions.
		     * @param {Param} param
		     * @return {Param} param
		     */


		    function expandParam(param) {
		      const typeNames = param.types.map(t => t.name);
		      const matchingConversions = availableConversions(typeNames);
		      let hasAny = param.hasAny;
		      let newName = param.name;
		      const convertibleTypes = matchingConversions.map(function (conversion) {
		        const type = findType(conversion.from);
		        hasAny = type.isAny || hasAny;
		        newName += '|' + conversion.from;
		        return {
		          name: conversion.from,
		          typeIndex: type.index,
		          test: type.test,
		          isAny: type.isAny,
		          conversion,
		          conversionIndex: conversion.index
		        };
		      });
		      return {
		        types: param.types.concat(convertibleTypes),
		        name: newName,
		        hasAny,
		        hasConversion: convertibleTypes.length > 0,
		        restParam: param.restParam
		      };
		    }
		    /**
		     * Return the set of type names in a parameter.
		     * Caches the result for efficiency
		     *
		     * @param {Param} param
		     * @return {Set<string>} typenames
		     */


		    function paramTypeSet(param) {
		      if (!param.typeSet) {
		        param.typeSet = new Set();
		        param.types.forEach(type => param.typeSet.add(type.name));
		      }

		      return param.typeSet;
		    }
		    /**
		     * Parse a signature with comma separated parameters,
		     * like "number | boolean, ...string"
		     *
		     * @param {string} signature
		     * @return {Param[]} params
		     */


		    function parseSignature(rawSignature) {
		      const params = [];

		      if (typeof rawSignature !== 'string') {
		        throw new TypeError('Signatures must be strings');
		      }

		      const signature = rawSignature.trim();

		      if (signature === '') {
		        return params;
		      }

		      const rawParams = signature.split(',');

		      for (let i = 0; i < rawParams.length; ++i) {
		        const parsedParam = parseParam(rawParams[i].trim());

		        if (parsedParam.restParam && i !== rawParams.length - 1) {
		          throw new SyntaxError('Unexpected rest parameter "' + rawParams[i] + '": ' + 'only allowed for the last parameter');
		        } // if invalid, short-circuit (all the types may have been filtered)


		        if (parsedParam.types.length === 0) {
		          return null;
		        }

		        params.push(parsedParam);
		      }

		      return params;
		    }
		    /**
		     * Test whether a set of params contains a restParam
		     * @param {Param[]} params
		     * @return {boolean} Returns true when the last parameter is a restParam
		     */


		    function hasRestParam(params) {
		      const param = last(params);
		      return param ? param.restParam : false;
		    }
		    /**
		     * Create a type test for a single parameter, which can have one or multiple
		     * types.
		     * @param {Param} param
		     * @return {function(x: *) : boolean} Returns a test function
		     */


		    function compileTest(param) {
		      if (!param || param.types.length === 0) {
		        // nothing to do
		        return ok;
		      } else if (param.types.length === 1) {
		        return findType(param.types[0].name).test;
		      } else if (param.types.length === 2) {
		        const test0 = findType(param.types[0].name).test;
		        const test1 = findType(param.types[1].name).test;
		        return function or(x) {
		          return test0(x) || test1(x);
		        };
		      } else {
		        // param.types.length > 2
		        const tests = param.types.map(function (type) {
		          return findType(type.name).test;
		        });
		        return function or(x) {
		          for (let i = 0; i < tests.length; i++) {
		            if (tests[i](x)) {
		              return true;
		            }
		          }

		          return false;
		        };
		      }
		    }
		    /**
		     * Create a test for all parameters of a signature
		     * @param {Param[]} params
		     * @return {function(args: Array<*>) : boolean}
		     */


		    function compileTests(params) {
		      let tests, test0, test1;

		      if (hasRestParam(params)) {
		        // variable arguments like '...number'
		        tests = initial(params).map(compileTest);
		        const varIndex = tests.length;
		        const lastTest = compileTest(last(params));

		        const testRestParam = function (args) {
		          for (let i = varIndex; i < args.length; i++) {
		            if (!lastTest(args[i])) {
		              return false;
		            }
		          }

		          return true;
		        };

		        return function testArgs(args) {
		          for (let i = 0; i < tests.length; i++) {
		            if (!tests[i](args[i])) {
		              return false;
		            }
		          }

		          return testRestParam(args) && args.length >= varIndex + 1;
		        };
		      } else {
		        // no variable arguments
		        if (params.length === 0) {
		          return function testArgs(args) {
		            return args.length === 0;
		          };
		        } else if (params.length === 1) {
		          test0 = compileTest(params[0]);
		          return function testArgs(args) {
		            return test0(args[0]) && args.length === 1;
		          };
		        } else if (params.length === 2) {
		          test0 = compileTest(params[0]);
		          test1 = compileTest(params[1]);
		          return function testArgs(args) {
		            return test0(args[0]) && test1(args[1]) && args.length === 2;
		          };
		        } else {
		          // arguments.length > 2
		          tests = params.map(compileTest);
		          return function testArgs(args) {
		            for (let i = 0; i < tests.length; i++) {
		              if (!tests[i](args[i])) {
		                return false;
		              }
		            }

		            return args.length === tests.length;
		          };
		        }
		      }
		    }
		    /**
		     * Find the parameter at a specific index of a Params list.
		     * Handles rest parameters.
		     * @param {Param[]} params
		     * @param {number} index
		     * @return {Param | null} Returns the matching parameter when found,
		     *                        null otherwise.
		     */


		    function getParamAtIndex(params, index) {
		      return index < params.length ? params[index] : hasRestParam(params) ? last(params) : null;
		    }
		    /**
		     * Get all type names of a parameter
		     * @param {Params[]} params
		     * @param {number} index
		     * @return {string[]} Returns an array with type names
		     */


		    function getTypeSetAtIndex(params, index) {
		      const param = getParamAtIndex(params, index);

		      if (!param) {
		        return new Set();
		      }

		      return paramTypeSet(param);
		    }
		    /**
		     * Test whether a type is an exact type or conversion
		     * @param {Type} type
		     * @return {boolean} Returns true when
		     */


		    function isExactType(type) {
		      return type.conversion === null || type.conversion === undefined;
		    }
		    /**
		     * Helper function for creating error messages: create an array with
		     * all available types on a specific argument index.
		     * @param {Signature[]} signatures
		     * @param {number} index
		     * @return {string[]} Returns an array with available types
		     */


		    function mergeExpectedParams(signatures, index) {
		      const typeSet = new Set();
		      signatures.forEach(signature => {
		        const paramSet = getTypeSetAtIndex(signature.params, index);
		        let name;

		        for (name of paramSet) {
		          typeSet.add(name);
		        }
		      });
		      return typeSet.has('any') ? ['any'] : Array.from(typeSet);
		    }
		    /**
		     * Create
		     * @param {string} name             The name of the function
		     * @param {array.<*>} args          The actual arguments passed to the function
		     * @param {Signature[]} signatures  A list with available signatures
		     * @return {TypeError} Returns a type error with additional data
		     *                     attached to it in the property `data`
		     */


		    function createError(name, args, signatures) {
		      let err, expected;

		      const _name = name || 'unnamed'; // test for wrong type at some index


		      let matchingSignatures = signatures;
		      let index;

		      for (index = 0; index < args.length; index++) {
		        const nextMatchingDefs = [];
		        matchingSignatures.forEach(signature => {
		          const param = getParamAtIndex(signature.params, index);
		          const test = compileTest(param);

		          if ((index < signature.params.length || hasRestParam(signature.params)) && test(args[index])) {
		            nextMatchingDefs.push(signature);
		          }
		        });

		        if (nextMatchingDefs.length === 0) {
		          // no matching signatures anymore, throw error "wrong type"
		          expected = mergeExpectedParams(matchingSignatures, index);

		          if (expected.length > 0) {
		            const actualTypes = findTypeNames(args[index]);
		            err = new TypeError('Unexpected type of argument in function ' + _name + ' (expected: ' + expected.join(' or ') + ', actual: ' + actualTypes.join(' | ') + ', index: ' + index + ')');
		            err.data = {
		              category: 'wrongType',
		              fn: _name,
		              index,
		              actual: actualTypes,
		              expected
		            };
		            return err;
		          }
		        } else {
		          matchingSignatures = nextMatchingDefs;
		        }
		      } // test for too few arguments


		      const lengths = matchingSignatures.map(function (signature) {
		        return hasRestParam(signature.params) ? Infinity : signature.params.length;
		      });

		      if (args.length < Math.min.apply(null, lengths)) {
		        expected = mergeExpectedParams(matchingSignatures, index);
		        err = new TypeError('Too few arguments in function ' + _name + ' (expected: ' + expected.join(' or ') + ', index: ' + args.length + ')');
		        err.data = {
		          category: 'tooFewArgs',
		          fn: _name,
		          index: args.length,
		          expected
		        };
		        return err;
		      } // test for too many arguments


		      const maxLength = Math.max.apply(null, lengths);

		      if (args.length > maxLength) {
		        err = new TypeError('Too many arguments in function ' + _name + ' (expected: ' + maxLength + ', actual: ' + args.length + ')');
		        err.data = {
		          category: 'tooManyArgs',
		          fn: _name,
		          index: args.length,
		          expectedLength: maxLength
		        };
		        return err;
		      } // Generic error


		      const argTypes = [];

		      for (let i = 0; i < args.length; ++i) {
		        argTypes.push(findTypeNames(args[i]).join('|'));
		      }

		      err = new TypeError('Arguments of type "' + argTypes.join(', ') + '" do not match any of the defined signatures of function ' + _name + '.');
		      err.data = {
		        category: 'mismatch',
		        actual: argTypes
		      };
		      return err;
		    }
		    /**
		     * Find the lowest index of all exact types of a parameter (no conversions)
		     * @param {Param} param
		     * @return {number} Returns the index of the lowest type in typed.types
		     */


		    function getLowestTypeIndex(param) {
		      let min = typeList.length + 1;

		      for (let i = 0; i < param.types.length; i++) {
		        if (isExactType(param.types[i])) {
		          min = Math.min(min, param.types[i].typeIndex);
		        }
		      }

		      return min;
		    }
		    /**
		     * Find the lowest index of the conversion of all types of the parameter
		     * having a conversion
		     * @param {Param} param
		     * @return {number} Returns the lowest index of the conversions of this type
		     */


		    function getLowestConversionIndex(param) {
		      let min = nConversions + 1;

		      for (let i = 0; i < param.types.length; i++) {
		        if (!isExactType(param.types[i])) {
		          min = Math.min(min, param.types[i].conversionIndex);
		        }
		      }

		      return min;
		    }
		    /**
		     * Compare two params
		     * @param {Param} param1
		     * @param {Param} param2
		     * @return {number} returns -1 when param1 must get a lower
		     *                  index than param2, 1 when the opposite,
		     *                  or zero when both are equal
		     */


		    function compareParams(param1, param2) {
		      // We compare a number of metrics on a param in turn:
		      // 1) 'any' parameters are the least preferred
		      if (param1.hasAny) {
		        if (!param2.hasAny) {
		          return 1;
		        }
		      } else if (param2.hasAny) {
		        return -1;
		      } // 2) Prefer non-rest to rest parameters


		      if (param1.restParam) {
		        if (!param2.restParam) {
		          return 1;
		        }
		      } else if (param2.restParam) {
		        return -1;
		      } // 3) Prefer exact type match to conversions


		      if (param1.hasConversion) {
		        if (!param2.hasConversion) {
		          return 1;
		        }
		      } else if (param2.hasConversion) {
		        return -1;
		      } // 4) Prefer lower type index:


		      const typeDiff = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);

		      if (typeDiff < 0) {
		        return -1;
		      }

		      if (typeDiff > 0) {
		        return 1;
		      } // 5) Prefer lower conversion index


		      const convDiff = getLowestConversionIndex(param1) - getLowestConversionIndex(param2);

		      if (convDiff < 0) {
		        return -1;
		      }

		      if (convDiff > 0) {
		        return 1;
		      } // Don't have a basis for preference


		      return 0;
		    }
		    /**
		     * Compare two signatures
		     * @param {Signature} signature1
		     * @param {Signature} signature2
		     * @return {number} returns a negative number when param1 must get a lower
		     *                  index than param2, a positive number when the opposite,
		     *                  or zero when both are equal
		     */


		    function compareSignatures(signature1, signature2) {
		      const pars1 = signature1.params;
		      const pars2 = signature2.params;
		      const last1 = last(pars1);
		      const last2 = last(pars2);
		      const hasRest1 = hasRestParam(pars1);
		      const hasRest2 = hasRestParam(pars2); // We compare a number of metrics on signatures in turn:
		      // 1) An "any rest param" is least preferred

		      if (hasRest1 && last1.hasAny) {
		        if (!hasRest2 || !last2.hasAny) {
		          return 1;
		        }
		      } else if (hasRest2 && last2.hasAny) {
		        return -1;
		      } // 2) Minimize the number of 'any' parameters


		      let any1 = 0;
		      let conv1 = 0;
		      let par;

		      for (par of pars1) {
		        if (par.hasAny) ++any1;
		        if (par.hasConversion) ++conv1;
		      }

		      let any2 = 0;
		      let conv2 = 0;

		      for (par of pars2) {
		        if (par.hasAny) ++any2;
		        if (par.hasConversion) ++conv2;
		      }

		      if (any1 !== any2) {
		        return any1 - any2;
		      } // 3) A conversion rest param is less preferred


		      if (hasRest1 && last1.hasConversion) {
		        if (!hasRest2 || !last2.hasConversion) {
		          return 1;
		        }
		      } else if (hasRest2 && last2.hasConversion) {
		        return -1;
		      } // 4) Minimize the number of conversions


		      if (conv1 !== conv2) {
		        return conv1 - conv2;
		      } // 5) Prefer no rest param


		      if (hasRest1) {
		        if (!hasRest2) {
		          return 1;
		        }
		      } else if (hasRest2) {
		        return -1;
		      } // 6) Prefer shorter with rest param, longer without


		      const lengthCriterion = (pars1.length - pars2.length) * (hasRest1 ? -1 : 1);

		      if (lengthCriterion !== 0) {
		        return lengthCriterion;
		      } // Signatures are identical in each of the above metrics.
		      // In particular, they are the same length.
		      // We can therefore compare the parameters one by one.
		      // First we count which signature has more preferred parameters.


		      const comparisons = [];
		      let tc = 0;

		      for (let i = 0; i < pars1.length; ++i) {
		        const thisComparison = compareParams(pars1[i], pars2[i]);
		        comparisons.push(thisComparison);
		        tc += thisComparison;
		      }

		      if (tc !== 0) {
		        return tc;
		      } // They have the same number of preferred parameters, so go by the
		      // earliest parameter in which we have a preference.
		      // In other words, dispatch is driven somewhat more by earlier
		      // parameters than later ones.


		      let c;

		      for (c of comparisons) {
		        if (c !== 0) {
		          return c;
		        }
		      } // It's a tossup:


		      return 0;
		    }
		    /**
		     * Produce a list of all conversions from distinct types to one of
		     * the given types.
		     *
		     * @param {string[]} typeNames
		     * @return {ConversionDef[]} Returns the conversions that are available
		     *                        resulting in any given type (if any)
		     */


		    function availableConversions(typeNames) {
		      if (typeNames.length === 0) {
		        return [];
		      }

		      const types = typeNames.map(findType);

		      if (typeNames.length > 1) {
		        types.sort((t1, t2) => t1.index - t2.index);
		      }

		      let matches = types[0].conversionsTo;

		      if (typeNames.length === 1) {
		        return matches;
		      }

		      matches = matches.concat([]); // shallow copy the matches
		      // Since the types are now in index order, we just want the first
		      // occurrence of any from type:

		      const knownTypes = new Set(typeNames);

		      for (let i = 1; i < types.length; ++i) {
		        let newMatch;

		        for (newMatch of types[i].conversionsTo) {
		          if (!knownTypes.has(newMatch.from)) {
		            matches.push(newMatch);
		            knownTypes.add(newMatch.from);
		          }
		        }
		      }

		      return matches;
		    }
		    /**
		     * Preprocess arguments before calling the original function:
		     * - if needed convert the parameters
		     * - in case of rest parameters, move the rest parameters into an Array
		     * @param {Param[]} params
		     * @param {function} fn
		     * @return {function} Returns a wrapped function
		     */


		    function compileArgsPreprocessing(params, fn) {
		      let fnConvert = fn; // TODO: can we make this wrapper function smarter/simpler?

		      if (params.some(p => p.hasConversion)) {
		        const restParam = hasRestParam(params);
		        const compiledConversions = params.map(compileArgConversion);

		        fnConvert = function convertArgs() {
		          const args = [];
		          const last = restParam ? arguments.length - 1 : arguments.length;

		          for (let i = 0; i < last; i++) {
		            args[i] = compiledConversions[i](arguments[i]);
		          }

		          if (restParam) {
		            args[last] = arguments[last].map(compiledConversions[last]);
		          }

		          return fn.apply(this, args);
		        };
		      }

		      let fnPreprocess = fnConvert;

		      if (hasRestParam(params)) {
		        const offset = params.length - 1;

		        fnPreprocess = function preprocessRestParams() {
		          return fnConvert.apply(this, slice(arguments, 0, offset).concat([slice(arguments, offset)]));
		        };
		      }

		      return fnPreprocess;
		    }
		    /**
		     * Compile conversion for a parameter to the right type
		     * @param {Param} param
		     * @return {function} Returns the wrapped function that will convert arguments
		     *
		     */


		    function compileArgConversion(param) {
		      let test0, test1, conversion0, conversion1;
		      const tests = [];
		      const conversions = [];
		      param.types.forEach(function (type) {
		        if (type.conversion) {
		          tests.push(findType(type.conversion.from).test);
		          conversions.push(type.conversion.convert);
		        }
		      }); // create optimized conversion functions depending on the number of conversions

		      switch (conversions.length) {
		        case 0:
		          return function convertArg(arg) {
		            return arg;
		          };

		        case 1:
		          test0 = tests[0];
		          conversion0 = conversions[0];
		          return function convertArg(arg) {
		            if (test0(arg)) {
		              return conversion0(arg);
		            }

		            return arg;
		          };

		        case 2:
		          test0 = tests[0];
		          test1 = tests[1];
		          conversion0 = conversions[0];
		          conversion1 = conversions[1];
		          return function convertArg(arg) {
		            if (test0(arg)) {
		              return conversion0(arg);
		            }

		            if (test1(arg)) {
		              return conversion1(arg);
		            }

		            return arg;
		          };

		        default:
		          return function convertArg(arg) {
		            for (let i = 0; i < conversions.length; i++) {
		              if (tests[i](arg)) {
		                return conversions[i](arg);
		              }
		            }

		            return arg;
		          };
		      }
		    }
		    /**
		     * Split params with union types in to separate params.
		     *
		     * For example:
		     *
		     *     splitParams([['Array', 'Object'], ['string', 'RegExp'])
		     *     // returns:
		     *     // [
		     *     //   ['Array', 'string'],
		     *     //   ['Array', 'RegExp'],
		     *     //   ['Object', 'string'],
		     *     //   ['Object', 'RegExp']
		     *     // ]
		     *
		     * @param {Param[]} params
		     * @return {Param[]}
		     */


		    function splitParams(params) {
		      function _splitParams(params, index, paramsSoFar) {
		        if (index < params.length) {
		          const param = params[index];
		          let resultingParams = [];

		          if (param.restParam) {
		            // split the types of a rest parameter in two:
		            // one with only exact types, and one with exact types and conversions
		            const exactTypes = param.types.filter(isExactType);

		            if (exactTypes.length < param.types.length) {
		              resultingParams.push({
		                types: exactTypes,
		                name: '...' + exactTypes.map(t => t.name).join('|'),
		                hasAny: exactTypes.some(t => t.isAny),
		                hasConversion: false,
		                restParam: true
		              });
		            }

		            resultingParams.push(param);
		          } else {
		            // split all the types of a regular parameter into one type per param
		            resultingParams = param.types.map(function (type) {
		              return {
		                types: [type],
		                name: type.name,
		                hasAny: type.isAny,
		                hasConversion: type.conversion,
		                restParam: false
		              };
		            });
		          } // recurse over the groups with types


		          return flatMap(resultingParams, function (nextParam) {
		            return _splitParams(params, index + 1, paramsSoFar.concat([nextParam]));
		          });
		        } else {
		          // we've reached the end of the parameters.
		          return [paramsSoFar];
		        }
		      }

		      return _splitParams(params, 0, []);
		    }
		    /**
		     * Test whether two param lists represent conflicting signatures
		     * @param {Param[]} params1
		     * @param {Param[]} params2
		     * @return {boolean} Returns true when the signatures conflict, false otherwise.
		     */


		    function conflicting(params1, params2) {
		      const ii = Math.max(params1.length, params2.length);

		      for (let i = 0; i < ii; i++) {
		        const typeSet1 = getTypeSetAtIndex(params1, i);
		        const typeSet2 = getTypeSetAtIndex(params2, i);
		        let overlap = false;
		        let name;

		        for (name of typeSet2) {
		          if (typeSet1.has(name)) {
		            overlap = true;
		            break;
		          }
		        }

		        if (!overlap) {
		          return false;
		        }
		      }

		      const len1 = params1.length;
		      const len2 = params2.length;
		      const restParam1 = hasRestParam(params1);
		      const restParam2 = hasRestParam(params2);
		      return restParam1 ? restParam2 ? len1 === len2 : len2 >= len1 : restParam2 ? len1 >= len2 : len1 === len2;
		    }
		    /**
		     * Helper function for `resolveReferences` that returns a copy of
		     * functionList wihe any prior resolutions cleared out, in case we are
		     * recycling signatures from a prior typed function construction.
		     *
		     * @param {Array.<function|typed-reference>} functionList
		     * @return {Array.<function|typed-reference>}
		     */


		    function clearResolutions(functionList) {
		      return functionList.map(fn => {
		        if (isReferToSelf(fn)) {
		          return referToSelf(fn.referToSelf.callback);
		        }

		        if (isReferTo(fn)) {
		          return makeReferTo(fn.referTo.references, fn.referTo.callback);
		        }

		        return fn;
		      });
		    }
		    /**
		     * Take a list of references, a list of functions functionList, and a
		     * signatureMap indexing signatures into functionList, and return
		     * the list of resolutions, or a false-y value if they don't all
		     * resolve in a valid way (yet).
		     *
		     * @param {string[]} references
		     * @param {Array<function|typed-reference} functionList
		     * @param {Object.<string, integer>} signatureMap
		     * @return {function[] | false} resolutions
		     */


		    function collectResolutions(references, functionList, signatureMap) {
		      const resolvedReferences = [];
		      let reference;

		      for (reference of references) {
		        let resolution = signatureMap[reference];

		        if (typeof resolution !== 'number') {
		          throw new TypeError('No definition for referenced signature "' + reference + '"');
		        }

		        resolution = functionList[resolution];

		        if (typeof resolution !== 'function') {
		          return false;
		        }

		        resolvedReferences.push(resolution);
		      }

		      return resolvedReferences;
		    }
		    /**
		     * Resolve any references in the functionList for the typed function
		     * itself. The signatureMap tells which index in the functionList a
		     * given signature should be mapped to (for use in resolving typed.referTo)
		     * and self provides the destions of a typed.referToSelf.
		     *
		     * @param {Array<function | typed-reference-object>} functionList
		     * @param {Object.<string, function>} signatureMap
		     * @param {function} self  The typed-function itself
		     * @return {Array<function>} The list of resolved functions
		     */


		    function resolveReferences(functionList, signatureMap, self) {
		      const resolvedFunctions = clearResolutions(functionList);
		      const isResolved = new Array(resolvedFunctions.length).fill(false);
		      let leftUnresolved = true;

		      while (leftUnresolved) {
		        leftUnresolved = false;
		        let nothingResolved = true;

		        for (let i = 0; i < resolvedFunctions.length; ++i) {
		          if (isResolved[i]) continue;
		          const fn = resolvedFunctions[i];

		          if (isReferToSelf(fn)) {
		            resolvedFunctions[i] = fn.referToSelf.callback(self); // Preserve reference in case signature is reused someday:

		            resolvedFunctions[i].referToSelf = fn.referToSelf;
		            isResolved[i] = true;
		            nothingResolved = false;
		          } else if (isReferTo(fn)) {
		            const resolvedReferences = collectResolutions(fn.referTo.references, resolvedFunctions, signatureMap);

		            if (resolvedReferences) {
		              resolvedFunctions[i] = fn.referTo.callback.apply(this, resolvedReferences); // Preserve reference in case signature is reused someday:

		              resolvedFunctions[i].referTo = fn.referTo;
		              isResolved[i] = true;
		              nothingResolved = false;
		            } else {
		              leftUnresolved = true;
		            }
		          }
		        }

		        if (nothingResolved && leftUnresolved) {
		          throw new SyntaxError('Circular reference detected in resolving typed.referTo');
		        }
		      }

		      return resolvedFunctions;
		    }
		    /**
		     * Validate whether any of the function bodies contains a self-reference
		     * usage like `this(...)` or `this.signatures`. This self-referencing is
		     * deprecated since typed-function v3. It has been replaced with
		     * the functions typed.referTo and typed.referToSelf.
		     * @param {Object.<string, function>} signaturesMap
		     */


		    function validateDeprecatedThis(signaturesMap) {
		      // TODO: remove this deprecation warning logic some day (it's introduced in v3)
		      // match occurrences like 'this(' and 'this.signatures'
		      const deprecatedThisRegex = /\bthis(\(|\.signatures\b)/;
		      Object.keys(signaturesMap).forEach(signature => {
		        const fn = signaturesMap[signature];

		        if (deprecatedThisRegex.test(fn.toString())) {
		          throw new SyntaxError('Using `this` to self-reference a function ' + 'is deprecated since typed-function@3. ' + 'Use typed.referTo and typed.referToSelf instead.');
		        }
		      });
		    }
		    /**
		     * Create a typed function
		     * @param {String} name               The name for the typed function
		     * @param {Object.<string, function>} rawSignaturesMap
		     *                                    An object with one or
		     *                                    multiple signatures as key, and the
		     *                                    function corresponding to the
		     *                                    signature as value.
		     * @return {function}  Returns the created typed function.
		     */


		    function createTypedFunction(name, rawSignaturesMap) {
		      typed.createCount++;

		      if (Object.keys(rawSignaturesMap).length === 0) {
		        throw new SyntaxError('No signatures provided');
		      }

		      if (typed.warnAgainstDeprecatedThis) {
		        validateDeprecatedThis(rawSignaturesMap);
		      } // Main processing loop for signatures


		      const parsedParams = [];
		      const originalFunctions = [];
		      const signaturesMap = {};
		      const preliminarySignatures = []; // may have duplicates from conversions

		      let signature;

		      for (signature in rawSignaturesMap) {
		        // A) Protect against polluted Object prototype:
		        if (!Object.prototype.hasOwnProperty.call(rawSignaturesMap, signature)) {
		          continue;
		        } // B) Parse the signature


		        const params = parseSignature(signature);
		        if (!params) continue; // C) Check for conflicts

		        parsedParams.forEach(function (pp) {
		          if (conflicting(pp, params)) {
		            throw new TypeError('Conflicting signatures "' + stringifyParams(pp) + '" and "' + stringifyParams(params) + '".');
		          }
		        });
		        parsedParams.push(params); // D) Store the provided function and add conversions

		        const functionIndex = originalFunctions.length;
		        originalFunctions.push(rawSignaturesMap[signature]);
		        const conversionParams = params.map(expandParam); // E) Split the signatures and collect them up

		        let sp;

		        for (sp of splitParams(conversionParams)) {
		          const spName = stringifyParams(sp);
		          preliminarySignatures.push({
		            params: sp,
		            name: spName,
		            fn: functionIndex
		          });

		          if (sp.every(p => !p.hasConversion)) {
		            signaturesMap[spName] = functionIndex;
		          }
		        }
		      }

		      preliminarySignatures.sort(compareSignatures); // Note the forward reference to theTypedFn

		      const resolvedFunctions = resolveReferences(originalFunctions, signaturesMap, theTypedFn); // Fill in the proper function for each signature

		      let s;

		      for (s in signaturesMap) {
		        if (Object.prototype.hasOwnProperty.call(signaturesMap, s)) {
		          signaturesMap[s] = resolvedFunctions[signaturesMap[s]];
		        }
		      }

		      const signatures = [];
		      const internalSignatureMap = new Map(); // benchmarks faster than object

		      for (s of preliminarySignatures) {
		        // Note it's only safe to eliminate duplicates like this
		        // _after_ the signature sorting step above; otherwise we might
		        // remove the wrong one.
		        if (!internalSignatureMap.has(s.name)) {
		          s.fn = resolvedFunctions[s.fn];
		          signatures.push(s);
		          internalSignatureMap.set(s.name, s);
		        }
		      } // we create a highly optimized checks for the first couple of signatures with max 2 arguments


		      const ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);
		      const ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);
		      const ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);
		      const ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);
		      const ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);
		      const ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);
		      const allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5; // compile the tests

		      for (let i = 0; i < signatures.length; ++i) {
		        signatures[i].test = compileTests(signatures[i].params);
		      }

		      const test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;
		      const test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;
		      const test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;
		      const test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;
		      const test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;
		      const test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;
		      const test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;
		      const test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;
		      const test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;
		      const test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;
		      const test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;
		      const test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk; // compile the functions

		      for (let i = 0; i < signatures.length; ++i) {
		        signatures[i].implementation = compileArgsPreprocessing(signatures[i].params, signatures[i].fn);
		      }

		      const fn0 = ok0 ? signatures[0].implementation : undef;
		      const fn1 = ok1 ? signatures[1].implementation : undef;
		      const fn2 = ok2 ? signatures[2].implementation : undef;
		      const fn3 = ok3 ? signatures[3].implementation : undef;
		      const fn4 = ok4 ? signatures[4].implementation : undef;
		      const fn5 = ok5 ? signatures[5].implementation : undef;
		      const len0 = ok0 ? signatures[0].params.length : -1;
		      const len1 = ok1 ? signatures[1].params.length : -1;
		      const len2 = ok2 ? signatures[2].params.length : -1;
		      const len3 = ok3 ? signatures[3].params.length : -1;
		      const len4 = ok4 ? signatures[4].params.length : -1;
		      const len5 = ok5 ? signatures[5].params.length : -1; // simple and generic, but also slow

		      const iStart = allOk ? 6 : 0;
		      const iEnd = signatures.length; // de-reference ahead for execution speed:

		      const tests = signatures.map(s => s.test);
		      const fns = signatures.map(s => s.implementation);

		      const generic = function generic() {

		        for (let i = iStart; i < iEnd; i++) {
		          if (tests[i](arguments)) {
		            return fns[i].apply(this, arguments);
		          }
		        }

		        return typed.onMismatch(name, arguments, signatures);
		      }; // create the typed function
		      // fast, specialized version. Falls back to the slower, generic one if needed


		      function theTypedFn(arg0, arg1) {

		        if (arguments.length === len0 && test00(arg0) && test01(arg1)) {
		          return fn0.apply(this, arguments);
		        }

		        if (arguments.length === len1 && test10(arg0) && test11(arg1)) {
		          return fn1.apply(this, arguments);
		        }

		        if (arguments.length === len2 && test20(arg0) && test21(arg1)) {
		          return fn2.apply(this, arguments);
		        }

		        if (arguments.length === len3 && test30(arg0) && test31(arg1)) {
		          return fn3.apply(this, arguments);
		        }

		        if (arguments.length === len4 && test40(arg0) && test41(arg1)) {
		          return fn4.apply(this, arguments);
		        }

		        if (arguments.length === len5 && test50(arg0) && test51(arg1)) {
		          return fn5.apply(this, arguments);
		        }

		        return generic.apply(this, arguments);
		      } // attach name the typed function


		      try {
		        Object.defineProperty(theTypedFn, 'name', {
		          value: name
		        });
		      } catch (err) {// old browsers do not support Object.defineProperty and some don't support setting the name property
		        // the function name is not essential for the functioning, it's mostly useful for debugging,
		        // so it's fine to have unnamed functions.
		      } // attach signatures to the function.
		      // This property is close to the original collection of signatures
		      // used to create the typed-function, just with unions split:


		      theTypedFn.signatures = signaturesMap; // Store internal data for functions like resolve, find, etc.
		      // Also serves as the flag that this is a typed-function

		      theTypedFn._typedFunctionData = {
		        signatures,
		        signatureMap: internalSignatureMap
		      };
		      return theTypedFn;
		    }
		    /**
		     * Action to take on mismatch
		     * @param {string} name      Name of function that was attempted to be called
		     * @param {Array} args       Actual arguments to the call
		     * @param {Array} signatures Known signatures of the named typed-function
		     */


		    function _onMismatch(name, args, signatures) {
		      throw createError(name, args, signatures);
		    }
		    /**
		     * Return all but the last items of an array or function Arguments
		     * @param {Array | Arguments} arr
		     * @return {Array}
		     */


		    function initial(arr) {
		      return slice(arr, 0, arr.length - 1);
		    }
		    /**
		     * return the last item of an array or function Arguments
		     * @param {Array | Arguments} arr
		     * @return {*}
		     */


		    function last(arr) {
		      return arr[arr.length - 1];
		    }
		    /**
		     * Slice an array or function Arguments
		     * @param {Array | Arguments | IArguments} arr
		     * @param {number} start
		     * @param {number} [end]
		     * @return {Array}
		     */


		    function slice(arr, start, end) {
		      return Array.prototype.slice.call(arr, start, end);
		    }
		    /**
		     * Return the first item from an array for which test(arr[i]) returns true
		     * @param {Array} arr
		     * @param {function} test
		     * @return {* | undefined} Returns the first matching item
		     *                         or undefined when there is no match
		     */


		    function findInArray(arr, test) {
		      for (let i = 0; i < arr.length; i++) {
		        if (test(arr[i])) {
		          return arr[i];
		        }
		      }

		      return undefined;
		    }
		    /**
		     * Flat map the result invoking a callback for every item in an array.
		     * https://gist.github.com/samgiles/762ee337dff48623e729
		     * @param {Array} arr
		     * @param {function} callback
		     * @return {Array}
		     */


		    function flatMap(arr, callback) {
		      return Array.prototype.concat.apply([], arr.map(callback));
		    }
		    /**
		     * Create a reference callback to one or multiple signatures
		     *
		     * Syntax:
		     *
		     *     typed.referTo(signature1, signature2, ..., function callback(fn1, fn2, ...) {
		     *       // ...
		     *     })
		     *
		     * @returns {{referTo: {references: string[], callback}}}
		     */


		    function referTo() {
		      const references = initial(arguments).map(s => stringifyParams(parseSignature(s)));
		      const callback = last(arguments);

		      if (typeof callback !== 'function') {
		        throw new TypeError('Callback function expected as last argument');
		      }

		      return makeReferTo(references, callback);
		    }

		    function makeReferTo(references, callback) {
		      return {
		        referTo: {
		          references,
		          callback
		        }
		      };
		    }
		    /**
		     * Create a reference callback to the typed-function itself
		     *
		     * @param {(self: function) => function} callback
		     * @returns {{referToSelf: { callback: function }}}
		     */


		    function referToSelf(callback) {
		      if (typeof callback !== 'function') {
		        throw new TypeError('Callback function expected as first argument');
		      }

		      return {
		        referToSelf: {
		          callback
		        }
		      };
		    }
		    /**
		     * Test whether something is a referTo object, holding a list with reference
		     * signatures and a callback.
		     *
		     * @param {Object | function} objectOrFn
		     * @returns {boolean}
		     */


		    function isReferTo(objectOrFn) {
		      return objectOrFn && typeof objectOrFn.referTo === 'object' && Array.isArray(objectOrFn.referTo.references) && typeof objectOrFn.referTo.callback === 'function';
		    }
		    /**
		     * Test whether something is a referToSelf object, holding a callback where
		     * to pass `self`.
		     *
		     * @param {Object | function} objectOrFn
		     * @returns {boolean}
		     */


		    function isReferToSelf(objectOrFn) {
		      return objectOrFn && typeof objectOrFn.referToSelf === 'object' && typeof objectOrFn.referToSelf.callback === 'function';
		    }
		    /**
		     * Check if name is (A) new, (B) a match, or (C) a mismatch; and throw
		     * an error in case (C).
		     *
		     * @param { string | undefined } nameSoFar
		     * @param { string | undefined } newName
		     * @returns { string } updated name
		     */


		    function checkName(nameSoFar, newName) {
		      if (!nameSoFar) {
		        return newName;
		      }

		      if (newName && newName !== nameSoFar) {
		        const err = new Error('Function names do not match (expected: ' + nameSoFar + ', actual: ' + newName + ')');
		        err.data = {
		          actual: newName,
		          expected: nameSoFar
		        };
		        throw err;
		      }

		      return nameSoFar;
		    }
		    /**
		     * Retrieve the implied name from an object with signature keys
		     * and function values, checking whether all value names match
		     *
		     * @param { {string: function} } obj
		     */


		    function getObjectName(obj) {
		      let name;

		      for (const key in obj) {
		        // Only pay attention to own properties, and only if their values
		        // are typed functions or functions with a signature property
		        if (Object.prototype.hasOwnProperty.call(obj, key) && (isTypedFunction(obj[key]) || typeof obj[key].signature === 'string')) {
		          name = checkName(name, obj[key].name);
		        }
		      }

		      return name;
		    }
		    /**
		     * Copy all of the signatures from the second argument into the first,
		     * which is modified by side effect, checking for conflicts
		     *
		     * @param {Object.<string, function|typed-reference>} dest
		     * @param {Object.<string, function|typed-reference>} source
		     */


		    function mergeSignatures(dest, source) {
		      let key;

		      for (key in source) {
		        if (Object.prototype.hasOwnProperty.call(source, key)) {
		          if (key in dest) {
		            if (source[key] !== dest[key]) {
		              const err = new Error('Signature "' + key + '" is defined twice');
		              err.data = {
		                signature: key,
		                sourceFunction: source[key],
		                destFunction: dest[key]
		              };
		              throw err;
		            } // else: both signatures point to the same function, that's fine

		          }

		          dest[key] = source[key];
		        }
		      }
		    }

		    const saveTyped = typed;
		    /**
		     * Originally the main function was a typed function itself, but then
		     * it might not be able to generate error messages if the client
		     * replaced the type system with different names.
		     *
		     * Main entry: typed([name], functions/objects with signatures...)
		     *
		     * Assembles and returns a new typed-function from the given items
		     * that provide signatures and implementations, each of which may be
		     * * a plain object mapping (string) signatures to implementing functions,
		     * * a previously constructed typed function, or
		     * * any other single function with a string-valued property `signature`.
		      * The name of the resulting typed-function will be given by the
		     * string-valued name argument if present, or if not, by the name
		     * of any of the arguments that have one, as long as any that do are
		     * consistent with each other. If no name is specified, the name will be
		     * an empty string.
		     *
		     * @param {string} maybeName [optional]
		     * @param {(function|object)[]} signature providers
		     * @returns {typed-function}
		     */

		    typed = function (maybeName) {
		      const named = typeof maybeName === 'string';
		      const start = named ? 1 : 0;
		      let name = named ? maybeName : '';
		      const allSignatures = {};

		      for (let i = start; i < arguments.length; ++i) {
		        const item = arguments[i];
		        let theseSignatures = {};
		        let thisName;

		        if (typeof item === 'function') {
		          thisName = item.name;

		          if (typeof item.signature === 'string') {
		            // Case 1: Ordinary function with a string 'signature' property
		            theseSignatures[item.signature] = item;
		          } else if (isTypedFunction(item)) {
		            // Case 2: Existing typed function
		            theseSignatures = item.signatures;
		          }
		        } else if (isPlainObject(item)) {
		          // Case 3: Plain object, assume keys = signatures, values = functions
		          theseSignatures = item;

		          if (!named) {
		            thisName = getObjectName(item);
		          }
		        }

		        if (Object.keys(theseSignatures).length === 0) {
		          const err = new TypeError('Argument to \'typed\' at index ' + i + ' is not a (typed) function, ' + 'nor an object with signatures as keys and functions as values.');
		          err.data = {
		            index: i,
		            argument: item
		          };
		          throw err;
		        }

		        if (!named) {
		          name = checkName(name, thisName);
		        }

		        mergeSignatures(allSignatures, theseSignatures);
		      }

		      return createTypedFunction(name || '', allSignatures);
		    };

		    typed.create = create;
		    typed.createCount = saveTyped.createCount;
		    typed.onMismatch = _onMismatch;
		    typed.throwMismatchError = _onMismatch;
		    typed.createError = createError;
		    typed.clear = clear;
		    typed.clearConversions = clearConversions;
		    typed.addTypes = addTypes;
		    typed._findType = findType; // For unit testing only

		    typed.referTo = referTo;
		    typed.referToSelf = referToSelf;
		    typed.convert = convert;
		    typed.findSignature = findSignature;
		    typed.find = find;
		    typed.isTypedFunction = isTypedFunction;
		    typed.warnAgainstDeprecatedThis = true;
		    /**
		     * add a type (convenience wrapper for typed.addTypes)
		     * @param {{name: string, test: function}} type
		     * @param {boolean} [beforeObjectTest=true]
		     *                          If true, the new test will be inserted before
		     *                          the test with name 'Object' (if any), since
		     *                          tests for Object match Array and classes too.
		     */

		    typed.addType = function (type, beforeObjectTest) {
		      let before = 'any';

		      if (beforeObjectTest !== false && typeMap.has('Object')) {
		        before = 'Object';
		      }

		      typed.addTypes([type], before);
		    };
		    /**
		     * Verify that the ConversionDef conversion has a valid format.
		     *
		     * @param {conversionDef} conversion
		     * @return {void}
		     * @throws {TypeError|SyntaxError}
		     */


		    function _validateConversion(conversion) {
		      if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') {
		        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');
		      }

		      if (conversion.to === conversion.from) {
		        throw new SyntaxError('Illegal to define conversion from "' + conversion.from + '" to itself.');
		      }
		    }
		    /**
		     * Add a conversion
		     *
		     * @param {ConversionDef} conversion
		     * @returns {void}
		     * @throws {TypeError}
		     */


		    typed.addConversion = function (conversion) {
		      _validateConversion(conversion);

		      const to = findType(conversion.to);

		      if (to.conversionsTo.every(function (other) {
		        return other.from !== conversion.from;
		      })) {
		        to.conversionsTo.push({
		          from: conversion.from,
		          convert: conversion.convert,
		          index: nConversions++
		        });
		      } else {
		        throw new Error('There is already a conversion from "' + conversion.from + '" to "' + to.name + '"');
		      }
		    };
		    /**
		     * Convenience wrapper to call addConversion on each conversion in a list.
		     *
		     @param {ConversionDef[]} conversions
		     @returns {void}
		     @throws {TypeError}
		     */


		    typed.addConversions = function (conversions) {
		      conversions.forEach(typed.addConversion);
		    };
		    /**
		     * Remove the specified conversion. The format is the same as for
		     * addConversion, and the convert function must match or an error
		     * is thrown.
		     *
		     * @param {{from: string, to: string, convert: function}} conversion
		     * @returns {void}
		     * @throws {TypeError|SyntaxError|Error}
		     */


		    typed.removeConversion = function (conversion) {
		      _validateConversion(conversion);

		      const to = findType(conversion.to);
		      const existingConversion = findInArray(to.conversionsTo, c => c.from === conversion.from);

		      if (!existingConversion) {
		        throw new Error('Attempt to remove nonexistent conversion from ' + conversion.from + ' to ' + conversion.to);
		      }

		      if (existingConversion.convert !== conversion.convert) {
		        throw new Error('Conversion to remove does not match existing conversion');
		      }

		      const index = to.conversionsTo.indexOf(existingConversion);
		      to.conversionsTo.splice(index, 1);
		    };
		    /**
		     * Produce the specific signature that a typed function
		     * will execute on the given arguments. Here, a "signature" is an
		     * object with properties 'params', 'test', 'fn', and 'implementation'.
		     * This last property is a function that converts params as necessary
		     * and then calls 'fn'. Returns null if there is no matching signature.
		     * @param {typed-function} tf
		     * @param {any[]} argList
		     * @returns {{params: string, test: function, fn: function, implementation: function}}
		     */


		    typed.resolve = function (tf, argList) {
		      if (!isTypedFunction(tf)) {
		        throw new TypeError(NOT_TYPED_FUNCTION);
		      }

		      const sigs = tf._typedFunctionData.signatures;

		      for (let i = 0; i < sigs.length; ++i) {
		        if (sigs[i].test(argList)) {
		          return sigs[i];
		        }
		      }

		      return null;
		    };

		    return typed;
		  }

		  var typedFunction = create();

		  return typedFunction;

		}));
		
	} (typedFunction$1));

	var typedFunctionExports = typedFunction$1.exports;
	var typedFunction = /*@__PURE__*/getDefaultExportFromCjs(typedFunctionExports);

	/**
	 * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue
	 */

	/**
	 * Check if a number is integer
	 * @param {number | boolean} value
	 * @return {boolean} isInteger
	 */
	function isInteger$1(value) {
	  if (typeof value === 'boolean') {
	    return true;
	  }
	  return isFinite(value) ? value === Math.round(value) : false;
	}

	/**
	 * Calculate the sign of a number
	 * @param {number} x
	 * @returns {number}
	 */
	var sign$2 = Math.sign || function (x) {
	  if (x > 0) {
	    return 1;
	  } else if (x < 0) {
	    return -1;
	  } else {
	    return 0;
	  }
	};

	/**
	 * Formats a number in a given base
	 * @param {number} n
	 * @param {number} base
	 * @param {number} size
	 * @returns {string}
	 */
	function formatNumberToBase(n, base, size) {
	  var prefixes = {
	    2: '0b',
	    8: '0o',
	    16: '0x'
	  };
	  var prefix = prefixes[base];
	  var suffix = '';
	  if (size) {
	    if (size < 1) {
	      throw new Error('size must be in greater than 0');
	    }
	    if (!isInteger$1(size)) {
	      throw new Error('size must be an integer');
	    }
	    if (n > 2 ** (size - 1) - 1 || n < -(2 ** (size - 1))) {
	      throw new Error("Value must be in range [-2^".concat(size - 1, ", 2^").concat(size - 1, "-1]"));
	    }
	    if (!isInteger$1(n)) {
	      throw new Error('Value must be an integer');
	    }
	    if (n < 0) {
	      n = n + 2 ** size;
	    }
	    suffix = "i".concat(size);
	  }
	  var sign = '';
	  if (n < 0) {
	    n = -n;
	    sign = '-';
	  }
	  return "".concat(sign).concat(prefix).concat(n.toString(base)).concat(suffix);
	}

	/**
	 * Convert a number to a formatted string representation.
	 *
	 * Syntax:
	 *
	 *    format(value)
	 *    format(value, options)
	 *    format(value, precision)
	 *    format(value, fn)
	 *
	 * Where:
	 *
	 *    {number} value   The value to be formatted
	 *    {Object} options An object with formatting options. Available options:
	 *                     {string} notation
	 *                         Number notation. Choose from:
	 *                         'fixed'          Always use regular number notation.
	 *                                          For example '123.40' and '14000000'
	 *                         'exponential'    Always use exponential notation.
	 *                                          For example '1.234e+2' and '1.4e+7'
	 *                         'engineering'    Always use engineering notation.
	 *                                          For example '123.4e+0' and '14.0e+6'
	 *                         'auto' (default) Regular number notation for numbers
	 *                                          having an absolute value between
	 *                                          `lowerExp` and `upperExp` bounds, and
	 *                                          uses exponential notation elsewhere.
	 *                                          Lower bound is included, upper bound
	 *                                          is excluded.
	 *                                          For example '123.4' and '1.4e7'.
	 *                         'bin', 'oct, or
	 *                         'hex'            Format the number using binary, octal,
	 *                                          or hexadecimal notation.
	 *                                          For example '0b1101' and '0x10fe'.
	 *                     {number} wordSize    The word size in bits to use for formatting
	 *                                          in binary, octal, or hexadecimal notation.
	 *                                          To be used only with 'bin', 'oct', or 'hex'
	 *                                          values for 'notation' option. When this option
	 *                                          is defined the value is formatted as a signed
	 *                                          twos complement integer of the given word size
	 *                                          and the size suffix is appended to the output.
	 *                                          For example
	 *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.
	 *                                          Default value is undefined.
	 *                     {number} precision   A number between 0 and 16 to round
	 *                                          the digits of the number.
	 *                                          In case of notations 'exponential',
	 *                                          'engineering', and 'auto',
	 *                                          `precision` defines the total
	 *                                          number of significant digits returned.
	 *                                          In case of notation 'fixed',
	 *                                          `precision` defines the number of
	 *                                          significant digits after the decimal
	 *                                          point.
	 *                                          `precision` is undefined by default,
	 *                                          not rounding any digits.
	 *                     {number} lowerExp    Exponent determining the lower boundary
	 *                                          for formatting a value with an exponent
	 *                                          when `notation='auto`.
	 *                                          Default value is `-3`.
	 *                     {number} upperExp    Exponent determining the upper boundary
	 *                                          for formatting a value with an exponent
	 *                                          when `notation='auto`.
	 *                                          Default value is `5`.
	 *    {Function} fn    A custom formatting function. Can be used to override the
	 *                     built-in notations. Function `fn` is called with `value` as
	 *                     parameter and must return a string. Is useful for example to
	 *                     format all values inside a matrix in a particular way.
	 *
	 * Examples:
	 *
	 *    format(6.4)                                        // '6.4'
	 *    format(1240000)                                    // '1.24e6'
	 *    format(1/3)                                        // '0.3333333333333333'
	 *    format(1/3, 3)                                     // '0.333'
	 *    format(21385, 2)                                   // '21000'
	 *    format(12.071, {notation: 'fixed'})                // '12'
	 *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'
	 *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'
	 *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'
	 *
	 * @param {number} value
	 * @param {Object | Function | number} [options]
	 * @return {string} str The formatted value
	 */
	function format$2(value, options) {
	  if (typeof options === 'function') {
	    // handle format(value, fn)
	    return options(value);
	  }

	  // handle special cases
	  if (value === Infinity) {
	    return 'Infinity';
	  } else if (value === -Infinity) {
	    return '-Infinity';
	  } else if (isNaN(value)) {
	    return 'NaN';
	  }

	  // default values for options
	  var notation = 'auto';
	  var precision;
	  var wordSize;
	  if (options) {
	    // determine notation from options
	    if (options.notation) {
	      notation = options.notation;
	    }

	    // determine precision from options
	    if (isNumber(options)) {
	      precision = options;
	    } else if (isNumber(options.precision)) {
	      precision = options.precision;
	    }
	    if (options.wordSize) {
	      wordSize = options.wordSize;
	      if (typeof wordSize !== 'number') {
	        throw new Error('Option "wordSize" must be a number');
	      }
	    }
	  }

	  // handle the various notations
	  switch (notation) {
	    case 'fixed':
	      return toFixed$1(value, precision);
	    case 'exponential':
	      return toExponential$1(value, precision);
	    case 'engineering':
	      return toEngineering$1(value, precision);
	    case 'bin':
	      return formatNumberToBase(value, 2, wordSize);
	    case 'oct':
	      return formatNumberToBase(value, 8, wordSize);
	    case 'hex':
	      return formatNumberToBase(value, 16, wordSize);
	    case 'auto':
	      // remove trailing zeros after the decimal point
	      return toPrecision(value, precision, options && options).replace(/((\.\d*?)(0+))($|e)/, function () {
	        var digits = arguments[2];
	        var e = arguments[4];
	        return digits !== '.' ? digits + e : e;
	      });
	    default:
	      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.');
	  }
	}

	/**
	 * Split a number into sign, coefficients, and exponent
	 * @param {number | string} value
	 * @return {SplitValue}
	 *              Returns an object containing sign, coefficients, and exponent
	 */
	function splitNumber(value) {
	  // parse the input value
	  var match = String(value).toLowerCase().match(/^(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);
	  if (!match) {
	    throw new SyntaxError('Invalid number ' + value);
	  }
	  var sign = match[1];
	  var digits = match[2];
	  var exponent = parseFloat(match[4] || '0');
	  var dot = digits.indexOf('.');
	  exponent += dot !== -1 ? dot - 1 : digits.length - 1;
	  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)
	  .replace(/^0*/, function (zeros) {
	    // remove leading zeros, add their count to the exponent
	    exponent -= zeros.length;
	    return '';
	  }).replace(/0*$/, '') // remove trailing zeros
	  .split('').map(function (d) {
	    return parseInt(d);
	  });
	  if (coefficients.length === 0) {
	    coefficients.push(0);
	    exponent++;
	  }
	  return {
	    sign,
	    coefficients,
	    exponent
	  };
	}

	/**
	 * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
	 * @param {number | string} value
	 * @param {number} [precision]        Optional number of significant figures to return.
	 */
	function toEngineering$1(value, precision) {
	  if (isNaN(value) || !isFinite(value)) {
	    return String(value);
	  }
	  var split = splitNumber(value);
	  var rounded = roundDigits(split, precision);
	  var e = rounded.exponent;
	  var c = rounded.coefficients;

	  // find nearest lower multiple of 3 for exponent
	  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;
	  if (isNumber(precision)) {
	    // add zeroes to give correct sig figs
	    while (precision > c.length || e - newExp + 1 > c.length) {
	      c.push(0);
	    }
	  } else {
	    // concatenate coefficients with necessary zeros
	    // add zeros if necessary (for example: 1e+8 -> 100e+6)
	    var missingZeros = Math.abs(e - newExp) - (c.length - 1);
	    for (var i = 0; i < missingZeros; i++) {
	      c.push(0);
	    }
	  }

	  // find difference in exponents
	  var expDiff = Math.abs(e - newExp);
	  var decimalIdx = 1;

	  // push decimal index over by expDiff times
	  while (expDiff > 0) {
	    decimalIdx++;
	    expDiff--;
	  }

	  // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.
	  // otherwise concat with the rest of the coefficients
	  var decimals = c.slice(decimalIdx).join('');
	  var decimalVal = isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';
	  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
	  return rounded.sign + str;
	}

	/**
	 * Format a number with fixed notation.
	 * @param {number | string} value
	 * @param {number} [precision=undefined]  Optional number of decimals after the
	 *                                        decimal point. null by default.
	 */
	function toFixed$1(value, precision) {
	  if (isNaN(value) || !isFinite(value)) {
	    return String(value);
	  }
	  var splitValue = splitNumber(value);
	  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;
	  var c = rounded.coefficients;
	  var p = rounded.exponent + 1; // exponent may have changed

	  // append zeros if needed
	  var pp = p + (precision || 0);
	  if (c.length < pp) {
	    c = c.concat(zeros$1(pp - c.length));
	  }

	  // prepend zeros if needed
	  if (p < 0) {
	    c = zeros$1(-p + 1).concat(c);
	    p = 1;
	  }

	  // insert a dot if needed
	  if (p < c.length) {
	    c.splice(p, 0, p === 0 ? '0.' : '.');
	  }
	  return rounded.sign + c.join('');
	}

	/**
	 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
	 * @param {number | string} value
	 * @param {number} [precision]  Number of digits in formatted output.
	 *                              If not provided, the maximum available digits
	 *                              is used.
	 */
	function toExponential$1(value, precision) {
	  if (isNaN(value) || !isFinite(value)) {
	    return String(value);
	  }

	  // round if needed, else create a clone
	  var split = splitNumber(value);
	  var rounded = precision ? roundDigits(split, precision) : split;
	  var c = rounded.coefficients;
	  var e = rounded.exponent;

	  // append zeros if needed
	  if (c.length < precision) {
	    c = c.concat(zeros$1(precision - c.length));
	  }

	  // format as `C.CCCe+EEE` or `C.CCCe-EEE`
	  var first = c.shift();
	  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;
	}

	/**
	 * Format a number with a certain precision
	 * @param {number | string} value
	 * @param {number} [precision=undefined] Optional number of digits.
	 * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]
	 *                                       By default:
	 *                                         lowerExp = -3 (incl)
	 *                                         upper = +5 (excl)
	 * @return {string}
	 */
	function toPrecision(value, precision, options) {
	  if (isNaN(value) || !isFinite(value)) {
	    return String(value);
	  }

	  // determine lower and upper bound for exponential notation.
	  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
	  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;
	  var split = splitNumber(value);
	  var rounded = precision ? roundDigits(split, precision) : split;
	  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {
	    // exponential notation
	    return toExponential$1(value, precision);
	  } else {
	    var c = rounded.coefficients;
	    var e = rounded.exponent;

	    // append trailing zeros
	    if (c.length < precision) {
	      c = c.concat(zeros$1(precision - c.length));
	    }

	    // append trailing zeros
	    // TODO: simplify the next statement
	    c = c.concat(zeros$1(e - c.length + 1 + (c.length < precision ? precision - c.length : 0)));

	    // prepend zeros
	    c = zeros$1(-e).concat(c);
	    var dot = e > 0 ? e : 0;
	    if (dot < c.length - 1) {
	      c.splice(dot + 1, 0, '.');
	    }
	    return rounded.sign + c.join('');
	  }
	}

	/**
	 * Round the number of digits of a number *
	 * @param {SplitValue} split       A value split with .splitNumber(value)
	 * @param {number} precision  A positive integer
	 * @return {SplitValue}
	 *              Returns an object containing sign, coefficients, and exponent
	 *              with rounded digits
	 */
	function roundDigits(split, precision) {
	  // create a clone
	  var rounded = {
	    sign: split.sign,
	    coefficients: split.coefficients,
	    exponent: split.exponent
	  };
	  var c = rounded.coefficients;

	  // prepend zeros if needed
	  while (precision <= 0) {
	    c.unshift(0);
	    rounded.exponent++;
	    precision++;
	  }
	  if (c.length > precision) {
	    var removed = c.splice(precision, c.length - precision);
	    if (removed[0] >= 5) {
	      var i = precision - 1;
	      c[i]++;
	      while (c[i] === 10) {
	        c.pop();
	        if (i === 0) {
	          c.unshift(0);
	          rounded.exponent++;
	          i++;
	        }
	        i--;
	        c[i]++;
	      }
	    }
	  }
	  return rounded;
	}

	/**
	 * Create an array filled with zeros.
	 * @param {number} length
	 * @return {Array}
	 */
	function zeros$1(length) {
	  var arr = [];
	  for (var i = 0; i < length; i++) {
	    arr.push(0);
	  }
	  return arr;
	}

	/**
	 * Count the number of significant digits of a number.
	 *
	 * For example:
	 *   2.34 returns 3
	 *   0.0034 returns 2
	 *   120.5e+30 returns 4
	 *
	 * @param {number} value
	 * @return {number} digits   Number of significant digits
	 */
	function digits(value) {
	  return value.toExponential().replace(/e.*$/, '') // remove exponential notation
	  .replace(/^0\.?0*|\./, '') // remove decimal point and leading zeros
	  .length;
	}

	/**
	 * Minimum number added to one that makes the result different than one
	 */
	var DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;

	/**
	 * Compares two floating point numbers.
	 * @param {number} x          First value to compare
	 * @param {number} y          Second value to compare
	 * @param {number} [epsilon]  The maximum relative difference between x and y
	 *                            If epsilon is undefined or null, the function will
	 *                            test whether x and y are exactly equal.
	 * @return {boolean} whether the two numbers are nearly equal
	*/
	function nearlyEqual$1(x, y, epsilon) {
	  // if epsilon is null or undefined, test whether x and y are exactly equal
	  if (epsilon === null || epsilon === undefined) {
	    return x === y;
	  }
	  if (x === y) {
	    return true;
	  }

	  // NaN
	  if (isNaN(x) || isNaN(y)) {
	    return false;
	  }

	  // at this point x and y should be finite
	  if (isFinite(x) && isFinite(y)) {
	    // check numbers are very close, needed when comparing numbers near zero
	    var diff = Math.abs(x - y);
	    if (diff < DBL_EPSILON) {
	      return true;
	    } else {
	      // use relative error
	      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
	    }
	  }

	  // Infinite and Number or negative Infinite and positive Infinite cases
	  return false;
	}

	/**
	 * Formats a BigNumber in a given base
	 * @param {BigNumber} n
	 * @param {number} base
	 * @param {number} size
	 * @returns {string}
	 */
	function formatBigNumberToBase(n, base, size) {
	  var BigNumberCtor = n.constructor;
	  var big2 = new BigNumberCtor(2);
	  var suffix = '';
	  if (size) {
	    if (size < 1) {
	      throw new Error('size must be in greater than 0');
	    }
	    if (!isInteger$1(size)) {
	      throw new Error('size must be an integer');
	    }
	    if (n.greaterThan(big2.pow(size - 1).sub(1)) || n.lessThan(big2.pow(size - 1).mul(-1))) {
	      throw new Error("Value must be in range [-2^".concat(size - 1, ", 2^").concat(size - 1, "-1]"));
	    }
	    if (!n.isInteger()) {
	      throw new Error('Value must be an integer');
	    }
	    if (n.lessThan(0)) {
	      n = n.add(big2.pow(size));
	    }
	    suffix = "i".concat(size);
	  }
	  switch (base) {
	    case 2:
	      return "".concat(n.toBinary()).concat(suffix);
	    case 8:
	      return "".concat(n.toOctal()).concat(suffix);
	    case 16:
	      return "".concat(n.toHexadecimal()).concat(suffix);
	    default:
	      throw new Error("Base ".concat(base, " not supported "));
	  }
	}

	/**
	 * Convert a BigNumber to a formatted string representation.
	 *
	 * Syntax:
	 *
	 *    format(value)
	 *    format(value, options)
	 *    format(value, precision)
	 *    format(value, fn)
	 *
	 * Where:
	 *
	 *    {number} value   The value to be formatted
	 *    {Object} options An object with formatting options. Available options:
	 *                     {string} notation
	 *                         Number notation. Choose from:
	 *                         'fixed'          Always use regular number notation.
	 *                                          For example '123.40' and '14000000'
	 *                         'exponential'    Always use exponential notation.
	 *                                          For example '1.234e+2' and '1.4e+7'
	 *                         'auto' (default) Regular number notation for numbers
	 *                                          having an absolute value between
	 *                                          `lower` and `upper` bounds, and uses
	 *                                          exponential notation elsewhere.
	 *                                          Lower bound is included, upper bound
	 *                                          is excluded.
	 *                                          For example '123.4' and '1.4e7'.
	 *                         'bin', 'oct, or
	 *                         'hex'            Format the number using binary, octal,
	 *                                          or hexadecimal notation.
	 *                                          For example '0b1101' and '0x10fe'.
	 *                     {number} wordSize    The word size in bits to use for formatting
	 *                                          in binary, octal, or hexadecimal notation.
	 *                                          To be used only with 'bin', 'oct', or 'hex'
	 *                                          values for 'notation' option. When this option
	 *                                          is defined the value is formatted as a signed
	 *                                          twos complement integer of the given word size
	 *                                          and the size suffix is appended to the output.
	 *                                          For example
	 *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.
	 *                                          Default value is undefined.
	 *                     {number} precision   A number between 0 and 16 to round
	 *                                          the digits of the number.
	 *                                          In case of notations 'exponential',
	 *                                          'engineering', and 'auto',
	 *                                          `precision` defines the total
	 *                                          number of significant digits returned.
	 *                                          In case of notation 'fixed',
	 *                                          `precision` defines the number of
	 *                                          significant digits after the decimal
	 *                                          point.
	 *                                          `precision` is undefined by default.
	 *                     {number} lowerExp    Exponent determining the lower boundary
	 *                                          for formatting a value with an exponent
	 *                                          when `notation='auto`.
	 *                                          Default value is `-3`.
	 *                     {number} upperExp    Exponent determining the upper boundary
	 *                                          for formatting a value with an exponent
	 *                                          when `notation='auto`.
	 *                                          Default value is `5`.
	 *    {Function} fn    A custom formatting function. Can be used to override the
	 *                     built-in notations. Function `fn` is called with `value` as
	 *                     parameter and must return a string. Is useful for example to
	 *                     format all values inside a matrix in a particular way.
	 *
	 * Examples:
	 *
	 *    format(6.4)                                        // '6.4'
	 *    format(1240000)                                    // '1.24e6'
	 *    format(1/3)                                        // '0.3333333333333333'
	 *    format(1/3, 3)                                     // '0.333'
	 *    format(21385, 2)                                   // '21000'
	 *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'
	 *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'
	 *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'
	 *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'
	 *
	 * @param {BigNumber} value
	 * @param {Object | Function | number} [options]
	 * @return {string} str The formatted value
	 */
	function format$1(value, options) {
	  if (typeof options === 'function') {
	    // handle format(value, fn)
	    return options(value);
	  }

	  // handle special cases
	  if (!value.isFinite()) {
	    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';
	  }

	  // default values for options
	  var notation = 'auto';
	  var precision;
	  var wordSize;
	  if (options !== undefined) {
	    // determine notation from options
	    if (options.notation) {
	      notation = options.notation;
	    }

	    // determine precision from options
	    if (typeof options === 'number') {
	      precision = options;
	    } else if (options.precision !== undefined) {
	      precision = options.precision;
	    }
	    if (options.wordSize) {
	      wordSize = options.wordSize;
	      if (typeof wordSize !== 'number') {
	        throw new Error('Option "wordSize" must be a number');
	      }
	    }
	  }

	  // handle the various notations
	  switch (notation) {
	    case 'fixed':
	      return toFixed(value, precision);
	    case 'exponential':
	      return toExponential(value, precision);
	    case 'engineering':
	      return toEngineering(value, precision);
	    case 'bin':
	      return formatBigNumberToBase(value, 2, wordSize);
	    case 'oct':
	      return formatBigNumberToBase(value, 8, wordSize);
	    case 'hex':
	      return formatBigNumberToBase(value, 16, wordSize);
	    case 'auto':
	      {
	        // determine lower and upper bound for exponential notation.
	        // TODO: implement support for upper and lower to be BigNumbers themselves
	        var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
	        var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;

	        // handle special case zero
	        if (value.isZero()) return '0';

	        // determine whether or not to output exponential notation
	        var str;
	        var rounded = value.toSignificantDigits(precision);
	        var exp = rounded.e;
	        if (exp >= lowerExp && exp < upperExp) {
	          // normal number notation
	          str = rounded.toFixed();
	        } else {
	          // exponential notation
	          str = toExponential(value, precision);
	        }

	        // remove trailing zeros after the decimal point
	        return str.replace(/((\.\d*?)(0+))($|e)/, function () {
	          var digits = arguments[2];
	          var e = arguments[4];
	          return digits !== '.' ? digits + e : e;
	        });
	      }
	    default:
	      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.');
	  }
	}

	/**
	 * Format a BigNumber in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
	 * @param {BigNumber} value
	 * @param {number} [precision]        Optional number of significant figures to return.
	 */
	function toEngineering(value, precision) {
	  // find nearest lower multiple of 3 for exponent
	  var e = value.e;
	  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;

	  // find difference in exponents, and calculate the value without exponent
	  var valueWithoutExp = value.mul(Math.pow(10, -newExp));
	  var valueStr = valueWithoutExp.toPrecision(precision);
	  if (valueStr.indexOf('e') !== -1) {
	    var BigNumber = value.constructor;
	    valueStr = new BigNumber(valueStr).toFixed();
	  }
	  return valueStr + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
	}

	/**
	 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
	 * @param {BigNumber} value
	 * @param {number} [precision]  Number of digits in formatted output.
	 *                              If not provided, the maximum available digits
	 *                              is used.
	 * @returns {string} str
	 */
	function toExponential(value, precision) {
	  if (precision !== undefined) {
	    return value.toExponential(precision - 1); // Note the offset of one
	  } else {
	    return value.toExponential();
	  }
	}

	/**
	 * Format a number with fixed notation.
	 * @param {BigNumber} value
	 * @param {number} [precision=undefined] Optional number of decimals after the
	 *                                       decimal point. Undefined by default.
	 */
	function toFixed(value, precision) {
	  return value.toFixed(precision);
	}

	/**
	 * Format a value of any type into a string.
	 *
	 * Usage:
	 *     math.format(value)
	 *     math.format(value, precision)
	 *     math.format(value, options)
	 *
	 * When value is a function:
	 *
	 * - When the function has a property `syntax`, it returns this
	 *   syntax description.
	 * - In other cases, a string `'function'` is returned.
	 *
	 * When `value` is an Object:
	 *
	 * - When the object contains a property `format` being a function, this
	 *   function is invoked as `value.format(options)` and the result is returned.
	 * - When the object has its own `toString` method, this method is invoked
	 *   and the result is returned.
	 * - In other cases the function will loop over all object properties and
	 *   return JSON object notation like '{"a": 2, "b": 3}'.
	 *
	 * Example usage:
	 *     math.format(2/7)                // '0.2857142857142857'
	 *     math.format(math.pi, 3)         // '3.14'
	 *     math.format(new Complex(2, 3))  // '2 + 3i'
	 *     math.format('hello')            // '"hello"'
	 *
	 * @param {*} value             Value to be stringified
	 * @param {Object | number | Function} [options]
	 *     Formatting options. See src/utils/number.js:format for a
	 *     description of the available options controlling number output.
	 *     This generic "format" also supports the option property `truncate: NN`
	 *     giving the maximum number NN of characters to return (if there would
	 *     have been more, they are deleted and replaced by an ellipsis).
	 * @return {string} str
	 */
	function format(value, options) {
	  var result = _format(value, options);
	  if (options && typeof options === 'object' && 'truncate' in options && result.length > options.truncate) {
	    return result.substring(0, options.truncate - 3) + '...';
	  }
	  return result;
	}
	function _format(value, options) {
	  if (typeof value === 'number') {
	    return format$2(value, options);
	  }
	  if (isBigNumber(value)) {
	    return format$1(value, options);
	  }

	  // note: we use unsafe duck-typing here to check for Fractions, this is
	  // ok here since we're only invoking toString or concatenating its values
	  if (looksLikeFraction(value)) {
	    if (!options || options.fraction !== 'decimal') {
	      // output as ratio, like '1/3'
	      return value.s * value.n + '/' + value.d;
	    } else {
	      // output as decimal, like '0.(3)'
	      return value.toString();
	    }
	  }
	  if (Array.isArray(value)) {
	    return formatArray(value, options);
	  }
	  if (isString(value)) {
	    return '"' + value + '"';
	  }
	  if (typeof value === 'function') {
	    return value.syntax ? String(value.syntax) : 'function';
	  }
	  if (value && typeof value === 'object') {
	    if (typeof value.format === 'function') {
	      return value.format(options);
	    } else if (value && value.toString(options) !== {}.toString()) {
	      // this object has a non-native toString method, use that one
	      return value.toString(options);
	    } else {
	      var entries = Object.keys(value).map(key => {
	        return '"' + key + '": ' + format(value[key], options);
	      });
	      return '{' + entries.join(', ') + '}';
	    }
	  }
	  return String(value);
	}

	/**
	 * Recursively format an n-dimensional matrix
	 * Example output: "[[1, 2], [3, 4]]"
	 * @param {Array} array
	 * @param {Object | number | Function} [options]  Formatting options. See
	 *                                                lib/utils/number:format for a
	 *                                                description of the available
	 *                                                options.
	 * @returns {string} str
	 */
	function formatArray(array, options) {
	  if (Array.isArray(array)) {
	    var str = '[';
	    var len = array.length;
	    for (var i = 0; i < len; i++) {
	      if (i !== 0) {
	        str += ', ';
	      }
	      str += formatArray(array[i], options);
	    }
	    str += ']';
	    return str;
	  } else {
	    return format(array, options);
	  }
	}

	/**
	 * Check whether a value looks like a Fraction (unsafe duck-type check)
	 * @param {*} value
	 * @return {boolean}
	 */
	function looksLikeFraction(value) {
	  return value && typeof value === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;
	}

	/**
	 * Create a range error with the message:
	 *     'Dimension mismatch (<actual size> != <expected size>)'
	 * @param {number | number[]} actual        The actual size
	 * @param {number | number[]} expected      The expected size
	 * @param {string} [relation='!=']          Optional relation between actual
	 *                                          and expected size: '!=', '<', etc.
	 * @extends RangeError
	 */
	function DimensionError(actual, expected, relation) {
	  if (!(this instanceof DimensionError)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }
	  this.actual = actual;
	  this.expected = expected;
	  this.relation = relation;
	  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';
	  this.stack = new Error().stack;
	}
	DimensionError.prototype = new RangeError();
	DimensionError.prototype.constructor = RangeError;
	DimensionError.prototype.name = 'DimensionError';
	DimensionError.prototype.isDimensionError = true;

	/**
	 * Create a range error with the message:
	 *     'Index out of range (index < min)'
	 *     'Index out of range (index < max)'
	 *
	 * @param {number} index     The actual index
	 * @param {number} [min=0]   Minimum index (included)
	 * @param {number} [max]     Maximum index (excluded)
	 * @extends RangeError
	 */
	function IndexError(index, min, max) {
	  if (!(this instanceof IndexError)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }
	  this.index = index;
	  if (arguments.length < 3) {
	    this.min = 0;
	    this.max = min;
	  } else {
	    this.min = min;
	    this.max = max;
	  }
	  if (this.min !== undefined && this.index < this.min) {
	    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
	  } else if (this.max !== undefined && this.index >= this.max) {
	    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
	  } else {
	    this.message = 'Index out of range (' + this.index + ')';
	  }
	  this.stack = new Error().stack;
	}
	IndexError.prototype = new RangeError();
	IndexError.prototype.constructor = RangeError;
	IndexError.prototype.name = 'IndexError';
	IndexError.prototype.isIndexError = true;

	/**
	 * Calculate the size of a multi dimensional array.
	 * This function checks the size of the first entry, it does not validate
	 * whether all dimensions match. (use function `validate` for that)
	 * @param {Array} x
	 * @Return {Number[]} size
	 */
	function arraySize(x) {
	  var s = [];
	  while (Array.isArray(x)) {
	    s.push(x.length);
	    x = x[0];
	  }
	  return s;
	}

	/**
	 * Recursively validate whether each element in a multi dimensional array
	 * has a size corresponding to the provided size array.
	 * @param {Array} array    Array to be validated
	 * @param {number[]} size  Array with the size of each dimension
	 * @param {number} dim   Current dimension
	 * @throws DimensionError
	 * @private
	 */
	function _validate(array, size, dim) {
	  var i;
	  var len = array.length;
	  if (len !== size[dim]) {
	    throw new DimensionError(len, size[dim]);
	  }
	  if (dim < size.length - 1) {
	    // recursively validate each child array
	    var dimNext = dim + 1;
	    for (i = 0; i < len; i++) {
	      var child = array[i];
	      if (!Array.isArray(child)) {
	        throw new DimensionError(size.length - 1, size.length, '<');
	      }
	      _validate(array[i], size, dimNext);
	    }
	  } else {
	    // last dimension. none of the childs may be an array
	    for (i = 0; i < len; i++) {
	      if (Array.isArray(array[i])) {
	        throw new DimensionError(size.length + 1, size.length, '>');
	      }
	    }
	  }
	}

	/**
	 * Validate whether each element in a multi dimensional array has
	 * a size corresponding to the provided size array.
	 * @param {Array} array    Array to be validated
	 * @param {number[]} size  Array with the size of each dimension
	 * @throws DimensionError
	 */
	function validate(array, size) {
	  var isScalar = size.length === 0;
	  if (isScalar) {
	    // scalar
	    if (Array.isArray(array)) {
	      throw new DimensionError(array.length, 0);
	    }
	  } else {
	    // array
	    _validate(array, size, 0);
	  }
	}

	/**
	 * Test whether index is an integer number with index >= 0 and index < length
	 * when length is provided
	 * @param {number} index    Zero-based index
	 * @param {number} [length] Length of the array
	 */
	function validateIndex(index, length) {
	  if (index !== undefined) {
	    if (!isNumber(index) || !isInteger$1(index)) {
	      throw new TypeError('Index must be an integer (value: ' + index + ')');
	    }
	    if (index < 0 || typeof length === 'number' && index >= length) {
	      throw new IndexError(index, length);
	    }
	  }
	}

	/**
	 * Resize a multi dimensional array. The resized array is returned.
	 * @param {Array | number} array         Array to be resized
	 * @param {number[]} size Array with the size of each dimension
	 * @param {*} [defaultValue=0]  Value to be filled in in new entries,
	 *                              zero by default. Specify for example `null`,
	 *                              to clearly see entries that are not explicitly
	 *                              set.
	 * @return {Array} array         The resized array
	 */
	function resize(array, size, defaultValue) {
	  // check the type of the arguments
	  if (!Array.isArray(size)) {
	    throw new TypeError('Array expected');
	  }
	  if (size.length === 0) {
	    throw new Error('Resizing to scalar is not supported');
	  }

	  // check whether size contains positive integers
	  size.forEach(function (value) {
	    if (!isNumber(value) || !isInteger$1(value) || value < 0) {
	      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(size) + ')');
	    }
	  });

	  // convert number to an array
	  if (isNumber(array) || isBigNumber(array)) {
	    array = [array];
	  }

	  // recursively resize the array
	  var _defaultValue = defaultValue !== undefined ? defaultValue : 0;
	  _resize(array, size, 0, _defaultValue);
	  return array;
	}

	/**
	 * Recursively resize a multi dimensional array
	 * @param {Array} array         Array to be resized
	 * @param {number[]} size       Array with the size of each dimension
	 * @param {number} dim          Current dimension
	 * @param {*} [defaultValue]    Value to be filled in in new entries,
	 *                              undefined by default.
	 * @private
	 */
	function _resize(array, size, dim, defaultValue) {
	  var i;
	  var elem;
	  var oldLen = array.length;
	  var newLen = size[dim];
	  var minLen = Math.min(oldLen, newLen);

	  // apply new length
	  array.length = newLen;
	  if (dim < size.length - 1) {
	    // non-last dimension
	    var dimNext = dim + 1;

	    // resize existing child arrays
	    for (i = 0; i < minLen; i++) {
	      // resize child array
	      elem = array[i];
	      if (!Array.isArray(elem)) {
	        elem = [elem]; // add a dimension
	        array[i] = elem;
	      }
	      _resize(elem, size, dimNext, defaultValue);
	    }

	    // create new child arrays
	    for (i = minLen; i < newLen; i++) {
	      // get child array
	      elem = [];
	      array[i] = elem;

	      // resize new child array
	      _resize(elem, size, dimNext, defaultValue);
	    }
	  } else {
	    // last dimension

	    // remove dimensions of existing values
	    for (i = 0; i < minLen; i++) {
	      while (Array.isArray(array[i])) {
	        array[i] = array[i][0];
	      }
	    }

	    // fill new elements with the default value
	    for (i = minLen; i < newLen; i++) {
	      array[i] = defaultValue;
	    }
	  }
	}

	/**
	 * Re-shape a multi dimensional array to fit the specified dimensions
	 * @param {Array} array           Array to be reshaped
	 * @param {number[]} sizes        List of sizes for each dimension
	 * @returns {Array}               Array whose data has been formatted to fit the
	 *                                specified dimensions
	 *
	 * @throws {DimensionError}       If the product of the new dimension sizes does
	 *                                not equal that of the old ones
	 */
	function reshape(array, sizes) {
	  var flatArray = flatten$1(array);
	  var currentLength = flatArray.length;
	  if (!Array.isArray(array) || !Array.isArray(sizes)) {
	    throw new TypeError('Array expected');
	  }
	  if (sizes.length === 0) {
	    throw new DimensionError(0, currentLength, '!=');
	  }
	  sizes = processSizesWildcard(sizes, currentLength);
	  var newLength = product(sizes);
	  if (currentLength !== newLength) {
	    throw new DimensionError(newLength, currentLength, '!=');
	  }
	  try {
	    return _reshape(flatArray, sizes);
	  } catch (e) {
	    if (e instanceof DimensionError) {
	      throw new DimensionError(newLength, currentLength, '!=');
	    }
	    throw e;
	  }
	}

	/**
	 * Replaces the wildcard -1 in the sizes array.
	 * @param {number[]} sizes  List of sizes for each dimension. At most on wildcard.
	 * @param {number} currentLength  Number of elements in the array.
	 * @throws {Error}                If more than one wildcard or unable to replace it.
	 * @returns {number[]}      The sizes array with wildcard replaced.
	 */
	function processSizesWildcard(sizes, currentLength) {
	  var newLength = product(sizes);
	  var processedSizes = sizes.slice();
	  var WILDCARD = -1;
	  var wildCardIndex = sizes.indexOf(WILDCARD);
	  var isMoreThanOneWildcard = sizes.indexOf(WILDCARD, wildCardIndex + 1) >= 0;
	  if (isMoreThanOneWildcard) {
	    throw new Error('More than one wildcard in sizes');
	  }
	  var hasWildcard = wildCardIndex >= 0;
	  var canReplaceWildcard = currentLength % newLength === 0;
	  if (hasWildcard) {
	    if (canReplaceWildcard) {
	      processedSizes[wildCardIndex] = -currentLength / newLength;
	    } else {
	      throw new Error('Could not replace wildcard, since ' + currentLength + ' is no multiple of ' + -newLength);
	    }
	  }
	  return processedSizes;
	}

	/**
	 * Computes the product of all array elements.
	 * @param {number[]} array Array of factors
	 * @returns {number}            Product of all elements
	 */
	function product(array) {
	  return array.reduce((prev, curr) => prev * curr, 1);
	}

	/**
	 * Iteratively re-shape a multi dimensional array to fit the specified dimensions
	 * @param {Array} array           Array to be reshaped
	 * @param {number[]} sizes  List of sizes for each dimension
	 * @returns {Array}               Array whose data has been formatted to fit the
	 *                                specified dimensions
	 */

	function _reshape(array, sizes) {
	  // testing if there are enough elements for the requested shape
	  var tmpArray = array;
	  var tmpArray2;
	  // for each dimensions starting by the last one and ignoring the first one
	  for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {
	    var size = sizes[sizeIndex];
	    tmpArray2 = [];

	    // aggregate the elements of the current tmpArray in elements of the requested size
	    var length = tmpArray.length / size;
	    for (var i = 0; i < length; i++) {
	      tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));
	    }
	    // set it as the new tmpArray for the next loop turn or for return
	    tmpArray = tmpArray2;
	  }
	  return tmpArray;
	}

	/**
	 * Unsqueeze a multi dimensional array: add dimensions when missing
	 *
	 * Paramter `size` will be mutated to match the new, unqueezed matrix size.
	 *
	 * @param {Array} array
	 * @param {number} dims       Desired number of dimensions of the array
	 * @param {number} [outer]    Number of outer dimensions to be added
	 * @param {Array} [size] Current size of array.
	 * @returns {Array} returns the array itself
	 * @private
	 */
	function unsqueeze(array, dims, outer, size) {
	  var s = size || arraySize(array);

	  // unsqueeze outer dimensions
	  if (outer) {
	    for (var i = 0; i < outer; i++) {
	      array = [array];
	      s.unshift(1);
	    }
	  }

	  // unsqueeze inner dimensions
	  array = _unsqueeze(array, dims, 0);
	  while (s.length < dims) {
	    s.push(1);
	  }
	  return array;
	}

	/**
	 * Recursively unsqueeze a multi dimensional array
	 * @param {Array} array
	 * @param {number} dims Required number of dimensions
	 * @param {number} dim  Current dimension
	 * @returns {Array | *} Returns the squeezed array
	 * @private
	 */
	function _unsqueeze(array, dims, dim) {
	  var i, ii;
	  if (Array.isArray(array)) {
	    var next = dim + 1;
	    for (i = 0, ii = array.length; i < ii; i++) {
	      array[i] = _unsqueeze(array[i], dims, next);
	    }
	  } else {
	    for (var d = dim; d < dims; d++) {
	      array = [array];
	    }
	  }
	  return array;
	}
	/**
	 * Flatten a multi dimensional array, put all elements in a one dimensional
	 * array
	 * @param {Array} array   A multi dimensional array
	 * @return {Array}        The flattened array (1 dimensional)
	 */
	function flatten$1(array) {
	  if (!Array.isArray(array)) {
	    // if not an array, return as is
	    return array;
	  }
	  var flat = [];
	  array.forEach(function callback(value) {
	    if (Array.isArray(value)) {
	      value.forEach(callback); // traverse through sub-arrays recursively
	    } else {
	      flat.push(value);
	    }
	  });
	  return flat;
	}

	/**
	 * Check the datatype of a given object
	 * This is a low level implementation that should only be used by
	 * parent Matrix classes such as SparseMatrix or DenseMatrix
	 * This method does not validate Array Matrix shape
	 * @param {Array} array
	 * @param {function} typeOf   Callback function to use to determine the type of a value
	 * @return {string}
	 */
	function getArrayDataType(array, typeOf) {
	  var type; // to hold type info
	  var length = 0; // to hold length value to ensure it has consistent sizes

	  for (var i = 0; i < array.length; i++) {
	    var item = array[i];
	    var _isArray = Array.isArray(item);

	    // Saving the target matrix row size
	    if (i === 0 && _isArray) {
	      length = item.length;
	    }

	    // If the current item is an array but the length does not equal the targetVectorSize
	    if (_isArray && item.length !== length) {
	      return undefined;
	    }
	    var itemType = _isArray ? getArrayDataType(item, typeOf) // recurse into a nested array
	    : typeOf(item);
	    if (type === undefined) {
	      type = itemType; // first item
	    } else if (type !== itemType) {
	      return 'mixed';
	    } else ;
	  }
	  return type;
	}

	/**
	 * Recursively concatenate two matrices.
	 * The contents of the matrices is not cloned.
	 * @param {Array} a             Multi dimensional array
	 * @param {Array} b             Multi dimensional array
	 * @param {number} concatDim    The dimension on which to concatenate (zero-based)
	 * @param {number} dim          The current dim (zero-based)
	 * @return {Array} c            The concatenated matrix
	 * @private
	 */
	function concatRecursive(a, b, concatDim, dim) {
	  if (dim < concatDim) {
	    // recurse into next dimension
	    if (a.length !== b.length) {
	      throw new DimensionError(a.length, b.length);
	    }
	    var c = [];
	    for (var i = 0; i < a.length; i++) {
	      c[i] = concatRecursive(a[i], b[i], concatDim, dim + 1);
	    }
	    return c;
	  } else {
	    // concatenate this dimension
	    return a.concat(b);
	  }
	}

	/**
	 * Concatenates many arrays in the specified direction
	 * @param {...Array} arrays All the arrays to concatenate
	 * @param {number} concatDim The dimension on which to concatenate (zero-based)
	 * @returns
	*/
	function concat$1() {
	  var arrays = Array.prototype.slice.call(arguments, 0, -1);
	  var concatDim = Array.prototype.slice.call(arguments, -1);
	  if (arrays.length === 1) {
	    return arrays[0];
	  }
	  if (arrays.length > 1) {
	    return arrays.slice(1).reduce(function (A, B) {
	      return concatRecursive(A, B, concatDim, 0);
	    }, arrays[0]);
	  } else {
	    throw new Error('Wrong number of arguments in function concat');
	  }
	}

	/**
	 * Receives two or more sizes and get's the broadcasted size for both.
	 * @param  {...number[]} sizes Sizes to broadcast together
	 * @returns
	 */
	function broadcastSizes() {
	  for (var _len = arguments.length, sizes = new Array(_len), _key = 0; _key < _len; _key++) {
	    sizes[_key] = arguments[_key];
	  }
	  var dimensions = sizes.map(s => s.length);
	  var N = Math.max(...dimensions);
	  var sizeMax = new Array(N).fill(null);
	  // check for every size
	  for (var i = 0; i < sizes.length; i++) {
	    var size = sizes[i];
	    var dim = dimensions[i];
	    for (var j = 0; j < dim; j++) {
	      var n = N - dim + j;
	      if (size[j] > sizeMax[n]) {
	        sizeMax[n] = size[j];
	      }
	    }
	  }
	  for (var _i = 0; _i < sizes.length; _i++) {
	    checkBroadcastingRules(sizes[_i], sizeMax);
	  }
	  return sizeMax;
	}

	/**
	 * Checks if it's possible to broadcast a size to another size
	 * @param {number[]} size The size of the array to check
	 * @param {number[]} toSize The size of the array to validate if it can be broadcasted to
	 */
	function checkBroadcastingRules(size, toSize) {
	  var N = toSize.length;
	  var dim = size.length;
	  for (var j = 0; j < dim; j++) {
	    var n = N - dim + j;
	    if (size[j] < toSize[n] && size[j] > 1 || size[j] > toSize[n]) {
	      throw new Error("shape missmatch: missmatch is found in arg with shape (".concat(size, ") not possible to broadcast dimension ").concat(dim, " with size ").concat(size[j], " to size ").concat(toSize[n]));
	    }
	  }
	}

	/**
	 * Broadcasts a single array to a certain size
	 * @param {array} array Array to be broadcasted
	 * @param {number[]} toSize Size to broadcast the array
	 * @returns The broadcasted array
	 */
	function broadcastTo(array, toSize) {
	  var Asize = arraySize(array);
	  if (deepStrictEqual(Asize, toSize)) {
	    return array;
	  }
	  checkBroadcastingRules(Asize, toSize);
	  var broadcastedSize = broadcastSizes(Asize, toSize);
	  var N = broadcastedSize.length;
	  var paddedSize = [...Array(N - Asize.length).fill(1), ...Asize];
	  var A = clone$1(array);
	  // reshape A if needed to make it ready for concat
	  if (Asize.length < N) {
	    A = reshape(A, paddedSize);
	    Asize = arraySize(A);
	  }

	  // stretches the array on each dimension to make it the same size as index
	  for (var dim = 0; dim < N; dim++) {
	    if (Asize[dim] < broadcastedSize[dim]) {
	      A = stretch(A, broadcastedSize[dim], dim);
	      Asize = arraySize(A);
	    }
	  }
	  return A;
	}

	/**
	 * stretches a matrix up to a certain size in a certain dimension
	 * @param {Array} arrayToStretch
	 * @param {number[]} sizeToStretch
	 * @param {number} dimToStretch
	 * @returns
	 */
	function stretch(arrayToStretch, sizeToStretch, dimToStretch) {
	  return concat$1(...Array(sizeToStretch).fill(arrayToStretch), dimToStretch);
	}

	/**
	 * Deep clones a multidimensional array
	 * @param {Array} array
	 * @returns cloned array
	 */
	function clone$1(array) {
	  return _extends$1([], array);
	}

	/**
	 * Create a factory function, which can be used to inject dependencies.
	 *
	 * The created functions are memoized, a consecutive call of the factory
	 * with the exact same inputs will return the same function instance.
	 * The memoized cache is exposed on `factory.cache` and can be cleared
	 * if needed.
	 *
	 * Example:
	 *
	 *     const name = 'log'
	 *     const dependencies = ['config', 'typed', 'divideScalar', 'Complex']
	 *
	 *     export const createLog = factory(name, dependencies, ({ typed, config, divideScalar, Complex }) => {
	 *       // ... create the function log here and return it
	 *     }
	 *
	 * @param {string} name           Name of the function to be created
	 * @param {string[]} dependencies The names of all required dependencies
	 * @param {function} create       Callback function called with an object with all dependencies
	 * @param {Object} [meta]         Optional object with meta information that will be attached
	 *                                to the created factory function as property `meta`.
	 * @returns {function}
	 */
	function factory(name, dependencies, create, meta) {
	  function assertAndCreate(scope) {
	    // we only pass the requested dependencies to the factory function
	    // to prevent functions to rely on dependencies that are not explicitly
	    // requested.
	    var deps = pickShallow(scope, dependencies.map(stripOptionalNotation));
	    assertDependencies(name, dependencies, scope);
	    return create(deps);
	  }
	  assertAndCreate.isFactory = true;
	  assertAndCreate.fn = name;
	  assertAndCreate.dependencies = dependencies.slice().sort();
	  if (meta) {
	    assertAndCreate.meta = meta;
	  }
	  return assertAndCreate;
	}

	/**
	 * Assert that all dependencies of a list with dependencies are available in the provided scope.
	 *
	 * Will throw an exception when there are dependencies missing.
	 *
	 * @param {string} name   Name for the function to be created. Used to generate a useful error message
	 * @param {string[]} dependencies
	 * @param {Object} scope
	 */
	function assertDependencies(name, dependencies, scope) {
	  var allDefined = dependencies.filter(dependency => !isOptionalDependency(dependency)) // filter optionals
	  .every(dependency => scope[dependency] !== undefined);
	  if (!allDefined) {
	    var missingDependencies = dependencies.filter(dependency => scope[dependency] === undefined);

	    // TODO: create a custom error class for this, a MathjsError or something like that
	    throw new Error("Cannot create function \"".concat(name, "\", ") + "some dependencies are missing: ".concat(missingDependencies.map(d => "\"".concat(d, "\"")).join(', '), "."));
	  }
	}
	function isOptionalDependency(dependency) {
	  return dependency && dependency[0] === '?';
	}
	function stripOptionalNotation(dependency) {
	  return dependency && dependency[0] === '?' ? dependency.slice(1) : dependency;
	}

	/**
	 * Get a property of a plain object
	 * Throws an error in case the object is not a plain object or the
	 * property is not defined on the object itself
	 * @param {Object} object
	 * @param {string} prop
	 * @return {*} Returns the property value when safe
	 */
	function getSafeProperty(object, prop) {
	  // only allow getting safe properties of a plain object
	  if (isPlainObject$1(object) && isSafeProperty(object, prop)) {
	    return object[prop];
	  }
	  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {
	    throw new Error('Cannot access method "' + prop + '" as a property');
	  }
	  throw new Error('No access to property "' + prop + '"');
	}

	/**
	 * Set a property on a plain object.
	 * Throws an error in case the object is not a plain object or the
	 * property would override an inherited property like .constructor or .toString
	 * @param {Object} object
	 * @param {string} prop
	 * @param {*} value
	 * @return {*} Returns the value
	 */
	// TODO: merge this function into access.js?
	function setSafeProperty(object, prop, value) {
	  // only allow setting safe properties of a plain object
	  if (isPlainObject$1(object) && isSafeProperty(object, prop)) {
	    object[prop] = value;
	    return value;
	  }
	  throw new Error('No access to property "' + prop + '"');
	}
	function hasSafeProperty(object, prop) {
	  return prop in object;
	}

	/**
	 * Test whether a property is safe to use for an object.
	 * For example .toString and .constructor are not safe
	 * @param {string} prop
	 * @return {boolean} Returns true when safe
	 */
	function isSafeProperty(object, prop) {
	  if (!object || typeof object !== 'object') {
	    return false;
	  }
	  // SAFE: whitelisted
	  // e.g length
	  if (hasOwnProperty(safeNativeProperties, prop)) {
	    return true;
	  }
	  // UNSAFE: inherited from Object prototype
	  // e.g constructor
	  if (prop in Object.prototype) {
	    // 'in' is used instead of hasOwnProperty for nodejs v0.10
	    // which is inconsistent on root prototypes. It is safe
	    // here because Object.prototype is a root object
	    return false;
	  }
	  // UNSAFE: inherited from Function prototype
	  // e.g call, apply
	  if (prop in Function.prototype) {
	    // 'in' is used instead of hasOwnProperty for nodejs v0.10
	    // which is inconsistent on root prototypes. It is safe
	    // here because Function.prototype is a root object
	    return false;
	  }
	  return true;
	}

	/**
	 * Check whether a method is safe.
	 * Throws an error when that's not the case (for example for `constructor`).
	 * @param {Object} object
	 * @param {string} method
	 * @return {boolean} Returns true when safe, false otherwise
	 */
	function isSafeMethod(object, method) {
	  if (object === null || object === undefined || typeof object[method] !== 'function') {
	    return false;
	  }
	  // UNSAFE: ghosted
	  // e.g overridden toString
	  // Note that IE10 doesn't support __proto__ and we can't do this check there.
	  if (hasOwnProperty(object, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object)) {
	    return false;
	  }
	  // SAFE: whitelisted
	  // e.g toString
	  if (hasOwnProperty(safeNativeMethods, method)) {
	    return true;
	  }
	  // UNSAFE: inherited from Object prototype
	  // e.g constructor
	  if (method in Object.prototype) {
	    // 'in' is used instead of hasOwnProperty for nodejs v0.10
	    // which is inconsistent on root prototypes. It is safe
	    // here because Object.prototype is a root object
	    return false;
	  }
	  // UNSAFE: inherited from Function prototype
	  // e.g call, apply
	  if (method in Function.prototype) {
	    // 'in' is used instead of hasOwnProperty for nodejs v0.10
	    // which is inconsistent on root prototypes. It is safe
	    // here because Function.prototype is a root object
	    return false;
	  }
	  return true;
	}
	function isPlainObject$1(object) {
	  return typeof object === 'object' && object && object.constructor === Object;
	}
	var safeNativeProperties = {
	  length: true,
	  name: true
	};
	var safeNativeMethods = {
	  toString: true,
	  valueOf: true,
	  toLocaleString: true
	};

	/**
	 * A map facade on a bare object.
	 *
	 * The small number of methods needed to implement a scope,
	 * forwarding on to the SafeProperty functions. Over time, the codebase
	 * will stop using this method, as all objects will be Maps, rather than
	 * more security prone objects.
	 */
	class ObjectWrappingMap {
	  constructor(object) {
	    this.wrappedObject = object;
	  }
	  keys() {
	    return Object.keys(this.wrappedObject);
	  }
	  get(key) {
	    return getSafeProperty(this.wrappedObject, key);
	  }
	  set(key, value) {
	    setSafeProperty(this.wrappedObject, key, value);
	    return this;
	  }
	  has(key) {
	    return hasSafeProperty(this.wrappedObject, key);
	  }
	}

	/**
	 * Returns `true` if the passed object appears to be a Map (i.e. duck typing).
	 *
	 * Methods looked for are `get`, `set`, `keys` and `has`.
	 *
	 * @param {Map | object} object
	 * @returns
	 */
	function isMap(object) {
	  // We can use the fast instanceof, or a slower duck typing check.
	  // The duck typing method needs to cover enough methods to not be confused with DenseMatrix.
	  if (!object) {
	    return false;
	  }
	  return object instanceof Map || object instanceof ObjectWrappingMap || typeof object.set === 'function' && typeof object.get === 'function' && typeof object.keys === 'function' && typeof object.has === 'function';
	}

	/**
	 * Create a typed-function which checks the types of the arguments and
	 * can match them against multiple provided signatures. The typed-function
	 * automatically converts inputs in order to find a matching signature.
	 * Typed functions throw informative errors in case of wrong input arguments.
	 *
	 * See the library [typed-function](https://github.com/josdejong/typed-function)
	 * for detailed documentation.
	 *
	 * Syntax:
	 *
	 *     math.typed(name, signatures) : function
	 *     math.typed(signatures) : function
	 *
	 * Examples:
	 *
	 *     // create a typed function with multiple types per argument (type union)
	 *     const fn2 = typed({
	 *       'number | boolean': function (b) {
	 *         return 'b is a number or boolean'
	 *       },
	 *       'string, number | boolean': function (a, b) {
	 *         return 'a is a string, b is a number or boolean'
	 *       }
	 *     })
	 *
	 *     // create a typed function with an any type argument
	 *     const log = typed({
	 *       'string, any': function (event, data) {
	 *         console.log('event: ' + event + ', data: ' + JSON.stringify(data))
	 *       }
	 *     })
	 *
	 * @param {string} [name]                          Optional name for the typed-function
	 * @param {Object<string, function>} signatures   Object with one or multiple function signatures
	 * @returns {function} The created typed-function.
	 */


	// returns a new instance of typed-function
	var _createTyped2 = function _createTyped() {
	  // initially, return the original instance of typed-function
	  // consecutively, return a new instance from typed.create.
	  _createTyped2 = typedFunction.create;
	  return typedFunction;
	};
	var dependencies$17 = ['?BigNumber', '?Complex', '?DenseMatrix', '?Fraction'];

	/**
	 * Factory function for creating a new typed instance
	 * @param {Object} dependencies   Object with data types like Complex and BigNumber
	 * @returns {Function}
	 */
	var createTyped = /* #__PURE__ */factory('typed', dependencies$17, function createTyped(_ref) {
	  var {
	    BigNumber,
	    Complex,
	    DenseMatrix,
	    Fraction
	  } = _ref;
	  // TODO: typed-function must be able to silently ignore signatures with unknown data types

	  // get a new instance of typed-function
	  var typed = _createTyped2();

	  // define all types. The order of the types determines in which order function
	  // arguments are type-checked (so for performance it's important to put the
	  // most used types first).
	  typed.clear();
	  typed.addTypes([{
	    name: 'number',
	    test: isNumber
	  }, {
	    name: 'Complex',
	    test: isComplex
	  }, {
	    name: 'BigNumber',
	    test: isBigNumber
	  }, {
	    name: 'Fraction',
	    test: isFraction
	  }, {
	    name: 'Unit',
	    test: isUnit
	  },
	  // The following type matches a valid variable name, i.e., an alphanumeric
	  // string starting with an alphabetic character. It is used (at least)
	  // in the definition of the derivative() function, as the argument telling
	  // what to differentiate over must (currently) be a variable.
	  {
	    name: 'identifier',
	    test: s => isString && /^(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF])(?:[0-9A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF])*$/.test(s)
	  }, {
	    name: 'string',
	    test: isString
	  }, {
	    name: 'Chain',
	    test: isChain
	  }, {
	    name: 'Array',
	    test: isArray
	  }, {
	    name: 'Matrix',
	    test: isMatrix
	  }, {
	    name: 'DenseMatrix',
	    test: isDenseMatrix
	  }, {
	    name: 'SparseMatrix',
	    test: isSparseMatrix
	  }, {
	    name: 'Range',
	    test: isRange
	  }, {
	    name: 'Index',
	    test: isIndex
	  }, {
	    name: 'boolean',
	    test: isBoolean
	  }, {
	    name: 'ResultSet',
	    test: isResultSet
	  }, {
	    name: 'Help',
	    test: isHelp
	  }, {
	    name: 'function',
	    test: isFunction
	  }, {
	    name: 'Date',
	    test: isDate
	  }, {
	    name: 'RegExp',
	    test: isRegExp
	  }, {
	    name: 'null',
	    test: isNull
	  }, {
	    name: 'undefined',
	    test: isUndefined
	  }, {
	    name: 'AccessorNode',
	    test: isAccessorNode
	  }, {
	    name: 'ArrayNode',
	    test: isArrayNode
	  }, {
	    name: 'AssignmentNode',
	    test: isAssignmentNode
	  }, {
	    name: 'BlockNode',
	    test: isBlockNode
	  }, {
	    name: 'ConditionalNode',
	    test: isConditionalNode
	  }, {
	    name: 'ConstantNode',
	    test: isConstantNode
	  }, {
	    name: 'FunctionNode',
	    test: isFunctionNode
	  }, {
	    name: 'FunctionAssignmentNode',
	    test: isFunctionAssignmentNode
	  }, {
	    name: 'IndexNode',
	    test: isIndexNode
	  }, {
	    name: 'Node',
	    test: isNode
	  }, {
	    name: 'ObjectNode',
	    test: isObjectNode
	  }, {
	    name: 'OperatorNode',
	    test: isOperatorNode
	  }, {
	    name: 'ParenthesisNode',
	    test: isParenthesisNode
	  }, {
	    name: 'RangeNode',
	    test: isRangeNode
	  }, {
	    name: 'RelationalNode',
	    test: isRelationalNode
	  }, {
	    name: 'SymbolNode',
	    test: isSymbolNode
	  }, {
	    name: 'Map',
	    test: isMap
	  }, {
	    name: 'Object',
	    test: isObject
	  } // order 'Object' last, it matches on other classes too
	  ]);

	  typed.addConversions([{
	    from: 'number',
	    to: 'BigNumber',
	    convert: function convert(x) {
	      if (!BigNumber) {
	        throwNoBignumber(x);
	      }

	      // note: conversion from number to BigNumber can fail if x has >15 digits
	      if (digits(x) > 15) {
	        throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');
	      }
	      return new BigNumber(x);
	    }
	  }, {
	    from: 'number',
	    to: 'Complex',
	    convert: function convert(x) {
	      if (!Complex) {
	        throwNoComplex(x);
	      }
	      return new Complex(x, 0);
	    }
	  }, {
	    from: 'BigNumber',
	    to: 'Complex',
	    convert: function convert(x) {
	      if (!Complex) {
	        throwNoComplex(x);
	      }
	      return new Complex(x.toNumber(), 0);
	    }
	  }, {
	    from: 'Fraction',
	    to: 'BigNumber',
	    convert: function convert(x) {
	      throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' + 'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');
	    }
	  }, {
	    from: 'Fraction',
	    to: 'Complex',
	    convert: function convert(x) {
	      if (!Complex) {
	        throwNoComplex(x);
	      }
	      return new Complex(x.valueOf(), 0);
	    }
	  }, {
	    from: 'number',
	    to: 'Fraction',
	    convert: function convert(x) {
	      if (!Fraction) {
	        throwNoFraction(x);
	      }
	      var f = new Fraction(x);
	      if (f.valueOf() !== x) {
	        throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');
	      }
	      return f;
	    }
	  }, {
	    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
	    //  from: 'Fraction',
	    //  to: 'number',
	    //  convert: function (x) {
	    //    return x.valueOf()
	    //  }
	    // }, {
	    from: 'string',
	    to: 'number',
	    convert: function convert(x) {
	      var n = Number(x);
	      if (isNaN(n)) {
	        throw new Error('Cannot convert "' + x + '" to a number');
	      }
	      return n;
	    }
	  }, {
	    from: 'string',
	    to: 'BigNumber',
	    convert: function convert(x) {
	      if (!BigNumber) {
	        throwNoBignumber(x);
	      }
	      try {
	        return new BigNumber(x);
	      } catch (err) {
	        throw new Error('Cannot convert "' + x + '" to BigNumber');
	      }
	    }
	  }, {
	    from: 'string',
	    to: 'Fraction',
	    convert: function convert(x) {
	      if (!Fraction) {
	        throwNoFraction(x);
	      }
	      try {
	        return new Fraction(x);
	      } catch (err) {
	        throw new Error('Cannot convert "' + x + '" to Fraction');
	      }
	    }
	  }, {
	    from: 'string',
	    to: 'Complex',
	    convert: function convert(x) {
	      if (!Complex) {
	        throwNoComplex(x);
	      }
	      try {
	        return new Complex(x);
	      } catch (err) {
	        throw new Error('Cannot convert "' + x + '" to Complex');
	      }
	    }
	  }, {
	    from: 'boolean',
	    to: 'number',
	    convert: function convert(x) {
	      return +x;
	    }
	  }, {
	    from: 'boolean',
	    to: 'BigNumber',
	    convert: function convert(x) {
	      if (!BigNumber) {
	        throwNoBignumber(x);
	      }
	      return new BigNumber(+x);
	    }
	  }, {
	    from: 'boolean',
	    to: 'Fraction',
	    convert: function convert(x) {
	      if (!Fraction) {
	        throwNoFraction(x);
	      }
	      return new Fraction(+x);
	    }
	  }, {
	    from: 'boolean',
	    to: 'string',
	    convert: function convert(x) {
	      return String(x);
	    }
	  }, {
	    from: 'Array',
	    to: 'Matrix',
	    convert: function convert(array) {
	      if (!DenseMatrix) {
	        throwNoMatrix();
	      }
	      return new DenseMatrix(array);
	    }
	  }, {
	    from: 'Matrix',
	    to: 'Array',
	    convert: function convert(matrix) {
	      return matrix.valueOf();
	    }
	  }]);

	  // Provide a suggestion on how to call a function elementwise
	  // This was added primarily as guidance for the v10 -> v11 transition,
	  // and could potentially be removed in the future if it no longer seems
	  // to be helpful.
	  typed.onMismatch = (name, args, signatures) => {
	    var usualError = typed.createError(name, args, signatures);
	    if (['wrongType', 'mismatch'].includes(usualError.data.category) && args.length === 1 && isCollection(args[0]) &&
	    // check if the function can be unary:
	    signatures.some(sig => !sig.params.includes(','))) {
	      var err = new TypeError("Function '".concat(name, "' doesn't apply to matrices. To call it ") + "elementwise on a matrix 'M', try 'map(M, ".concat(name, ")'."));
	      err.data = usualError.data;
	      throw err;
	    }
	    throw usualError;
	  };

	  // Provide a suggestion on how to call a function elementwise
	  // This was added primarily as guidance for the v10 -> v11 transition,
	  // and could potentially be removed in the future if it no longer seems
	  // to be helpful.
	  typed.onMismatch = (name, args, signatures) => {
	    var usualError = typed.createError(name, args, signatures);
	    if (['wrongType', 'mismatch'].includes(usualError.data.category) && args.length === 1 && isCollection(args[0]) &&
	    // check if the function can be unary:
	    signatures.some(sig => !sig.params.includes(','))) {
	      var err = new TypeError("Function '".concat(name, "' doesn't apply to matrices. To call it ") + "elementwise on a matrix 'M', try 'map(M, ".concat(name, ")'."));
	      err.data = usualError.data;
	      throw err;
	    }
	    throw usualError;
	  };
	  return typed;
	});
	function throwNoBignumber(x) {
	  throw new Error("Cannot convert value ".concat(x, " into a BigNumber: no class 'BigNumber' provided"));
	}
	function throwNoComplex(x) {
	  throw new Error("Cannot convert value ".concat(x, " into a Complex number: no class 'Complex' provided"));
	}
	function throwNoMatrix() {
	  throw new Error('Cannot convert array into a Matrix: no class \'DenseMatrix\' provided');
	}
	function throwNoFraction(x) {
	  throw new Error("Cannot convert value ".concat(x, " into a Fraction, no class 'Fraction' provided."));
	}

	/*!
	 *  decimal.js v10.4.3
	 *  An arbitrary-precision Decimal type for JavaScript.
	 *  https://github.com/MikeMcl/decimal.js
	 *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>
	 *  MIT Licence
	 */


	// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //


	  // The maximum exponent magnitude.
	  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.
	var EXP_LIMIT = 9e15,                      // 0 to 9e15

	  // The limit on the value of `precision`, and on the value of the first argument to
	  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
	  MAX_DIGITS = 1e9,                        // 0 to 1e9

	  // Base conversion alphabet.
	  NUMERALS = '0123456789abcdef',

	  // The natural logarithm of 10 (1025 digits).
	  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',

	  // Pi (1025 digits).
	  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',


	  // The initial configuration properties of the Decimal constructor.
	  DEFAULTS = {

	    // These values must be integers within the stated ranges (inclusive).
	    // Most of these values can be changed at run-time using the `Decimal.config` method.

	    // The maximum number of significant digits of the result of a calculation or base conversion.
	    // E.g. `Decimal.config({ precision: 20 });`
	    precision: 20,                         // 1 to MAX_DIGITS

	    // The rounding mode used when rounding to `precision`.
	    //
	    // ROUND_UP         0 Away from zero.
	    // ROUND_DOWN       1 Towards zero.
	    // ROUND_CEIL       2 Towards +Infinity.
	    // ROUND_FLOOR      3 Towards -Infinity.
	    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
	    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
	    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
	    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
	    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
	    //
	    // E.g.
	    // `Decimal.rounding = 4;`
	    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
	    rounding: 4,                           // 0 to 8

	    // The modulo mode used when calculating the modulus: a mod n.
	    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
	    // The remainder (r) is calculated as: r = a - n * q.
	    //
	    // UP         0 The remainder is positive if the dividend is negative, else is negative.
	    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
	    // FLOOR      3 The remainder has the same sign as the divisor (Python %).
	    // HALF_EVEN  6 The IEEE 754 remainder function.
	    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
	    //
	    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
	    // division (9) are commonly used for the modulus operation. The other rounding modes can also
	    // be used, but they may not give useful results.
	    modulo: 1,                             // 0 to 9

	    // The exponent value at and beneath which `toString` returns exponential notation.
	    // JavaScript numbers: -7
	    toExpNeg: -7,                          // 0 to -EXP_LIMIT

	    // The exponent value at and above which `toString` returns exponential notation.
	    // JavaScript numbers: 21
	    toExpPos:  21,                         // 0 to EXP_LIMIT

	    // The minimum exponent value, beneath which underflow to zero occurs.
	    // JavaScript numbers: -324  (5e-324)
	    minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT

	    // The maximum exponent value, above which overflow to Infinity occurs.
	    // JavaScript numbers: 308  (1.7976931348623157e+308)
	    maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT

	    // Whether to use cryptographically-secure random number generation, if available.
	    crypto: false                          // true/false
	  },


	// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //


	  inexact, quadrant,
	  external = true,

	  decimalError = '[DecimalError] ',
	  invalidArgument = decimalError + 'Invalid argument: ',
	  precisionLimitExceeded = decimalError + 'Precision limit exceeded',
	  cryptoUnavailable = decimalError + 'crypto unavailable',
	  tag = '[object Decimal]',

	  mathfloor = Math.floor,
	  mathpow = Math.pow,

	  isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
	  isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
	  isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
	  isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,

	  BASE = 1e7,
	  LOG_BASE = 7,
	  MAX_SAFE_INTEGER = 9007199254740991,

	  LN10_PRECISION = LN10.length - 1,
	  PI_PRECISION = PI.length - 1,

	  // Decimal.prototype object
	  P = { toStringTag: tag };


	// Decimal prototype methods


	/*
	 *  absoluteValue             abs
	 *  ceil
	 *  clampedTo                 clamp
	 *  comparedTo                cmp
	 *  cosine                    cos
	 *  cubeRoot                  cbrt
	 *  decimalPlaces             dp
	 *  dividedBy                 div
	 *  dividedToIntegerBy        divToInt
	 *  equals                    eq
	 *  floor
	 *  greaterThan               gt
	 *  greaterThanOrEqualTo      gte
	 *  hyperbolicCosine          cosh
	 *  hyperbolicSine            sinh
	 *  hyperbolicTangent         tanh
	 *  inverseCosine             acos
	 *  inverseHyperbolicCosine   acosh
	 *  inverseHyperbolicSine     asinh
	 *  inverseHyperbolicTangent  atanh
	 *  inverseSine               asin
	 *  inverseTangent            atan
	 *  isFinite
	 *  isInteger                 isInt
	 *  isNaN
	 *  isNegative                isNeg
	 *  isPositive                isPos
	 *  isZero
	 *  lessThan                  lt
	 *  lessThanOrEqualTo         lte
	 *  logarithm                 log
	 *  [maximum]                 [max]
	 *  [minimum]                 [min]
	 *  minus                     sub
	 *  modulo                    mod
	 *  naturalExponential        exp
	 *  naturalLogarithm          ln
	 *  negated                   neg
	 *  plus                      add
	 *  precision                 sd
	 *  round
	 *  sine                      sin
	 *  squareRoot                sqrt
	 *  tangent                   tan
	 *  times                     mul
	 *  toBinary
	 *  toDecimalPlaces           toDP
	 *  toExponential
	 *  toFixed
	 *  toFraction
	 *  toHexadecimal             toHex
	 *  toNearest
	 *  toNumber
	 *  toOctal
	 *  toPower                   pow
	 *  toPrecision
	 *  toSignificantDigits       toSD
	 *  toString
	 *  truncated                 trunc
	 *  valueOf                   toJSON
	 */


	/*
	 * Return a new Decimal whose value is the absolute value of this Decimal.
	 *
	 */
	P.absoluteValue = P.abs = function () {
	  var x = new this.constructor(this);
	  if (x.s < 0) x.s = 1;
	  return finalise(x);
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
	 * direction of positive Infinity.
	 *
	 */
	P.ceil = function () {
	  return finalise(new this.constructor(this), this.e + 1, 2);
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal clamped to the range
	 * delineated by `min` and `max`.
	 *
	 * min {number|string|Decimal}
	 * max {number|string|Decimal}
	 *
	 */
	P.clampedTo = P.clamp = function (min, max) {
	  var k,
	    x = this,
	    Ctor = x.constructor;
	  min = new Ctor(min);
	  max = new Ctor(max);
	  if (!min.s || !max.s) return new Ctor(NaN);
	  if (min.gt(max)) throw Error(invalidArgument + max);
	  k = x.cmp(min);
	  return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);
	};


	/*
	 * Return
	 *   1    if the value of this Decimal is greater than the value of `y`,
	 *  -1    if the value of this Decimal is less than the value of `y`,
	 *   0    if they have the same value,
	 *   NaN  if the value of either Decimal is NaN.
	 *
	 */
	P.comparedTo = P.cmp = function (y) {
	  var i, j, xdL, ydL,
	    x = this,
	    xd = x.d,
	    yd = (y = new x.constructor(y)).d,
	    xs = x.s,
	    ys = y.s;

	  // Either NaN or ±Infinity?
	  if (!xd || !yd) {
	    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
	  }

	  // Either zero?
	  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;

	  // Signs differ?
	  if (xs !== ys) return xs;

	  // Compare exponents.
	  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;

	  xdL = xd.length;
	  ydL = yd.length;

	  // Compare digit by digit.
	  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
	    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
	  }

	  // Compare lengths.
	  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
	};


	/*
	 * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
	 *
	 * Domain: [-Infinity, Infinity]
	 * Range: [-1, 1]
	 *
	 * cos(0)         = 1
	 * cos(-0)        = 1
	 * cos(Infinity)  = NaN
	 * cos(-Infinity) = NaN
	 * cos(NaN)       = NaN
	 *
	 */
	P.cosine = P.cos = function () {
	  var pr, rm,
	    x = this,
	    Ctor = x.constructor;

	  if (!x.d) return new Ctor(NaN);

	  // cos(0) = cos(-0) = 1
	  if (!x.d[0]) return new Ctor(1);

	  pr = Ctor.precision;
	  rm = Ctor.rounding;
	  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
	  Ctor.rounding = 1;

	  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));

	  Ctor.precision = pr;
	  Ctor.rounding = rm;

	  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
	};


	/*
	 *
	 * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
	 * `precision` significant digits using rounding mode `rounding`.
	 *
	 *  cbrt(0)  =  0
	 *  cbrt(-0) = -0
	 *  cbrt(1)  =  1
	 *  cbrt(-1) = -1
	 *  cbrt(N)  =  N
	 *  cbrt(-I) = -I
	 *  cbrt(I)  =  I
	 *
	 * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
	 *
	 */
	P.cubeRoot = P.cbrt = function () {
	  var e, m, n, r, rep, s, sd, t, t3, t3plusx,
	    x = this,
	    Ctor = x.constructor;

	  if (!x.isFinite() || x.isZero()) return new Ctor(x);
	  external = false;

	  // Initial estimate.
	  s = x.s * mathpow(x.s * x, 1 / 3);

	   // Math.cbrt underflow/overflow?
	   // Pass x to Math.pow as integer, then adjust the exponent of the result.
	  if (!s || Math.abs(s) == 1 / 0) {
	    n = digitsToString(x.d);
	    e = x.e;

	    // Adjust n exponent so it is a multiple of 3 away from x exponent.
	    if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');
	    s = mathpow(n, 1 / 3);

	    // Rarely, e may be one less than the result exponent value.
	    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));

	    if (s == 1 / 0) {
	      n = '5e' + e;
	    } else {
	      n = s.toExponential();
	      n = n.slice(0, n.indexOf('e') + 1) + e;
	    }

	    r = new Ctor(n);
	    r.s = x.s;
	  } else {
	    r = new Ctor(s.toString());
	  }

	  sd = (e = Ctor.precision) + 3;

	  // Halley's method.
	  // TODO? Compare Newton's method.
	  for (;;) {
	    t = r;
	    t3 = t.times(t).times(t);
	    t3plusx = t3.plus(x);
	    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);

	    // TODO? Replace with for-loop and checkRoundingDigits.
	    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
	      n = n.slice(sd - 3, sd + 1);

	      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
	      // , i.e. approaching a rounding boundary, continue the iteration.
	      if (n == '9999' || !rep && n == '4999') {

	        // On the first iteration only, check to see if rounding up gives the exact result as the
	        // nines may infinitely repeat.
	        if (!rep) {
	          finalise(t, e + 1, 0);

	          if (t.times(t).times(t).eq(x)) {
	            r = t;
	            break;
	          }
	        }

	        sd += 4;
	        rep = 1;
	      } else {

	        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
	        // If not, then there are further digits and m will be truthy.
	        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

	          // Truncate to the first rounding digit.
	          finalise(r, e + 1, 1);
	          m = !r.times(r).times(r).eq(x);
	        }

	        break;
	      }
	    }
	  }

	  external = true;

	  return finalise(r, e, Ctor.rounding, m);
	};


	/*
	 * Return the number of decimal places of the value of this Decimal.
	 *
	 */
	P.decimalPlaces = P.dp = function () {
	  var w,
	    d = this.d,
	    n = NaN;

	  if (d) {
	    w = d.length - 1;
	    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;

	    // Subtract the number of trailing zeros of the last word.
	    w = d[w];
	    if (w) for (; w % 10 == 0; w /= 10) n--;
	    if (n < 0) n = 0;
	  }

	  return n;
	};


	/*
	 *  n / 0 = I
	 *  n / N = N
	 *  n / I = 0
	 *  0 / n = 0
	 *  0 / 0 = N
	 *  0 / N = N
	 *  0 / I = 0
	 *  N / n = N
	 *  N / 0 = N
	 *  N / N = N
	 *  N / I = N
	 *  I / n = I
	 *  I / 0 = I
	 *  I / N = N
	 *  I / I = N
	 *
	 * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
	 * `precision` significant digits using rounding mode `rounding`.
	 *
	 */
	P.dividedBy = P.div = function (y) {
	  return divide(this, new this.constructor(y));
	};


	/*
	 * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
	 * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
	 *
	 */
	P.dividedToIntegerBy = P.divToInt = function (y) {
	  var x = this,
	    Ctor = x.constructor;
	  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
	};


	/*
	 * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
	 *
	 */
	P.equals = P.eq = function (y) {
	  return this.cmp(y) === 0;
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
	 * direction of negative Infinity.
	 *
	 */
	P.floor = function () {
	  return finalise(new this.constructor(this), this.e + 1, 3);
	};


	/*
	 * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
	 * false.
	 *
	 */
	P.greaterThan = P.gt = function (y) {
	  return this.cmp(y) > 0;
	};


	/*
	 * Return true if the value of this Decimal is greater than or equal to the value of `y`,
	 * otherwise return false.
	 *
	 */
	P.greaterThanOrEqualTo = P.gte = function (y) {
	  var k = this.cmp(y);
	  return k == 1 || k === 0;
	};


	/*
	 * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
	 * Decimal.
	 *
	 * Domain: [-Infinity, Infinity]
	 * Range: [1, Infinity]
	 *
	 * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
	 *
	 * cosh(0)         = 1
	 * cosh(-0)        = 1
	 * cosh(Infinity)  = Infinity
	 * cosh(-Infinity) = Infinity
	 * cosh(NaN)       = NaN
	 *
	 *  x        time taken (ms)   result
	 * 1000      9                 9.8503555700852349694e+433
	 * 10000     25                4.4034091128314607936e+4342
	 * 100000    171               1.4033316802130615897e+43429
	 * 1000000   3817              1.5166076984010437725e+434294
	 * 10000000  abandoned after 2 minute wait
	 *
	 * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
	 *
	 */
	P.hyperbolicCosine = P.cosh = function () {
	  var k, n, pr, rm, len,
	    x = this,
	    Ctor = x.constructor,
	    one = new Ctor(1);

	  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
	  if (x.isZero()) return one;

	  pr = Ctor.precision;
	  rm = Ctor.rounding;
	  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
	  Ctor.rounding = 1;
	  len = x.d.length;

	  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
	  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))

	  // Estimate the optimum number of times to use the argument reduction.
	  // TODO? Estimation reused from cosine() and may not be optimal here.
	  if (len < 32) {
	    k = Math.ceil(len / 3);
	    n = (1 / tinyPow(4, k)).toString();
	  } else {
	    k = 16;
	    n = '2.3283064365386962890625e-10';
	  }

	  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);

	  // Reverse argument reduction
	  var cosh2_x,
	    i = k,
	    d8 = new Ctor(8);
	  for (; i--;) {
	    cosh2_x = x.times(x);
	    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
	  }

	  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
	};


	/*
	 * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
	 * Decimal.
	 *
	 * Domain: [-Infinity, Infinity]
	 * Range: [-Infinity, Infinity]
	 *
	 * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
	 *
	 * sinh(0)         = 0
	 * sinh(-0)        = -0
	 * sinh(Infinity)  = Infinity
	 * sinh(-Infinity) = -Infinity
	 * sinh(NaN)       = NaN
	 *
	 * x        time taken (ms)
	 * 10       2 ms
	 * 100      5 ms
	 * 1000     14 ms
	 * 10000    82 ms
	 * 100000   886 ms            1.4033316802130615897e+43429
	 * 200000   2613 ms
	 * 300000   5407 ms
	 * 400000   8824 ms
	 * 500000   13026 ms          8.7080643612718084129e+217146
	 * 1000000  48543 ms
	 *
	 * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
	 *
	 */
	P.hyperbolicSine = P.sinh = function () {
	  var k, pr, rm, len,
	    x = this,
	    Ctor = x.constructor;

	  if (!x.isFinite() || x.isZero()) return new Ctor(x);

	  pr = Ctor.precision;
	  rm = Ctor.rounding;
	  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
	  Ctor.rounding = 1;
	  len = x.d.length;

	  if (len < 3) {
	    x = taylorSeries(Ctor, 2, x, x, true);
	  } else {

	    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
	    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
	    // 3 multiplications and 1 addition

	    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
	    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
	    // 4 multiplications and 2 additions

	    // Estimate the optimum number of times to use the argument reduction.
	    k = 1.4 * Math.sqrt(len);
	    k = k > 16 ? 16 : k | 0;

	    x = x.times(1 / tinyPow(5, k));
	    x = taylorSeries(Ctor, 2, x, x, true);

	    // Reverse argument reduction
	    var sinh2_x,
	      d5 = new Ctor(5),
	      d16 = new Ctor(16),
	      d20 = new Ctor(20);
	    for (; k--;) {
	      sinh2_x = x.times(x);
	      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
	    }
	  }

	  Ctor.precision = pr;
	  Ctor.rounding = rm;

	  return finalise(x, pr, rm, true);
	};


	/*
	 * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
	 * Decimal.
	 *
	 * Domain: [-Infinity, Infinity]
	 * Range: [-1, 1]
	 *
	 * tanh(x) = sinh(x) / cosh(x)
	 *
	 * tanh(0)         = 0
	 * tanh(-0)        = -0
	 * tanh(Infinity)  = 1
	 * tanh(-Infinity) = -1
	 * tanh(NaN)       = NaN
	 *
	 */
	P.hyperbolicTangent = P.tanh = function () {
	  var pr, rm,
	    x = this,
	    Ctor = x.constructor;

	  if (!x.isFinite()) return new Ctor(x.s);
	  if (x.isZero()) return new Ctor(x);

	  pr = Ctor.precision;
	  rm = Ctor.rounding;
	  Ctor.precision = pr + 7;
	  Ctor.rounding = 1;

	  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
	};


	/*
	 * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
	 * this Decimal.
	 *
	 * Domain: [-1, 1]
	 * Range: [0, pi]
	 *
	 * acos(x) = pi/2 - asin(x)
	 *
	 * acos(0)       = pi/2
	 * acos(-0)      = pi/2
	 * acos(1)       = 0
	 * acos(-1)      = pi
	 * acos(1/2)     = pi/3
	 * acos(-1/2)    = 2*pi/3
	 * acos(|x| > 1) = NaN
	 * acos(NaN)     = NaN
	 *
	 */
	P.inverseCosine = P.acos = function () {
	  var halfPi,
	    x = this,
	    Ctor = x.constructor,
	    k = x.abs().cmp(1),
	    pr = Ctor.precision,
	    rm = Ctor.rounding;

	  if (k !== -1) {
	    return k === 0
	      // |x| is 1
	      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)
	      // |x| > 1 or x is NaN
	      : new Ctor(NaN);
	  }

	  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);

	  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3

	  Ctor.precision = pr + 6;
	  Ctor.rounding = 1;

	  x = x.asin();
	  halfPi = getPi(Ctor, pr + 4, rm).times(0.5);

	  Ctor.precision = pr;
	  Ctor.rounding = rm;

	  return halfPi.minus(x);
	};


	/*
	 * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
	 * value of this Decimal.
	 *
	 * Domain: [1, Infinity]
	 * Range: [0, Infinity]
	 *
	 * acosh(x) = ln(x + sqrt(x^2 - 1))
	 *
	 * acosh(x < 1)     = NaN
	 * acosh(NaN)       = NaN
	 * acosh(Infinity)  = Infinity
	 * acosh(-Infinity) = NaN
	 * acosh(0)         = NaN
	 * acosh(-0)        = NaN
	 * acosh(1)         = 0
	 * acosh(-1)        = NaN
	 *
	 */
	P.inverseHyperbolicCosine = P.acosh = function () {
	  var pr, rm,
	    x = this,
	    Ctor = x.constructor;

	  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
	  if (!x.isFinite()) return new Ctor(x);

	  pr = Ctor.precision;
	  rm = Ctor.rounding;
	  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
	  Ctor.rounding = 1;
	  external = false;

	  x = x.times(x).minus(1).sqrt().plus(x);

	  external = true;
	  Ctor.precision = pr;
	  Ctor.rounding = rm;

	  return x.ln();
	};


	/*
	 * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
	 * of this Decimal.
	 *
	 * Domain: [-Infinity, Infinity]
	 * Range: [-Infinity, Infinity]
	 *
	 * asinh(x) = ln(x + sqrt(x^2 + 1))
	 *
	 * asinh(NaN)       = NaN
	 * asinh(Infinity)  = Infinity
	 * asinh(-Infinity) = -Infinity
	 * asinh(0)         = 0
	 * asinh(-0)        = -0
	 *
	 */
	P.inverseHyperbolicSine = P.asinh = function () {
	  var pr, rm,
	    x = this,
	    Ctor = x.constructor;

	  if (!x.isFinite() || x.isZero()) return new Ctor(x);

	  pr = Ctor.precision;
	  rm = Ctor.rounding;
	  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
	  Ctor.rounding = 1;
	  external = false;

	  x = x.times(x).plus(1).sqrt().plus(x);

	  external = true;
	  Ctor.precision = pr;
	  Ctor.rounding = rm;

	  return x.ln();
	};


	/*
	 * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
	 * value of this Decimal.
	 *
	 * Domain: [-1, 1]
	 * Range: [-Infinity, Infinity]
	 *
	 * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
	 *
	 * atanh(|x| > 1)   = NaN
	 * atanh(NaN)       = NaN
	 * atanh(Infinity)  = NaN
	 * atanh(-Infinity) = NaN
	 * atanh(0)         = 0
	 * atanh(-0)        = -0
	 * atanh(1)         = Infinity
	 * atanh(-1)        = -Infinity
	 *
	 */
	P.inverseHyperbolicTangent = P.atanh = function () {
	  var pr, rm, wpr, xsd,
	    x = this,
	    Ctor = x.constructor;

	  if (!x.isFinite()) return new Ctor(NaN);
	  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);

	  pr = Ctor.precision;
	  rm = Ctor.rounding;
	  xsd = x.sd();

	  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);

	  Ctor.precision = wpr = xsd - x.e;

	  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);

	  Ctor.precision = pr + 4;
	  Ctor.rounding = 1;

	  x = x.ln();

	  Ctor.precision = pr;
	  Ctor.rounding = rm;

	  return x.times(0.5);
	};


	/*
	 * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
	 * Decimal.
	 *
	 * Domain: [-Infinity, Infinity]
	 * Range: [-pi/2, pi/2]
	 *
	 * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
	 *
	 * asin(0)       = 0
	 * asin(-0)      = -0
	 * asin(1/2)     = pi/6
	 * asin(-1/2)    = -pi/6
	 * asin(1)       = pi/2
	 * asin(-1)      = -pi/2
	 * asin(|x| > 1) = NaN
	 * asin(NaN)     = NaN
	 *
	 * TODO? Compare performance of Taylor series.
	 *
	 */
	P.inverseSine = P.asin = function () {
	  var halfPi, k,
	    pr, rm,
	    x = this,
	    Ctor = x.constructor;

	  if (x.isZero()) return new Ctor(x);

	  k = x.abs().cmp(1);
	  pr = Ctor.precision;
	  rm = Ctor.rounding;

	  if (k !== -1) {

	    // |x| is 1
	    if (k === 0) {
	      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
	      halfPi.s = x.s;
	      return halfPi;
	    }

	    // |x| > 1 or x is NaN
	    return new Ctor(NaN);
	  }

	  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6

	  Ctor.precision = pr + 6;
	  Ctor.rounding = 1;

	  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();

	  Ctor.precision = pr;
	  Ctor.rounding = rm;

	  return x.times(2);
	};


	/*
	 * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
	 * of this Decimal.
	 *
	 * Domain: [-Infinity, Infinity]
	 * Range: [-pi/2, pi/2]
	 *
	 * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
	 *
	 * atan(0)         = 0
	 * atan(-0)        = -0
	 * atan(1)         = pi/4
	 * atan(-1)        = -pi/4
	 * atan(Infinity)  = pi/2
	 * atan(-Infinity) = -pi/2
	 * atan(NaN)       = NaN
	 *
	 */
	P.inverseTangent = P.atan = function () {
	  var i, j, k, n, px, t, r, wpr, x2,
	    x = this,
	    Ctor = x.constructor,
	    pr = Ctor.precision,
	    rm = Ctor.rounding;

	  if (!x.isFinite()) {
	    if (!x.s) return new Ctor(NaN);
	    if (pr + 4 <= PI_PRECISION) {
	      r = getPi(Ctor, pr + 4, rm).times(0.5);
	      r.s = x.s;
	      return r;
	    }
	  } else if (x.isZero()) {
	    return new Ctor(x);
	  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
	    r = getPi(Ctor, pr + 4, rm).times(0.25);
	    r.s = x.s;
	    return r;
	  }

	  Ctor.precision = wpr = pr + 10;
	  Ctor.rounding = 1;

	  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);

	  // Argument reduction
	  // Ensure |x| < 0.42
	  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))

	  k = Math.min(28, wpr / LOG_BASE + 2 | 0);

	  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));

	  external = false;

	  j = Math.ceil(wpr / LOG_BASE);
	  n = 1;
	  x2 = x.times(x);
	  r = new Ctor(x);
	  px = x;

	  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
	  for (; i !== -1;) {
	    px = px.times(x2);
	    t = r.minus(px.div(n += 2));

	    px = px.times(x2);
	    r = t.plus(px.div(n += 2));

	    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);
	  }

	  if (k) r = r.times(2 << (k - 1));

	  external = true;

	  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
	};


	/*
	 * Return true if the value of this Decimal is a finite number, otherwise return false.
	 *
	 */
	P.isFinite = function () {
	  return !!this.d;
	};


	/*
	 * Return true if the value of this Decimal is an integer, otherwise return false.
	 *
	 */
	P.isInteger = P.isInt = function () {
	  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
	};


	/*
	 * Return true if the value of this Decimal is NaN, otherwise return false.
	 *
	 */
	P.isNaN = function () {
	  return !this.s;
	};


	/*
	 * Return true if the value of this Decimal is negative, otherwise return false.
	 *
	 */
	P.isNegative = P.isNeg = function () {
	  return this.s < 0;
	};


	/*
	 * Return true if the value of this Decimal is positive, otherwise return false.
	 *
	 */
	P.isPositive = P.isPos = function () {
	  return this.s > 0;
	};


	/*
	 * Return true if the value of this Decimal is 0 or -0, otherwise return false.
	 *
	 */
	P.isZero = function () {
	  return !!this.d && this.d[0] === 0;
	};


	/*
	 * Return true if the value of this Decimal is less than `y`, otherwise return false.
	 *
	 */
	P.lessThan = P.lt = function (y) {
	  return this.cmp(y) < 0;
	};


	/*
	 * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
	 *
	 */
	P.lessThanOrEqualTo = P.lte = function (y) {
	  return this.cmp(y) < 1;
	};


	/*
	 * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 * If no base is specified, return log[10](arg).
	 *
	 * log[base](arg) = ln(arg) / ln(base)
	 *
	 * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
	 * otherwise:
	 *
	 * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
	 * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
	 * between the result and the correctly rounded result will be one ulp (unit in the last place).
	 *
	 * log[-b](a)       = NaN
	 * log[0](a)        = NaN
	 * log[1](a)        = NaN
	 * log[NaN](a)      = NaN
	 * log[Infinity](a) = NaN
	 * log[b](0)        = -Infinity
	 * log[b](-0)       = -Infinity
	 * log[b](-a)       = NaN
	 * log[b](1)        = 0
	 * log[b](Infinity) = Infinity
	 * log[b](NaN)      = NaN
	 *
	 * [base] {number|string|Decimal} The base of the logarithm.
	 *
	 */
	P.logarithm = P.log = function (base) {
	  var isBase10, d, denominator, k, inf, num, sd, r,
	    arg = this,
	    Ctor = arg.constructor,
	    pr = Ctor.precision,
	    rm = Ctor.rounding,
	    guard = 5;

	  // Default base is 10.
	  if (base == null) {
	    base = new Ctor(10);
	    isBase10 = true;
	  } else {
	    base = new Ctor(base);
	    d = base.d;

	    // Return NaN if base is negative, or non-finite, or is 0 or 1.
	    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);

	    isBase10 = base.eq(10);
	  }

	  d = arg.d;

	  // Is arg negative, non-finite, 0 or 1?
	  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
	    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
	  }

	  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an
	  // integer power of 10.
	  if (isBase10) {
	    if (d.length > 1) {
	      inf = true;
	    } else {
	      for (k = d[0]; k % 10 === 0;) k /= 10;
	      inf = k !== 1;
	    }
	  }

	  external = false;
	  sd = pr + guard;
	  num = naturalLogarithm(arg, sd);
	  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);

	  // The result will have 5 rounding digits.
	  r = divide(num, denominator, sd, 1);

	  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
	  // calculate 10 further digits.
	  //
	  // If the result is known to have an infinite decimal expansion, repeat this until it is clear
	  // that the result is above or below the boundary. Otherwise, if after calculating the 10
	  // further digits, the last 14 are nines, round up and assume the result is exact.
	  // Also assume the result is exact if the last 14 are zero.
	  //
	  // Example of a result that will be incorrectly rounded:
	  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
	  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
	  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
	  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
	  // place is still 2.6.
	  if (checkRoundingDigits(r.d, k = pr, rm)) {

	    do {
	      sd += 10;
	      num = naturalLogarithm(arg, sd);
	      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
	      r = divide(num, denominator, sd, 1);

	      if (!inf) {

	        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
	        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
	          r = finalise(r, pr + 1, 0);
	        }

	        break;
	      }
	    } while (checkRoundingDigits(r.d, k += 10, rm));
	  }

	  external = true;

	  return finalise(r, pr, rm);
	};


	/*
	 * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
	 *
	 * arguments {number|string|Decimal}
	 *
	P.max = function () {
	  Array.prototype.push.call(arguments, this);
	  return maxOrMin(this.constructor, arguments, 'lt');
	};
	 */


	/*
	 * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
	 *
	 * arguments {number|string|Decimal}
	 *
	P.min = function () {
	  Array.prototype.push.call(arguments, this);
	  return maxOrMin(this.constructor, arguments, 'gt');
	};
	 */


	/*
	 *  n - 0 = n
	 *  n - N = N
	 *  n - I = -I
	 *  0 - n = -n
	 *  0 - 0 = 0
	 *  0 - N = N
	 *  0 - I = -I
	 *  N - n = N
	 *  N - 0 = N
	 *  N - N = N
	 *  N - I = N
	 *  I - n = I
	 *  I - 0 = I
	 *  I - N = N
	 *  I - I = N
	 *
	 * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 */
	P.minus = P.sub = function (y) {
	  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,
	    x = this,
	    Ctor = x.constructor;

	  y = new Ctor(y);

	  // If either is not finite...
	  if (!x.d || !y.d) {

	    // Return NaN if either is NaN.
	    if (!x.s || !y.s) y = new Ctor(NaN);

	    // Return y negated if x is finite and y is ±Infinity.
	    else if (x.d) y.s = -y.s;

	    // Return x if y is finite and x is ±Infinity.
	    // Return x if both are ±Infinity with different signs.
	    // Return NaN if both are ±Infinity with the same sign.
	    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);

	    return y;
	  }

	  // If signs differ...
	  if (x.s != y.s) {
	    y.s = -y.s;
	    return x.plus(y);
	  }

	  xd = x.d;
	  yd = y.d;
	  pr = Ctor.precision;
	  rm = Ctor.rounding;

	  // If either is zero...
	  if (!xd[0] || !yd[0]) {

	    // Return y negated if x is zero and y is non-zero.
	    if (yd[0]) y.s = -y.s;

	    // Return x if y is zero and x is non-zero.
	    else if (xd[0]) y = new Ctor(x);

	    // Return zero if both are zero.
	    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
	    else return new Ctor(rm === 3 ? -0 : 0);

	    return external ? finalise(y, pr, rm) : y;
	  }

	  // x and y are finite, non-zero numbers with the same sign.

	  // Calculate base 1e7 exponents.
	  e = mathfloor(y.e / LOG_BASE);
	  xe = mathfloor(x.e / LOG_BASE);

	  xd = xd.slice();
	  k = xe - e;

	  // If base 1e7 exponents differ...
	  if (k) {
	    xLTy = k < 0;

	    if (xLTy) {
	      d = xd;
	      k = -k;
	      len = yd.length;
	    } else {
	      d = yd;
	      e = xe;
	      len = xd.length;
	    }

	    // Numbers with massively different exponents would result in a very high number of
	    // zeros needing to be prepended, but this can be avoided while still ensuring correct
	    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
	    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;

	    if (k > i) {
	      k = i;
	      d.length = 1;
	    }

	    // Prepend zeros to equalise exponents.
	    d.reverse();
	    for (i = k; i--;) d.push(0);
	    d.reverse();

	  // Base 1e7 exponents equal.
	  } else {

	    // Check digits to determine which is the bigger number.

	    i = xd.length;
	    len = yd.length;
	    xLTy = i < len;
	    if (xLTy) len = i;

	    for (i = 0; i < len; i++) {
	      if (xd[i] != yd[i]) {
	        xLTy = xd[i] < yd[i];
	        break;
	      }
	    }

	    k = 0;
	  }

	  if (xLTy) {
	    d = xd;
	    xd = yd;
	    yd = d;
	    y.s = -y.s;
	  }

	  len = xd.length;

	  // Append zeros to `xd` if shorter.
	  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.
	  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;

	  // Subtract yd from xd.
	  for (i = yd.length; i > k;) {

	    if (xd[--i] < yd[i]) {
	      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;
	      --xd[j];
	      xd[i] += BASE;
	    }

	    xd[i] -= yd[i];
	  }

	  // Remove trailing zeros.
	  for (; xd[--len] === 0;) xd.pop();

	  // Remove leading zeros and adjust exponent accordingly.
	  for (; xd[0] === 0; xd.shift()) --e;

	  // Zero?
	  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);

	  y.d = xd;
	  y.e = getBase10Exponent(xd, e);

	  return external ? finalise(y, pr, rm) : y;
	};


	/*
	 *   n % 0 =  N
	 *   n % N =  N
	 *   n % I =  n
	 *   0 % n =  0
	 *  -0 % n = -0
	 *   0 % 0 =  N
	 *   0 % N =  N
	 *   0 % I =  0
	 *   N % n =  N
	 *   N % 0 =  N
	 *   N % N =  N
	 *   N % I =  N
	 *   I % n =  N
	 *   I % 0 =  N
	 *   I % N =  N
	 *   I % I =  N
	 *
	 * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
	 * `precision` significant digits using rounding mode `rounding`.
	 *
	 * The result depends on the modulo mode.
	 *
	 */
	P.modulo = P.mod = function (y) {
	  var q,
	    x = this,
	    Ctor = x.constructor;

	  y = new Ctor(y);

	  // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.
	  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);

	  // Return x if y is ±Infinity or x is ±0.
	  if (!y.d || x.d && !x.d[0]) {
	    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
	  }

	  // Prevent rounding of intermediate calculations.
	  external = false;

	  if (Ctor.modulo == 9) {

	    // Euclidian division: q = sign(y) * floor(x / abs(y))
	    // result = x - q * y    where  0 <= result < abs(y)
	    q = divide(x, y.abs(), 0, 3, 1);
	    q.s *= y.s;
	  } else {
	    q = divide(x, y, 0, Ctor.modulo, 1);
	  }

	  q = q.times(y);

	  external = true;

	  return x.minus(q);
	};


	/*
	 * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
	 * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 */
	P.naturalExponential = P.exp = function () {
	  return naturalExponential(this);
	};


	/*
	 * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
	 * rounded to `precision` significant digits using rounding mode `rounding`.
	 *
	 */
	P.naturalLogarithm = P.ln = function () {
	  return naturalLogarithm(this);
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
	 * -1.
	 *
	 */
	P.negated = P.neg = function () {
	  var x = new this.constructor(this);
	  x.s = -x.s;
	  return finalise(x);
	};


	/*
	 *  n + 0 = n
	 *  n + N = N
	 *  n + I = I
	 *  0 + n = n
	 *  0 + 0 = 0
	 *  0 + N = N
	 *  0 + I = I
	 *  N + n = N
	 *  N + 0 = N
	 *  N + N = N
	 *  N + I = N
	 *  I + n = I
	 *  I + 0 = I
	 *  I + N = N
	 *  I + I = I
	 *
	 * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 */
	P.plus = P.add = function (y) {
	  var carry, d, e, i, k, len, pr, rm, xd, yd,
	    x = this,
	    Ctor = x.constructor;

	  y = new Ctor(y);

	  // If either is not finite...
	  if (!x.d || !y.d) {

	    // Return NaN if either is NaN.
	    if (!x.s || !y.s) y = new Ctor(NaN);

	    // Return x if y is finite and x is ±Infinity.
	    // Return x if both are ±Infinity with the same sign.
	    // Return NaN if both are ±Infinity with different signs.
	    // Return y if x is finite and y is ±Infinity.
	    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);

	    return y;
	  }

	   // If signs differ...
	  if (x.s != y.s) {
	    y.s = -y.s;
	    return x.minus(y);
	  }

	  xd = x.d;
	  yd = y.d;
	  pr = Ctor.precision;
	  rm = Ctor.rounding;

	  // If either is zero...
	  if (!xd[0] || !yd[0]) {

	    // Return x if y is zero.
	    // Return y if y is non-zero.
	    if (!yd[0]) y = new Ctor(x);

	    return external ? finalise(y, pr, rm) : y;
	  }

	  // x and y are finite, non-zero numbers with the same sign.

	  // Calculate base 1e7 exponents.
	  k = mathfloor(x.e / LOG_BASE);
	  e = mathfloor(y.e / LOG_BASE);

	  xd = xd.slice();
	  i = k - e;

	  // If base 1e7 exponents differ...
	  if (i) {

	    if (i < 0) {
	      d = xd;
	      i = -i;
	      len = yd.length;
	    } else {
	      d = yd;
	      e = k;
	      len = xd.length;
	    }

	    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
	    k = Math.ceil(pr / LOG_BASE);
	    len = k > len ? k + 1 : len + 1;

	    if (i > len) {
	      i = len;
	      d.length = 1;
	    }

	    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
	    d.reverse();
	    for (; i--;) d.push(0);
	    d.reverse();
	  }

	  len = xd.length;
	  i = yd.length;

	  // If yd is longer than xd, swap xd and yd so xd points to the longer array.
	  if (len - i < 0) {
	    i = len;
	    d = yd;
	    yd = xd;
	    xd = d;
	  }

	  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
	  for (carry = 0; i;) {
	    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
	    xd[i] %= BASE;
	  }

	  if (carry) {
	    xd.unshift(carry);
	    ++e;
	  }

	  // Remove trailing zeros.
	  // No need to check for zero, as +x + +y != 0 && -x + -y != 0
	  for (len = xd.length; xd[--len] == 0;) xd.pop();

	  y.d = xd;
	  y.e = getBase10Exponent(xd, e);

	  return external ? finalise(y, pr, rm) : y;
	};


	/*
	 * Return the number of significant digits of the value of this Decimal.
	 *
	 * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
	 *
	 */
	P.precision = P.sd = function (z) {
	  var k,
	    x = this;

	  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);

	  if (x.d) {
	    k = getPrecision(x.d);
	    if (z && x.e + 1 > k) k = x.e + 1;
	  } else {
	    k = NaN;
	  }

	  return k;
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
	 * rounding mode `rounding`.
	 *
	 */
	P.round = function () {
	  var x = this,
	    Ctor = x.constructor;

	  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
	};


	/*
	 * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
	 *
	 * Domain: [-Infinity, Infinity]
	 * Range: [-1, 1]
	 *
	 * sin(x) = x - x^3/3! + x^5/5! - ...
	 *
	 * sin(0)         = 0
	 * sin(-0)        = -0
	 * sin(Infinity)  = NaN
	 * sin(-Infinity) = NaN
	 * sin(NaN)       = NaN
	 *
	 */
	P.sine = P.sin = function () {
	  var pr, rm,
	    x = this,
	    Ctor = x.constructor;

	  if (!x.isFinite()) return new Ctor(NaN);
	  if (x.isZero()) return new Ctor(x);

	  pr = Ctor.precision;
	  rm = Ctor.rounding;
	  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
	  Ctor.rounding = 1;

	  x = sine(Ctor, toLessThanHalfPi(Ctor, x));

	  Ctor.precision = pr;
	  Ctor.rounding = rm;

	  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
	};


	/*
	 * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 *  sqrt(-n) =  N
	 *  sqrt(N)  =  N
	 *  sqrt(-I) =  N
	 *  sqrt(I)  =  I
	 *  sqrt(0)  =  0
	 *  sqrt(-0) = -0
	 *
	 */
	P.squareRoot = P.sqrt = function () {
	  var m, n, sd, r, rep, t,
	    x = this,
	    d = x.d,
	    e = x.e,
	    s = x.s,
	    Ctor = x.constructor;

	  // Negative/NaN/Infinity/zero?
	  if (s !== 1 || !d || !d[0]) {
	    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
	  }

	  external = false;

	  // Initial estimate.
	  s = Math.sqrt(+x);

	  // Math.sqrt underflow/overflow?
	  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
	  if (s == 0 || s == 1 / 0) {
	    n = digitsToString(d);

	    if ((n.length + e) % 2 == 0) n += '0';
	    s = Math.sqrt(n);
	    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);

	    if (s == 1 / 0) {
	      n = '5e' + e;
	    } else {
	      n = s.toExponential();
	      n = n.slice(0, n.indexOf('e') + 1) + e;
	    }

	    r = new Ctor(n);
	  } else {
	    r = new Ctor(s.toString());
	  }

	  sd = (e = Ctor.precision) + 3;

	  // Newton-Raphson iteration.
	  for (;;) {
	    t = r;
	    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);

	    // TODO? Replace with for-loop and checkRoundingDigits.
	    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
	      n = n.slice(sd - 3, sd + 1);

	      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
	      // 4999, i.e. approaching a rounding boundary, continue the iteration.
	      if (n == '9999' || !rep && n == '4999') {

	        // On the first iteration only, check to see if rounding up gives the exact result as the
	        // nines may infinitely repeat.
	        if (!rep) {
	          finalise(t, e + 1, 0);

	          if (t.times(t).eq(x)) {
	            r = t;
	            break;
	          }
	        }

	        sd += 4;
	        rep = 1;
	      } else {

	        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
	        // If not, then there are further digits and m will be truthy.
	        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

	          // Truncate to the first rounding digit.
	          finalise(r, e + 1, 1);
	          m = !r.times(r).eq(x);
	        }

	        break;
	      }
	    }
	  }

	  external = true;

	  return finalise(r, e, Ctor.rounding, m);
	};


	/*
	 * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
	 *
	 * Domain: [-Infinity, Infinity]
	 * Range: [-Infinity, Infinity]
	 *
	 * tan(0)         = 0
	 * tan(-0)        = -0
	 * tan(Infinity)  = NaN
	 * tan(-Infinity) = NaN
	 * tan(NaN)       = NaN
	 *
	 */
	P.tangent = P.tan = function () {
	  var pr, rm,
	    x = this,
	    Ctor = x.constructor;

	  if (!x.isFinite()) return new Ctor(NaN);
	  if (x.isZero()) return new Ctor(x);

	  pr = Ctor.precision;
	  rm = Ctor.rounding;
	  Ctor.precision = pr + 10;
	  Ctor.rounding = 1;

	  x = x.sin();
	  x.s = 1;
	  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);

	  Ctor.precision = pr;
	  Ctor.rounding = rm;

	  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
	};


	/*
	 *  n * 0 = 0
	 *  n * N = N
	 *  n * I = I
	 *  0 * n = 0
	 *  0 * 0 = 0
	 *  0 * N = N
	 *  0 * I = N
	 *  N * n = N
	 *  N * 0 = N
	 *  N * N = N
	 *  N * I = N
	 *  I * n = I
	 *  I * 0 = N
	 *  I * N = N
	 *  I * I = I
	 *
	 * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
	 * digits using rounding mode `rounding`.
	 *
	 */
	P.times = P.mul = function (y) {
	  var carry, e, i, k, r, rL, t, xdL, ydL,
	    x = this,
	    Ctor = x.constructor,
	    xd = x.d,
	    yd = (y = new Ctor(y)).d;

	  y.s *= x.s;

	   // If either is NaN, ±Infinity or ±0...
	  if (!xd || !xd[0] || !yd || !yd[0]) {

	    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd

	      // Return NaN if either is NaN.
	      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.
	      ? NaN

	      // Return ±Infinity if either is ±Infinity.
	      // Return ±0 if either is ±0.
	      : !xd || !yd ? y.s / 0 : y.s * 0);
	  }

	  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
	  xdL = xd.length;
	  ydL = yd.length;

	  // Ensure xd points to the longer array.
	  if (xdL < ydL) {
	    r = xd;
	    xd = yd;
	    yd = r;
	    rL = xdL;
	    xdL = ydL;
	    ydL = rL;
	  }

	  // Initialise the result array with zeros.
	  r = [];
	  rL = xdL + ydL;
	  for (i = rL; i--;) r.push(0);

	  // Multiply!
	  for (i = ydL; --i >= 0;) {
	    carry = 0;
	    for (k = xdL + i; k > i;) {
	      t = r[k] + yd[i] * xd[k - i - 1] + carry;
	      r[k--] = t % BASE | 0;
	      carry = t / BASE | 0;
	    }

	    r[k] = (r[k] + carry) % BASE | 0;
	  }

	  // Remove trailing zeros.
	  for (; !r[--rL];) r.pop();

	  if (carry) ++e;
	  else r.shift();

	  y.d = r;
	  y.e = getBase10Exponent(r, e);

	  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
	};


	/*
	 * Return a string representing the value of this Decimal in base 2, round to `sd` significant
	 * digits using rounding mode `rm`.
	 *
	 * If the optional `sd` argument is present then return binary exponential notation.
	 *
	 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 */
	P.toBinary = function (sd, rm) {
	  return toStringBinary(this, 2, sd, rm);
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
	 * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
	 *
	 * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
	 *
	 * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 */
	P.toDecimalPlaces = P.toDP = function (dp, rm) {
	  var x = this,
	    Ctor = x.constructor;

	  x = new Ctor(x);
	  if (dp === void 0) return x;

	  checkInt32(dp, 0, MAX_DIGITS);

	  if (rm === void 0) rm = Ctor.rounding;
	  else checkInt32(rm, 0, 8);

	  return finalise(x, dp + x.e + 1, rm);
	};


	/*
	 * Return a string representing the value of this Decimal in exponential notation rounded to
	 * `dp` fixed decimal places using rounding mode `rounding`.
	 *
	 * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 */
	P.toExponential = function (dp, rm) {
	  var str,
	    x = this,
	    Ctor = x.constructor;

	  if (dp === void 0) {
	    str = finiteToString(x, true);
	  } else {
	    checkInt32(dp, 0, MAX_DIGITS);

	    if (rm === void 0) rm = Ctor.rounding;
	    else checkInt32(rm, 0, 8);

	    x = finalise(new Ctor(x), dp + 1, rm);
	    str = finiteToString(x, true, dp + 1);
	  }

	  return x.isNeg() && !x.isZero() ? '-' + str : str;
	};


	/*
	 * Return a string representing the value of this Decimal in normal (fixed-point) notation to
	 * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
	 * omitted.
	 *
	 * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
	 *
	 * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
	 * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
	 * (-0).toFixed(3) is '0.000'.
	 * (-0.5).toFixed(0) is '-0'.
	 *
	 */
	P.toFixed = function (dp, rm) {
	  var str, y,
	    x = this,
	    Ctor = x.constructor;

	  if (dp === void 0) {
	    str = finiteToString(x);
	  } else {
	    checkInt32(dp, 0, MAX_DIGITS);

	    if (rm === void 0) rm = Ctor.rounding;
	    else checkInt32(rm, 0, 8);

	    y = finalise(new Ctor(x), dp + x.e + 1, rm);
	    str = finiteToString(y, false, dp + y.e + 1);
	  }

	  // To determine whether to add the minus sign look at the value before it was rounded,
	  // i.e. look at `x` rather than `y`.
	  return x.isNeg() && !x.isZero() ? '-' + str : str;
	};


	/*
	 * Return an array representing the value of this Decimal as a simple fraction with an integer
	 * numerator and an integer denominator.
	 *
	 * The denominator will be a positive non-zero value less than or equal to the specified maximum
	 * denominator. If a maximum denominator is not specified, the denominator will be the lowest
	 * value necessary to represent the number exactly.
	 *
	 * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
	 *
	 */
	P.toFraction = function (maxD) {
	  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,
	    x = this,
	    xd = x.d,
	    Ctor = x.constructor;

	  if (!xd) return new Ctor(x);

	  n1 = d0 = new Ctor(1);
	  d1 = n0 = new Ctor(0);

	  d = new Ctor(d1);
	  e = d.e = getPrecision(xd) - x.e - 1;
	  k = e % LOG_BASE;
	  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);

	  if (maxD == null) {

	    // d is 10**e, the minimum max-denominator needed.
	    maxD = e > 0 ? d : n1;
	  } else {
	    n = new Ctor(maxD);
	    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
	    maxD = n.gt(d) ? (e > 0 ? d : n1) : n;
	  }

	  external = false;
	  n = new Ctor(digitsToString(xd));
	  pr = Ctor.precision;
	  Ctor.precision = e = xd.length * LOG_BASE * 2;

	  for (;;)  {
	    q = divide(n, d, 0, 1, 1);
	    d2 = d0.plus(q.times(d1));
	    if (d2.cmp(maxD) == 1) break;
	    d0 = d1;
	    d1 = d2;
	    d2 = n1;
	    n1 = n0.plus(q.times(d2));
	    n0 = d2;
	    d2 = d;
	    d = n.minus(q.times(d2));
	    n = d2;
	  }

	  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
	  n0 = n0.plus(d2.times(n1));
	  d0 = d0.plus(d2.times(d1));
	  n0.s = n1.s = x.s;

	  // Determine which fraction is closer to x, n0/d0 or n1/d1?
	  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1
	      ? [n1, d1] : [n0, d0];

	  Ctor.precision = pr;
	  external = true;

	  return r;
	};


	/*
	 * Return a string representing the value of this Decimal in base 16, round to `sd` significant
	 * digits using rounding mode `rm`.
	 *
	 * If the optional `sd` argument is present then return binary exponential notation.
	 *
	 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 */
	P.toHexadecimal = P.toHex = function (sd, rm) {
	  return toStringBinary(this, 16, sd, rm);
	};


	/*
	 * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding
	 * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.
	 *
	 * The return value will always have the same sign as this Decimal, unless either this Decimal
	 * or `y` is NaN, in which case the return value will be also be NaN.
	 *
	 * The return value is not affected by the value of `precision`.
	 *
	 * y {number|string|Decimal} The magnitude to round to a multiple of.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 * 'toNearest() rounding mode not an integer: {rm}'
	 * 'toNearest() rounding mode out of range: {rm}'
	 *
	 */
	P.toNearest = function (y, rm) {
	  var x = this,
	    Ctor = x.constructor;

	  x = new Ctor(x);

	  if (y == null) {

	    // If x is not finite, return x.
	    if (!x.d) return x;

	    y = new Ctor(1);
	    rm = Ctor.rounding;
	  } else {
	    y = new Ctor(y);
	    if (rm === void 0) {
	      rm = Ctor.rounding;
	    } else {
	      checkInt32(rm, 0, 8);
	    }

	    // If x is not finite, return x if y is not NaN, else NaN.
	    if (!x.d) return y.s ? x : y;

	    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.
	    if (!y.d) {
	      if (y.s) y.s = x.s;
	      return y;
	    }
	  }

	  // If y is not zero, calculate the nearest multiple of y to x.
	  if (y.d[0]) {
	    external = false;
	    x = divide(x, y, 0, rm, 1).times(y);
	    external = true;
	    finalise(x);

	  // If y is zero, return zero with the sign of x.
	  } else {
	    y.s = x.s;
	    x = y;
	  }

	  return x;
	};


	/*
	 * Return the value of this Decimal converted to a number primitive.
	 * Zero keeps its sign.
	 *
	 */
	P.toNumber = function () {
	  return +this;
	};


	/*
	 * Return a string representing the value of this Decimal in base 8, round to `sd` significant
	 * digits using rounding mode `rm`.
	 *
	 * If the optional `sd` argument is present then return binary exponential notation.
	 *
	 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 */
	P.toOctal = function (sd, rm) {
	  return toStringBinary(this, 8, sd, rm);
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
	 * to `precision` significant digits using rounding mode `rounding`.
	 *
	 * ECMAScript compliant.
	 *
	 *   pow(x, NaN)                           = NaN
	 *   pow(x, ±0)                            = 1

	 *   pow(NaN, non-zero)                    = NaN
	 *   pow(abs(x) > 1, +Infinity)            = +Infinity
	 *   pow(abs(x) > 1, -Infinity)            = +0
	 *   pow(abs(x) == 1, ±Infinity)           = NaN
	 *   pow(abs(x) < 1, +Infinity)            = +0
	 *   pow(abs(x) < 1, -Infinity)            = +Infinity
	 *   pow(+Infinity, y > 0)                 = +Infinity
	 *   pow(+Infinity, y < 0)                 = +0
	 *   pow(-Infinity, odd integer > 0)       = -Infinity
	 *   pow(-Infinity, even integer > 0)      = +Infinity
	 *   pow(-Infinity, odd integer < 0)       = -0
	 *   pow(-Infinity, even integer < 0)      = +0
	 *   pow(+0, y > 0)                        = +0
	 *   pow(+0, y < 0)                        = +Infinity
	 *   pow(-0, odd integer > 0)              = -0
	 *   pow(-0, even integer > 0)             = +0
	 *   pow(-0, odd integer < 0)              = -Infinity
	 *   pow(-0, even integer < 0)             = +Infinity
	 *   pow(finite x < 0, finite non-integer) = NaN
	 *
	 * For non-integer or very large exponents pow(x, y) is calculated using
	 *
	 *   x^y = exp(y*ln(x))
	 *
	 * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
	 * probability of an incorrectly rounded result
	 * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
	 * i.e. 1 in 250,000,000,000,000
	 *
	 * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
	 *
	 * y {number|string|Decimal} The power to which to raise this Decimal.
	 *
	 */
	P.toPower = P.pow = function (y) {
	  var e, k, pr, r, rm, s,
	    x = this,
	    Ctor = x.constructor,
	    yn = +(y = new Ctor(y));

	  // Either ±Infinity, NaN or ±0?
	  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));

	  x = new Ctor(x);

	  if (x.eq(1)) return x;

	  pr = Ctor.precision;
	  rm = Ctor.rounding;

	  if (y.eq(1)) return finalise(x, pr, rm);

	  // y exponent
	  e = mathfloor(y.e / LOG_BASE);

	  // If y is a small integer use the 'exponentiation by squaring' algorithm.
	  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
	    r = intPow(Ctor, x, k, pr);
	    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
	  }

	  s = x.s;

	  // if x is negative
	  if (s < 0) {

	    // if y is not an integer
	    if (e < y.d.length - 1) return new Ctor(NaN);

	    // Result is positive if x is negative and the last digit of integer y is even.
	    if ((y.d[e] & 1) == 0) s = 1;

	    // if x.eq(-1)
	    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
	      x.s = s;
	      return x;
	    }
	  }

	  // Estimate result exponent.
	  // x^y = 10^e,  where e = y * log10(x)
	  // log10(x) = log10(x_significand) + x_exponent
	  // log10(x_significand) = ln(x_significand) / ln(10)
	  k = mathpow(+x, yn);
	  e = k == 0 || !isFinite(k)
	    ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))
	    : new Ctor(k + '').e;

	  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.

	  // Overflow/underflow?
	  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);

	  external = false;
	  Ctor.rounding = x.s = 1;

	  // Estimate the extra guard digits needed to ensure five correct rounding digits from
	  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
	  // new Decimal(2.32456).pow('2087987436534566.46411')
	  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
	  k = Math.min(12, (e + '').length);

	  // r = x^y = exp(y*ln(x))
	  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);

	  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)
	  if (r.d) {

	    // Truncate to the required precision plus five rounding digits.
	    r = finalise(r, pr + 5, 1);

	    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
	    // the result.
	    if (checkRoundingDigits(r.d, pr, rm)) {
	      e = pr + 10;

	      // Truncate to the increased precision plus five rounding digits.
	      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);

	      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).
	      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
	        r = finalise(r, pr + 1, 0);
	      }
	    }
	  }

	  r.s = s;
	  external = true;
	  Ctor.rounding = rm;

	  return finalise(r, pr, rm);
	};


	/*
	 * Return a string representing the value of this Decimal rounded to `sd` significant digits
	 * using rounding mode `rounding`.
	 *
	 * Return exponential notation if `sd` is less than the number of digits necessary to represent
	 * the integer part of the value in normal notation.
	 *
	 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 */
	P.toPrecision = function (sd, rm) {
	  var str,
	    x = this,
	    Ctor = x.constructor;

	  if (sd === void 0) {
	    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
	  } else {
	    checkInt32(sd, 1, MAX_DIGITS);

	    if (rm === void 0) rm = Ctor.rounding;
	    else checkInt32(rm, 0, 8);

	    x = finalise(new Ctor(x), sd, rm);
	    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
	  }

	  return x.isNeg() && !x.isZero() ? '-' + str : str;
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
	 * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
	 * omitted.
	 *
	 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 * 'toSD() digits out of range: {sd}'
	 * 'toSD() digits not an integer: {sd}'
	 * 'toSD() rounding mode not an integer: {rm}'
	 * 'toSD() rounding mode out of range: {rm}'
	 *
	 */
	P.toSignificantDigits = P.toSD = function (sd, rm) {
	  var x = this,
	    Ctor = x.constructor;

	  if (sd === void 0) {
	    sd = Ctor.precision;
	    rm = Ctor.rounding;
	  } else {
	    checkInt32(sd, 1, MAX_DIGITS);

	    if (rm === void 0) rm = Ctor.rounding;
	    else checkInt32(rm, 0, 8);
	  }

	  return finalise(new Ctor(x), sd, rm);
	};


	/*
	 * Return a string representing the value of this Decimal.
	 *
	 * Return exponential notation if this Decimal has a positive exponent equal to or greater than
	 * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
	 *
	 */
	P.toString = function () {
	  var x = this,
	    Ctor = x.constructor,
	    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

	  return x.isNeg() && !x.isZero() ? '-' + str : str;
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
	 *
	 */
	P.truncated = P.trunc = function () {
	  return finalise(new this.constructor(this), this.e + 1, 1);
	};


	/*
	 * Return a string representing the value of this Decimal.
	 * Unlike `toString`, negative zero will include the minus sign.
	 *
	 */
	P.valueOf = P.toJSON = function () {
	  var x = this,
	    Ctor = x.constructor,
	    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

	  return x.isNeg() ? '-' + str : str;
	};


	// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.


	/*
	 *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,
	 *                           finiteToString, naturalExponential, naturalLogarithm
	 *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
	 *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
	 *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
	 *  convertBase              toStringBinary, parseOther
	 *  cos                      P.cos
	 *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
	 *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
	 *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
	 *                           taylorSeries, atan2, parseOther
	 *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
	 *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
	 *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
	 *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
	 *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
	 *                           P.truncated, divide, getLn10, getPi, naturalExponential,
	 *                           naturalLogarithm, ceil, floor, round, trunc
	 *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
	 *                           toStringBinary
	 *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
	 *  getLn10                  P.logarithm, naturalLogarithm
	 *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
	 *  getPrecision             P.precision, P.toFraction
	 *  getZeroString            digitsToString, finiteToString
	 *  intPow                   P.toPower, parseOther
	 *  isOdd                    toLessThanHalfPi
	 *  maxOrMin                 max, min
	 *  naturalExponential       P.naturalExponential, P.toPower
	 *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
	 *                           P.toPower, naturalExponential
	 *  nonFiniteToString        finiteToString, toStringBinary
	 *  parseDecimal             Decimal
	 *  parseOther               Decimal
	 *  sin                      P.sin
	 *  taylorSeries             P.cosh, P.sinh, cos, sin
	 *  toLessThanHalfPi         P.cos, P.sin
	 *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
	 *  truncate                 intPow
	 *
	 *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
	 *                           naturalLogarithm, config, parseOther, random, Decimal
	 */


	function digitsToString(d) {
	  var i, k, ws,
	    indexOfLastWord = d.length - 1,
	    str = '',
	    w = d[0];

	  if (indexOfLastWord > 0) {
	    str += w;
	    for (i = 1; i < indexOfLastWord; i++) {
	      ws = d[i] + '';
	      k = LOG_BASE - ws.length;
	      if (k) str += getZeroString(k);
	      str += ws;
	    }

	    w = d[i];
	    ws = w + '';
	    k = LOG_BASE - ws.length;
	    if (k) str += getZeroString(k);
	  } else if (w === 0) {
	    return '0';
	  }

	  // Remove trailing zeros of last w.
	  for (; w % 10 === 0;) w /= 10;

	  return str + w;
	}


	function checkInt32(i, min, max) {
	  if (i !== ~~i || i < min || i > max) {
	    throw Error(invalidArgument + i);
	  }
	}


	/*
	 * Check 5 rounding digits if `repeating` is null, 4 otherwise.
	 * `repeating == null` if caller is `log` or `pow`,
	 * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
	 */
	function checkRoundingDigits(d, i, rm, repeating) {
	  var di, k, r, rd;

	  // Get the length of the first word of the array d.
	  for (k = d[0]; k >= 10; k /= 10) --i;

	  // Is the rounding digit in the first word of d?
	  if (--i < 0) {
	    i += LOG_BASE;
	    di = 0;
	  } else {
	    di = Math.ceil((i + 1) / LOG_BASE);
	    i %= LOG_BASE;
	  }

	  // i is the index (0 - 6) of the rounding digit.
	  // E.g. if within the word 3487563 the first rounding digit is 5,
	  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563
	  k = mathpow(10, LOG_BASE - i);
	  rd = d[di] % k | 0;

	  if (repeating == null) {
	    if (i < 3) {
	      if (i == 0) rd = rd / 100 | 0;
	      else if (i == 1) rd = rd / 10 | 0;
	      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
	    } else {
	      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&
	        (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||
	          (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
	    }
	  } else {
	    if (i < 4) {
	      if (i == 0) rd = rd / 1000 | 0;
	      else if (i == 1) rd = rd / 100 | 0;
	      else if (i == 2) rd = rd / 10 | 0;
	      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
	    } else {
	      r = ((repeating || rm < 4) && rd + 1 == k ||
	      (!repeating && rm > 3) && rd + 1 == k / 2) &&
	        (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
	    }
	  }

	  return r;
	}


	// Convert string of `baseIn` to an array of numbers of `baseOut`.
	// Eg. convertBase('255', 10, 16) returns [15, 15].
	// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
	function convertBase(str, baseIn, baseOut) {
	  var j,
	    arr = [0],
	    arrL,
	    i = 0,
	    strL = str.length;

	  for (; i < strL;) {
	    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;
	    arr[0] += NUMERALS.indexOf(str.charAt(i++));
	    for (j = 0; j < arr.length; j++) {
	      if (arr[j] > baseOut - 1) {
	        if (arr[j + 1] === void 0) arr[j + 1] = 0;
	        arr[j + 1] += arr[j] / baseOut | 0;
	        arr[j] %= baseOut;
	      }
	    }
	  }

	  return arr.reverse();
	}


	/*
	 * cos(x) = 1 - x^2/2! + x^4/4! - ...
	 * |x| < pi/2
	 *
	 */
	function cosine(Ctor, x) {
	  var k, len, y;

	  if (x.isZero()) return x;

	  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
	  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1

	  // Estimate the optimum number of times to use the argument reduction.
	  len = x.d.length;
	  if (len < 32) {
	    k = Math.ceil(len / 3);
	    y = (1 / tinyPow(4, k)).toString();
	  } else {
	    k = 16;
	    y = '2.3283064365386962890625e-10';
	  }

	  Ctor.precision += k;

	  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));

	  // Reverse argument reduction
	  for (var i = k; i--;) {
	    var cos2x = x.times(x);
	    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
	  }

	  Ctor.precision -= k;

	  return x;
	}


	/*
	 * Perform division in the specified base.
	 */
	var divide = (function () {

	  // Assumes non-zero x and k, and hence non-zero result.
	  function multiplyInteger(x, k, base) {
	    var temp,
	      carry = 0,
	      i = x.length;

	    for (x = x.slice(); i--;) {
	      temp = x[i] * k + carry;
	      x[i] = temp % base | 0;
	      carry = temp / base | 0;
	    }

	    if (carry) x.unshift(carry);

	    return x;
	  }

	  function compare(a, b, aL, bL) {
	    var i, r;

	    if (aL != bL) {
	      r = aL > bL ? 1 : -1;
	    } else {
	      for (i = r = 0; i < aL; i++) {
	        if (a[i] != b[i]) {
	          r = a[i] > b[i] ? 1 : -1;
	          break;
	        }
	      }
	    }

	    return r;
	  }

	  function subtract(a, b, aL, base) {
	    var i = 0;

	    // Subtract b from a.
	    for (; aL--;) {
	      a[aL] -= i;
	      i = a[aL] < b[aL] ? 1 : 0;
	      a[aL] = i * base + a[aL] - b[aL];
	    }

	    // Remove leading zeros.
	    for (; !a[0] && a.length > 1;) a.shift();
	  }

	  return function (x, y, pr, rm, dp, base) {
	    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,
	      yL, yz,
	      Ctor = x.constructor,
	      sign = x.s == y.s ? 1 : -1,
	      xd = x.d,
	      yd = y.d;

	    // Either NaN, Infinity or 0?
	    if (!xd || !xd[0] || !yd || !yd[0]) {

	      return new Ctor(// Return NaN if either NaN, or both Infinity or 0.
	        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :

	        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
	        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
	    }

	    if (base) {
	      logBase = 1;
	      e = x.e - y.e;
	    } else {
	      base = BASE;
	      logBase = LOG_BASE;
	      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
	    }

	    yL = yd.length;
	    xL = xd.length;
	    q = new Ctor(sign);
	    qd = q.d = [];

	    // Result exponent may be one less than e.
	    // The digit array of a Decimal from toStringBinary may have trailing zeros.
	    for (i = 0; yd[i] == (xd[i] || 0); i++);

	    if (yd[i] > (xd[i] || 0)) e--;

	    if (pr == null) {
	      sd = pr = Ctor.precision;
	      rm = Ctor.rounding;
	    } else if (dp) {
	      sd = pr + (x.e - y.e) + 1;
	    } else {
	      sd = pr;
	    }

	    if (sd < 0) {
	      qd.push(1);
	      more = true;
	    } else {

	      // Convert precision in number of base 10 digits to base 1e7 digits.
	      sd = sd / logBase + 2 | 0;
	      i = 0;

	      // divisor < 1e7
	      if (yL == 1) {
	        k = 0;
	        yd = yd[0];
	        sd++;

	        // k is the carry.
	        for (; (i < xL || k) && sd--; i++) {
	          t = k * base + (xd[i] || 0);
	          qd[i] = t / yd | 0;
	          k = t % yd | 0;
	        }

	        more = k || i < xL;

	      // divisor >= 1e7
	      } else {

	        // Normalise xd and yd so highest order digit of yd is >= base/2
	        k = base / (yd[0] + 1) | 0;

	        if (k > 1) {
	          yd = multiplyInteger(yd, k, base);
	          xd = multiplyInteger(xd, k, base);
	          yL = yd.length;
	          xL = xd.length;
	        }

	        xi = yL;
	        rem = xd.slice(0, yL);
	        remL = rem.length;

	        // Add zeros to make remainder as long as divisor.
	        for (; remL < yL;) rem[remL++] = 0;

	        yz = yd.slice();
	        yz.unshift(0);
	        yd0 = yd[0];

	        if (yd[1] >= base / 2) ++yd0;

	        do {
	          k = 0;

	          // Compare divisor and remainder.
	          cmp = compare(yd, rem, yL, remL);

	          // If divisor < remainder.
	          if (cmp < 0) {

	            // Calculate trial digit, k.
	            rem0 = rem[0];
	            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

	            // k will be how many times the divisor goes into the current remainder.
	            k = rem0 / yd0 | 0;

	            //  Algorithm:
	            //  1. product = divisor * trial digit (k)
	            //  2. if product > remainder: product -= divisor, k--
	            //  3. remainder -= product
	            //  4. if product was < remainder at 2:
	            //    5. compare new remainder and divisor
	            //    6. If remainder > divisor: remainder -= divisor, k++

	            if (k > 1) {
	              if (k >= base) k = base - 1;

	              // product = divisor * trial digit.
	              prod = multiplyInteger(yd, k, base);
	              prodL = prod.length;
	              remL = rem.length;

	              // Compare product and remainder.
	              cmp = compare(prod, rem, prodL, remL);

	              // product > remainder.
	              if (cmp == 1) {
	                k--;

	                // Subtract divisor from product.
	                subtract(prod, yL < prodL ? yz : yd, prodL, base);
	              }
	            } else {

	              // cmp is -1.
	              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
	              // to avoid it. If k is 1 there is a need to compare yd and rem again below.
	              if (k == 0) cmp = k = 1;
	              prod = yd.slice();
	            }

	            prodL = prod.length;
	            if (prodL < remL) prod.unshift(0);

	            // Subtract product from remainder.
	            subtract(rem, prod, remL, base);

	            // If product was < previous remainder.
	            if (cmp == -1) {
	              remL = rem.length;

	              // Compare divisor and new remainder.
	              cmp = compare(yd, rem, yL, remL);

	              // If divisor < new remainder, subtract divisor from remainder.
	              if (cmp < 1) {
	                k++;

	                // Subtract divisor from remainder.
	                subtract(rem, yL < remL ? yz : yd, remL, base);
	              }
	            }

	            remL = rem.length;
	          } else if (cmp === 0) {
	            k++;
	            rem = [0];
	          }    // if cmp === 1, k will be 0

	          // Add the next digit, k, to the result array.
	          qd[i++] = k;

	          // Update the remainder.
	          if (cmp && rem[0]) {
	            rem[remL++] = xd[xi] || 0;
	          } else {
	            rem = [xd[xi]];
	            remL = 1;
	          }

	        } while ((xi++ < xL || rem[0] !== void 0) && sd--);

	        more = rem[0] !== void 0;
	      }

	      // Leading zero?
	      if (!qd[0]) qd.shift();
	    }

	    // logBase is 1 when divide is being used for base conversion.
	    if (logBase == 1) {
	      q.e = e;
	      inexact = more;
	    } else {

	      // To calculate q.e, first get the number of digits of qd[0].
	      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;
	      q.e = i + e * logBase - 1;

	      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
	    }

	    return q;
	  };
	})();


	/*
	 * Round `x` to `sd` significant digits using rounding mode `rm`.
	 * Check for over/under-flow.
	 */
	 function finalise(x, sd, rm, isTruncated) {
	  var digits, i, j, k, rd, roundUp, w, xd, xdi,
	    Ctor = x.constructor;

	  // Don't round if sd is null or undefined.
	  out: if (sd != null) {
	    xd = x.d;

	    // Infinity/NaN.
	    if (!xd) return x;

	    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
	    // w: the word of xd containing rd, a base 1e7 number.
	    // xdi: the index of w within xd.
	    // digits: the number of digits of w.
	    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
	    // they had leading zeros)
	    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).

	    // Get the length of the first word of the digits array xd.
	    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;
	    i = sd - digits;

	    // Is the rounding digit in the first word of xd?
	    if (i < 0) {
	      i += LOG_BASE;
	      j = sd;
	      w = xd[xdi = 0];

	      // Get the rounding digit at index j of w.
	      rd = w / mathpow(10, digits - j - 1) % 10 | 0;
	    } else {
	      xdi = Math.ceil((i + 1) / LOG_BASE);
	      k = xd.length;
	      if (xdi >= k) {
	        if (isTruncated) {

	          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
	          for (; k++ <= xdi;) xd.push(0);
	          w = rd = 0;
	          digits = 1;
	          i %= LOG_BASE;
	          j = i - LOG_BASE + 1;
	        } else {
	          break out;
	        }
	      } else {
	        w = k = xd[xdi];

	        // Get the number of digits of w.
	        for (digits = 1; k >= 10; k /= 10) digits++;

	        // Get the index of rd within w.
	        i %= LOG_BASE;

	        // Get the index of rd within w, adjusted for leading zeros.
	        // The number of leading zeros of w is given by LOG_BASE - digits.
	        j = i - LOG_BASE + digits;

	        // Get the rounding digit at index j of w.
	        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
	      }
	    }

	    // Are there any non-zero digits after the rounding digit?
	    isTruncated = isTruncated || sd < 0 ||
	      xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));

	    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
	    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
	    // will give 714.

	    roundUp = rm < 4
	      ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
	      : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&

	        // Check whether the digit to the left of the rounding digit is odd.
	        ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||
	          rm == (x.s < 0 ? 8 : 7));

	    if (sd < 1 || !xd[0]) {
	      xd.length = 0;
	      if (roundUp) {

	        // Convert sd to decimal places.
	        sd -= x.e + 1;

	        // 1, 0.1, 0.01, 0.001, 0.0001 etc.
	        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
	        x.e = -sd || 0;
	      } else {

	        // Zero.
	        xd[0] = x.e = 0;
	      }

	      return x;
	    }

	    // Remove excess digits.
	    if (i == 0) {
	      xd.length = xdi;
	      k = 1;
	      xdi--;
	    } else {
	      xd.length = xdi + 1;
	      k = mathpow(10, LOG_BASE - i);

	      // E.g. 56700 becomes 56000 if 7 is the rounding digit.
	      // j > 0 means i > number of leading zeros of w.
	      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
	    }

	    if (roundUp) {
	      for (;;) {

	        // Is the digit to be rounded up in the first word of xd?
	        if (xdi == 0) {

	          // i will be the length of xd[0] before k is added.
	          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;
	          j = xd[0] += k;
	          for (k = 1; j >= 10; j /= 10) k++;

	          // if i != k the length has increased.
	          if (i != k) {
	            x.e++;
	            if (xd[0] == BASE) xd[0] = 1;
	          }

	          break;
	        } else {
	          xd[xdi] += k;
	          if (xd[xdi] != BASE) break;
	          xd[xdi--] = 0;
	          k = 1;
	        }
	      }
	    }

	    // Remove trailing zeros.
	    for (i = xd.length; xd[--i] === 0;) xd.pop();
	  }

	  if (external) {

	    // Overflow?
	    if (x.e > Ctor.maxE) {

	      // Infinity.
	      x.d = null;
	      x.e = NaN;

	    // Underflow?
	    } else if (x.e < Ctor.minE) {

	      // Zero.
	      x.e = 0;
	      x.d = [0];
	      // Ctor.underflow = true;
	    } // else Ctor.underflow = false;
	  }

	  return x;
	}


	function finiteToString(x, isExp, sd) {
	  if (!x.isFinite()) return nonFiniteToString(x);
	  var k,
	    e = x.e,
	    str = digitsToString(x.d),
	    len = str.length;

	  if (isExp) {
	    if (sd && (k = sd - len) > 0) {
	      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
	    } else if (len > 1) {
	      str = str.charAt(0) + '.' + str.slice(1);
	    }

	    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
	  } else if (e < 0) {
	    str = '0.' + getZeroString(-e - 1) + str;
	    if (sd && (k = sd - len) > 0) str += getZeroString(k);
	  } else if (e >= len) {
	    str += getZeroString(e + 1 - len);
	    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
	  } else {
	    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);
	    if (sd && (k = sd - len) > 0) {
	      if (e + 1 === len) str += '.';
	      str += getZeroString(k);
	    }
	  }

	  return str;
	}


	// Calculate the base 10 exponent from the base 1e7 exponent.
	function getBase10Exponent(digits, e) {
	  var w = digits[0];

	  // Add the number of digits of the first word of the digits array.
	  for ( e *= LOG_BASE; w >= 10; w /= 10) e++;
	  return e;
	}


	function getLn10(Ctor, sd, pr) {
	  if (sd > LN10_PRECISION) {

	    // Reset global state in case the exception is caught.
	    external = true;
	    if (pr) Ctor.precision = pr;
	    throw Error(precisionLimitExceeded);
	  }
	  return finalise(new Ctor(LN10), sd, 1, true);
	}


	function getPi(Ctor, sd, rm) {
	  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
	  return finalise(new Ctor(PI), sd, rm, true);
	}


	function getPrecision(digits) {
	  var w = digits.length - 1,
	    len = w * LOG_BASE + 1;

	  w = digits[w];

	  // If non-zero...
	  if (w) {

	    // Subtract the number of trailing zeros of the last word.
	    for (; w % 10 == 0; w /= 10) len--;

	    // Add the number of digits of the first word.
	    for (w = digits[0]; w >= 10; w /= 10) len++;
	  }

	  return len;
	}


	function getZeroString(k) {
	  var zs = '';
	  for (; k--;) zs += '0';
	  return zs;
	}


	/*
	 * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
	 * integer of type number.
	 *
	 * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
	 *
	 */
	function intPow(Ctor, x, n, pr) {
	  var isTruncated,
	    r = new Ctor(1),

	    // Max n of 9007199254740991 takes 53 loop iterations.
	    // Maximum digits array length; leaves [28, 34] guard digits.
	    k = Math.ceil(pr / LOG_BASE + 4);

	  external = false;

	  for (;;) {
	    if (n % 2) {
	      r = r.times(x);
	      if (truncate(r.d, k)) isTruncated = true;
	    }

	    n = mathfloor(n / 2);
	    if (n === 0) {

	      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
	      n = r.d.length - 1;
	      if (isTruncated && r.d[n] === 0) ++r.d[n];
	      break;
	    }

	    x = x.times(x);
	    truncate(x.d, k);
	  }

	  external = true;

	  return r;
	}


	function isOdd(n) {
	  return n.d[n.d.length - 1] & 1;
	}


	/*
	 * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
	 */
	function maxOrMin(Ctor, args, ltgt) {
	  var y,
	    x = new Ctor(args[0]),
	    i = 0;

	  for (; ++i < args.length;) {
	    y = new Ctor(args[i]);
	    if (!y.s) {
	      x = y;
	      break;
	    } else if (x[ltgt](y)) {
	      x = y;
	    }
	  }

	  return x;
	}


	/*
	 * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
	 * digits.
	 *
	 * Taylor/Maclaurin series.
	 *
	 * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
	 *
	 * Argument reduction:
	 *   Repeat x = x / 32, k += 5, until |x| < 0.1
	 *   exp(x) = exp(x / 2^k)^(2^k)
	 *
	 * Previously, the argument was initially reduced by
	 * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
	 * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
	 * found to be slower than just dividing repeatedly by 32 as above.
	 *
	 * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
	 * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
	 * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
	 *
	 *  exp(Infinity)  = Infinity
	 *  exp(-Infinity) = 0
	 *  exp(NaN)       = NaN
	 *  exp(±0)        = 1
	 *
	 *  exp(x) is non-terminating for any finite, non-zero x.
	 *
	 *  The result will always be correctly rounded.
	 *
	 */
	function naturalExponential(x, sd) {
	  var denominator, guard, j, pow, sum, t, wpr,
	    rep = 0,
	    i = 0,
	    k = 0,
	    Ctor = x.constructor,
	    rm = Ctor.rounding,
	    pr = Ctor.precision;

	  // 0/NaN/Infinity?
	  if (!x.d || !x.d[0] || x.e > 17) {

	    return new Ctor(x.d
	      ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0
	      : x.s ? x.s < 0 ? 0 : x : 0 / 0);
	  }

	  if (sd == null) {
	    external = false;
	    wpr = pr;
	  } else {
	    wpr = sd;
	  }

	  t = new Ctor(0.03125);

	  // while abs(x) >= 0.1
	  while (x.e > -2) {

	    // x = x / 2^5
	    x = x.times(t);
	    k += 5;
	  }

	  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
	  // necessary to ensure the first 4 rounding digits are correct.
	  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
	  wpr += guard;
	  denominator = pow = sum = new Ctor(1);
	  Ctor.precision = wpr;

	  for (;;) {
	    pow = finalise(pow.times(x), wpr, 1);
	    denominator = denominator.times(++i);
	    t = sum.plus(divide(pow, denominator, wpr, 1));

	    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
	      j = k;
	      while (j--) sum = finalise(sum.times(sum), wpr, 1);

	      // Check to see if the first 4 rounding digits are [49]999.
	      // If so, repeat the summation with a higher precision, otherwise
	      // e.g. with precision: 18, rounding: 1
	      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
	      // `wpr - guard` is the index of first rounding digit.
	      if (sd == null) {

	        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
	          Ctor.precision = wpr += 10;
	          denominator = pow = t = new Ctor(1);
	          i = 0;
	          rep++;
	        } else {
	          return finalise(sum, Ctor.precision = pr, rm, external = true);
	        }
	      } else {
	        Ctor.precision = pr;
	        return sum;
	      }
	    }

	    sum = t;
	  }
	}


	/*
	 * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
	 * digits.
	 *
	 *  ln(-n)        = NaN
	 *  ln(0)         = -Infinity
	 *  ln(-0)        = -Infinity
	 *  ln(1)         = 0
	 *  ln(Infinity)  = Infinity
	 *  ln(-Infinity) = NaN
	 *  ln(NaN)       = NaN
	 *
	 *  ln(n) (n != 1) is non-terminating.
	 *
	 */
	function naturalLogarithm(y, sd) {
	  var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,
	    n = 1,
	    guard = 10,
	    x = y,
	    xd = x.d,
	    Ctor = x.constructor,
	    rm = Ctor.rounding,
	    pr = Ctor.precision;

	  // Is x negative or Infinity, NaN, 0 or 1?
	  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
	    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
	  }

	  if (sd == null) {
	    external = false;
	    wpr = pr;
	  } else {
	    wpr = sd;
	  }

	  Ctor.precision = wpr += guard;
	  c = digitsToString(xd);
	  c0 = c.charAt(0);

	  if (Math.abs(e = x.e) < 1.5e15) {

	    // Argument reduction.
	    // The series converges faster the closer the argument is to 1, so using
	    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
	    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
	    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
	    // later be divided by this number, then separate out the power of 10 using
	    // ln(a*10^b) = ln(a) + b*ln(10).

	    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
	    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
	    // max n is 6 (gives 0.7 - 1.3)
	    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
	      x = x.times(y);
	      c = digitsToString(x.d);
	      c0 = c.charAt(0);
	      n++;
	    }

	    e = x.e;

	    if (c0 > 1) {
	      x = new Ctor('0.' + c);
	      e++;
	    } else {
	      x = new Ctor(c0 + '.' + c.slice(1));
	    }
	  } else {

	    // The argument reduction method above may result in overflow if the argument y is a massive
	    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
	    // function using ln(x*10^e) = ln(x) + e*ln(10).
	    t = getLn10(Ctor, wpr + 2, pr).times(e + '');
	    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
	    Ctor.precision = pr;

	    return sd == null ? finalise(x, pr, rm, external = true) : x;
	  }

	  // x1 is x reduced to a value near 1.
	  x1 = x;

	  // Taylor series.
	  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
	  // where x = (y - 1)/(y + 1)    (|x| < 1)
	  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
	  x2 = finalise(x.times(x), wpr, 1);
	  denominator = 3;

	  for (;;) {
	    numerator = finalise(numerator.times(x2), wpr, 1);
	    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));

	    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
	      sum = sum.times(2);

	      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an
	      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.
	      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
	      sum = divide(sum, new Ctor(n), wpr, 1);

	      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
	      // been repeated previously) and the first 4 rounding digits 9999?
	      // If so, restart the summation with a higher precision, otherwise
	      // e.g. with precision: 12, rounding: 1
	      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
	      // `wpr - guard` is the index of first rounding digit.
	      if (sd == null) {
	        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
	          Ctor.precision = wpr += guard;
	          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
	          x2 = finalise(x.times(x), wpr, 1);
	          denominator = rep = 1;
	        } else {
	          return finalise(sum, Ctor.precision = pr, rm, external = true);
	        }
	      } else {
	        Ctor.precision = pr;
	        return sum;
	      }
	    }

	    sum = t;
	    denominator += 2;
	  }
	}


	// ±Infinity, NaN.
	function nonFiniteToString(x) {
	  // Unsigned.
	  return String(x.s * x.s / 0);
	}


	/*
	 * Parse the value of a new Decimal `x` from string `str`.
	 */
	function parseDecimal(x, str) {
	  var e, i, len;

	  // Decimal point?
	  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

	  // Exponential form?
	  if ((i = str.search(/e/i)) > 0) {

	    // Determine exponent.
	    if (e < 0) e = i;
	    e += +str.slice(i + 1);
	    str = str.substring(0, i);
	  } else if (e < 0) {

	    // Integer.
	    e = str.length;
	  }

	  // Determine leading zeros.
	  for (i = 0; str.charCodeAt(i) === 48; i++);

	  // Determine trailing zeros.
	  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);
	  str = str.slice(i, len);

	  if (str) {
	    len -= i;
	    x.e = e = e - i - 1;
	    x.d = [];

	    // Transform base

	    // e is the base 10 exponent.
	    // i is where to slice str to get the first word of the digits array.
	    i = (e + 1) % LOG_BASE;
	    if (e < 0) i += LOG_BASE;

	    if (i < len) {
	      if (i) x.d.push(+str.slice(0, i));
	      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));
	      str = str.slice(i);
	      i = LOG_BASE - str.length;
	    } else {
	      i -= len;
	    }

	    for (; i--;) str += '0';
	    x.d.push(+str);

	    if (external) {

	      // Overflow?
	      if (x.e > x.constructor.maxE) {

	        // Infinity.
	        x.d = null;
	        x.e = NaN;

	      // Underflow?
	      } else if (x.e < x.constructor.minE) {

	        // Zero.
	        x.e = 0;
	        x.d = [0];
	        // x.constructor.underflow = true;
	      } // else x.constructor.underflow = false;
	    }
	  } else {

	    // Zero.
	    x.e = 0;
	    x.d = [0];
	  }

	  return x;
	}


	/*
	 * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
	 */
	function parseOther(x, str) {
	  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;

	  if (str.indexOf('_') > -1) {
	    str = str.replace(/(\d)_(?=\d)/g, '$1');
	    if (isDecimal.test(str)) return parseDecimal(x, str);
	  } else if (str === 'Infinity' || str === 'NaN') {
	    if (!+str) x.s = NaN;
	    x.e = NaN;
	    x.d = null;
	    return x;
	  }

	  if (isHex.test(str))  {
	    base = 16;
	    str = str.toLowerCase();
	  } else if (isBinary.test(str))  {
	    base = 2;
	  } else if (isOctal.test(str))  {
	    base = 8;
	  } else {
	    throw Error(invalidArgument + str);
	  }

	  // Is there a binary exponent part?
	  i = str.search(/p/i);

	  if (i > 0) {
	    p = +str.slice(i + 1);
	    str = str.substring(2, i);
	  } else {
	    str = str.slice(2);
	  }

	  // Convert `str` as an integer then divide the result by `base` raised to a power such that the
	  // fraction part will be restored.
	  i = str.indexOf('.');
	  isFloat = i >= 0;
	  Ctor = x.constructor;

	  if (isFloat) {
	    str = str.replace('.', '');
	    len = str.length;
	    i = len - i;

	    // log[10](16) = 1.2041... , log[10](88) = 1.9444....
	    divisor = intPow(Ctor, new Ctor(base), i, i * 2);
	  }

	  xd = convertBase(str, base, BASE);
	  xe = xd.length - 1;

	  // Remove trailing zeros.
	  for (i = xe; xd[i] === 0; --i) xd.pop();
	  if (i < 0) return new Ctor(x.s * 0);
	  x.e = getBase10Exponent(xd, xe);
	  x.d = xd;
	  external = false;

	  // At what precision to perform the division to ensure exact conversion?
	  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
	  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
	  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
	  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
	  // Therefore using 4 * the number of digits of str will always be enough.
	  if (isFloat) x = divide(x, divisor, len * 4);

	  // Multiply by the binary exponent part if present.
	  if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));
	  external = true;

	  return x;
	}


	/*
	 * sin(x) = x - x^3/3! + x^5/5! - ...
	 * |x| < pi/2
	 *
	 */
	function sine(Ctor, x) {
	  var k,
	    len = x.d.length;

	  if (len < 3) {
	    return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);
	  }

	  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
	  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
	  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))

	  // Estimate the optimum number of times to use the argument reduction.
	  k = 1.4 * Math.sqrt(len);
	  k = k > 16 ? 16 : k | 0;

	  x = x.times(1 / tinyPow(5, k));
	  x = taylorSeries(Ctor, 2, x, x);

	  // Reverse argument reduction
	  var sin2_x,
	    d5 = new Ctor(5),
	    d16 = new Ctor(16),
	    d20 = new Ctor(20);
	  for (; k--;) {
	    sin2_x = x.times(x);
	    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
	  }

	  return x;
	}


	// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.
	function taylorSeries(Ctor, n, x, y, isHyperbolic) {
	  var j, t, u, x2,
	    pr = Ctor.precision,
	    k = Math.ceil(pr / LOG_BASE);

	  external = false;
	  x2 = x.times(x);
	  u = new Ctor(y);

	  for (;;) {
	    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
	    u = isHyperbolic ? y.plus(t) : y.minus(t);
	    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
	    t = u.plus(y);

	    if (t.d[k] !== void 0) {
	      for (j = k; t.d[j] === u.d[j] && j--;);
	      if (j == -1) break;
	    }

	    j = u;
	    u = y;
	    y = t;
	    t = j;
	  }

	  external = true;
	  t.d.length = k + 1;

	  return t;
	}


	// Exponent e must be positive and non-zero.
	function tinyPow(b, e) {
	  var n = b;
	  while (--e) n *= b;
	  return n;
	}


	// Return the absolute value of `x` reduced to less than or equal to half pi.
	function toLessThanHalfPi(Ctor, x) {
	  var t,
	    isNeg = x.s < 0,
	    pi = getPi(Ctor, Ctor.precision, 1),
	    halfPi = pi.times(0.5);

	  x = x.abs();

	  if (x.lte(halfPi)) {
	    quadrant = isNeg ? 4 : 1;
	    return x;
	  }

	  t = x.divToInt(pi);

	  if (t.isZero()) {
	    quadrant = isNeg ? 3 : 2;
	  } else {
	    x = x.minus(t.times(pi));

	    // 0 <= x < pi
	    if (x.lte(halfPi)) {
	      quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);
	      return x;
	    }

	    quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);
	  }

	  return x.minus(pi).abs();
	}


	/*
	 * Return the value of Decimal `x` as a string in base `baseOut`.
	 *
	 * If the optional `sd` argument is present include a binary exponent suffix.
	 */
	function toStringBinary(x, baseOut, sd, rm) {
	  var base, e, i, k, len, roundUp, str, xd, y,
	    Ctor = x.constructor,
	    isExp = sd !== void 0;

	  if (isExp) {
	    checkInt32(sd, 1, MAX_DIGITS);
	    if (rm === void 0) rm = Ctor.rounding;
	    else checkInt32(rm, 0, 8);
	  } else {
	    sd = Ctor.precision;
	    rm = Ctor.rounding;
	  }

	  if (!x.isFinite()) {
	    str = nonFiniteToString(x);
	  } else {
	    str = finiteToString(x);
	    i = str.indexOf('.');

	    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
	    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
	    // minBinaryExponent = floor(decimalExponent * log[2](10))
	    // log[2](10) = 3.321928094887362347870319429489390175864

	    if (isExp) {
	      base = 2;
	      if (baseOut == 16) {
	        sd = sd * 4 - 3;
	      } else if (baseOut == 8) {
	        sd = sd * 3 - 2;
	      }
	    } else {
	      base = baseOut;
	    }

	    // Convert the number as an integer then divide the result by its base raised to a power such
	    // that the fraction part will be restored.

	    // Non-integer.
	    if (i >= 0) {
	      str = str.replace('.', '');
	      y = new Ctor(1);
	      y.e = str.length - i;
	      y.d = convertBase(finiteToString(y), 10, base);
	      y.e = y.d.length;
	    }

	    xd = convertBase(str, 10, base);
	    e = len = xd.length;

	    // Remove trailing zeros.
	    for (; xd[--len] == 0;) xd.pop();

	    if (!xd[0]) {
	      str = isExp ? '0p+0' : '0';
	    } else {
	      if (i < 0) {
	        e--;
	      } else {
	        x = new Ctor(x);
	        x.d = xd;
	        x.e = e;
	        x = divide(x, y, sd, rm, 0, base);
	        xd = x.d;
	        e = x.e;
	        roundUp = inexact;
	      }

	      // The rounding digit, i.e. the digit after the digit that may be rounded up.
	      i = xd[sd];
	      k = base / 2;
	      roundUp = roundUp || xd[sd + 1] !== void 0;

	      roundUp = rm < 4
	        ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))
	        : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||
	          rm === (x.s < 0 ? 8 : 7));

	      xd.length = sd;

	      if (roundUp) {

	        // Rounding up may mean the previous digit has to be rounded up and so on.
	        for (; ++xd[--sd] > base - 1;) {
	          xd[sd] = 0;
	          if (!sd) {
	            ++e;
	            xd.unshift(1);
	          }
	        }
	      }

	      // Determine trailing zeros.
	      for (len = xd.length; !xd[len - 1]; --len);

	      // E.g. [4, 11, 15] becomes 4bf.
	      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);

	      // Add binary exponent suffix?
	      if (isExp) {
	        if (len > 1) {
	          if (baseOut == 16 || baseOut == 8) {
	            i = baseOut == 16 ? 4 : 3;
	            for (--len; len % i; len++) str += '0';
	            xd = convertBase(str, base, baseOut);
	            for (len = xd.length; !xd[len - 1]; --len);

	            // xd[0] will always be be 1
	            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);
	          } else {
	            str = str.charAt(0) + '.' + str.slice(1);
	          }
	        }

	        str =  str + (e < 0 ? 'p' : 'p+') + e;
	      } else if (e < 0) {
	        for (; ++e;) str = '0' + str;
	        str = '0.' + str;
	      } else {
	        if (++e > len) for (e -= len; e-- ;) str += '0';
	        else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
	      }
	    }

	    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
	  }

	  return x.s < 0 ? '-' + str : str;
	}


	// Does not strip trailing zeros.
	function truncate(arr, len) {
	  if (arr.length > len) {
	    arr.length = len;
	    return true;
	  }
	}


	// Decimal methods


	/*
	 *  abs
	 *  acos
	 *  acosh
	 *  add
	 *  asin
	 *  asinh
	 *  atan
	 *  atanh
	 *  atan2
	 *  cbrt
	 *  ceil
	 *  clamp
	 *  clone
	 *  config
	 *  cos
	 *  cosh
	 *  div
	 *  exp
	 *  floor
	 *  hypot
	 *  ln
	 *  log
	 *  log2
	 *  log10
	 *  max
	 *  min
	 *  mod
	 *  mul
	 *  pow
	 *  random
	 *  round
	 *  set
	 *  sign
	 *  sin
	 *  sinh
	 *  sqrt
	 *  sub
	 *  sum
	 *  tan
	 *  tanh
	 *  trunc
	 */


	/*
	 * Return a new Decimal whose value is the absolute value of `x`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function abs$1(x) {
	  return new this(x).abs();
	}


	/*
	 * Return a new Decimal whose value is the arccosine in radians of `x`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function acos(x) {
	  return new this(x).acos();
	}


	/*
	 * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
	 * `precision` significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} A value in radians.
	 *
	 */
	function acosh(x) {
	  return new this(x).acosh();
	}


	/*
	 * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
	 * digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 * y {number|string|Decimal}
	 *
	 */
	function add$1(x, y) {
	  return new this(x).plus(y);
	}


	/*
	 * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function asin(x) {
	  return new this(x).asin();
	}


	/*
	 * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
	 * `precision` significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} A value in radians.
	 *
	 */
	function asinh(x) {
	  return new this(x).asinh();
	}


	/*
	 * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function atan$1(x) {
	  return new this(x).atan();
	}


	/*
	 * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
	 * `precision` significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} A value in radians.
	 *
	 */
	function atanh(x) {
	  return new this(x).atanh();
	}


	/*
	 * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
	 * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
	 *
	 * Domain: [-Infinity, Infinity]
	 * Range: [-pi, pi]
	 *
	 * y {number|string|Decimal} The y-coordinate.
	 * x {number|string|Decimal} The x-coordinate.
	 *
	 * atan2(±0, -0)               = ±pi
	 * atan2(±0, +0)               = ±0
	 * atan2(±0, -x)               = ±pi for x > 0
	 * atan2(±0, x)                = ±0 for x > 0
	 * atan2(-y, ±0)               = -pi/2 for y > 0
	 * atan2(y, ±0)                = pi/2 for y > 0
	 * atan2(±y, -Infinity)        = ±pi for finite y > 0
	 * atan2(±y, +Infinity)        = ±0 for finite y > 0
	 * atan2(±Infinity, x)         = ±pi/2 for finite x
	 * atan2(±Infinity, -Infinity) = ±3*pi/4
	 * atan2(±Infinity, +Infinity) = ±pi/4
	 * atan2(NaN, x) = NaN
	 * atan2(y, NaN) = NaN
	 *
	 */
	function atan2(y, x) {
	  y = new this(y);
	  x = new this(x);
	  var r,
	    pr = this.precision,
	    rm = this.rounding,
	    wpr = pr + 4;

	  // Either NaN
	  if (!y.s || !x.s) {
	    r = new this(NaN);

	  // Both ±Infinity
	  } else if (!y.d && !x.d) {
	    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
	    r.s = y.s;

	  // x is ±Infinity or y is ±0
	  } else if (!x.d || y.isZero()) {
	    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
	    r.s = y.s;

	  // y is ±Infinity or x is ±0
	  } else if (!y.d || x.isZero()) {
	    r = getPi(this, wpr, 1).times(0.5);
	    r.s = y.s;

	  // Both non-zero and finite
	  } else if (x.s < 0) {
	    this.precision = wpr;
	    this.rounding = 1;
	    r = this.atan(divide(y, x, wpr, 1));
	    x = getPi(this, wpr, 1);
	    this.precision = pr;
	    this.rounding = rm;
	    r = y.s < 0 ? r.minus(x) : r.plus(x);
	  } else {
	    r = this.atan(divide(y, x, wpr, 1));
	  }

	  return r;
	}


	/*
	 * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
	 * digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function cbrt(x) {
	  return new this(x).cbrt();
	}


	/*
	 * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function ceil(x) {
	  return finalise(x = new this(x), x.e + 1, 2);
	}


	/*
	 * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.
	 *
	 * x {number|string|Decimal}
	 * min {number|string|Decimal}
	 * max {number|string|Decimal}
	 *
	 */
	function clamp(x, min, max) {
	  return new this(x).clamp(min, max);
	}


	/*
	 * Configure global settings for a Decimal constructor.
	 *
	 * `obj` is an object with one or more of the following properties,
	 *
	 *   precision  {number}
	 *   rounding   {number}
	 *   toExpNeg   {number}
	 *   toExpPos   {number}
	 *   maxE       {number}
	 *   minE       {number}
	 *   modulo     {number}
	 *   crypto     {boolean|number}
	 *   defaults   {true}
	 *
	 * E.g. Decimal.config({ precision: 20, rounding: 4 })
	 *
	 */
	function config$1(obj) {
	  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');
	  var i, p, v,
	    useDefaults = obj.defaults === true,
	    ps = [
	      'precision', 1, MAX_DIGITS,
	      'rounding', 0, 8,
	      'toExpNeg', -EXP_LIMIT, 0,
	      'toExpPos', 0, EXP_LIMIT,
	      'maxE', 0, EXP_LIMIT,
	      'minE', -EXP_LIMIT, 0,
	      'modulo', 0, 9
	    ];

	  for (i = 0; i < ps.length; i += 3) {
	    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];
	    if ((v = obj[p]) !== void 0) {
	      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
	      else throw Error(invalidArgument + p + ': ' + v);
	    }
	  }

	  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];
	  if ((v = obj[p]) !== void 0) {
	    if (v === true || v === false || v === 0 || v === 1) {
	      if (v) {
	        if (typeof crypto != 'undefined' && crypto &&
	          (crypto.getRandomValues || crypto.randomBytes)) {
	          this[p] = true;
	        } else {
	          throw Error(cryptoUnavailable);
	        }
	      } else {
	        this[p] = false;
	      }
	    } else {
	      throw Error(invalidArgument + p + ': ' + v);
	    }
	  }

	  return this;
	}


	/*
	 * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
	 * digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} A value in radians.
	 *
	 */
	function cos$1(x) {
	  return new this(x).cos();
	}


	/*
	 * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
	 * significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} A value in radians.
	 *
	 */
	function cosh(x) {
	  return new this(x).cosh();
	}


	/*
	 * Create and return a Decimal constructor with the same configuration properties as this Decimal
	 * constructor.
	 *
	 */
	function clone(obj) {
	  var i, p, ps;

	  /*
	   * The Decimal constructor and exported function.
	   * Return a new Decimal instance.
	   *
	   * v {number|string|Decimal} A numeric value.
	   *
	   */
	  function Decimal(v) {
	    var e, i, t,
	      x = this;

	    // Decimal called without new.
	    if (!(x instanceof Decimal)) return new Decimal(v);

	    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
	    // which points to Object.
	    x.constructor = Decimal;

	    // Duplicate.
	    if (isDecimalInstance(v)) {
	      x.s = v.s;

	      if (external) {
	        if (!v.d || v.e > Decimal.maxE) {

	          // Infinity.
	          x.e = NaN;
	          x.d = null;
	        } else if (v.e < Decimal.minE) {

	          // Zero.
	          x.e = 0;
	          x.d = [0];
	        } else {
	          x.e = v.e;
	          x.d = v.d.slice();
	        }
	      } else {
	        x.e = v.e;
	        x.d = v.d ? v.d.slice() : v.d;
	      }

	      return;
	    }

	    t = typeof v;

	    if (t === 'number') {
	      if (v === 0) {
	        x.s = 1 / v < 0 ? -1 : 1;
	        x.e = 0;
	        x.d = [0];
	        return;
	      }

	      if (v < 0) {
	        v = -v;
	        x.s = -1;
	      } else {
	        x.s = 1;
	      }

	      // Fast path for small integers.
	      if (v === ~~v && v < 1e7) {
	        for (e = 0, i = v; i >= 10; i /= 10) e++;

	        if (external) {
	          if (e > Decimal.maxE) {
	            x.e = NaN;
	            x.d = null;
	          } else if (e < Decimal.minE) {
	            x.e = 0;
	            x.d = [0];
	          } else {
	            x.e = e;
	            x.d = [v];
	          }
	        } else {
	          x.e = e;
	          x.d = [v];
	        }

	        return;

	      // Infinity, NaN.
	      } else if (v * 0 !== 0) {
	        if (!v) x.s = NaN;
	        x.e = NaN;
	        x.d = null;
	        return;
	      }

	      return parseDecimal(x, v.toString());

	    } else if (t !== 'string') {
	      throw Error(invalidArgument + v);
	    }

	    // Minus sign?
	    if ((i = v.charCodeAt(0)) === 45) {
	      v = v.slice(1);
	      x.s = -1;
	    } else {
	      // Plus sign?
	      if (i === 43) v = v.slice(1);
	      x.s = 1;
	    }

	    return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
	  }

	  Decimal.prototype = P;

	  Decimal.ROUND_UP = 0;
	  Decimal.ROUND_DOWN = 1;
	  Decimal.ROUND_CEIL = 2;
	  Decimal.ROUND_FLOOR = 3;
	  Decimal.ROUND_HALF_UP = 4;
	  Decimal.ROUND_HALF_DOWN = 5;
	  Decimal.ROUND_HALF_EVEN = 6;
	  Decimal.ROUND_HALF_CEIL = 7;
	  Decimal.ROUND_HALF_FLOOR = 8;
	  Decimal.EUCLID = 9;

	  Decimal.config = Decimal.set = config$1;
	  Decimal.clone = clone;
	  Decimal.isDecimal = isDecimalInstance;

	  Decimal.abs = abs$1;
	  Decimal.acos = acos;
	  Decimal.acosh = acosh;        // ES6
	  Decimal.add = add$1;
	  Decimal.asin = asin;
	  Decimal.asinh = asinh;        // ES6
	  Decimal.atan = atan$1;
	  Decimal.atanh = atanh;        // ES6
	  Decimal.atan2 = atan2;
	  Decimal.cbrt = cbrt;          // ES6
	  Decimal.ceil = ceil;
	  Decimal.clamp = clamp;
	  Decimal.cos = cos$1;
	  Decimal.cosh = cosh;          // ES6
	  Decimal.div = div;
	  Decimal.exp = exp;
	  Decimal.floor = floor;
	  Decimal.hypot = hypot;        // ES6
	  Decimal.ln = ln;
	  Decimal.log = log;
	  Decimal.log10 = log10;        // ES6
	  Decimal.log2 = log2;          // ES6
	  Decimal.max = max;
	  Decimal.min = min;
	  Decimal.mod = mod;
	  Decimal.mul = mul;
	  Decimal.pow = pow$1;
	  Decimal.random = random;
	  Decimal.round = round;
	  Decimal.sign = sign$1;          // ES6
	  Decimal.sin = sin$1;
	  Decimal.sinh = sinh;          // ES6
	  Decimal.sqrt = sqrt$1;
	  Decimal.sub = sub;
	  Decimal.sum = sum;
	  Decimal.tan = tan;
	  Decimal.tanh = tanh;          // ES6
	  Decimal.trunc = trunc;        // ES6

	  if (obj === void 0) obj = {};
	  if (obj) {
	    if (obj.defaults !== true) {
	      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
	      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
	    }
	  }

	  Decimal.config(obj);

	  return Decimal;
	}


	/*
	 * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
	 * digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 * y {number|string|Decimal}
	 *
	 */
	function div(x, y) {
	  return new this(x).div(y);
	}


	/*
	 * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} The power to which to raise the base of the natural log.
	 *
	 */
	function exp(x) {
	  return new this(x).exp();
	}


	/*
	 * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function floor(x) {
	  return finalise(x = new this(x), x.e + 1, 3);
	}


	/*
	 * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
	 * rounded to `precision` significant digits using rounding mode `rounding`.
	 *
	 * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
	 *
	 * arguments {number|string|Decimal}
	 *
	 */
	function hypot() {
	  var i, n,
	    t = new this(0);

	  external = false;

	  for (i = 0; i < arguments.length;) {
	    n = new this(arguments[i++]);
	    if (!n.d) {
	      if (n.s) {
	        external = true;
	        return new this(1 / 0);
	      }
	      t = n;
	    } else if (t.d) {
	      t = t.plus(n.times(n));
	    }
	  }

	  external = true;

	  return t.sqrt();
	}


	/*
	 * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),
	 * otherwise return false.
	 *
	 */
	function isDecimalInstance(obj) {
	  return obj instanceof Decimal || obj && obj.toStringTag === tag || false;
	}


	/*
	 * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function ln(x) {
	  return new this(x).ln();
	}


	/*
	 * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
	 * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
	 *
	 * log[y](x)
	 *
	 * x {number|string|Decimal} The argument of the logarithm.
	 * y {number|string|Decimal} The base of the logarithm.
	 *
	 */
	function log(x, y) {
	  return new this(x).log(y);
	}


	/*
	 * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function log2(x) {
	  return new this(x).log(2);
	}


	/*
	 * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function log10(x) {
	  return new this(x).log(10);
	}


	/*
	 * Return a new Decimal whose value is the maximum of the arguments.
	 *
	 * arguments {number|string|Decimal}
	 *
	 */
	function max() {
	  return maxOrMin(this, arguments, 'lt');
	}


	/*
	 * Return a new Decimal whose value is the minimum of the arguments.
	 *
	 * arguments {number|string|Decimal}
	 *
	 */
	function min() {
	  return maxOrMin(this, arguments, 'gt');
	}


	/*
	 * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
	 * using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 * y {number|string|Decimal}
	 *
	 */
	function mod(x, y) {
	  return new this(x).mod(y);
	}


	/*
	 * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
	 * digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 * y {number|string|Decimal}
	 *
	 */
	function mul(x, y) {
	  return new this(x).mul(y);
	}


	/*
	 * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
	 * significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} The base.
	 * y {number|string|Decimal} The exponent.
	 *
	 */
	function pow$1(x, y) {
	  return new this(x).pow(y);
	}


	/*
	 * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
	 * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
	 * are produced).
	 *
	 * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
	 *
	 */
	function random(sd) {
	  var d, e, k, n,
	    i = 0,
	    r = new this(1),
	    rd = [];

	  if (sd === void 0) sd = this.precision;
	  else checkInt32(sd, 1, MAX_DIGITS);

	  k = Math.ceil(sd / LOG_BASE);

	  if (!this.crypto) {
	    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;

	  // Browsers supporting crypto.getRandomValues.
	  } else if (crypto.getRandomValues) {
	    d = crypto.getRandomValues(new Uint32Array(k));

	    for (; i < k;) {
	      n = d[i];

	      // 0 <= n < 4294967296
	      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
	      if (n >= 4.29e9) {
	        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
	      } else {

	        // 0 <= n <= 4289999999
	        // 0 <= (n % 1e7) <= 9999999
	        rd[i++] = n % 1e7;
	      }
	    }

	  // Node.js supporting crypto.randomBytes.
	  } else if (crypto.randomBytes) {

	    // buffer
	    d = crypto.randomBytes(k *= 4);

	    for (; i < k;) {

	      // 0 <= n < 2147483648
	      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);

	      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
	      if (n >= 2.14e9) {
	        crypto.randomBytes(4).copy(d, i);
	      } else {

	        // 0 <= n <= 2139999999
	        // 0 <= (n % 1e7) <= 9999999
	        rd.push(n % 1e7);
	        i += 4;
	      }
	    }

	    i = k / 4;
	  } else {
	    throw Error(cryptoUnavailable);
	  }

	  k = rd[--i];
	  sd %= LOG_BASE;

	  // Convert trailing digits to zeros according to sd.
	  if (k && sd) {
	    n = mathpow(10, LOG_BASE - sd);
	    rd[i] = (k / n | 0) * n;
	  }

	  // Remove trailing words which are zero.
	  for (; rd[i] === 0; i--) rd.pop();

	  // Zero?
	  if (i < 0) {
	    e = 0;
	    rd = [0];
	  } else {
	    e = -1;

	    // Remove leading words which are zero and adjust exponent accordingly.
	    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();

	    // Count the digits of the first word of rd to determine leading zeros.
	    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;

	    // Adjust the exponent for leading zeros of the first word of rd.
	    if (k < LOG_BASE) e -= LOG_BASE - k;
	  }

	  r.e = e;
	  r.d = rd;

	  return r;
	}


	/*
	 * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
	 *
	 * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function round(x) {
	  return finalise(x = new this(x), x.e + 1, this.rounding);
	}


	/*
	 * Return
	 *   1    if x > 0,
	 *  -1    if x < 0,
	 *   0    if x is 0,
	 *  -0    if x is -0,
	 *   NaN  otherwise
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function sign$1(x) {
	  x = new this(x);
	  return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;
	}


	/*
	 * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
	 * using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} A value in radians.
	 *
	 */
	function sin$1(x) {
	  return new this(x).sin();
	}


	/*
	 * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} A value in radians.
	 *
	 */
	function sinh(x) {
	  return new this(x).sinh();
	}


	/*
	 * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
	 * digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function sqrt$1(x) {
	  return new this(x).sqrt();
	}


	/*
	 * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
	 * using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 * y {number|string|Decimal}
	 *
	 */
	function sub(x, y) {
	  return new this(x).sub(y);
	}


	/*
	 * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 * Only the result is rounded, not the intermediate calculations.
	 *
	 * arguments {number|string|Decimal}
	 *
	 */
	function sum() {
	  var i = 0,
	    args = arguments,
	    x = new this(args[i]);

	  external = false;
	  for (; x.s && ++i < args.length;) x = x.plus(args[i]);
	  external = true;

	  return finalise(x, this.precision, this.rounding);
	}


	/*
	 * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
	 * digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} A value in radians.
	 *
	 */
	function tan(x) {
	  return new this(x).tan();
	}


	/*
	 * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} A value in radians.
	 *
	 */
	function tanh(x) {
	  return new this(x).tanh();
	}


	/*
	 * Return a new Decimal whose value is `x` truncated to an integer.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function trunc(x) {
	  return finalise(x = new this(x), x.e + 1, 1);
	}


	P[Symbol.for('nodejs.util.inspect.custom')] = P.toString;
	P[Symbol.toStringTag] = 'Decimal';

	// Create and configure initial Decimal constructor.
	var Decimal = P.constructor = clone(DEFAULTS);

	// Create the internal constants from their string values.
	LN10 = new Decimal(LN10);
	PI = new Decimal(PI);

	var name$17 = 'BigNumber';
	var dependencies$16 = ['?on', 'config'];
	var createBigNumberClass = /* #__PURE__ */factory(name$17, dependencies$16, _ref => {
	  var {
	    on,
	    config
	  } = _ref;
	  var BigNumber = Decimal.clone({
	    precision: config.precision,
	    modulo: Decimal.EUCLID
	  });
	  BigNumber.prototype = Object.create(BigNumber.prototype);

	  /**
	   * Attach type information
	   */
	  BigNumber.prototype.type = 'BigNumber';
	  BigNumber.prototype.isBigNumber = true;

	  /**
	   * Get a JSON representation of a BigNumber containing
	   * type information
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "BigNumber", "value": "0.2"}`
	   */
	  BigNumber.prototype.toJSON = function () {
	    return {
	      mathjs: 'BigNumber',
	      value: this.toString()
	    };
	  };

	  /**
	   * Instantiate a BigNumber from a JSON object
	   * @param {Object} json  a JSON object structured as:
	   *                       `{"mathjs": "BigNumber", "value": "0.2"}`
	   * @return {BigNumber}
	   */
	  BigNumber.fromJSON = function (json) {
	    return new BigNumber(json.value);
	  };
	  if (on) {
	    // listen for changed in the configuration, automatically apply changed precision
	    on('config', function (curr, prev) {
	      if (curr.precision !== prev.precision) {
	        BigNumber.config({
	          precision: curr.precision
	        });
	      }
	    });
	  }
	  return BigNumber;
	}, {
	  isClass: true
	});

	var complex$1 = {exports: {}};

	/**
	 * @license Complex.js v2.1.1 12/05/2020
	 *
	 * Copyright (c) 2020, Robert Eisele (robert@xarg.org)
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 **/

	(function (module, exports) {
		/**
		 *
		 * This class allows the manipulation of complex numbers.
		 * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.
		 *
		 * Object form
		 * { re: <real>, im: <imaginary> }
		 * { arg: <angle>, abs: <radius> }
		 * { phi: <angle>, r: <radius> }
		 *
		 * Array / Vector form
		 * [ real, imaginary ]
		 *
		 * Double form
		 * 99.3 - Single double value
		 *
		 * String form
		 * '23.1337' - Simple real number
		 * '15+3i' - a simple complex number
		 * '3-i' - a simple complex number
		 *
		 * Example:
		 *
		 * var c = new Complex('99.3+8i');
		 * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);
		 *
		 */

		(function(root) {

		  var cosh = Math.cosh || function(x) {
		    return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
		  };

		  var sinh = Math.sinh || function(x) {
		    return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
		  };

		  /**
		   * Calculates cos(x) - 1 using Taylor series if x is small (-¼π ≤ x ≤ ¼π).
		   *
		   * @param {number} x
		   * @returns {number} cos(x) - 1
		   */
		  var cosm1 = function(x) {

		    var b = Math.PI / 4;
		    if (-b > x || x > b) {
		      return Math.cos(x) - 1.0;
		    }

		    /* Calculate horner form of polynomial of taylor series in Q
		    var fac = 1, alt = 1, pol = {};
		    for (var i = 0; i <= 16; i++) {
		      fac*= i || 1;
		      if (i % 2 == 0) {
		        pol[i] = new Fraction(1, alt * fac);
		        alt = -alt;
		      }
		    }
		    console.log(new Polynomial(pol).toHorner()); // (((((((1/20922789888000x^2-1/87178291200)x^2+1/479001600)x^2-1/3628800)x^2+1/40320)x^2-1/720)x^2+1/24)x^2-1/2)x^2+1
		    */

		    var xx = x * x;
		    return xx * (
		      xx * (
		        xx * (
		          xx * (
		            xx * (
		              xx * (
		                xx * (
		                  xx / 20922789888000
		                  - 1 / 87178291200)
		                + 1 / 479001600)
		              - 1 / 3628800)
		            + 1 / 40320)
		          - 1 / 720)
		        + 1 / 24)
		      - 1 / 2);
		  };

		  var hypot = function(x, y) {

		    var a = Math.abs(x);
		    var b = Math.abs(y);

		    if (a < 3000 && b < 3000) {
		      return Math.sqrt(a * a + b * b);
		    }

		    if (a < b) {
		      a = b;
		      b = x / y;
		    } else {
		      b = y / x;
		    }
		    return a * Math.sqrt(1 + b * b);
		  };

		  var parser_exit = function() {
		    throw SyntaxError('Invalid Param');
		  };

		  /**
		   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows
		   *
		   * @param {number} a
		   * @param {number} b
		   * @returns {number}
		   */
		  function logHypot(a, b) {

		    var _a = Math.abs(a);
		    var _b = Math.abs(b);

		    if (a === 0) {
		      return Math.log(_b);
		    }

		    if (b === 0) {
		      return Math.log(_a);
		    }

		    if (_a < 3000 && _b < 3000) {
		      return Math.log(a * a + b * b) * 0.5;
		    }

		    /* I got 4 ideas to compute this property without overflow:
		     *
		     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate
		     *
		     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)

		     Math.log(a * a + b * b) / 2

		     *
		     *
		     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)

		     var fn = function(a, b) {
		     a = Math.abs(a);
		     b = Math.abs(b);
		     var t = Math.min(a, b);
		     a = Math.max(a, b);
		     t = t / a;

		     return Math.log(a) + Math.log(1 + t * t) / 2;
		     };

		     * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)

		     Math.log(a / Math.cos(Math.atan2(b, a)))

		     * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)

		     Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))

		     */

		     a = a / 2;
		     b = b / 2;

		    return 0.5 * Math.log(a * a + b * b) + Math.LN2;
		  }

		  var parse = function(a, b) {

		    var z = { 're': 0, 'im': 0 };

		    if (a === undefined || a === null) {
		      z['re'] =
		      z['im'] = 0;
		    } else if (b !== undefined) {
		      z['re'] = a;
		      z['im'] = b;
		    } else
		      switch (typeof a) {

		        case 'object':

		          if ('im' in a && 're' in a) {
		            z['re'] = a['re'];
		            z['im'] = a['im'];
		          } else if ('abs' in a && 'arg' in a) {
		            if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {
		              return Complex['INFINITY'];
		            }
		            z['re'] = a['abs'] * Math.cos(a['arg']);
		            z['im'] = a['abs'] * Math.sin(a['arg']);
		          } else if ('r' in a && 'phi' in a) {
		            if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {
		              return Complex['INFINITY'];
		            }
		            z['re'] = a['r'] * Math.cos(a['phi']);
		            z['im'] = a['r'] * Math.sin(a['phi']);
		          } else if (a.length === 2) { // Quick array check
		            z['re'] = a[0];
		            z['im'] = a[1];
		          } else {
		            parser_exit();
		          }
		          break;

		        case 'string':

		          z['im'] = /* void */
		          z['re'] = 0;

		          var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
		          var plus = 1;
		          var minus = 0;

		          if (tokens === null) {
		            parser_exit();
		          }

		          for (var i = 0; i < tokens.length; i++) {

		            var c = tokens[i];

		            if (c === ' ' || c === '\t' || c === '\n') ; else if (c === '+') {
		              plus++;
		            } else if (c === '-') {
		              minus++;
		            } else if (c === 'i' || c === 'I') {

		              if (plus + minus === 0) {
		                parser_exit();
		              }

		              if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
		                z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
		                i++;
		              } else {
		                z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
		              }
		              plus = minus = 0;

		            } else {

		              if (plus + minus === 0 || isNaN(c)) {
		                parser_exit();
		              }

		              if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
		                z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
		                i++;
		              } else {
		                z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
		              }
		              plus = minus = 0;
		            }
		          }

		          // Still something on the stack
		          if (plus + minus > 0) {
		            parser_exit();
		          }
		          break;

		        case 'number':
		          z['im'] = 0;
		          z['re'] = a;
		          break;

		        default:
		          parser_exit();
		      }

		    if (isNaN(z['re']) || isNaN(z['im'])) ;

		    return z;
		  };

		  /**
		   * @constructor
		   * @returns {Complex}
		   */
		  function Complex(a, b) {

		    if (!(this instanceof Complex)) {
		      return new Complex(a, b);
		    }

		    var z = parse(a, b);

		    this['re'] = z['re'];
		    this['im'] = z['im'];
		  }

		  Complex.prototype = {

		    're': 0,
		    'im': 0,

		    /**
		     * Calculates the sign of a complex number, which is a normalized complex
		     *
		     * @returns {Complex}
		     */
		    'sign': function() {

		      var abs = this['abs']();

		      return new Complex(
		        this['re'] / abs,
		        this['im'] / abs);
		    },

		    /**
		     * Adds two complex numbers
		     *
		     * @returns {Complex}
		     */
		    'add': function(a, b) {

		      var z = new Complex(a, b);

		      // Infinity + Infinity = NaN
		      if (this['isInfinite']() && z['isInfinite']()) {
		        return Complex['NAN'];
		      }

		      // Infinity + z = Infinity { where z != Infinity }
		      if (this['isInfinite']() || z['isInfinite']()) {
		        return Complex['INFINITY'];
		      }

		      return new Complex(
		        this['re'] + z['re'],
		        this['im'] + z['im']);
		    },

		    /**
		     * Subtracts two complex numbers
		     *
		     * @returns {Complex}
		     */
		    'sub': function(a, b) {

		      var z = new Complex(a, b);

		      // Infinity - Infinity = NaN
		      if (this['isInfinite']() && z['isInfinite']()) {
		        return Complex['NAN'];
		      }

		      // Infinity - z = Infinity { where z != Infinity }
		      if (this['isInfinite']() || z['isInfinite']()) {
		        return Complex['INFINITY'];
		      }

		      return new Complex(
		        this['re'] - z['re'],
		        this['im'] - z['im']);
		    },

		    /**
		     * Multiplies two complex numbers
		     *
		     * @returns {Complex}
		     */
		    'mul': function(a, b) {

		      var z = new Complex(a, b);

		      // Infinity * 0 = NaN
		      if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
		        return Complex['NAN'];
		      }

		      // Infinity * z = Infinity { where z != 0 }
		      if (this['isInfinite']() || z['isInfinite']()) {
		        return Complex['INFINITY'];
		      }

		      // Short circuit for real values
		      if (z['im'] === 0 && this['im'] === 0) {
		        return new Complex(this['re'] * z['re'], 0);
		      }

		      return new Complex(
		        this['re'] * z['re'] - this['im'] * z['im'],
		        this['re'] * z['im'] + this['im'] * z['re']);
		    },

		    /**
		     * Divides two complex numbers
		     *
		     * @returns {Complex}
		     */
		    'div': function(a, b) {

		      var z = new Complex(a, b);

		      // 0 / 0 = NaN and Infinity / Infinity = NaN
		      if ((this['isZero']() && z['isZero']()) || (this['isInfinite']() && z['isInfinite']())) {
		        return Complex['NAN'];
		      }

		      // Infinity / 0 = Infinity
		      if (this['isInfinite']() || z['isZero']()) {
		        return Complex['INFINITY'];
		      }

		      // 0 / Infinity = 0
		      if (this['isZero']() || z['isInfinite']()) {
		        return Complex['ZERO'];
		      }

		      a = this['re'];
		      b = this['im'];

		      var c = z['re'];
		      var d = z['im'];
		      var t, x;

		      if (0 === d) {
		        // Divisor is real
		        return new Complex(a / c, b / c);
		      }

		      if (Math.abs(c) < Math.abs(d)) {

		        x = c / d;
		        t = c * x + d;

		        return new Complex(
		          (a * x + b) / t,
		          (b * x - a) / t);

		      } else {

		        x = d / c;
		        t = d * x + c;

		        return new Complex(
		          (a + b * x) / t,
		          (b - a * x) / t);
		      }
		    },

		    /**
		     * Calculate the power of two complex numbers
		     *
		     * @returns {Complex}
		     */
		    'pow': function(a, b) {

		      var z = new Complex(a, b);

		      a = this['re'];
		      b = this['im'];

		      if (z['isZero']()) {
		        return Complex['ONE'];
		      }

		      // If the exponent is real
		      if (z['im'] === 0) {

		        if (b === 0 && a > 0) {

		          return new Complex(Math.pow(a, z['re']), 0);

		        } else if (a === 0) { // If base is fully imaginary

		          switch ((z['re'] % 4 + 4) % 4) {
		            case 0:
		              return new Complex(Math.pow(b, z['re']), 0);
		            case 1:
		              return new Complex(0, Math.pow(b, z['re']));
		            case 2:
		              return new Complex(-Math.pow(b, z['re']), 0);
		            case 3:
		              return new Complex(0, -Math.pow(b, z['re']));
		          }
		        }
		      }

		      /* I couldn't find a good formula, so here is a derivation and optimization
		       *
		       * z_1^z_2 = (a + bi)^(c + di)
		       *         = exp((c + di) * log(a + bi)
		       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))
		       * =>...
		       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
		       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
		       *
		       * =>...
		       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
		       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
		       *
		       * =>
		       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))
		       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))
		       *
		       */

		      if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {
		        return Complex['ZERO'];
		      }

		      var arg = Math.atan2(b, a);
		      var loh = logHypot(a, b);

		      a = Math.exp(z['re'] * loh - z['im'] * arg);
		      b = z['im'] * loh + z['re'] * arg;
		      return new Complex(
		        a * Math.cos(b),
		        a * Math.sin(b));
		    },

		    /**
		     * Calculate the complex square root
		     *
		     * @returns {Complex}
		     */
		    'sqrt': function() {

		      var a = this['re'];
		      var b = this['im'];
		      var r = this['abs']();

		      var re, im;

		      if (a >= 0) {

		        if (b === 0) {
		          return new Complex(Math.sqrt(a), 0);
		        }

		        re = 0.5 * Math.sqrt(2.0 * (r + a));
		      } else {
		        re = Math.abs(b) / Math.sqrt(2 * (r - a));
		      }

		      if (a <= 0) {
		        im = 0.5 * Math.sqrt(2.0 * (r - a));
		      } else {
		        im = Math.abs(b) / Math.sqrt(2 * (r + a));
		      }

		      return new Complex(re, b < 0 ? -im : im);
		    },

		    /**
		     * Calculate the complex exponent
		     *
		     * @returns {Complex}
		     */
		    'exp': function() {

		      var tmp = Math.exp(this['re']);

		      if (this['im'] === 0) ;
		      return new Complex(
		        tmp * Math.cos(this['im']),
		        tmp * Math.sin(this['im']));
		    },

		    /**
		     * Calculate the complex exponent and subtracts one.
		     *
		     * This may be more accurate than `Complex(x).exp().sub(1)` if
		     * `x` is small.
		     *
		     * @returns {Complex}
		     */
		    'expm1': function() {

		      /**
		       * exp(a + i*b) - 1
		       = exp(a) * (cos(b) + j*sin(b)) - 1
		       = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)
		       */

		      var a = this['re'];
		      var b = this['im'];

		      return new Complex(
		        Math.expm1(a) * Math.cos(b) + cosm1(b),
		        Math.exp(a) * Math.sin(b));
		    },

		    /**
		     * Calculate the natural log
		     *
		     * @returns {Complex}
		     */
		    'log': function() {

		      var a = this['re'];
		      var b = this['im'];

		      return new Complex(
		        logHypot(a, b),
		        Math.atan2(b, a));
		    },

		    /**
		     * Calculate the magnitude of the complex number
		     *
		     * @returns {number}
		     */
		    'abs': function() {

		      return hypot(this['re'], this['im']);
		    },

		    /**
		     * Calculate the angle of the complex number
		     *
		     * @returns {number}
		     */
		    'arg': function() {

		      return Math.atan2(this['im'], this['re']);
		    },

		    /**
		     * Calculate the sine of the complex number
		     *
		     * @returns {Complex}
		     */
		    'sin': function() {

		      // sin(z) = ( e^iz - e^-iz ) / 2i 
		      //        = sin(a)cosh(b) + i cos(a)sinh(b)

		      var a = this['re'];
		      var b = this['im'];

		      return new Complex(
		        Math.sin(a) * cosh(b),
		        Math.cos(a) * sinh(b));
		    },

		    /**
		     * Calculate the cosine
		     *
		     * @returns {Complex}
		     */
		    'cos': function() {

		      // cos(z) = ( e^iz + e^-iz ) / 2 
		      //        = cos(a)cosh(b) - i sin(a)sinh(b)

		      var a = this['re'];
		      var b = this['im'];

		      return new Complex(
		        Math.cos(a) * cosh(b),
		        -Math.sin(a) * sinh(b));
		    },

		    /**
		     * Calculate the tangent
		     *
		     * @returns {Complex}
		     */
		    'tan': function() {

		      // tan(z) = sin(z) / cos(z) 
		      //        = ( e^iz - e^-iz ) / ( i( e^iz + e^-iz ) )
		      //        = ( e^2iz - 1 ) / i( e^2iz + 1 )
		      //        = ( sin(2a) + i sinh(2b) ) / ( cos(2a) + cosh(2b) )

		      var a = 2 * this['re'];
		      var b = 2 * this['im'];
		      var d = Math.cos(a) + cosh(b);

		      return new Complex(
		        Math.sin(a) / d,
		        sinh(b) / d);
		    },

		    /**
		     * Calculate the cotangent
		     *
		     * @returns {Complex}
		     */
		    'cot': function() {

		      // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))

		      var a = 2 * this['re'];
		      var b = 2 * this['im'];
		      var d = Math.cos(a) - cosh(b);

		      return new Complex(
		        -Math.sin(a) / d,
		        sinh(b) / d);
		    },

		    /**
		     * Calculate the secant
		     *
		     * @returns {Complex}
		     */
		    'sec': function() {

		      // sec(c) = 2 / (e^(ci) + e^(-ci))

		      var a = this['re'];
		      var b = this['im'];
		      var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);

		      return new Complex(
		        Math.cos(a) * cosh(b) / d,
		        Math.sin(a) * sinh(b) / d);
		    },

		    /**
		     * Calculate the cosecans
		     *
		     * @returns {Complex}
		     */
		    'csc': function() {

		      // csc(c) = 2i / (e^(ci) - e^(-ci))

		      var a = this['re'];
		      var b = this['im'];
		      var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);

		      return new Complex(
		        Math.sin(a) * cosh(b) / d,
		        -Math.cos(a) * sinh(b) / d);
		    },

		    /**
		     * Calculate the complex arcus sinus
		     *
		     * @returns {Complex}
		     */
		    'asin': function() {

		      // asin(c) = -i * log(ci + sqrt(1 - c^2))

		      var a = this['re'];
		      var b = this['im'];

		      var t1 = new Complex(
		        b * b - a * a + 1,
		        -2 * a * b)['sqrt']();

		      var t2 = new Complex(
		        t1['re'] - b,
		        t1['im'] + a)['log']();

		      return new Complex(t2['im'], -t2['re']);
		    },

		    /**
		     * Calculate the complex arcus cosinus
		     *
		     * @returns {Complex}
		     */
		    'acos': function() {

		      // acos(c) = i * log(c - i * sqrt(1 - c^2))

		      var a = this['re'];
		      var b = this['im'];

		      var t1 = new Complex(
		        b * b - a * a + 1,
		        -2 * a * b)['sqrt']();

		      var t2 = new Complex(
		        t1['re'] - b,
		        t1['im'] + a)['log']();

		      return new Complex(Math.PI / 2 - t2['im'], t2['re']);
		    },

		    /**
		     * Calculate the complex arcus tangent
		     *
		     * @returns {Complex}
		     */
		    'atan': function() {

		      // atan(c) = i / 2 log((i + x) / (i - x))

		      var a = this['re'];
		      var b = this['im'];

		      if (a === 0) {

		        if (b === 1) {
		          return new Complex(0, Infinity);
		        }

		        if (b === -1) {
		          return new Complex(0, -Infinity);
		        }
		      }

		      var d = a * a + (1.0 - b) * (1.0 - b);

		      var t1 = new Complex(
		        (1 - b * b - a * a) / d,
		        -2 * a / d).log();

		      return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);
		    },

		    /**
		     * Calculate the complex arcus cotangent
		     *
		     * @returns {Complex}
		     */
		    'acot': function() {

		      // acot(c) = i / 2 log((c - i) / (c + i))

		      var a = this['re'];
		      var b = this['im'];

		      if (b === 0) {
		        return new Complex(Math.atan2(1, a), 0);
		      }

		      var d = a * a + b * b;
		      return (d !== 0)
		        ? new Complex(
		          a / d,
		          -b / d).atan()
		        : new Complex(
		          (a !== 0) ? a / 0 : 0,
		          (b !== 0) ? -b / 0 : 0).atan();
		    },

		    /**
		     * Calculate the complex arcus secant
		     *
		     * @returns {Complex}
		     */
		    'asec': function() {

		      // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))

		      var a = this['re'];
		      var b = this['im'];

		      if (a === 0 && b === 0) {
		        return new Complex(0, Infinity);
		      }

		      var d = a * a + b * b;
		      return (d !== 0)
		        ? new Complex(
		          a / d,
		          -b / d).acos()
		        : new Complex(
		          (a !== 0) ? a / 0 : 0,
		          (b !== 0) ? -b / 0 : 0).acos();
		    },

		    /**
		     * Calculate the complex arcus cosecans
		     *
		     * @returns {Complex}
		     */
		    'acsc': function() {

		      // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))

		      var a = this['re'];
		      var b = this['im'];

		      if (a === 0 && b === 0) {
		        return new Complex(Math.PI / 2, Infinity);
		      }

		      var d = a * a + b * b;
		      return (d !== 0)
		        ? new Complex(
		          a / d,
		          -b / d).asin()
		        : new Complex(
		          (a !== 0) ? a / 0 : 0,
		          (b !== 0) ? -b / 0 : 0).asin();
		    },

		    /**
		     * Calculate the complex sinh
		     *
		     * @returns {Complex}
		     */
		    'sinh': function() {

		      // sinh(c) = (e^c - e^-c) / 2

		      var a = this['re'];
		      var b = this['im'];

		      return new Complex(
		        sinh(a) * Math.cos(b),
		        cosh(a) * Math.sin(b));
		    },

		    /**
		     * Calculate the complex cosh
		     *
		     * @returns {Complex}
		     */
		    'cosh': function() {

		      // cosh(c) = (e^c + e^-c) / 2

		      var a = this['re'];
		      var b = this['im'];

		      return new Complex(
		        cosh(a) * Math.cos(b),
		        sinh(a) * Math.sin(b));
		    },

		    /**
		     * Calculate the complex tanh
		     *
		     * @returns {Complex}
		     */
		    'tanh': function() {

		      // tanh(c) = (e^c - e^-c) / (e^c + e^-c)

		      var a = 2 * this['re'];
		      var b = 2 * this['im'];
		      var d = cosh(a) + Math.cos(b);

		      return new Complex(
		        sinh(a) / d,
		        Math.sin(b) / d);
		    },

		    /**
		     * Calculate the complex coth
		     *
		     * @returns {Complex}
		     */
		    'coth': function() {

		      // coth(c) = (e^c + e^-c) / (e^c - e^-c)

		      var a = 2 * this['re'];
		      var b = 2 * this['im'];
		      var d = cosh(a) - Math.cos(b);

		      return new Complex(
		        sinh(a) / d,
		        -Math.sin(b) / d);
		    },

		    /**
		     * Calculate the complex coth
		     *
		     * @returns {Complex}
		     */
		    'csch': function() {

		      // csch(c) = 2 / (e^c - e^-c)

		      var a = this['re'];
		      var b = this['im'];
		      var d = Math.cos(2 * b) - cosh(2 * a);

		      return new Complex(
		        -2 * sinh(a) * Math.cos(b) / d,
		        2 * cosh(a) * Math.sin(b) / d);
		    },

		    /**
		     * Calculate the complex sech
		     *
		     * @returns {Complex}
		     */
		    'sech': function() {

		      // sech(c) = 2 / (e^c + e^-c)

		      var a = this['re'];
		      var b = this['im'];
		      var d = Math.cos(2 * b) + cosh(2 * a);

		      return new Complex(
		        2 * cosh(a) * Math.cos(b) / d,
		        -2 * sinh(a) * Math.sin(b) / d);
		    },

		    /**
		     * Calculate the complex asinh
		     *
		     * @returns {Complex}
		     */
		    'asinh': function() {

		      // asinh(c) = log(c + sqrt(c^2 + 1))

		      var tmp = this['im'];
		      this['im'] = -this['re'];
		      this['re'] = tmp;
		      var res = this['asin']();

		      this['re'] = -this['im'];
		      this['im'] = tmp;
		      tmp = res['re'];

		      res['re'] = -res['im'];
		      res['im'] = tmp;
		      return res;
		    },

		    /**
		     * Calculate the complex acosh
		     *
		     * @returns {Complex}
		     */
		    'acosh': function() {

		      // acosh(c) = log(c + sqrt(c^2 - 1))

		      var res = this['acos']();
		      if (res['im'] <= 0) {
		        var tmp = res['re'];
		        res['re'] = -res['im'];
		        res['im'] = tmp;
		      } else {
		        var tmp = res['im'];
		        res['im'] = -res['re'];
		        res['re'] = tmp;
		      }
		      return res;
		    },

		    /**
		     * Calculate the complex atanh
		     *
		     * @returns {Complex}
		     */
		    'atanh': function() {

		      // atanh(c) = log((1+c) / (1-c)) / 2

		      var a = this['re'];
		      var b = this['im'];

		      var noIM = a > 1 && b === 0;
		      var oneMinus = 1 - a;
		      var onePlus = 1 + a;
		      var d = oneMinus * oneMinus + b * b;

		      var x = (d !== 0)
		        ? new Complex(
		          (onePlus * oneMinus - b * b) / d,
		          (b * oneMinus + onePlus * b) / d)
		        : new Complex(
		          (a !== -1) ? (a / 0) : 0,
		          (b !== 0) ? (b / 0) : 0);

		      var temp = x['re'];
		      x['re'] = logHypot(x['re'], x['im']) / 2;
		      x['im'] = Math.atan2(x['im'], temp) / 2;
		      if (noIM) {
		        x['im'] = -x['im'];
		      }
		      return x;
		    },

		    /**
		     * Calculate the complex acoth
		     *
		     * @returns {Complex}
		     */
		    'acoth': function() {

		      // acoth(c) = log((c+1) / (c-1)) / 2

		      var a = this['re'];
		      var b = this['im'];

		      if (a === 0 && b === 0) {
		        return new Complex(0, Math.PI / 2);
		      }

		      var d = a * a + b * b;
		      return (d !== 0)
		        ? new Complex(
		          a / d,
		          -b / d).atanh()
		        : new Complex(
		          (a !== 0) ? a / 0 : 0,
		          (b !== 0) ? -b / 0 : 0).atanh();
		    },

		    /**
		     * Calculate the complex acsch
		     *
		     * @returns {Complex}
		     */
		    'acsch': function() {

		      // acsch(c) = log((1+sqrt(1+c^2))/c)

		      var a = this['re'];
		      var b = this['im'];

		      if (b === 0) {

		        return new Complex(
		          (a !== 0)
		            ? Math.log(a + Math.sqrt(a * a + 1))
		            : Infinity, 0);
		      }

		      var d = a * a + b * b;
		      return (d !== 0)
		        ? new Complex(
		          a / d,
		          -b / d).asinh()
		        : new Complex(
		          (a !== 0) ? a / 0 : 0,
		          (b !== 0) ? -b / 0 : 0).asinh();
		    },

		    /**
		     * Calculate the complex asech
		     *
		     * @returns {Complex}
		     */
		    'asech': function() {

		      // asech(c) = log((1+sqrt(1-c^2))/c)

		      var a = this['re'];
		      var b = this['im'];

		      if (this['isZero']()) {
		        return Complex['INFINITY'];
		      }

		      var d = a * a + b * b;
		      return (d !== 0)
		        ? new Complex(
		          a / d,
		          -b / d).acosh()
		        : new Complex(
		          (a !== 0) ? a / 0 : 0,
		          (b !== 0) ? -b / 0 : 0).acosh();
		    },

		    /**
		     * Calculate the complex inverse 1/z
		     *
		     * @returns {Complex}
		     */
		    'inverse': function() {

		      // 1 / 0 = Infinity and 1 / Infinity = 0
		      if (this['isZero']()) {
		        return Complex['INFINITY'];
		      }

		      if (this['isInfinite']()) {
		        return Complex['ZERO'];
		      }

		      var a = this['re'];
		      var b = this['im'];

		      var d = a * a + b * b;

		      return new Complex(a / d, -b / d);
		    },

		    /**
		     * Returns the complex conjugate
		     *
		     * @returns {Complex}
		     */
		    'conjugate': function() {

		      return new Complex(this['re'], -this['im']);
		    },

		    /**
		     * Gets the negated complex number
		     *
		     * @returns {Complex}
		     */
		    'neg': function() {

		      return new Complex(-this['re'], -this['im']);
		    },

		    /**
		     * Ceils the actual complex number
		     *
		     * @returns {Complex}
		     */
		    'ceil': function(places) {

		      places = Math.pow(10, places || 0);

		      return new Complex(
		        Math.ceil(this['re'] * places) / places,
		        Math.ceil(this['im'] * places) / places);
		    },

		    /**
		     * Floors the actual complex number
		     *
		     * @returns {Complex}
		     */
		    'floor': function(places) {

		      places = Math.pow(10, places || 0);

		      return new Complex(
		        Math.floor(this['re'] * places) / places,
		        Math.floor(this['im'] * places) / places);
		    },

		    /**
		     * Ceils the actual complex number
		     *
		     * @returns {Complex}
		     */
		    'round': function(places) {

		      places = Math.pow(10, places || 0);

		      return new Complex(
		        Math.round(this['re'] * places) / places,
		        Math.round(this['im'] * places) / places);
		    },

		    /**
		     * Compares two complex numbers
		     *
		     * **Note:** new Complex(Infinity).equals(Infinity) === false
		     *
		     * @returns {boolean}
		     */
		    'equals': function(a, b) {

		      var z = new Complex(a, b);

		      return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&
		        Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];
		    },

		    /**
		     * Clones the actual object
		     *
		     * @returns {Complex}
		     */
		    'clone': function() {

		      return new Complex(this['re'], this['im']);
		    },

		    /**
		     * Gets a string of the actual complex number
		     *
		     * @returns {string}
		     */
		    'toString': function() {

		      var a = this['re'];
		      var b = this['im'];
		      var ret = "";

		      if (this['isNaN']()) {
		        return 'NaN';
		      }

		      if (this['isInfinite']()) {
		        return 'Infinity';
		      }

		      if (Math.abs(a) < Complex['EPSILON']) {
		        a = 0;
		      }

		      if (Math.abs(b) < Complex['EPSILON']) {
		        b = 0;
		      }

		      // If is real number
		      if (b === 0) {
		        return ret + a;
		      }

		      if (a !== 0) {
		        ret += a;
		        ret += " ";
		        if (b < 0) {
		          b = -b;
		          ret += "-";
		        } else {
		          ret += "+";
		        }
		        ret += " ";
		      } else if (b < 0) {
		        b = -b;
		        ret += "-";
		      }

		      if (1 !== b) { // b is the absolute imaginary part
		        ret += b;
		      }
		      return ret + "i";
		    },

		    /**
		     * Returns the actual number as a vector
		     *
		     * @returns {Array}
		     */
		    'toVector': function() {

		      return [this['re'], this['im']];
		    },

		    /**
		     * Returns the actual real value of the current object
		     *
		     * @returns {number|null}
		     */
		    'valueOf': function() {

		      if (this['im'] === 0) {
		        return this['re'];
		      }
		      return null;
		    },

		    /**
		     * Determines whether a complex number is not on the Riemann sphere.
		     *
		     * @returns {boolean}
		     */
		    'isNaN': function() {
		      return isNaN(this['re']) || isNaN(this['im']);
		    },

		    /**
		     * Determines whether or not a complex number is at the zero pole of the
		     * Riemann sphere.
		     *
		     * @returns {boolean}
		     */
		    'isZero': function() {
		      return this['im'] === 0 && this['re'] === 0;
		    },

		    /**
		     * Determines whether a complex number is not at the infinity pole of the
		     * Riemann sphere.
		     *
		     * @returns {boolean}
		     */
		    'isFinite': function() {
		      return isFinite(this['re']) && isFinite(this['im']);
		    },

		    /**
		     * Determines whether or not a complex number is at the infinity pole of the
		     * Riemann sphere.
		     *
		     * @returns {boolean}
		     */
		    'isInfinite': function() {
		      return !(this['isNaN']() || this['isFinite']());
		    }
		  };

		  Complex['ZERO'] = new Complex(0, 0);
		  Complex['ONE'] = new Complex(1, 0);
		  Complex['I'] = new Complex(0, 1);
		  Complex['PI'] = new Complex(Math.PI, 0);
		  Complex['E'] = new Complex(Math.E, 0);
		  Complex['INFINITY'] = new Complex(Infinity, Infinity);
		  Complex['NAN'] = new Complex(NaN, NaN);
		  Complex['EPSILON'] = 1e-15;

		  {
		    Object.defineProperty(Complex, "__esModule", { 'value': true });
		    Complex['default'] = Complex;
		    Complex['Complex'] = Complex;
		    module['exports'] = Complex;
		  }

		})(); 
	} (complex$1));

	var complexExports = complex$1.exports;
	var Complex$1 = /*@__PURE__*/getDefaultExportFromCjs(complexExports);

	var name$16 = 'Complex';
	var dependencies$15 = [];
	var createComplexClass = /* #__PURE__ */factory(name$16, dependencies$15, () => {
	  /**
	   * Attach type information
	   */
	  Object.defineProperty(Complex$1, 'name', {
	    value: 'Complex'
	  });
	  Complex$1.prototype.constructor = Complex$1;
	  Complex$1.prototype.type = 'Complex';
	  Complex$1.prototype.isComplex = true;

	  /**
	   * Get a JSON representation of the complex number
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Complex", "re": 2, "im": 3}`
	   */
	  Complex$1.prototype.toJSON = function () {
	    return {
	      mathjs: 'Complex',
	      re: this.re,
	      im: this.im
	    };
	  };

	  /*
	   * Return the value of the complex number in polar notation
	   * The angle phi will be set in the interval of [-pi, pi].
	   * @return {{r: number, phi: number}} Returns and object with properties r and phi.
	   */
	  Complex$1.prototype.toPolar = function () {
	    return {
	      r: this.abs(),
	      phi: this.arg()
	    };
	  };

	  /**
	   * Get a string representation of the complex number,
	   * with optional formatting options.
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @return {string} str
	   */
	  Complex$1.prototype.format = function (options) {
	    var str = '';
	    var im = this.im;
	    var re = this.re;
	    var strRe = format$2(this.re, options);
	    var strIm = format$2(this.im, options);

	    // round either re or im when smaller than the configured precision
	    var precision = isNumber(options) ? options : options ? options.precision : null;
	    if (precision !== null) {
	      var epsilon = Math.pow(10, -precision);
	      if (Math.abs(re / im) < epsilon) {
	        re = 0;
	      }
	      if (Math.abs(im / re) < epsilon) {
	        im = 0;
	      }
	    }
	    if (im === 0) {
	      // real value
	      str = strRe;
	    } else if (re === 0) {
	      // purely complex value
	      if (im === 1) {
	        str = 'i';
	      } else if (im === -1) {
	        str = '-i';
	      } else {
	        str = strIm + 'i';
	      }
	    } else {
	      // complex value
	      if (im < 0) {
	        if (im === -1) {
	          str = strRe + ' - i';
	        } else {
	          str = strRe + ' - ' + strIm.substring(1) + 'i';
	        }
	      } else {
	        if (im === 1) {
	          str = strRe + ' + i';
	        } else {
	          str = strRe + ' + ' + strIm + 'i';
	        }
	      }
	    }
	    return str;
	  };

	  /**
	   * Create a complex number from polar coordinates
	   *
	   * Usage:
	   *
	   *     Complex.fromPolar(r: number, phi: number) : Complex
	   *     Complex.fromPolar({r: number, phi: number}) : Complex
	   *
	   * @param {*} args...
	   * @return {Complex}
	   */
	  Complex$1.fromPolar = function (args) {
	    switch (arguments.length) {
	      case 1:
	        {
	          var arg = arguments[0];
	          if (typeof arg === 'object') {
	            return Complex$1(arg);
	          } else {
	            throw new TypeError('Input has to be an object with r and phi keys.');
	          }
	        }
	      case 2:
	        {
	          var r = arguments[0];
	          var phi = arguments[1];
	          if (isNumber(r)) {
	            if (isUnit(phi) && phi.hasBase('ANGLE')) {
	              // convert unit to a number in radians
	              phi = phi.toNumber('rad');
	            }
	            if (isNumber(phi)) {
	              return new Complex$1({
	                r,
	                phi
	              });
	            }
	            throw new TypeError('Phi is not a number nor an angle unit.');
	          } else {
	            throw new TypeError('Radius r is not a number.');
	          }
	        }
	      default:
	        throw new SyntaxError('Wrong number of arguments in function fromPolar');
	    }
	  };
	  Complex$1.prototype.valueOf = Complex$1.prototype.toString;

	  /**
	   * Create a Complex number from a JSON object
	   * @param {Object} json  A JSON Object structured as
	   *                       {"mathjs": "Complex", "re": 2, "im": 3}
	   *                       All properties are optional, default values
	   *                       for `re` and `im` are 0.
	   * @return {Complex} Returns a new Complex number
	   */
	  Complex$1.fromJSON = function (json) {
	    return new Complex$1(json);
	  };

	  /**
	   * Compare two complex numbers, `a` and `b`:
	   *
	   * - Returns 1 when the real part of `a` is larger than the real part of `b`
	   * - Returns -1 when the real part of `a` is smaller than the real part of `b`
	   * - Returns 1 when the real parts are equal
	   *   and the imaginary part of `a` is larger than the imaginary part of `b`
	   * - Returns -1 when the real parts are equal
	   *   and the imaginary part of `a` is smaller than the imaginary part of `b`
	   * - Returns 0 when both real and imaginary parts are equal.
	   *
	   * @params {Complex} a
	   * @params {Complex} b
	   * @returns {number} Returns the comparison result: -1, 0, or 1
	   */
	  Complex$1.compare = function (a, b) {
	    if (a.re > b.re) {
	      return 1;
	    }
	    if (a.re < b.re) {
	      return -1;
	    }
	    if (a.im > b.im) {
	      return 1;
	    }
	    if (a.im < b.im) {
	      return -1;
	    }
	    return 0;
	  };
	  return Complex$1;
	}, {
	  isClass: true
	});

	var fraction$1 = {exports: {}};

	/**
	 * @license Fraction.js v4.3.0 20/08/2023
	 * https://www.xarg.org/2014/03/rational-numbers-in-javascript/
	 *
	 * Copyright (c) 2023, Robert Eisele (robert@raw.org)
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 **/

	(function (module, exports) {
		/**
		 *
		 * This class offers the possibility to calculate fractions.
		 * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.
		 *
		 * Array/Object form
		 * [ 0 => <numerator>, 1 => <denominator> ]
		 * [ n => <numerator>, d => <denominator> ]
		 *
		 * Integer form
		 * - Single integer value
		 *
		 * Double form
		 * - Single double value
		 *
		 * String form
		 * 123.456 - a simple double
		 * 123/456 - a string fraction
		 * 123.'456' - a double with repeating decimal places
		 * 123.(456) - synonym
		 * 123.45'6' - a double with repeating last place
		 * 123.45(6) - synonym
		 *
		 * Example:
		 *
		 * var f = new Fraction("9.4'31'");
		 * f.mul([-4, 3]).div(4.9);
		 *
		 */

		(function(root) {

		  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.
		  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.
		  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits
		  var MAX_CYCLE_LEN = 2000;

		  // Parsed data to avoid calling "new" all the time
		  var P = {
		    "s": 1,
		    "n": 0,
		    "d": 1
		  };

		  function assign(n, s) {

		    if (isNaN(n = parseInt(n, 10))) {
		      throw InvalidParameter();
		    }
		    return n * s;
		  }

		  // Creates a new Fraction internally without the need of the bulky constructor
		  function newFraction(n, d) {

		    if (d === 0) {
		      throw DivisionByZero();
		    }

		    var f = Object.create(Fraction.prototype);
		    f["s"] = n < 0 ? -1 : 1;

		    n = n < 0 ? -n : n;

		    var a = gcd(n, d);

		    f["n"] = n / a;
		    f["d"] = d / a;
		    return f;
		  }

		  function factorize(num) {

		    var factors = {};

		    var n = num;
		    var i = 2;
		    var s = 4;

		    while (s <= n) {

		      while (n % i === 0) {
		        n/= i;
		        factors[i] = (factors[i] || 0) + 1;
		      }
		      s+= 1 + 2 * i++;
		    }

		    if (n !== num) {
		      if (n > 1)
		        factors[n] = (factors[n] || 0) + 1;
		    } else {
		      factors[num] = (factors[num] || 0) + 1;
		    }
		    return factors;
		  }

		  var parse = function(p1, p2) {

		    var n = 0, d = 1, s = 1;
		    var v = 0, w = 0, x = 0, y = 1, z = 1;

		    var A = 0, B = 1;
		    var C = 1, D = 1;

		    var N = 10000000;
		    var M;

		    if (p1 === undefined || p1 === null) ; else if (p2 !== undefined) {
		      n = p1;
		      d = p2;
		      s = n * d;

		      if (n % 1 !== 0 || d % 1 !== 0) {
		        throw NonIntegerParameter();
		      }

		    } else
		      switch (typeof p1) {

		        case "object":
		          {
		            if ("d" in p1 && "n" in p1) {
		              n = p1["n"];
		              d = p1["d"];
		              if ("s" in p1)
		                n*= p1["s"];
		            } else if (0 in p1) {
		              n = p1[0];
		              if (1 in p1)
		                d = p1[1];
		            } else {
		              throw InvalidParameter();
		            }
		            s = n * d;
		            break;
		          }
		        case "number":
		          {
		            if (p1 < 0) {
		              s = p1;
		              p1 = -p1;
		            }

		            if (p1 % 1 === 0) {
		              n = p1;
		            } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow

		              if (p1 >= 1) {
		                z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
		                p1/= z;
		              }

		              // Using Farey Sequences
		              // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/

		              while (B <= N && D <= N) {
		                M = (A + C) / (B + D);

		                if (p1 === M) {
		                  if (B + D <= N) {
		                    n = A + C;
		                    d = B + D;
		                  } else if (D > B) {
		                    n = C;
		                    d = D;
		                  } else {
		                    n = A;
		                    d = B;
		                  }
		                  break;

		                } else {

		                  if (p1 > M) {
		                    A+= C;
		                    B+= D;
		                  } else {
		                    C+= A;
		                    D+= B;
		                  }

		                  if (B > N) {
		                    n = C;
		                    d = D;
		                  } else {
		                    n = A;
		                    d = B;
		                  }
		                }
		              }
		              n*= z;
		            } else if (isNaN(p1) || isNaN(p2)) {
		              d = n = NaN;
		            }
		            break;
		          }
		        case "string":
		          {
		            B = p1.match(/\d+|./g);

		            if (B === null)
		              throw InvalidParameter();

		            if (B[A] === '-') {// Check for minus sign at the beginning
		              s = -1;
		              A++;
		            } else if (B[A] === '+') {// Check for plus sign at the beginning
		              A++;
		            }

		            if (B.length === A + 1) { // Check if it's just a simple number "1234"
		              w = assign(B[A++], s);
		            } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number

		              if (B[A] !== '.') { // Handle 0.5 and .5
		                v = assign(B[A++], s);
		              }
		              A++;

		              // Check for decimal places
		              if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === "'" && B[A + 3] === "'") {
		                w = assign(B[A], s);
		                y = Math.pow(10, B[A].length);
		                A++;
		              }

		              // Check for repeating places
		              if (B[A] === '(' && B[A + 2] === ')' || B[A] === "'" && B[A + 2] === "'") {
		                x = assign(B[A + 1], s);
		                z = Math.pow(10, B[A + 1].length) - 1;
		                A+= 3;
		              }

		            } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction "123/456" or "123:456"
		              w = assign(B[A], s);
		              y = assign(B[A + 2], 1);
		              A+= 3;
		            } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction "123 1/2"
		              v = assign(B[A], s);
		              w = assign(B[A + 2], s);
		              y = assign(B[A + 4], 1);
		              A+= 5;
		            }

		            if (B.length <= A) { // Check for more tokens on the stack
		              d = y * z;
		              s = /* void */
		              n = x + d * v + z * w;
		              break;
		            }

		            /* Fall through on error */
		          }
		        default:
		          throw InvalidParameter();
		      }

		    if (d === 0) {
		      throw DivisionByZero();
		    }

		    P["s"] = s < 0 ? -1 : 1;
		    P["n"] = Math.abs(n);
		    P["d"] = Math.abs(d);
		  };

		  function modpow(b, e, m) {

		    var r = 1;
		    for (; e > 0; b = (b * b) % m, e >>= 1) {

		      if (e & 1) {
		        r = (r * b) % m;
		      }
		    }
		    return r;
		  }


		  function cycleLen(n, d) {

		    for (; d % 2 === 0;
		      d/= 2) {
		    }

		    for (; d % 5 === 0;
		      d/= 5) {
		    }

		    if (d === 1) // Catch non-cyclic numbers
		      return 0;

		    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:
		    // 10^(d-1) % d == 1
		    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,
		    // as we want to translate the numbers to strings.

		    var rem = 10 % d;
		    var t = 1;

		    for (; rem !== 1; t++) {
		      rem = rem * 10 % d;

		      if (t > MAX_CYCLE_LEN)
		        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`
		    }
		    return t;
		  }


		  function cycleStart(n, d, len) {

		    var rem1 = 1;
		    var rem2 = modpow(10, len, d);

		    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)
		      // Solve 10^s == 10^(s+t) (mod d)

		      if (rem1 === rem2)
		        return t;

		      rem1 = rem1 * 10 % d;
		      rem2 = rem2 * 10 % d;
		    }
		    return 0;
		  }

		  function gcd(a, b) {

		    if (!a)
		      return b;
		    if (!b)
		      return a;

		    while (1) {
		      a%= b;
		      if (!a)
		        return b;
		      b%= a;
		      if (!b)
		        return a;
		    }
		  }
		  /**
		   * Module constructor
		   *
		   * @constructor
		   * @param {number|Fraction=} a
		   * @param {number=} b
		   */
		  function Fraction(a, b) {

		    parse(a, b);

		    if (this instanceof Fraction) {
		      a = gcd(P["d"], P["n"]); // Abuse variable a
		      this["s"] = P["s"];
		      this["n"] = P["n"] / a;
		      this["d"] = P["d"] / a;
		    } else {
		      return newFraction(P['s'] * P['n'], P['d']);
		    }
		  }

		  var DivisionByZero = function() { return new Error("Division by Zero"); };
		  var InvalidParameter = function() { return new Error("Invalid argument"); };
		  var NonIntegerParameter = function() { return new Error("Parameters must be integer"); };

		  Fraction.prototype = {

		    "s": 1,
		    "n": 0,
		    "d": 1,

		    /**
		     * Calculates the absolute value
		     *
		     * Ex: new Fraction(-4).abs() => 4
		     **/
		    "abs": function() {

		      return newFraction(this["n"], this["d"]);
		    },

		    /**
		     * Inverts the sign of the current fraction
		     *
		     * Ex: new Fraction(-4).neg() => 4
		     **/
		    "neg": function() {

		      return newFraction(-this["s"] * this["n"], this["d"]);
		    },

		    /**
		     * Adds two rational numbers
		     *
		     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
		     **/
		    "add": function(a, b) {

		      parse(a, b);
		      return newFraction(
		        this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"],
		        this["d"] * P["d"]
		      );
		    },

		    /**
		     * Subtracts two rational numbers
		     *
		     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
		     **/
		    "sub": function(a, b) {

		      parse(a, b);
		      return newFraction(
		        this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"],
		        this["d"] * P["d"]
		      );
		    },

		    /**
		     * Multiplies two rational numbers
		     *
		     * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
		     **/
		    "mul": function(a, b) {

		      parse(a, b);
		      return newFraction(
		        this["s"] * P["s"] * this["n"] * P["n"],
		        this["d"] * P["d"]
		      );
		    },

		    /**
		     * Divides two rational numbers
		     *
		     * Ex: new Fraction("-17.(345)").inverse().div(3)
		     **/
		    "div": function(a, b) {

		      parse(a, b);
		      return newFraction(
		        this["s"] * P["s"] * this["n"] * P["d"],
		        this["d"] * P["n"]
		      );
		    },

		    /**
		     * Clones the actual object
		     *
		     * Ex: new Fraction("-17.(345)").clone()
		     **/
		    "clone": function() {
		      return newFraction(this['s'] * this['n'], this['d']);
		    },

		    /**
		     * Calculates the modulo of two rational numbers - a more precise fmod
		     *
		     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
		     **/
		    "mod": function(a, b) {

		      if (isNaN(this['n']) || isNaN(this['d'])) {
		        return new Fraction(NaN);
		      }

		      if (a === undefined) {
		        return newFraction(this["s"] * this["n"] % this["d"], 1);
		      }

		      parse(a, b);
		      if (0 === P["n"] && 0 === this["d"]) {
		        throw DivisionByZero();
		      }

		      /*
		       * First silly attempt, kinda slow
		       *
		       return that["sub"]({
		       "n": num["n"] * Math.floor((this.n / this.d) / (num.n / num.d)),
		       "d": num["d"],
		       "s": this["s"]
		       });*/

		      /*
		       * New attempt: a1 / b1 = a2 / b2 * q + r
		       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r
		       * => (b2 * a1 % a2 * b1) / (b1 * b2)
		       */
		      return newFraction(
		        this["s"] * (P["d"] * this["n"]) % (P["n"] * this["d"]),
		        P["d"] * this["d"]
		      );
		    },

		    /**
		     * Calculates the fractional gcd of two rational numbers
		     *
		     * Ex: new Fraction(5,8).gcd(3,7) => 1/56
		     */
		    "gcd": function(a, b) {

		      parse(a, b);

		      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)

		      return newFraction(gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]), P["d"] * this["d"]);
		    },

		    /**
		     * Calculates the fractional lcm of two rational numbers
		     *
		     * Ex: new Fraction(5,8).lcm(3,7) => 15
		     */
		    "lcm": function(a, b) {

		      parse(a, b);

		      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)

		      if (P["n"] === 0 && this["n"] === 0) {
		        return newFraction(0, 1);
		      }
		      return newFraction(P["n"] * this["n"], gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]));
		    },

		    /**
		     * Calculates the ceil of a rational number
		     *
		     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
		     **/
		    "ceil": function(places) {

		      places = Math.pow(10, places || 0);

		      if (isNaN(this["n"]) || isNaN(this["d"])) {
		        return new Fraction(NaN);
		      }
		      return newFraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
		    },

		    /**
		     * Calculates the floor of a rational number
		     *
		     * Ex: new Fraction('4.(3)').floor() => (4 / 1)
		     **/
		    "floor": function(places) {

		      places = Math.pow(10, places || 0);

		      if (isNaN(this["n"]) || isNaN(this["d"])) {
		        return new Fraction(NaN);
		      }
		      return newFraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
		    },

		    /**
		     * Rounds a rational numbers
		     *
		     * Ex: new Fraction('4.(3)').round() => (4 / 1)
		     **/
		    "round": function(places) {

		      places = Math.pow(10, places || 0);

		      if (isNaN(this["n"]) || isNaN(this["d"])) {
		        return new Fraction(NaN);
		      }
		      return newFraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
		    },

		    /**
		     * Gets the inverse of the fraction, means numerator and denominator are exchanged
		     *
		     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
		     **/
		    "inverse": function() {

		      return newFraction(this["s"] * this["d"], this["n"]);
		    },

		    /**
		     * Calculates the fraction to some rational exponent, if possible
		     *
		     * Ex: new Fraction(-1,2).pow(-3) => -8
		     */
		    "pow": function(a, b) {

		      parse(a, b);

		      // Trivial case when exp is an integer

		      if (P['d'] === 1) {

		        if (P['s'] < 0) {
		          return newFraction(Math.pow(this['s'] * this["d"], P['n']), Math.pow(this["n"], P['n']));
		        } else {
		          return newFraction(Math.pow(this['s'] * this["n"], P['n']), Math.pow(this["d"], P['n']));
		        }
		      }

		      // Negative roots become complex
		      //     (-a/b)^(c/d) = x
		      // <=> (-1)^(c/d) * (a/b)^(c/d) = x
		      // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x         # rotate 1 by 180°
		      // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula in Q ( https://proofwiki.org/wiki/De_Moivre%27s_Formula/Rational_Index )
		      // From which follows that only for c=0 the root is non-complex. c/d is a reduced fraction, so that sin(c/dpi)=0 occurs for d=1, which is handled by our trivial case.
		      if (this['s'] < 0) return null;

		      // Now prime factor n and d
		      var N = factorize(this['n']);
		      var D = factorize(this['d']);

		      // Exponentiate and take root for n and d individually
		      var n = 1;
		      var d = 1;
		      for (var k in N) {
		        if (k === '1') continue;
		        if (k === '0') {
		          n = 0;
		          break;
		        }
		        N[k]*= P['n'];

		        if (N[k] % P['d'] === 0) {
		          N[k]/= P['d'];
		        } else return null;
		        n*= Math.pow(k, N[k]);
		      }

		      for (var k in D) {
		        if (k === '1') continue;
		        D[k]*= P['n'];

		        if (D[k] % P['d'] === 0) {
		          D[k]/= P['d'];
		        } else return null;
		        d*= Math.pow(k, D[k]);
		      }

		      if (P['s'] < 0) {
		        return newFraction(d, n);
		      }
		      return newFraction(n, d);
		    },

		    /**
		     * Check if two rational numbers are the same
		     *
		     * Ex: new Fraction(19.6).equals([98, 5]);
		     **/
		    "equals": function(a, b) {

		      parse(a, b);
		      return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"]; // Same as compare() === 0
		    },

		    /**
		     * Check if two rational numbers are the same
		     *
		     * Ex: new Fraction(19.6).equals([98, 5]);
		     **/
		    "compare": function(a, b) {

		      parse(a, b);
		      var t = (this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"]);
		      return (0 < t) - (t < 0);
		    },

		    "simplify": function(eps) {

		      if (isNaN(this['n']) || isNaN(this['d'])) {
		        return this;
		      }

		      eps = eps || 0.001;

		      var thisABS = this['abs']();
		      var cont = thisABS['toContinued']();

		      for (var i = 1; i < cont.length; i++) {

		        var s = newFraction(cont[i - 1], 1);
		        for (var k = i - 2; k >= 0; k--) {
		          s = s['inverse']()['add'](cont[k]);
		        }

		        if (Math.abs(s['sub'](thisABS).valueOf()) < eps) {
		          return s['mul'](this['s']);
		        }
		      }
		      return this;
		    },

		    /**
		     * Check if two rational numbers are divisible
		     *
		     * Ex: new Fraction(19.6).divisible(1.5);
		     */
		    "divisible": function(a, b) {

		      parse(a, b);
		      return !(!(P["n"] * this["d"]) || ((this["n"] * P["d"]) % (P["n"] * this["d"])));
		    },

		    /**
		     * Returns a decimal representation of the fraction
		     *
		     * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
		     **/
		    'valueOf': function() {

		      return this["s"] * this["n"] / this["d"];
		    },

		    /**
		     * Returns a string-fraction representation of a Fraction object
		     *
		     * Ex: new Fraction("1.'3'").toFraction(true) => "4 1/3"
		     **/
		    'toFraction': function(excludeWhole) {

		      var whole, str = "";
		      var n = this["n"];
		      var d = this["d"];
		      if (this["s"] < 0) {
		        str+= '-';
		      }

		      if (d === 1) {
		        str+= n;
		      } else {

		        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
		          str+= whole;
		          str+= " ";
		          n%= d;
		        }

		        str+= n;
		        str+= '/';
		        str+= d;
		      }
		      return str;
		    },

		    /**
		     * Returns a latex representation of a Fraction object
		     *
		     * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
		     **/
		    'toLatex': function(excludeWhole) {

		      var whole, str = "";
		      var n = this["n"];
		      var d = this["d"];
		      if (this["s"] < 0) {
		        str+= '-';
		      }

		      if (d === 1) {
		        str+= n;
		      } else {

		        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
		          str+= whole;
		          n%= d;
		        }

		        str+= "\\frac{";
		        str+= n;
		        str+= '}{';
		        str+= d;
		        str+= '}';
		      }
		      return str;
		    },

		    /**
		     * Returns an array of continued fraction elements
		     *
		     * Ex: new Fraction("7/8").toContinued() => [0,1,7]
		     */
		    'toContinued': function() {

		      var t;
		      var a = this['n'];
		      var b = this['d'];
		      var res = [];

		      if (isNaN(a) || isNaN(b)) {
		        return res;
		      }

		      do {
		        res.push(Math.floor(a / b));
		        t = a % b;
		        a = b;
		        b = t;
		      } while (a !== 1);

		      return res;
		    },

		    /**
		     * Creates a string representation of a fraction with all digits
		     *
		     * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
		     **/
		    'toString': function(dec) {

		      var N = this["n"];
		      var D = this["d"];

		      if (isNaN(N) || isNaN(D)) {
		        return "NaN";
		      }

		      dec = dec || 15; // 15 = decimal places when no repetation

		      var cycLen = cycleLen(N, D); // Cycle length
		      var cycOff = cycleStart(N, D, cycLen); // Cycle start

		      var str = this['s'] < 0 ? "-" : "";

		      str+= N / D | 0;

		      N%= D;
		      N*= 10;

		      if (N)
		        str+= ".";

		      if (cycLen) {

		        for (var i = cycOff; i--;) {
		          str+= N / D | 0;
		          N%= D;
		          N*= 10;
		        }
		        str+= "(";
		        for (var i = cycLen; i--;) {
		          str+= N / D | 0;
		          N%= D;
		          N*= 10;
		        }
		        str+= ")";
		      } else {
		        for (var i = dec; N && i--;) {
		          str+= N / D | 0;
		          N%= D;
		          N*= 10;
		        }
		      }
		      return str;
		    }
		  };

		  {
		    Object.defineProperty(Fraction, "__esModule", { 'value': true });
		    Fraction['default'] = Fraction;
		    Fraction['Fraction'] = Fraction;
		    module['exports'] = Fraction;
		  }

		})(); 
	} (fraction$1));

	var fractionExports = fraction$1.exports;
	var Fraction$1 = /*@__PURE__*/getDefaultExportFromCjs(fractionExports);

	var name$15 = 'Fraction';
	var dependencies$14 = [];
	var createFractionClass = /* #__PURE__ */factory(name$15, dependencies$14, () => {
	  /**
	   * Attach type information
	   */
	  Object.defineProperty(Fraction$1, 'name', {
	    value: 'Fraction'
	  });
	  Fraction$1.prototype.constructor = Fraction$1;
	  Fraction$1.prototype.type = 'Fraction';
	  Fraction$1.prototype.isFraction = true;

	  /**
	   * Get a JSON representation of a Fraction containing type information
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Fraction", "n": 3, "d": 8}`
	   */
	  Fraction$1.prototype.toJSON = function () {
	    return {
	      mathjs: 'Fraction',
	      n: this.s * this.n,
	      d: this.d
	    };
	  };

	  /**
	   * Instantiate a Fraction from a JSON object
	   * @param {Object} json  a JSON object structured as:
	   *                       `{"mathjs": "Fraction", "n": 3, "d": 8}`
	   * @return {BigNumber}
	   */
	  Fraction$1.fromJSON = function (json) {
	    return new Fraction$1(json);
	  };
	  return Fraction$1;
	}, {
	  isClass: true
	});

	var name$14 = 'Matrix';
	var dependencies$13 = [];
	var createMatrixClass = /* #__PURE__ */factory(name$14, dependencies$13, () => {
	  /**
	   * @constructor Matrix
	   *
	   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional
	   * array. A matrix can be constructed as:
	   *
	   *     let matrix = math.matrix(data)
	   *
	   * Matrix contains the functions to resize, get and set values, get the size,
	   * clone the matrix and to convert the matrix to a vector, array, or scalar.
	   * Furthermore, one can iterate over the matrix using map and forEach.
	   * The internal Array of the Matrix can be accessed using the function valueOf.
	   *
	   * Example usage:
	   *
	   *     let matrix = math.matrix([[1, 2], [3, 4]])
	   *     matix.size()              // [2, 2]
	   *     matrix.resize([3, 2], 5)
	   *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]
	   *     matrix.subset([1,2])       // 3 (indexes are zero-based)
	   *
	   */
	  function Matrix() {
	    if (!(this instanceof Matrix)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	  }

	  /**
	   * Attach type information
	   */
	  Matrix.prototype.type = 'Matrix';
	  Matrix.prototype.isMatrix = true;

	  /**
	   * Get the storage format used by the matrix.
	   *
	   * Usage:
	   *     const format = matrix.storage()   // retrieve storage format
	   *
	   * @return {string}           The storage format.
	   */
	  Matrix.prototype.storage = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke storage on a Matrix interface');
	  };

	  /**
	   * Get the datatype of the data stored in the matrix.
	   *
	   * Usage:
	   *     const format = matrix.datatype()    // retrieve matrix datatype
	   *
	   * @return {string}           The datatype.
	   */
	  Matrix.prototype.datatype = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke datatype on a Matrix interface');
	  };

	  /**
	   * Create a new Matrix With the type of the current matrix instance
	   * @param {Array | Object} data
	   * @param {string} [datatype]
	   */
	  Matrix.prototype.create = function (data, datatype) {
	    throw new Error('Cannot invoke create on a Matrix interface');
	  };

	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     const subset = matrix.subset(index)               // retrieve subset
	   *     const value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @param {Index} index
	   * @param {Array | Matrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */
	  Matrix.prototype.subset = function (index, replacement, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke subset on a Matrix interface');
	  };

	  /**
	   * Get a single element from the matrix.
	   * @param {number[]} index   Zero-based index
	   * @return {*} value
	   */
	  Matrix.prototype.get = function (index) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke get on a Matrix interface');
	  };

	  /**
	   * Replace a single element in the matrix.
	   * @param {number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be left undefined.
	   * @return {Matrix} self
	   */
	  Matrix.prototype.set = function (index, value, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke set on a Matrix interface');
	  };

	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */
	  Matrix.prototype.resize = function (size, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke resize on a Matrix interface');
	  };

	  /**
	   * Reshape the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (reshape in place).
	   *
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {boolean} [copy]          Return a reshaped copy of the matrix
	   *
	   * @return {Matrix}                 The reshaped matrix
	   */
	  Matrix.prototype.reshape = function (size, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke reshape on a Matrix interface');
	  };

	  /**
	   * Create a clone of the matrix
	   * @return {Matrix} clone
	   */
	  Matrix.prototype.clone = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke clone on a Matrix interface');
	  };

	  /**
	   * Retrieve the size of the matrix.
	   * @returns {number[]} size
	   */
	  Matrix.prototype.size = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke size on a Matrix interface');
	  };

	  /**
	   * Create a new matrix with the results of the callback function executed on
	   * each entry of the matrix.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	   *
	   * @return {Matrix} matrix
	   */
	  Matrix.prototype.map = function (callback, skipZeros) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke map on a Matrix interface');
	  };

	  /**
	   * Execute a callback function on each entry of the matrix.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   */
	  Matrix.prototype.forEach = function (callback) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke forEach on a Matrix interface');
	  };

	  /**
	   * Iterate over the matrix elements
	   * @return {Iterable<{ value, index: number[] }>}
	   */
	  Matrix.prototype[Symbol.iterator] = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot iterate a Matrix interface');
	  };

	  /**
	   * Create an Array with a copy of the data of the Matrix
	   * @returns {Array} array
	   */
	  Matrix.prototype.toArray = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke toArray on a Matrix interface');
	  };

	  /**
	   * Get the primitive value of the Matrix: a multidimensional array
	   * @returns {Array} array
	   */
	  Matrix.prototype.valueOf = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke valueOf on a Matrix interface');
	  };

	  /**
	   * Get a string representation of the matrix, with optional formatting options.
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */
	  Matrix.prototype.format = function (options) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke format on a Matrix interface');
	  };

	  /**
	   * Get a string representation of the matrix
	   * @returns {string} str
	   */
	  Matrix.prototype.toString = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke toString on a Matrix interface');
	  };
	  return Matrix;
	}, {
	  isClass: true
	});

	// function utils


	/**
	 * Find the maximum number of arguments expected by a typed function.
	 * @param {function} fn   A typed function
	 * @return {number} Returns the maximum number of expected arguments.
	 *                  Returns -1 when no signatures where found on the function.
	 */
	function maxArgumentCount(fn) {
	  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {
	    var count = (signature.match(/,/g) || []).length + 1;
	    return Math.max(args, count);
	  }, -1);
	}

	var name$13 = 'DenseMatrix';
	var dependencies$12 = ['Matrix'];
	var createDenseMatrixClass = /* #__PURE__ */factory(name$13, dependencies$12, _ref => {
	  var {
	    Matrix
	  } = _ref;
	  /**
	   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.
	   * @class DenseMatrix
	   * @enum {{ value, index: number[] }}
	   */
	  function DenseMatrix(data, datatype) {
	    if (!(this instanceof DenseMatrix)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	    if (datatype && !isString(datatype)) {
	      throw new Error('Invalid datatype: ' + datatype);
	    }
	    if (isMatrix(data)) {
	      // check data is a DenseMatrix
	      if (data.type === 'DenseMatrix') {
	        // clone data & size
	        this._data = clone$2(data._data);
	        this._size = clone$2(data._size);
	        this._datatype = datatype || data._datatype;
	      } else {
	        // build data from existing matrix
	        this._data = data.toArray();
	        this._size = data.size();
	        this._datatype = datatype || data._datatype;
	      }
	    } else if (data && isArray(data.data) && isArray(data.size)) {
	      // initialize fields from JSON representation
	      this._data = data.data;
	      this._size = data.size;
	      // verify the dimensions of the array
	      validate(this._data, this._size);
	      this._datatype = datatype || data.datatype;
	    } else if (isArray(data)) {
	      // replace nested Matrices with Arrays
	      this._data = preprocess(data);
	      // get the dimensions of the array
	      this._size = arraySize(this._data);
	      // verify the dimensions of the array, TODO: compute size while processing array
	      validate(this._data, this._size);
	      // data type unknown
	      this._datatype = datatype;
	    } else if (data) {
	      // unsupported type
	      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');
	    } else {
	      // nothing provided
	      this._data = [];
	      this._size = [0];
	      this._datatype = datatype;
	    }
	  }
	  DenseMatrix.prototype = new Matrix();

	  /**
	   * Create a new DenseMatrix
	   */
	  DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {
	    return new DenseMatrix(data, datatype);
	  };

	  /**
	   * Attach type information
	   */
	  Object.defineProperty(DenseMatrix, 'name', {
	    value: 'DenseMatrix'
	  });
	  DenseMatrix.prototype.constructor = DenseMatrix;
	  DenseMatrix.prototype.type = 'DenseMatrix';
	  DenseMatrix.prototype.isDenseMatrix = true;

	  /**
	   * Get the matrix type
	   *
	   * Usage:
	   *    const matrixType = matrix.getDataType()  // retrieves the matrix type
	   *
	   * @memberOf DenseMatrix
	   * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
	   */
	  DenseMatrix.prototype.getDataType = function () {
	    return getArrayDataType(this._data, typeOf);
	  };

	  /**
	   * Get the storage format used by the matrix.
	   *
	   * Usage:
	   *     const format = matrix.storage()  // retrieve storage format
	   *
	   * @memberof DenseMatrix
	   * @return {string}           The storage format.
	   */
	  DenseMatrix.prototype.storage = function () {
	    return 'dense';
	  };

	  /**
	   * Get the datatype of the data stored in the matrix.
	   *
	   * Usage:
	   *     const format = matrix.datatype()   // retrieve matrix datatype
	   *
	   * @memberof DenseMatrix
	   * @return {string}           The datatype.
	   */
	  DenseMatrix.prototype.datatype = function () {
	    return this._datatype;
	  };

	  /**
	   * Create a new DenseMatrix
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @param {string} [datatype]
	   */
	  DenseMatrix.prototype.create = function (data, datatype) {
	    return new DenseMatrix(data, datatype);
	  };

	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     const subset = matrix.subset(index)               // retrieve subset
	   *     const value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @memberof DenseMatrix
	   * @param {Index} index
	   * @param {Array | Matrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */
	  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {
	    switch (arguments.length) {
	      case 1:
	        return _get(this, index);

	      // intentional fall through
	      case 2:
	      case 3:
	        return _set(this, index, replacement, defaultValue);
	      default:
	        throw new SyntaxError('Wrong number of arguments');
	    }
	  };

	  /**
	   * Get a single element from the matrix.
	   * @memberof DenseMatrix
	   * @param {number[]} index   Zero-based index
	   * @return {*} value
	   */
	  DenseMatrix.prototype.get = function (index) {
	    if (!isArray(index)) {
	      throw new TypeError('Array expected');
	    }
	    if (index.length !== this._size.length) {
	      throw new DimensionError(index.length, this._size.length);
	    }

	    // check index
	    for (var x = 0; x < index.length; x++) {
	      validateIndex(index[x], this._size[x]);
	    }
	    var data = this._data;
	    for (var i = 0, ii = index.length; i < ii; i++) {
	      var indexI = index[i];
	      validateIndex(indexI, data.length);
	      data = data[indexI];
	    }
	    return data;
	  };

	  /**
	   * Replace a single element in the matrix.
	   * @memberof DenseMatrix
	   * @param {number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be left undefined.
	   * @return {DenseMatrix} self
	   */
	  DenseMatrix.prototype.set = function (index, value, defaultValue) {
	    if (!isArray(index)) {
	      throw new TypeError('Array expected');
	    }
	    if (index.length < this._size.length) {
	      throw new DimensionError(index.length, this._size.length, '<');
	    }
	    var i, ii, indexI;

	    // enlarge matrix when needed
	    var size = index.map(function (i) {
	      return i + 1;
	    });
	    _fit(this, size, defaultValue);

	    // traverse over the dimensions
	    var data = this._data;
	    for (i = 0, ii = index.length - 1; i < ii; i++) {
	      indexI = index[i];
	      validateIndex(indexI, data.length);
	      data = data[indexI];
	    }

	    // set new value
	    indexI = index[index.length - 1];
	    validateIndex(indexI, data.length);
	    data[indexI] = value;
	    return this;
	  };

	  /**
	   * Get a submatrix of this matrix
	   * @memberof DenseMatrix
	   * @param {DenseMatrix} matrix
	   * @param {Index} index   Zero-based index
	   * @private
	   */
	  function _get(matrix, index) {
	    if (!isIndex(index)) {
	      throw new TypeError('Invalid index');
	    }
	    var isScalar = index.isScalar();
	    if (isScalar) {
	      // return a scalar
	      return matrix.get(index.min());
	    } else {
	      // validate dimensions
	      var size = index.size();
	      if (size.length !== matrix._size.length) {
	        throw new DimensionError(size.length, matrix._size.length);
	      }

	      // validate if any of the ranges in the index is out of range
	      var min = index.min();
	      var max = index.max();
	      for (var i = 0, ii = matrix._size.length; i < ii; i++) {
	        validateIndex(min[i], matrix._size[i]);
	        validateIndex(max[i], matrix._size[i]);
	      }

	      // retrieve submatrix
	      // TODO: more efficient when creating an empty matrix and setting _data and _size manually
	      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
	    }
	  }

	  /**
	   * Recursively get a submatrix of a multi dimensional matrix.
	   * Index is not checked for correct number or length of dimensions.
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @param {Index} index
	   * @param {number} dims   Total number of dimensions
	   * @param {number} dim    Current dimension
	   * @return {Array} submatrix
	   * @private
	   */
	  function _getSubmatrix(data, index, dims, dim) {
	    var last = dim === dims - 1;
	    var range = index.dimension(dim);
	    if (last) {
	      return range.map(function (i) {
	        validateIndex(i, data.length);
	        return data[i];
	      }).valueOf();
	    } else {
	      return range.map(function (i) {
	        validateIndex(i, data.length);
	        var child = data[i];
	        return _getSubmatrix(child, index, dims, dim + 1);
	      }).valueOf();
	    }
	  }

	  /**
	   * Replace a submatrix in this matrix
	   * Indexes are zero-based.
	   * @memberof DenseMatrix
	   * @param {DenseMatrix} matrix
	   * @param {Index} index
	   * @param {DenseMatrix | Array | *} submatrix
	   * @param {*} defaultValue          Default value, filled in on new entries when
	   *                                  the matrix is resized.
	   * @return {DenseMatrix} matrix
	   * @private
	   */
	  function _set(matrix, index, submatrix, defaultValue) {
	    if (!index || index.isIndex !== true) {
	      throw new TypeError('Invalid index');
	    }

	    // get index size and check whether the index contains a single value
	    var iSize = index.size();
	    var isScalar = index.isScalar();

	    // calculate the size of the submatrix, and convert it into an Array if needed
	    var sSize;
	    if (isMatrix(submatrix)) {
	      sSize = submatrix.size();
	      submatrix = submatrix.valueOf();
	    } else {
	      sSize = arraySize(submatrix);
	    }
	    if (isScalar) {
	      // set a scalar

	      // check whether submatrix is a scalar
	      if (sSize.length !== 0) {
	        throw new TypeError('Scalar expected');
	      }
	      matrix.set(index.min(), submatrix, defaultValue);
	    } else {
	      // set a submatrix

	      // broadcast submatrix
	      if (!deepStrictEqual(sSize, iSize)) {
	        try {
	          if (sSize.length === 0) {
	            submatrix = broadcastTo([submatrix], iSize);
	          } else {
	            submatrix = broadcastTo(submatrix, iSize);
	          }
	          sSize = arraySize(submatrix);
	        } catch (_unused) {}
	      }

	      // validate dimensions
	      if (iSize.length < matrix._size.length) {
	        throw new DimensionError(iSize.length, matrix._size.length, '<');
	      }
	      if (sSize.length < iSize.length) {
	        // calculate number of missing outer dimensions
	        var i = 0;
	        var outer = 0;
	        while (iSize[i] === 1 && sSize[i] === 1) {
	          i++;
	        }
	        while (iSize[i] === 1) {
	          outer++;
	          i++;
	        }

	        // unsqueeze both outer and inner dimensions
	        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);
	      }

	      // check whether the size of the submatrix matches the index size
	      if (!deepStrictEqual(iSize, sSize)) {
	        throw new DimensionError(iSize, sSize, '>');
	      }

	      // enlarge matrix when needed
	      var size = index.max().map(function (i) {
	        return i + 1;
	      });
	      _fit(matrix, size, defaultValue);

	      // insert the sub matrix
	      var dims = iSize.length;
	      var dim = 0;
	      _setSubmatrix(matrix._data, index, submatrix, dims, dim);
	    }
	    return matrix;
	  }

	  /**
	   * Replace a submatrix of a multi dimensional matrix.
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @param {Index} index
	   * @param {Array} submatrix
	   * @param {number} dims   Total number of dimensions
	   * @param {number} dim
	   * @private
	   */
	  function _setSubmatrix(data, index, submatrix, dims, dim) {
	    var last = dim === dims - 1;
	    var range = index.dimension(dim);
	    if (last) {
	      range.forEach(function (dataIndex, subIndex) {
	        validateIndex(dataIndex);
	        data[dataIndex] = submatrix[subIndex[0]];
	      });
	    } else {
	      range.forEach(function (dataIndex, subIndex) {
	        validateIndex(dataIndex);
	        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
	      });
	    }
	  }

	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @memberof DenseMatrix
	   * @param {number[] || Matrix} size The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */
	  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {
	    // validate arguments
	    if (!isCollection(size)) {
	      throw new TypeError('Array or Matrix expected');
	    }

	    // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector
	    var sizeArray = size.valueOf().map(value => {
	      return Array.isArray(value) && value.length === 1 ? value[0] : value;
	    });

	    // matrix to resize
	    var m = copy ? this.clone() : this;
	    // resize matrix
	    return _resize(m, sizeArray, defaultValue);
	  };
	  function _resize(matrix, size, defaultValue) {
	    // check size
	    if (size.length === 0) {
	      // first value in matrix
	      var v = matrix._data;
	      // go deep
	      while (isArray(v)) {
	        v = v[0];
	      }
	      return v;
	    }
	    // resize matrix
	    matrix._size = size.slice(0); // copy the array
	    matrix._data = resize(matrix._data, matrix._size, defaultValue);
	    // return matrix
	    return matrix;
	  }

	  /**
	   * Reshape the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (reshape in place).
	   *
	   * NOTE: This might be better suited to copy by default, instead of modifying
	   *       in place. For now, it operates in place to remain consistent with
	   *       resize().
	   *
	   * @memberof DenseMatrix
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {boolean} [copy]          Return a reshaped copy of the matrix
	   *
	   * @return {Matrix}                 The reshaped matrix
	   */
	  DenseMatrix.prototype.reshape = function (size, copy) {
	    var m = copy ? this.clone() : this;
	    m._data = reshape(m._data, size);
	    var currentLength = m._size.reduce((length, size) => length * size);
	    m._size = processSizesWildcard(size, currentLength);
	    return m;
	  };

	  /**
	   * Enlarge the matrix when it is smaller than given size.
	   * If the matrix is larger or equal sized, nothing is done.
	   * @memberof DenseMatrix
	   * @param {DenseMatrix} matrix           The matrix to be resized
	   * @param {number[]} size
	   * @param {*} defaultValue          Default value, filled in on new entries.
	   * @private
	   */
	  function _fit(matrix, size, defaultValue) {
	    var
	    // copy the array
	    newSize = matrix._size.slice(0);
	    var changed = false;

	    // add dimensions when needed
	    while (newSize.length < size.length) {
	      newSize.push(0);
	      changed = true;
	    }

	    // enlarge size when needed
	    for (var i = 0, ii = size.length; i < ii; i++) {
	      if (size[i] > newSize[i]) {
	        newSize[i] = size[i];
	        changed = true;
	      }
	    }
	    if (changed) {
	      // resize only when size is changed
	      _resize(matrix, newSize, defaultValue);
	    }
	  }

	  /**
	   * Create a clone of the matrix
	   * @memberof DenseMatrix
	   * @return {DenseMatrix} clone
	   */
	  DenseMatrix.prototype.clone = function () {
	    var m = new DenseMatrix({
	      data: clone$2(this._data),
	      size: clone$2(this._size),
	      datatype: this._datatype
	    });
	    return m;
	  };

	  /**
	   * Retrieve the size of the matrix.
	   * @memberof DenseMatrix
	   * @returns {number[]} size
	   */
	  DenseMatrix.prototype.size = function () {
	    return this._size.slice(0); // return a clone of _size
	  };

	  /**
	   * Create a new matrix with the results of the callback function executed on
	   * each entry of the matrix.
	   * @memberof DenseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   *
	   * @return {DenseMatrix} matrix
	   */
	  DenseMatrix.prototype.map = function (callback) {
	    // matrix instance
	    var me = this;
	    var args = maxArgumentCount(callback);
	    var recurse = function recurse(value, index) {
	      if (isArray(value)) {
	        return value.map(function (child, i) {
	          return recurse(child, index.concat(i));
	        });
	      } else {
	        // invoke the callback function with the right number of arguments
	        if (args === 1) {
	          return callback(value);
	        } else if (args === 2) {
	          return callback(value, index);
	        } else {
	          // 3 or -1
	          return callback(value, index, me);
	        }
	      }
	    };

	    // determine the new datatype when the original matrix has datatype defined
	    // TODO: should be done in matrix constructor instead
	    var data = recurse(this._data, []);
	    var datatype = this._datatype !== undefined ? getArrayDataType(data, typeOf) : undefined;
	    return new DenseMatrix(data, datatype);
	  };

	  /**
	   * Execute a callback function on each entry of the matrix.
	   * @memberof DenseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   */
	  DenseMatrix.prototype.forEach = function (callback) {
	    // matrix instance
	    var me = this;
	    var recurse = function recurse(value, index) {
	      if (isArray(value)) {
	        value.forEach(function (child, i) {
	          recurse(child, index.concat(i));
	        });
	      } else {
	        callback(value, index, me);
	      }
	    };
	    recurse(this._data, []);
	  };

	  /**
	   * Iterate over the matrix elements
	   * @return {Iterable<{ value, index: number[] }>}
	   */
	  DenseMatrix.prototype[Symbol.iterator] = function* () {
	    var recurse = function* recurse(value, index) {
	      if (isArray(value)) {
	        for (var i = 0; i < value.length; i++) {
	          yield* recurse(value[i], index.concat(i));
	        }
	      } else {
	        yield {
	          value,
	          index
	        };
	      }
	    };
	    yield* recurse(this._data, []);
	  };

	  /**
	   * Returns an array containing the rows of a 2D matrix
	   * @returns {Array<Matrix>}
	   */
	  DenseMatrix.prototype.rows = function () {
	    var result = [];
	    var s = this.size();
	    if (s.length !== 2) {
	      throw new TypeError('Rows can only be returned for a 2D matrix.');
	    }
	    var data = this._data;
	    for (var row of data) {
	      result.push(new DenseMatrix([row], this._datatype));
	    }
	    return result;
	  };

	  /**
	   * Returns an array containing the columns of a 2D matrix
	   * @returns {Array<Matrix>}
	   */
	  DenseMatrix.prototype.columns = function () {
	    var _this = this;
	    var result = [];
	    var s = this.size();
	    if (s.length !== 2) {
	      throw new TypeError('Rows can only be returned for a 2D matrix.');
	    }
	    var data = this._data;
	    var _loop = function _loop(i) {
	      var col = data.map(row => [row[i]]);
	      result.push(new DenseMatrix(col, _this._datatype));
	    };
	    for (var i = 0; i < s[1]; i++) {
	      _loop(i);
	    }
	    return result;
	  };

	  /**
	   * Create an Array with a copy of the data of the DenseMatrix
	   * @memberof DenseMatrix
	   * @returns {Array} array
	   */
	  DenseMatrix.prototype.toArray = function () {
	    return clone$2(this._data);
	  };

	  /**
	   * Get the primitive value of the DenseMatrix: a multidimensional array
	   * @memberof DenseMatrix
	   * @returns {Array} array
	   */
	  DenseMatrix.prototype.valueOf = function () {
	    return this._data;
	  };

	  /**
	   * Get a string representation of the matrix, with optional formatting options.
	   * @memberof DenseMatrix
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */
	  DenseMatrix.prototype.format = function (options) {
	    return format(this._data, options);
	  };

	  /**
	   * Get a string representation of the matrix
	   * @memberof DenseMatrix
	   * @returns {string} str
	   */
	  DenseMatrix.prototype.toString = function () {
	    return format(this._data);
	  };

	  /**
	   * Get a JSON representation of the matrix
	   * @memberof DenseMatrix
	   * @returns {Object}
	   */
	  DenseMatrix.prototype.toJSON = function () {
	    return {
	      mathjs: 'DenseMatrix',
	      data: this._data,
	      size: this._size,
	      datatype: this._datatype
	    };
	  };

	  /**
	   * Get the kth Matrix diagonal.
	   *
	   * @memberof DenseMatrix
	   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
	   *
	   * @returns {Matrix}                     The matrix with the diagonal values.
	   */
	  DenseMatrix.prototype.diagonal = function (k) {
	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (isBigNumber(k)) {
	        k = k.toNumber();
	      }
	      // is must be an integer
	      if (!isNumber(k) || !isInteger$1(k)) {
	        throw new TypeError('The parameter k must be an integer number');
	      }
	    } else {
	      // default value
	      k = 0;
	    }
	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;

	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1];

	    // number diagonal values
	    var n = Math.min(rows - kSub, columns - kSuper);

	    // x is a matrix get diagonal from matrix
	    var data = [];

	    // loop rows
	    for (var i = 0; i < n; i++) {
	      data[i] = this._data[i + kSub][i + kSuper];
	    }

	    // create DenseMatrix
	    return new DenseMatrix({
	      data,
	      size: [n],
	      datatype: this._datatype
	    });
	  };

	  /**
	   * Create a diagonal matrix.
	   *
	   * @memberof DenseMatrix
	   * @param {Array} size                     The matrix size.
	   * @param {number | Matrix | Array } value The values for the diagonal.
	   * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.
	   * @param {number} [defaultValue]          The default value for non-diagonal
	   * @param {string} [datatype]              The datatype for the diagonal
	   *
	   * @returns {DenseMatrix}
	   */
	  DenseMatrix.diagonal = function (size, value, k, defaultValue) {
	    if (!isArray(size)) {
	      throw new TypeError('Array expected, size parameter');
	    }
	    if (size.length !== 2) {
	      throw new Error('Only two dimensions matrix are supported');
	    }

	    // map size & validate
	    size = size.map(function (s) {
	      // check it is a big number
	      if (isBigNumber(s)) {
	        // convert it
	        s = s.toNumber();
	      }
	      // validate arguments
	      if (!isNumber(s) || !isInteger$1(s) || s < 1) {
	        throw new Error('Size values must be positive integers');
	      }
	      return s;
	    });

	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (isBigNumber(k)) {
	        k = k.toNumber();
	      }
	      // is must be an integer
	      if (!isNumber(k) || !isInteger$1(k)) {
	        throw new TypeError('The parameter k must be an integer number');
	      }
	    } else {
	      // default value
	      k = 0;
	    }
	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;

	    // rows and columns
	    var rows = size[0];
	    var columns = size[1];

	    // number of non-zero items
	    var n = Math.min(rows - kSub, columns - kSuper);

	    // value extraction function
	    var _value;

	    // check value
	    if (isArray(value)) {
	      // validate array
	      if (value.length !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid value array length');
	      }
	      // define function
	      _value = function _value(i) {
	        // return value @ i
	        return value[i];
	      };
	    } else if (isMatrix(value)) {
	      // matrix size
	      var ms = value.size();
	      // validate matrix
	      if (ms.length !== 1 || ms[0] !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid matrix length');
	      }
	      // define function
	      _value = function _value(i) {
	        // return value @ i
	        return value.get([i]);
	      };
	    } else {
	      // define function
	      _value = function _value() {
	        // return value
	        return value;
	      };
	    }

	    // discover default value if needed
	    if (!defaultValue) {
	      // check first value in array
	      defaultValue = isBigNumber(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero
	      : 0;
	    }

	    // empty array
	    var data = [];

	    // check we need to resize array
	    if (size.length > 0) {
	      // resize array
	      data = resize(data, size, defaultValue);
	      // fill diagonal
	      for (var d = 0; d < n; d++) {
	        data[d + kSub][d + kSuper] = _value(d);
	      }
	    }

	    // create DenseMatrix
	    return new DenseMatrix({
	      data,
	      size: [rows, columns]
	    });
	  };

	  /**
	   * Generate a matrix from a JSON object
	   * @memberof DenseMatrix
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "DenseMatrix", data: [], size: []}`,
	   *                       where mathjs is optional
	   * @returns {DenseMatrix}
	   */
	  DenseMatrix.fromJSON = function (json) {
	    return new DenseMatrix(json);
	  };

	  /**
	   * Swap rows i and j in Matrix.
	   *
	   * @memberof DenseMatrix
	   * @param {number} i       Matrix row index 1
	   * @param {number} j       Matrix row index 2
	   *
	   * @return {Matrix}        The matrix reference
	   */
	  DenseMatrix.prototype.swapRows = function (i, j) {
	    // check index
	    if (!isNumber(i) || !isInteger$1(i) || !isNumber(j) || !isInteger$1(j)) {
	      throw new Error('Row index must be positive integers');
	    }
	    // check dimensions
	    if (this._size.length !== 2) {
	      throw new Error('Only two dimensional matrix is supported');
	    }
	    // validate index
	    validateIndex(i, this._size[0]);
	    validateIndex(j, this._size[0]);

	    // swap rows
	    DenseMatrix._swapRows(i, j, this._data);
	    // return current instance
	    return this;
	  };

	  /**
	   * Swap rows i and j in Dense Matrix data structure.
	   *
	   * @param {number} i       Matrix row index 1
	   * @param {number} j       Matrix row index 2
	   * @param {Array} data     Matrix data
	   */
	  DenseMatrix._swapRows = function (i, j, data) {
	    // swap values i <-> j
	    var vi = data[i];
	    data[i] = data[j];
	    data[j] = vi;
	  };

	  /**
	   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and
	   * Matrices. Clones all (nested) Arrays, and replaces all nested Matrices with Arrays
	   * @memberof DenseMatrix
	   * @param {Array | Matrix} data
	   * @return {Array} data
	   */
	  function preprocess(data) {
	    if (isMatrix(data)) {
	      return preprocess(data.valueOf());
	    }
	    if (isArray(data)) {
	      return data.map(preprocess);
	    }
	    return data;
	  }
	  return DenseMatrix;
	}, {
	  isClass: true
	});

	/**
	 * Execute the callback function element wise for each element in array and any
	 * nested array
	 * Returns an array with the results
	 * @param {Array | Matrix} array
	 * @param {Function} callback   The callback is called with two parameters:
	 *                              value1 and value2, which contain the current
	 *                              element of both arrays.
	 * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	 *
	 * @return {Array | Matrix} res
	 */
	function deepMap(array, callback, skipZeros) {
	  if (array && typeof array.map === 'function') {
	    // TODO: replace array.map with a for loop to improve performance
	    return array.map(function (x) {
	      return deepMap(x, callback);
	    });
	  } else {
	    return callback(array);
	  }
	}

	var name$12 = 'isInteger';
	var dependencies$11 = ['typed'];
	var createIsInteger = /* #__PURE__ */factory(name$12, dependencies$11, _ref => {
	  var {
	    typed
	  } = _ref;
	  /**
	   * Test whether a value is an integer number.
	   * The function supports `number`, `BigNumber`, and `Fraction`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isInteger(x)
	   *
	   * Examples:
	   *
	   *    math.isInteger(2)                     // returns true
	   *    math.isInteger(0)                     // returns true
	   *    math.isInteger(0.5)                   // returns false
	   *    math.isInteger(math.bignumber(500))   // returns true
	   *    math.isInteger(math.fraction(4))      // returns true
	   *    math.isInteger('3')                   // returns true
	   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]
	   *    math.isInteger(math.complex('2-4i'))  // throws an error
	   *
	   * See also:
	   *
	   *    isNumeric, isPositive, isNegative, isZero
	   *
	   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested
	   * @return {boolean}  Returns true when `x` contains a numeric, integer value.
	   *                    Throws an error in case of an unknown data type.
	   */
	  return typed(name$12, {
	    number: isInteger$1,
	    // TODO: what to do with isInteger(add(0.1, 0.2))  ?

	    BigNumber: function BigNumber(x) {
	      return x.isInt();
	    },
	    Fraction: function Fraction(x) {
	      return x.d === 1 && isFinite(x.n);
	    },
	    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))
	  });
	});

	var n1$1 = 'number';
	var n2 = 'number, number';
	function absNumber(a) {
	  return Math.abs(a);
	}
	absNumber.signature = n1$1;
	function addNumber(a, b) {
	  return a + b;
	}
	addNumber.signature = n2;
	function multiplyNumber(a, b) {
	  return a * b;
	}
	multiplyNumber.signature = n2;
	function unaryMinusNumber(x) {
	  return -x;
	}
	unaryMinusNumber.signature = n1$1;

	function signNumber(x) {
	  return sign$2(x);
	}
	signNumber.signature = n1$1;

	/**
	 * Calculates the power of x to y, x^y, for two numbers.
	 * @param {number} x
	 * @param {number} y
	 * @return {number} res
	 */
	function powNumber(x, y) {
	  // x^Infinity === 0 if -1 < x < 1
	  // A real number 0 is returned instead of complex(0)
	  if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {
	    return 0;
	  }
	  return Math.pow(x, y);
	}
	powNumber.signature = n2;

	var n1 = 'number';
	function isPositiveNumber(x) {
	  return x > 0;
	}
	isPositiveNumber.signature = n1;
	function isZeroNumber(x) {
	  return x === 0;
	}
	isZeroNumber.signature = n1;

	var name$11 = 'isPositive';
	var dependencies$10 = ['typed'];
	var createIsPositive = /* #__PURE__ */factory(name$11, dependencies$10, _ref => {
	  var {
	    typed
	  } = _ref;
	  /**
	   * Test whether a value is positive: larger than zero.
	   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isPositive(x)
	   *
	   * Examples:
	   *
	   *    math.isPositive(3)                     // returns true
	   *    math.isPositive(-2)                    // returns false
	   *    math.isPositive(0)                     // returns false
	   *    math.isPositive(-0)                    // returns false
	   *    math.isPositive(0.5)                   // returns true
	   *    math.isPositive(math.bignumber(2))     // returns true
	   *    math.isPositive(math.fraction(-2, 5))  // returns false
	   *    math.isPositive(math.fraction(1, 3))   // returns true
	   *    math.isPositive('2')                   // returns true
	   *    math.isPositive([2, 0, -3])            // returns [true, false, false]
	   *
	   * See also:
	   *
	   *    isNumeric, isZero, isNegative, isInteger
	   *
	   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
	   * @return {boolean}  Returns true when `x` is larger than zero.
	   *                    Throws an error in case of an unknown data type.
	   */
	  return typed(name$11, {
	    number: isPositiveNumber,
	    BigNumber: function BigNumber(x) {
	      return !x.isNeg() && !x.isZero() && !x.isNaN();
	    },
	    Fraction: function Fraction(x) {
	      return x.s > 0 && x.n > 0;
	    },
	    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),
	    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))
	  });
	});

	var name$10 = 'isZero';
	var dependencies$$ = ['typed'];
	var createIsZero = /* #__PURE__ */factory(name$10, dependencies$$, _ref => {
	  var {
	    typed
	  } = _ref;
	  /**
	   * Test whether a value is zero.
	   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,
	   * `Complex`, and `Unit`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isZero(x)
	   *
	   * Examples:
	   *
	   *    math.isZero(0)                      // returns true
	   *    math.isZero(2)                      // returns false
	   *    math.isZero(0.5)                    // returns false
	   *    math.isZero(math.bignumber(0))      // returns true
	   *    math.isZero(math.fraction(0))       // returns true
	   *    math.isZero(math.fraction(1,3))     // returns false
	   *    math.isZero(math.complex('2 - 4i')) // returns false
	   *    math.isZero(math.complex('0i'))     // returns true
	   *    math.isZero('0')                    // returns true
	   *    math.isZero('2')                    // returns false
	   *    math.isZero([2, 0, -3])             // returns [false, true, false]
	   *
	   * See also:
	   *
	   *    isNumeric, isPositive, isNegative, isInteger
	   *
	   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested
	   * @return {boolean}  Returns true when `x` is zero.
	   *                    Throws an error in case of an unknown data type.
	   */
	  return typed(name$10, {
	    number: isZeroNumber,
	    BigNumber: function BigNumber(x) {
	      return x.isZero();
	    },
	    Complex: function Complex(x) {
	      return x.re === 0 && x.im === 0;
	    },
	    Fraction: function Fraction(x) {
	      return x.d === 1 && x.n === 0;
	    },
	    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),
	    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))
	  });
	});

	/**
	 * Compares two BigNumbers.
	 * @param {BigNumber} x       First value to compare
	 * @param {BigNumber} y       Second value to compare
	 * @param {number} [epsilon]  The maximum relative difference between x and y
	 *                            If epsilon is undefined or null, the function will
	 *                            test whether x and y are exactly equal.
	 * @return {boolean} whether the two numbers are nearly equal
	 */
	function nearlyEqual(x, y, epsilon) {
	  // if epsilon is null or undefined, test whether x and y are exactly equal
	  if (epsilon === null || epsilon === undefined) {
	    return x.eq(y);
	  }

	  // use "==" operator, handles infinities
	  if (x.eq(y)) {
	    return true;
	  }

	  // NaN
	  if (x.isNaN() || y.isNaN()) {
	    return false;
	  }

	  // at this point x and y should be finite
	  if (x.isFinite() && y.isFinite()) {
	    // check numbers are very close, needed when comparing numbers near zero
	    var diff = x.minus(y).abs();
	    if (diff.isZero()) {
	      return true;
	    } else {
	      // use relative error
	      var max = x.constructor.max(x.abs(), y.abs());
	      return diff.lte(max.times(epsilon));
	    }
	  }

	  // Infinite and Number or negative Infinite and positive Infinite cases
	  return false;
	}

	/**
	 * Test whether two complex values are equal provided a given epsilon.
	 * Does not use or change the global Complex.EPSILON setting
	 * @param {Complex} x
	 * @param {Complex} y
	 * @param {number} epsilon
	 * @returns {boolean}
	 */
	function complexEquals(x, y, epsilon) {
	  return nearlyEqual$1(x.re, y.re, epsilon) && nearlyEqual$1(x.im, y.im, epsilon);
	}

	var createCompareUnits = /* #__PURE__ */factory('compareUnits', ['typed'], _ref => {
	  var {
	    typed
	  } = _ref;
	  return {
	    'Unit, Unit': typed.referToSelf(self => (x, y) => {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return typed.find(self, [x.valueType(), y.valueType()])(x.value, y.value);
	    })
	  };
	});

	var name$$ = 'equalScalar';
	var dependencies$_ = ['typed', 'config'];
	var createEqualScalar = /* #__PURE__ */factory(name$$, dependencies$_, _ref => {
	  var {
	    typed,
	    config
	  } = _ref;
	  var compareUnits = createCompareUnits({
	    typed
	  });

	  /**
	   * Test whether two scalar values are nearly equal.
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare
	   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false
	   * @private
	   */
	  return typed(name$$, {
	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x === y;
	    },
	    'number, number': function numberNumber(x, y) {
	      return nearlyEqual$1(x, y, config.epsilon);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.eq(y) || nearlyEqual(x, y, config.epsilon);
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.equals(y);
	    },
	    'Complex, Complex': function ComplexComplex(x, y) {
	      return complexEquals(x, y, config.epsilon);
	    }
	  }, compareUnits);
	});
	factory(name$$, ['typed', 'config'], _ref2 => {
	  var {
	    typed,
	    config
	  } = _ref2;
	  return typed(name$$, {
	    'number, number': function numberNumber(x, y) {
	      return nearlyEqual$1(x, y, config.epsilon);
	    }
	  });
	});

	var name$_ = 'SparseMatrix';
	var dependencies$Z = ['typed', 'equalScalar', 'Matrix'];
	var createSparseMatrixClass = /* #__PURE__ */factory(name$_, dependencies$Z, _ref => {
	  var {
	    typed,
	    equalScalar,
	    Matrix
	  } = _ref;
	  /**
	   * Sparse Matrix implementation. This type implements
	   * a [Compressed Column Storage](https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_column_(CSC_or_CCS))
	   * format for two-dimensional sparse matrices.
	   * @class SparseMatrix
	   */
	  function SparseMatrix(data, datatype) {
	    if (!(this instanceof SparseMatrix)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	    if (datatype && !isString(datatype)) {
	      throw new Error('Invalid datatype: ' + datatype);
	    }
	    if (isMatrix(data)) {
	      // create from matrix
	      _createFromMatrix(this, data, datatype);
	    } else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {
	      // initialize fields
	      this._values = data.values;
	      this._index = data.index;
	      this._ptr = data.ptr;
	      this._size = data.size;
	      this._datatype = datatype || data.datatype;
	    } else if (isArray(data)) {
	      // create from array
	      _createFromArray(this, data, datatype);
	    } else if (data) {
	      // unsupported type
	      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');
	    } else {
	      // nothing provided
	      this._values = [];
	      this._index = [];
	      this._ptr = [0];
	      this._size = [0, 0];
	      this._datatype = datatype;
	    }
	  }
	  function _createFromMatrix(matrix, source, datatype) {
	    // check matrix type
	    if (source.type === 'SparseMatrix') {
	      // clone arrays
	      matrix._values = source._values ? clone$2(source._values) : undefined;
	      matrix._index = clone$2(source._index);
	      matrix._ptr = clone$2(source._ptr);
	      matrix._size = clone$2(source._size);
	      matrix._datatype = datatype || source._datatype;
	    } else {
	      // build from matrix data
	      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);
	    }
	  }
	  function _createFromArray(matrix, data, datatype) {
	    // initialize fields
	    matrix._values = [];
	    matrix._index = [];
	    matrix._ptr = [];
	    matrix._datatype = datatype;
	    // discover rows & columns, do not use math.size() to avoid looping array twice
	    var rows = data.length;
	    var columns = 0;

	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    if (isString(datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, datatype);
	    }

	    // check we have rows (empty array)
	    if (rows > 0) {
	      // column index
	      var j = 0;
	      do {
	        // store pointer to values index
	        matrix._ptr.push(matrix._index.length);
	        // loop rows
	        for (var i = 0; i < rows; i++) {
	          // current row
	          var row = data[i];
	          // check row is an array
	          if (isArray(row)) {
	            // update columns if needed (only on first column)
	            if (j === 0 && columns < row.length) {
	              columns = row.length;
	            }
	            // check row has column
	            if (j < row.length) {
	              // value
	              var v = row[j];
	              // check value != 0
	              if (!eq(v, zero)) {
	                // store value
	                matrix._values.push(v);
	                // index
	                matrix._index.push(i);
	              }
	            }
	          } else {
	            // update columns if needed (only on first column)
	            if (j === 0 && columns < 1) {
	              columns = 1;
	            }
	            // check value != 0 (row is a scalar)
	            if (!eq(row, zero)) {
	              // store value
	              matrix._values.push(row);
	              // index
	              matrix._index.push(i);
	            }
	          }
	        }
	        // increment index
	        j++;
	      } while (j < columns);
	    }
	    // store number of values in ptr
	    matrix._ptr.push(matrix._index.length);
	    // size
	    matrix._size = [rows, columns];
	  }
	  SparseMatrix.prototype = new Matrix();

	  /**
	   * Create a new SparseMatrix
	   */
	  SparseMatrix.prototype.createSparseMatrix = function (data, datatype) {
	    return new SparseMatrix(data, datatype);
	  };

	  /**
	   * Attach type information
	   */
	  Object.defineProperty(SparseMatrix, 'name', {
	    value: 'SparseMatrix'
	  });
	  SparseMatrix.prototype.constructor = SparseMatrix;
	  SparseMatrix.prototype.type = 'SparseMatrix';
	  SparseMatrix.prototype.isSparseMatrix = true;

	  /**
	   * Get the matrix type
	   *
	   * Usage:
	   *    const matrixType = matrix.getDataType()  // retrieves the matrix type
	   *
	   * @memberOf SparseMatrix
	   * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
	   */
	  SparseMatrix.prototype.getDataType = function () {
	    return getArrayDataType(this._values, typeOf);
	  };

	  /**
	   * Get the storage format used by the matrix.
	   *
	   * Usage:
	   *     const format = matrix.storage()   // retrieve storage format
	   *
	   * @memberof SparseMatrix
	   * @return {string}           The storage format.
	   */
	  SparseMatrix.prototype.storage = function () {
	    return 'sparse';
	  };

	  /**
	   * Get the datatype of the data stored in the matrix.
	   *
	   * Usage:
	   *     const format = matrix.datatype()    // retrieve matrix datatype
	   *
	   * @memberof SparseMatrix
	   * @return {string}           The datatype.
	   */
	  SparseMatrix.prototype.datatype = function () {
	    return this._datatype;
	  };

	  /**
	   * Create a new SparseMatrix
	   * @memberof SparseMatrix
	   * @param {Array} data
	   * @param {string} [datatype]
	   */
	  SparseMatrix.prototype.create = function (data, datatype) {
	    return new SparseMatrix(data, datatype);
	  };

	  /**
	   * Get the matrix density.
	   *
	   * Usage:
	   *     const density = matrix.density()                   // retrieve matrix density
	   *
	   * @memberof SparseMatrix
	   * @return {number}           The matrix density.
	   */
	  SparseMatrix.prototype.density = function () {
	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    // calculate density
	    return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;
	  };

	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     const subset = matrix.subset(index)               // retrieve subset
	   *     const value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @memberof SparseMatrix
	   * @param {Index} index
	   * @param {Array | Matrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */
	  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {
	    // check it is a pattern matrix
	    if (!this._values) {
	      throw new Error('Cannot invoke subset on a Pattern only matrix');
	    }

	    // check arguments
	    switch (arguments.length) {
	      case 1:
	        return _getsubset(this, index);

	      // intentional fall through
	      case 2:
	      case 3:
	        return _setsubset(this, index, replacement, defaultValue);
	      default:
	        throw new SyntaxError('Wrong number of arguments');
	    }
	  };
	  function _getsubset(matrix, idx) {
	    // check idx
	    if (!isIndex(idx)) {
	      throw new TypeError('Invalid index');
	    }
	    var isScalar = idx.isScalar();
	    if (isScalar) {
	      // return a scalar
	      return matrix.get(idx.min());
	    }
	    // validate dimensions
	    var size = idx.size();
	    if (size.length !== matrix._size.length) {
	      throw new DimensionError(size.length, matrix._size.length);
	    }

	    // vars
	    var i, ii, k, kk;

	    // validate if any of the ranges in the index is out of range
	    var min = idx.min();
	    var max = idx.max();
	    for (i = 0, ii = matrix._size.length; i < ii; i++) {
	      validateIndex(min[i], matrix._size[i]);
	      validateIndex(max[i], matrix._size[i]);
	    }

	    // matrix arrays
	    var mvalues = matrix._values;
	    var mindex = matrix._index;
	    var mptr = matrix._ptr;

	    // rows & columns dimensions for result matrix
	    var rows = idx.dimension(0);
	    var columns = idx.dimension(1);

	    // workspace & permutation vector
	    var w = [];
	    var pv = [];

	    // loop rows in resulting matrix
	    rows.forEach(function (i, r) {
	      // update permutation vector
	      pv[i] = r[0];
	      // mark i in workspace
	      w[i] = true;
	    });

	    // result matrix arrays
	    var values = mvalues ? [] : undefined;
	    var index = [];
	    var ptr = [];

	    // loop columns in result matrix
	    columns.forEach(function (j) {
	      // update ptr
	      ptr.push(index.length);
	      // loop values in column j
	      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {
	        // row
	        i = mindex[k];
	        // check row is in result matrix
	        if (w[i] === true) {
	          // push index
	          index.push(pv[i]);
	          // check we need to process values
	          if (values) {
	            values.push(mvalues[k]);
	          }
	        }
	      }
	    });
	    // update ptr
	    ptr.push(index.length);

	    // return matrix
	    return new SparseMatrix({
	      values,
	      index,
	      ptr,
	      size,
	      datatype: matrix._datatype
	    });
	  }
	  function _setsubset(matrix, index, submatrix, defaultValue) {
	    // check index
	    if (!index || index.isIndex !== true) {
	      throw new TypeError('Invalid index');
	    }

	    // get index size and check whether the index contains a single value
	    var iSize = index.size();
	    var isScalar = index.isScalar();

	    // calculate the size of the submatrix, and convert it into an Array if needed
	    var sSize;
	    if (isMatrix(submatrix)) {
	      // submatrix size
	      sSize = submatrix.size();
	      // use array representation
	      submatrix = submatrix.toArray();
	    } else {
	      // get submatrix size (array, scalar)
	      sSize = arraySize(submatrix);
	    }

	    // check index is a scalar
	    if (isScalar) {
	      // verify submatrix is a scalar
	      if (sSize.length !== 0) {
	        throw new TypeError('Scalar expected');
	      }
	      // set value
	      matrix.set(index.min(), submatrix, defaultValue);
	    } else {
	      // validate dimensions, index size must be one or two dimensions
	      if (iSize.length !== 1 && iSize.length !== 2) {
	        throw new DimensionError(iSize.length, matrix._size.length, '<');
	      }

	      // check submatrix and index have the same dimensions
	      if (sSize.length < iSize.length) {
	        // calculate number of missing outer dimensions
	        var i = 0;
	        var outer = 0;
	        while (iSize[i] === 1 && sSize[i] === 1) {
	          i++;
	        }
	        while (iSize[i] === 1) {
	          outer++;
	          i++;
	        }
	        // unsqueeze both outer and inner dimensions
	        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);
	      }

	      // check whether the size of the submatrix matches the index size
	      if (!deepStrictEqual(iSize, sSize)) {
	        throw new DimensionError(iSize, sSize, '>');
	      }

	      // insert the sub matrix
	      if (iSize.length === 1) {
	        // if the replacement index only has 1 dimension, go trough each one and set its value
	        var range = index.dimension(0);
	        range.forEach(function (dataIndex, subIndex) {
	          validateIndex(dataIndex);
	          matrix.set([dataIndex, 0], submatrix[subIndex[0]], defaultValue);
	        });
	      } else {
	        // if the replacement index has 2 dimensions, go through each one and set the value in the correct index
	        var firstDimensionRange = index.dimension(0);
	        var secondDimensionRange = index.dimension(1);
	        firstDimensionRange.forEach(function (firstDataIndex, firstSubIndex) {
	          validateIndex(firstDataIndex);
	          secondDimensionRange.forEach(function (secondDataIndex, secondSubIndex) {
	            validateIndex(secondDataIndex);
	            matrix.set([firstDataIndex, secondDataIndex], submatrix[firstSubIndex[0]][secondSubIndex[0]], defaultValue);
	          });
	        });
	      }
	    }
	    return matrix;
	  }

	  /**
	   * Get a single element from the matrix.
	   * @memberof SparseMatrix
	   * @param {number[]} index   Zero-based index
	   * @return {*} value
	   */
	  SparseMatrix.prototype.get = function (index) {
	    if (!isArray(index)) {
	      throw new TypeError('Array expected');
	    }
	    if (index.length !== this._size.length) {
	      throw new DimensionError(index.length, this._size.length);
	    }

	    // check it is a pattern matrix
	    if (!this._values) {
	      throw new Error('Cannot invoke get on a Pattern only matrix');
	    }

	    // row and column
	    var i = index[0];
	    var j = index[1];

	    // check i, j are valid
	    validateIndex(i, this._size[0]);
	    validateIndex(j, this._size[1]);

	    // find value index
	    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
	    // check k is prior to next column k and it is in the correct row
	    if (k < this._ptr[j + 1] && this._index[k] === i) {
	      return this._values[k];
	    }
	    return 0;
	  };

	  /**
	   * Replace a single element in the matrix.
	   * @memberof SparseMatrix
	   * @param {number[]} index   Zero-based index
	   * @param {*} v
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be set to zero.
	   * @return {SparseMatrix} self
	   */
	  SparseMatrix.prototype.set = function (index, v, defaultValue) {
	    if (!isArray(index)) {
	      throw new TypeError('Array expected');
	    }
	    if (index.length !== this._size.length) {
	      throw new DimensionError(index.length, this._size.length);
	    }

	    // check it is a pattern matrix
	    if (!this._values) {
	      throw new Error('Cannot invoke set on a Pattern only matrix');
	    }

	    // row and column
	    var i = index[0];
	    var j = index[1];

	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1];

	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    if (isString(this._datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, this._datatype);
	    }

	    // check we need to resize matrix
	    if (i > rows - 1 || j > columns - 1) {
	      // resize matrix
	      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue);
	      // update rows & columns
	      rows = this._size[0];
	      columns = this._size[1];
	    }

	    // check i, j are valid
	    validateIndex(i, rows);
	    validateIndex(j, columns);

	    // find value index
	    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
	    // check k is prior to next column k and it is in the correct row
	    if (k < this._ptr[j + 1] && this._index[k] === i) {
	      // check value != 0
	      if (!eq(v, zero)) {
	        // update value
	        this._values[k] = v;
	      } else {
	        // remove value from matrix
	        _remove(k, j, this._values, this._index, this._ptr);
	      }
	    } else {
	      if (!eq(v, zero)) {
	        // insert value @ (i, j)
	        _insert(k, i, j, v, this._values, this._index, this._ptr);
	      }
	    }
	    return this;
	  };
	  function _getValueIndex(i, top, bottom, index) {
	    // check row is on the bottom side
	    if (bottom - top === 0) {
	      return bottom;
	    }
	    // loop rows [top, bottom[
	    for (var r = top; r < bottom; r++) {
	      // check we found value index
	      if (index[r] === i) {
	        return r;
	      }
	    }
	    // we did not find row
	    return top;
	  }
	  function _remove(k, j, values, index, ptr) {
	    // remove value @ k
	    values.splice(k, 1);
	    index.splice(k, 1);
	    // update pointers
	    for (var x = j + 1; x < ptr.length; x++) {
	      ptr[x]--;
	    }
	  }
	  function _insert(k, i, j, v, values, index, ptr) {
	    // insert value
	    values.splice(k, 0, v);
	    // update row for k
	    index.splice(k, 0, i);
	    // update column pointers
	    for (var x = j + 1; x < ptr.length; x++) {
	      ptr[x]++;
	    }
	  }

	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @memberof SparseMatrix
	   * @param {number[] | Matrix} size  The new size the matrix should have.
	   *                                  Since sparse matrices are always two-dimensional,
	   *                                  size must be two numbers in either an array or a matrix
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */
	  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {
	    // validate arguments
	    if (!isCollection(size)) {
	      throw new TypeError('Array or Matrix expected');
	    }

	    // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector
	    var sizeArray = size.valueOf().map(value => {
	      return Array.isArray(value) && value.length === 1 ? value[0] : value;
	    });
	    if (sizeArray.length !== 2) {
	      throw new Error('Only two dimensions matrix are supported');
	    }

	    // check sizes
	    sizeArray.forEach(function (value) {
	      if (!isNumber(value) || !isInteger$1(value) || value < 0) {
	        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(sizeArray) + ')');
	      }
	    });

	    // matrix to resize
	    var m = copy ? this.clone() : this;
	    // resize matrix
	    return _resize(m, sizeArray[0], sizeArray[1], defaultValue);
	  };
	  function _resize(matrix, rows, columns, defaultValue) {
	    // value to insert at the time of growing matrix
	    var value = defaultValue || 0;

	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    if (isString(matrix._datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, matrix._datatype);
	      // convert value to the same datatype
	      value = typed.convert(value, matrix._datatype);
	    }

	    // should we insert the value?
	    var ins = !eq(value, zero);

	    // old columns and rows
	    var r = matrix._size[0];
	    var c = matrix._size[1];
	    var i, j, k;

	    // check we need to increase columns
	    if (columns > c) {
	      // loop new columns
	      for (j = c; j < columns; j++) {
	        // update matrix._ptr for current column
	        matrix._ptr[j] = matrix._values.length;
	        // check we need to insert matrix._values
	        if (ins) {
	          // loop rows
	          for (i = 0; i < r; i++) {
	            // add new matrix._values
	            matrix._values.push(value);
	            // update matrix._index
	            matrix._index.push(i);
	          }
	        }
	      }
	      // store number of matrix._values in matrix._ptr
	      matrix._ptr[columns] = matrix._values.length;
	    } else if (columns < c) {
	      // truncate matrix._ptr
	      matrix._ptr.splice(columns + 1, c - columns);
	      // truncate matrix._values and matrix._index
	      matrix._values.splice(matrix._ptr[columns], matrix._values.length);
	      matrix._index.splice(matrix._ptr[columns], matrix._index.length);
	    }
	    // update columns
	    c = columns;

	    // check we need to increase rows
	    if (rows > r) {
	      // check we have to insert values
	      if (ins) {
	        // inserts
	        var n = 0;
	        // loop columns
	        for (j = 0; j < c; j++) {
	          // update matrix._ptr for current column
	          matrix._ptr[j] = matrix._ptr[j] + n;
	          // where to insert matrix._values
	          k = matrix._ptr[j + 1] + n;
	          // pointer
	          var p = 0;
	          // loop new rows, initialize pointer
	          for (i = r; i < rows; i++, p++) {
	            // add value
	            matrix._values.splice(k + p, 0, value);
	            // update matrix._index
	            matrix._index.splice(k + p, 0, i);
	            // increment inserts
	            n++;
	          }
	        }
	        // store number of matrix._values in matrix._ptr
	        matrix._ptr[c] = matrix._values.length;
	      }
	    } else if (rows < r) {
	      // deletes
	      var d = 0;
	      // loop columns
	      for (j = 0; j < c; j++) {
	        // update matrix._ptr for current column
	        matrix._ptr[j] = matrix._ptr[j] - d;
	        // where matrix._values start for next column
	        var k0 = matrix._ptr[j];
	        var k1 = matrix._ptr[j + 1] - d;
	        // loop matrix._index
	        for (k = k0; k < k1; k++) {
	          // row
	          i = matrix._index[k];
	          // check we need to delete value and matrix._index
	          if (i > rows - 1) {
	            // remove value
	            matrix._values.splice(k, 1);
	            // remove item from matrix._index
	            matrix._index.splice(k, 1);
	            // increase deletes
	            d++;
	          }
	        }
	      }
	      // update matrix._ptr for current column
	      matrix._ptr[j] = matrix._values.length;
	    }
	    // update matrix._size
	    matrix._size[0] = rows;
	    matrix._size[1] = columns;
	    // return matrix
	    return matrix;
	  }

	  /**
	   * Reshape the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (reshape in place).
	   *
	   * NOTE: This might be better suited to copy by default, instead of modifying
	   *       in place. For now, it operates in place to remain consistent with
	   *       resize().
	   *
	   * @memberof SparseMatrix
	   * @param {number[]} sizes          The new size the matrix should have.
	   *                                  Since sparse matrices are always two-dimensional,
	   *                                  size must be two numbers in either an array or a matrix
	   * @param {boolean} [copy]          Return a reshaped copy of the matrix
	   *
	   * @return {Matrix}                 The reshaped matrix
	   */
	  SparseMatrix.prototype.reshape = function (sizes, copy) {
	    // validate arguments
	    if (!isArray(sizes)) {
	      throw new TypeError('Array expected');
	    }
	    if (sizes.length !== 2) {
	      throw new Error('Sparse matrices can only be reshaped in two dimensions');
	    }

	    // check sizes
	    sizes.forEach(function (value) {
	      if (!isNumber(value) || !isInteger$1(value) || value <= -2 || value === 0) {
	        throw new TypeError('Invalid size, must contain positive integers or -1 ' + '(size: ' + format(sizes) + ')');
	      }
	    });
	    var currentLength = this._size[0] * this._size[1];
	    sizes = processSizesWildcard(sizes, currentLength);
	    var newLength = sizes[0] * sizes[1];

	    // m * n must not change
	    if (currentLength !== newLength) {
	      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');
	    }

	    // matrix to reshape
	    var m = copy ? this.clone() : this;

	    // return unchanged if the same shape
	    if (this._size[0] === sizes[0] && this._size[1] === sizes[1]) {
	      return m;
	    }

	    // Convert to COO format (generate a column index)
	    var colIndex = [];
	    for (var i = 0; i < m._ptr.length; i++) {
	      for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {
	        colIndex.push(i);
	      }
	    }

	    // Clone the values array
	    var values = m._values.slice();

	    // Clone the row index array
	    var rowIndex = m._index.slice();

	    // Transform the (row, column) indices
	    for (var _i = 0; _i < m._index.length; _i++) {
	      var r1 = rowIndex[_i];
	      var c1 = colIndex[_i];
	      var flat = r1 * m._size[1] + c1;
	      colIndex[_i] = flat % sizes[1];
	      rowIndex[_i] = Math.floor(flat / sizes[1]);
	    }

	    // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored
	    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,
	    // sorting several arrays based on some other array.

	    // OR, we could easily just:

	    // 1. Remove all values from the matrix
	    m._values.length = 0;
	    m._index.length = 0;
	    m._ptr.length = sizes[1] + 1;
	    m._size = sizes.slice();
	    for (var _i2 = 0; _i2 < m._ptr.length; _i2++) {
	      m._ptr[_i2] = 0;
	    }

	    // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)
	    // This step is probably the most time-consuming
	    for (var h = 0; h < values.length; h++) {
	      var _i3 = rowIndex[h];
	      var _j = colIndex[h];
	      var v = values[h];
	      var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);
	      _insert(k, _i3, _j, v, m._values, m._index, m._ptr);
	    }

	    // The value indices are inserted out of order, but apparently that's... still OK?

	    return m;
	  };

	  /**
	   * Create a clone of the matrix
	   * @memberof SparseMatrix
	   * @return {SparseMatrix} clone
	   */
	  SparseMatrix.prototype.clone = function () {
	    var m = new SparseMatrix({
	      values: this._values ? clone$2(this._values) : undefined,
	      index: clone$2(this._index),
	      ptr: clone$2(this._ptr),
	      size: clone$2(this._size),
	      datatype: this._datatype
	    });
	    return m;
	  };

	  /**
	   * Retrieve the size of the matrix.
	   * @memberof SparseMatrix
	   * @returns {number[]} size
	   */
	  SparseMatrix.prototype.size = function () {
	    return this._size.slice(0); // copy the Array
	  };

	  /**
	   * Create a new matrix with the results of the callback function executed on
	   * each entry of the matrix.
	   * @memberof SparseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	   *
	   * @return {SparseMatrix} matrix
	   */
	  SparseMatrix.prototype.map = function (callback, skipZeros) {
	    // check it is a pattern matrix
	    if (!this._values) {
	      throw new Error('Cannot invoke map on a Pattern only matrix');
	    }
	    // matrix instance
	    var me = this;
	    // rows and columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    // invoke callback
	    var args = maxArgumentCount(callback);
	    var invoke = function invoke(v, i, j) {
	      // invoke callback
	      if (args === 1) return callback(v);
	      if (args === 2) return callback(v, [i, j]);
	      return callback(v, [i, j], me);
	    };
	    // invoke _map
	    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
	  };

	  /**
	   * Create a new matrix with the results of the callback function executed on the interval
	   * [minRow..maxRow, minColumn..maxColumn].
	   */
	  function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
	    // result arrays
	    var values = [];
	    var index = [];
	    var ptr = [];

	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    if (isString(matrix._datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, matrix._datatype);
	    }

	    // invoke callback
	    var invoke = function invoke(v, x, y) {
	      // invoke callback
	      v = callback(v, x, y);
	      // check value != 0
	      if (!eq(v, zero)) {
	        // store value
	        values.push(v);
	        // index
	        index.push(x);
	      }
	    };
	    // loop columns
	    for (var j = minColumn; j <= maxColumn; j++) {
	      // store pointer to values index
	      ptr.push(values.length);
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = matrix._ptr[j];
	      var k1 = matrix._ptr[j + 1];
	      if (skipZeros) {
	        // loop k within [k0, k1[
	        for (var k = k0; k < k1; k++) {
	          // row index
	          var i = matrix._index[k];
	          // check i is in range
	          if (i >= minRow && i <= maxRow) {
	            // value @ k
	            invoke(matrix._values[k], i - minRow, j - minColumn);
	          }
	        }
	      } else {
	        // create a cache holding all defined values
	        var _values = {};
	        for (var _k = k0; _k < k1; _k++) {
	          var _i4 = matrix._index[_k];
	          _values[_i4] = matrix._values[_k];
	        }

	        // loop over all rows (indexes can be unordered so we can't use that),
	        // and either read the value or zero
	        for (var _i5 = minRow; _i5 <= maxRow; _i5++) {
	          var value = _i5 in _values ? _values[_i5] : 0;
	          invoke(value, _i5 - minRow, j - minColumn);
	        }
	      }
	    }

	    // store number of values in ptr
	    ptr.push(values.length);
	    // return sparse matrix
	    return new SparseMatrix({
	      values,
	      index,
	      ptr,
	      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]
	    });
	  }

	  /**
	   * Execute a callback function on each entry of the matrix.
	   * @memberof SparseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	   *                              If false, the indices are guaranteed to be in order,
	   *                              if true, the indices can be unordered.
	   */
	  SparseMatrix.prototype.forEach = function (callback, skipZeros) {
	    // check it is a pattern matrix
	    if (!this._values) {
	      throw new Error('Cannot invoke forEach on a Pattern only matrix');
	    }
	    // matrix instance
	    var me = this;
	    // rows and columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1];
	      if (skipZeros) {
	        // loop k within [k0, k1[
	        for (var k = k0; k < k1; k++) {
	          // row index
	          var i = this._index[k];

	          // value @ k
	          callback(this._values[k], [i, j], me);
	        }
	      } else {
	        // create a cache holding all defined values
	        var values = {};
	        for (var _k2 = k0; _k2 < k1; _k2++) {
	          var _i6 = this._index[_k2];
	          values[_i6] = this._values[_k2];
	        }

	        // loop over all rows (indexes can be unordered so we can't use that),
	        // and either read the value or zero
	        for (var _i7 = 0; _i7 < rows; _i7++) {
	          var value = _i7 in values ? values[_i7] : 0;
	          callback(value, [_i7, j], me);
	        }
	      }
	    }
	  };

	  /**
	   * Iterate over the matrix elements, skipping zeros
	   * @return {Iterable<{ value, index: number[] }>}
	   */
	  SparseMatrix.prototype[Symbol.iterator] = function* () {
	    if (!this._values) {
	      throw new Error('Cannot iterate a Pattern only matrix');
	    }
	    var columns = this._size[1];
	    for (var j = 0; j < columns; j++) {
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1];
	      for (var k = k0; k < k1; k++) {
	        // row index
	        var i = this._index[k];
	        yield {
	          value: this._values[k],
	          index: [i, j]
	        };
	      }
	    }
	  };

	  /**
	   * Create an Array with a copy of the data of the SparseMatrix
	   * @memberof SparseMatrix
	   * @returns {Array} array
	   */
	  SparseMatrix.prototype.toArray = function () {
	    return _toArray(this._values, this._index, this._ptr, this._size, true);
	  };

	  /**
	   * Get the primitive value of the SparseMatrix: a two dimensions array
	   * @memberof SparseMatrix
	   * @returns {Array} array
	   */
	  SparseMatrix.prototype.valueOf = function () {
	    return _toArray(this._values, this._index, this._ptr, this._size, false);
	  };
	  function _toArray(values, index, ptr, size, copy) {
	    // rows and columns
	    var rows = size[0];
	    var columns = size[1];
	    // result
	    var a = [];
	    // vars
	    var i, j;
	    // initialize array
	    for (i = 0; i < rows; i++) {
	      a[i] = [];
	      for (j = 0; j < columns; j++) {
	        a[i][j] = 0;
	      }
	    }

	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = ptr[j];
	      var k1 = ptr[j + 1];
	      // loop k within [k0, k1[
	      for (var k = k0; k < k1; k++) {
	        // row index
	        i = index[k];
	        // set value (use one for pattern matrix)
	        a[i][j] = values ? copy ? clone$2(values[k]) : values[k] : 1;
	      }
	    }
	    return a;
	  }

	  /**
	   * Get a string representation of the matrix, with optional formatting options.
	   * @memberof SparseMatrix
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */
	  SparseMatrix.prototype.format = function (options) {
	    // rows and columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    // density
	    var density = this.density();
	    // rows & columns
	    var str = 'Sparse Matrix [' + format(rows, options) + ' x ' + format(columns, options) + '] density: ' + format(density, options) + '\n';
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1];
	      // loop k within [k0, k1[
	      for (var k = k0; k < k1; k++) {
	        // row index
	        var i = this._index[k];
	        // append value
	        str += '\n    (' + format(i, options) + ', ' + format(j, options) + ') ==> ' + (this._values ? format(this._values[k], options) : 'X');
	      }
	    }
	    return str;
	  };

	  /**
	   * Get a string representation of the matrix
	   * @memberof SparseMatrix
	   * @returns {string} str
	   */
	  SparseMatrix.prototype.toString = function () {
	    return format(this.toArray());
	  };

	  /**
	   * Get a JSON representation of the matrix
	   * @memberof SparseMatrix
	   * @returns {Object}
	   */
	  SparseMatrix.prototype.toJSON = function () {
	    return {
	      mathjs: 'SparseMatrix',
	      values: this._values,
	      index: this._index,
	      ptr: this._ptr,
	      size: this._size,
	      datatype: this._datatype
	    };
	  };

	  /**
	   * Get the kth Matrix diagonal.
	   *
	   * @memberof SparseMatrix
	   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
	   *
	   * @returns {Matrix}                     The matrix vector with the diagonal values.
	   */
	  SparseMatrix.prototype.diagonal = function (k) {
	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (isBigNumber(k)) {
	        k = k.toNumber();
	      }
	      // is must be an integer
	      if (!isNumber(k) || !isInteger$1(k)) {
	        throw new TypeError('The parameter k must be an integer number');
	      }
	    } else {
	      // default value
	      k = 0;
	    }
	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;

	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1];

	    // number diagonal values
	    var n = Math.min(rows - kSub, columns - kSuper);

	    // diagonal arrays
	    var values = [];
	    var index = [];
	    var ptr = [];
	    // initial ptr value
	    ptr[0] = 0;
	    // loop columns
	    for (var j = kSuper; j < columns && values.length < n; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1];
	      // loop x within [k0, k1[
	      for (var x = k0; x < k1; x++) {
	        // row index
	        var i = this._index[x];
	        // check row
	        if (i === j - kSuper + kSub) {
	          // value on this column
	          values.push(this._values[x]);
	          // store row
	          index[values.length - 1] = i - kSub;
	          // exit loop
	          break;
	        }
	      }
	    }
	    // close ptr
	    ptr.push(values.length);
	    // return matrix
	    return new SparseMatrix({
	      values,
	      index,
	      ptr,
	      size: [n, 1]
	    });
	  };

	  /**
	   * Generate a matrix from a JSON object
	   * @memberof SparseMatrix
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "SparseMatrix", "values": [], "index": [], "ptr": [], "size": []}`,
	   *                       where mathjs is optional
	   * @returns {SparseMatrix}
	   */
	  SparseMatrix.fromJSON = function (json) {
	    return new SparseMatrix(json);
	  };

	  /**
	   * Create a diagonal matrix.
	   *
	   * @memberof SparseMatrix
	   * @param {Array} size                       The matrix size.
	   * @param {number | Array | Matrix } value   The values for the diagonal.
	   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.
	   * @param {number} [defaultValue]            The default value for non-diagonal
	   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.
	   *
	   * @returns {SparseMatrix}
	   */
	  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
	    if (!isArray(size)) {
	      throw new TypeError('Array expected, size parameter');
	    }
	    if (size.length !== 2) {
	      throw new Error('Only two dimensions matrix are supported');
	    }

	    // map size & validate
	    size = size.map(function (s) {
	      // check it is a big number
	      if (isBigNumber(s)) {
	        // convert it
	        s = s.toNumber();
	      }
	      // validate arguments
	      if (!isNumber(s) || !isInteger$1(s) || s < 1) {
	        throw new Error('Size values must be positive integers');
	      }
	      return s;
	    });

	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (isBigNumber(k)) {
	        k = k.toNumber();
	      }
	      // is must be an integer
	      if (!isNumber(k) || !isInteger$1(k)) {
	        throw new TypeError('The parameter k must be an integer number');
	      }
	    } else {
	      // default value
	      k = 0;
	    }

	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    if (isString(datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, datatype);
	    }
	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;

	    // rows and columns
	    var rows = size[0];
	    var columns = size[1];

	    // number of non-zero items
	    var n = Math.min(rows - kSub, columns - kSuper);

	    // value extraction function
	    var _value;

	    // check value
	    if (isArray(value)) {
	      // validate array
	      if (value.length !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid value array length');
	      }
	      // define function
	      _value = function _value(i) {
	        // return value @ i
	        return value[i];
	      };
	    } else if (isMatrix(value)) {
	      // matrix size
	      var ms = value.size();
	      // validate matrix
	      if (ms.length !== 1 || ms[0] !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid matrix length');
	      }
	      // define function
	      _value = function _value(i) {
	        // return value @ i
	        return value.get([i]);
	      };
	    } else {
	      // define function
	      _value = function _value() {
	        // return value
	        return value;
	      };
	    }

	    // create arrays
	    var values = [];
	    var index = [];
	    var ptr = [];

	    // loop items
	    for (var j = 0; j < columns; j++) {
	      // number of rows with value
	      ptr.push(values.length);
	      // diagonal index
	      var i = j - kSuper;
	      // check we need to set diagonal value
	      if (i >= 0 && i < n) {
	        // get value @ i
	        var v = _value(i);
	        // check for zero
	        if (!eq(v, zero)) {
	          // column
	          index.push(i + kSub);
	          // add value
	          values.push(v);
	        }
	      }
	    }
	    // last value should be number of values
	    ptr.push(values.length);
	    // create SparseMatrix
	    return new SparseMatrix({
	      values,
	      index,
	      ptr,
	      size: [rows, columns]
	    });
	  };

	  /**
	   * Swap rows i and j in Matrix.
	   *
	   * @memberof SparseMatrix
	   * @param {number} i       Matrix row index 1
	   * @param {number} j       Matrix row index 2
	   *
	   * @return {Matrix}        The matrix reference
	   */
	  SparseMatrix.prototype.swapRows = function (i, j) {
	    // check index
	    if (!isNumber(i) || !isInteger$1(i) || !isNumber(j) || !isInteger$1(j)) {
	      throw new Error('Row index must be positive integers');
	    }
	    // check dimensions
	    if (this._size.length !== 2) {
	      throw new Error('Only two dimensional matrix is supported');
	    }
	    // validate index
	    validateIndex(i, this._size[0]);
	    validateIndex(j, this._size[0]);

	    // swap rows
	    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr);
	    // return current instance
	    return this;
	  };

	  /**
	   * Loop rows with data in column j.
	   *
	   * @param {number} j            Column
	   * @param {Array} values        Matrix values
	   * @param {Array} index         Matrix row indeces
	   * @param {Array} ptr           Matrix column pointers
	   * @param {Function} callback   Callback function invoked for every row in column j
	   */
	  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {
	    // indeces for column j
	    var k0 = ptr[j];
	    var k1 = ptr[j + 1];
	    // loop
	    for (var k = k0; k < k1; k++) {
	      // invoke callback
	      callback(index[k], values[k]);
	    }
	  };

	  /**
	   * Swap rows x and y in Sparse Matrix data structures.
	   *
	   * @param {number} x         Matrix row index 1
	   * @param {number} y         Matrix row index 2
	   * @param {number} columns   Number of columns in matrix
	   * @param {Array} values     Matrix values
	   * @param {Array} index      Matrix row indeces
	   * @param {Array} ptr        Matrix column pointers
	   */
	  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = ptr[j];
	      var k1 = ptr[j + 1];
	      // find value index @ x
	      var kx = _getValueIndex(x, k0, k1, index);
	      // find value index @ x
	      var ky = _getValueIndex(y, k0, k1, index);
	      // check both rows exist in matrix
	      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
	        // swap values (check for pattern matrix)
	        if (values) {
	          var v = values[kx];
	          values[kx] = values[ky];
	          values[ky] = v;
	        }
	        // next column
	        continue;
	      }
	      // check x row exist & no y row
	      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
	        // value @ x (check for pattern matrix)
	        var vx = values ? values[kx] : undefined;
	        // insert value @ y
	        index.splice(ky, 0, y);
	        if (values) {
	          values.splice(ky, 0, vx);
	        }
	        // remove value @ x (adjust array index if needed)
	        index.splice(ky <= kx ? kx + 1 : kx, 1);
	        if (values) {
	          values.splice(ky <= kx ? kx + 1 : kx, 1);
	        }
	        // next column
	        continue;
	      }
	      // check y row exist & no x row
	      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
	        // value @ y (check for pattern matrix)
	        var vy = values ? values[ky] : undefined;
	        // insert value @ x
	        index.splice(kx, 0, x);
	        if (values) {
	          values.splice(kx, 0, vy);
	        }
	        // remove value @ y (adjust array index if needed)
	        index.splice(kx <= ky ? ky + 1 : ky, 1);
	        if (values) {
	          values.splice(kx <= ky ? ky + 1 : ky, 1);
	        }
	      }
	    }
	  };
	  return SparseMatrix;
	}, {
	  isClass: true
	});

	var name$Z = 'number';
	var dependencies$Y = ['typed'];

	/**
	 * Separates the radix, integer part, and fractional part of a non decimal number string
	 * @param {string} input string to parse
	 * @returns {object} the parts of the string or null if not a valid input
	 */
	function getNonDecimalNumberParts(input) {
	  var nonDecimalWithRadixMatch = input.match(/(0[box])([0-9a-fA-F]*)\.([0-9a-fA-F]*)/);
	  if (nonDecimalWithRadixMatch) {
	    var radix = {
	      '0b': 2,
	      '0o': 8,
	      '0x': 16
	    }[nonDecimalWithRadixMatch[1]];
	    var integerPart = nonDecimalWithRadixMatch[2];
	    var fractionalPart = nonDecimalWithRadixMatch[3];
	    return {
	      input,
	      radix,
	      integerPart,
	      fractionalPart
	    };
	  } else {
	    return null;
	  }
	}

	/**
	 * Makes a number from a radix, and integer part, and a fractional part
	 * @param {parts} [x] parts of the number string (from getNonDecimalNumberParts)
	 * @returns {number} the number
	 */
	function makeNumberFromNonDecimalParts(parts) {
	  var n = parseInt(parts.integerPart, parts.radix);
	  var f = 0;
	  for (var i = 0; i < parts.fractionalPart.length; i++) {
	    var digitValue = parseInt(parts.fractionalPart[i], parts.radix);
	    f += digitValue / Math.pow(parts.radix, i + 1);
	  }
	  var result = n + f;
	  if (isNaN(result)) {
	    throw new SyntaxError('String "' + parts.input + '" is no valid number');
	  }
	  return result;
	}
	var createNumber = /* #__PURE__ */factory(name$Z, dependencies$Y, _ref => {
	  var {
	    typed
	  } = _ref;
	  /**
	   * Create a number or convert a string, boolean, or unit to a number.
	   * When value is a matrix, all elements will be converted to number.
	   *
	   * Syntax:
	   *
	   *    math.number(value)
	   *    math.number(unit, valuelessUnit)
	   *
	   * Examples:
	   *
	   *    math.number(2)                         // returns number 2
	   *    math.number('7.2')                     // returns number 7.2
	   *    math.number(true)                      // returns number 1
	   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]
	   *    math.number(math.unit('52cm'), 'm')    // returns 0.52
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, matrix, string, unit
	   *
	   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted
	   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number
	   * @return {number | Array | Matrix} The created number
	   */
	  var number = typed('number', {
	    '': function _() {
	      return 0;
	    },
	    number: function number(x) {
	      return x;
	    },
	    string: function string(x) {
	      if (x === 'NaN') return NaN;
	      var nonDecimalNumberParts = getNonDecimalNumberParts(x);
	      if (nonDecimalNumberParts) {
	        return makeNumberFromNonDecimalParts(nonDecimalNumberParts);
	      }
	      var size = 0;
	      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);
	      if (wordSizeSuffixMatch) {
	        // x includes a size suffix like 0xffffi32, so we extract
	        // the suffix and remove it from x
	        size = Number(wordSizeSuffixMatch[2]);
	        x = wordSizeSuffixMatch[1];
	      }
	      var num = Number(x);
	      if (isNaN(num)) {
	        throw new SyntaxError('String "' + x + '" is no valid number');
	      }
	      if (wordSizeSuffixMatch) {
	        // x is a signed bin, oct, or hex literal
	        // num is the value of string x if x is interpreted as unsigned
	        if (num > 2 ** size - 1) {
	          // literal is too large for size suffix
	          throw new SyntaxError("String \"".concat(x, "\" is out of range"));
	        }
	        // check if the bit at index size - 1 is set and if so do the twos complement
	        if (num >= 2 ** (size - 1)) {
	          num = num - 2 ** size;
	        }
	      }
	      return num;
	    },
	    BigNumber: function BigNumber(x) {
	      return x.toNumber();
	    },
	    Fraction: function Fraction(x) {
	      return x.valueOf();
	    },
	    Unit: typed.referToSelf(self => x => {
	      var clone = x.clone();
	      clone.value = self(x.value);
	      return clone;
	    }),
	    null: function _null(x) {
	      return 0;
	    },
	    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {
	      return unit.toNumber(valuelessUnit);
	    },
	    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))
	  });

	  // reviver function to parse a JSON object like:
	  //
	  //     {"mathjs":"number","value":"2.3"}
	  //
	  // into a number 2.3
	  number.fromJSON = function (json) {
	    return parseFloat(json.value);
	  };
	  return number;
	});

	var name$Y = 'bignumber';
	var dependencies$X = ['typed', 'BigNumber'];
	var createBignumber = /* #__PURE__ */factory(name$Y, dependencies$X, _ref => {
	  var {
	    typed,
	    BigNumber
	  } = _ref;
	  /**
	   * Create a BigNumber, which can store numbers with arbitrary precision.
	   * When a matrix is provided, all elements will be converted to BigNumber.
	   *
	   * Syntax:
	   *
	   *    math.bignumber(x)
	   *
	   * Examples:
	   *
	   *    0.1 + 0.2                                  // returns number 0.30000000000000004
	   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3
	   *
	   *
	   *    7.2e500                                    // returns number Infinity
	   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500
	   *
	   * See also:
	   *
	   *    boolean, complex, index, matrix, string, unit
	   *
	   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,
	   *                                                    0 by default.
	   * @returns {BigNumber} The created bignumber
	   */
	  return typed('bignumber', {
	    '': function _() {
	      return new BigNumber(0);
	    },
	    number: function number(x) {
	      // convert to string to prevent errors in case of >15 digits
	      return new BigNumber(x + '');
	    },
	    string: function string(x) {
	      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);
	      if (wordSizeSuffixMatch) {
	        // x has a word size suffix
	        var size = wordSizeSuffixMatch[2];
	        var n = BigNumber(wordSizeSuffixMatch[1]);
	        var twoPowSize = new BigNumber(2).pow(Number(size));
	        if (n.gt(twoPowSize.sub(1))) {
	          throw new SyntaxError("String \"".concat(x, "\" is out of range"));
	        }
	        var twoPowSizeSubOne = new BigNumber(2).pow(Number(size) - 1);
	        if (n.gte(twoPowSizeSubOne)) {
	          return n.sub(twoPowSize);
	        } else {
	          return n;
	        }
	      }
	      return new BigNumber(x);
	    },
	    BigNumber: function BigNumber(x) {
	      // we assume a BigNumber is immutable
	      return x;
	    },
	    Unit: typed.referToSelf(self => x => {
	      var clone = x.clone();
	      clone.value = self(x.value);
	      return clone;
	    }),
	    Fraction: function Fraction(x) {
	      return new BigNumber(x.n).div(x.d).times(x.s);
	    },
	    null: function _null(x) {
	      return new BigNumber(0);
	    },
	    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))
	  });
	});

	var name$X = 'complex';
	var dependencies$W = ['typed', 'Complex'];
	var createComplex = /* #__PURE__ */factory(name$X, dependencies$W, _ref => {
	  var {
	    typed,
	    Complex
	  } = _ref;
	  /**
	   * Create a complex value or convert a value to a complex value.
	   *
	   * Syntax:
	   *
	   *     math.complex()                           // creates a complex value with zero
	   *                                              // as real and imaginary part.
	   *     math.complex(re : number, im : string)   // creates a complex value with provided
	   *                                              // values for real and imaginary part.
	   *     math.complex(re : number)                // creates a complex value with provided
	   *                                              // real value and zero imaginary part.
	   *     math.complex(complex : Complex)          // clones the provided complex value.
	   *     math.complex(arg : string)               // parses a string into a complex value.
	   *     math.complex(array : Array)              // converts the elements of the array
	   *                                              // or matrix element wise into a
	   *                                              // complex value.
	   *     math.complex({re: number, im: number})   // creates a complex value with provided
	   *                                              // values for real an imaginary part.
	   *     math.complex({r: number, phi: number})   // creates a complex value with provided
	   *                                              // polar coordinates
	   *
	   * Examples:
	   *
	   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i
	   *    a.re = 5                          // a = Complex 5 - 4i
	   *    const i = a.im                    // Number -4
	   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i
	   *    const c = math.complex()          // Complex 0 + 0i
	   *    const d = math.add(a, b)          // Complex 5 + 2i
	   *
	   * See also:
	   *
	   *    bignumber, boolean, index, matrix, number, string, unit
	   *
	   * @param {* | Array | Matrix} [args]
	   *            Arguments specifying the real and imaginary part of the complex number
	   * @return {Complex | Array | Matrix} Returns a complex value
	   */
	  return typed('complex', {
	    '': function _() {
	      return Complex.ZERO;
	    },
	    number: function number(x) {
	      return new Complex(x, 0);
	    },
	    'number, number': function numberNumber(re, im) {
	      return new Complex(re, im);
	    },
	    // TODO: this signature should be redundant
	    'BigNumber, BigNumber': function BigNumberBigNumber(re, im) {
	      return new Complex(re.toNumber(), im.toNumber());
	    },
	    Fraction: function Fraction(x) {
	      return new Complex(x.valueOf(), 0);
	    },
	    Complex: function Complex(x) {
	      return x.clone();
	    },
	    string: function string(x) {
	      return Complex(x); // for example '2 + 3i'
	    },

	    null: function _null(x) {
	      return Complex(0);
	    },
	    Object: function Object(x) {
	      if ('re' in x && 'im' in x) {
	        return new Complex(x.re, x.im);
	      }
	      if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {
	        return new Complex(x);
	      }
	      throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');
	    },
	    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))
	  });
	});

	var name$W = 'fraction';
	var dependencies$V = ['typed', 'Fraction'];
	var createFraction = /* #__PURE__ */factory(name$W, dependencies$V, _ref => {
	  var {
	    typed,
	    Fraction
	  } = _ref;
	  /**
	   * Create a fraction or convert a value to a fraction.
	   *
	   * With one numeric argument, produces the closest rational approximation to the
	   * input.
	   * With two arguments, the first is the numerator and the second is the denominator,
	   * and creates the corresponding fraction. Both numerator and denominator must be
	   * integers.
	   * With one object argument, looks for the integer numerator as the value of property
	   * 'n' and the integer denominator as the value of property 'd'.
	   * With a matrix argument, creates a matrix of the same shape with entries
	   * converted into fractions.
	   *
	   * Syntax:
	   *     math.fraction(value)
	   *     math.fraction(numerator, denominator)
	   *     math.fraction({n: numerator, d: denominator})
	   *     math.fraction(matrix: Array | Matrix)
	   *
	   * Examples:
	   *
	   *     math.fraction(6.283)             // returns Fraction 6283/1000
	   *     math.fraction(1, 3)              // returns Fraction 1/3
	   *     math.fraction('2/3')             // returns Fraction 2/3
	   *     math.fraction({n: 2, d: 3})      // returns Fraction 2/3
	   *     math.fraction([0.2, 0.25, 1.25]) // returns Array [1/5, 1/4, 5/4]
	   *     math.fraction(4, 5.1)            // throws Error: Parameters must be integer
	   *
	   * See also:
	   *
	   *    bignumber, number, string, unit
	   *
	   * @param {number | string | Fraction | BigNumber | Unit | Array | Matrix} [args]
	   *            Arguments specifying the value, or numerator and denominator of
	   *            the fraction
	   * @return {Fraction | Array | Matrix} Returns a fraction
	   */
	  return typed('fraction', {
	    number: function number(x) {
	      if (!isFinite(x) || isNaN(x)) {
	        throw new Error(x + ' cannot be represented as a fraction');
	      }
	      return new Fraction(x);
	    },
	    string: function string(x) {
	      return new Fraction(x);
	    },
	    'number, number': function numberNumber(numerator, denominator) {
	      return new Fraction(numerator, denominator);
	    },
	    null: function _null(x) {
	      return new Fraction(0);
	    },
	    BigNumber: function BigNumber(x) {
	      return new Fraction(x.toString());
	    },
	    Fraction: function Fraction(x) {
	      return x; // fractions are immutable
	    },

	    Unit: typed.referToSelf(self => x => {
	      var clone = x.clone();
	      clone.value = self(x.value);
	      return clone;
	    }),
	    Object: function Object(x) {
	      return new Fraction(x);
	    },
	    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))
	  });
	});

	var name$V = 'matrix';
	var dependencies$U = ['typed', 'Matrix', 'DenseMatrix', 'SparseMatrix'];
	var createMatrix = /* #__PURE__ */factory(name$V, dependencies$U, _ref => {
	  var {
	    typed,
	    Matrix,
	    DenseMatrix,
	    SparseMatrix
	  } = _ref;
	  /**
	   * Create a Matrix. The function creates a new `math.Matrix` object from
	   * an `Array`. A Matrix has utility functions to manipulate the data in the
	   * matrix, like getting the size and getting or setting values in the matrix.
	   * Supported storage formats are 'dense' and 'sparse'.
	   *
	   * Syntax:
	   *
	   *    math.matrix()                         // creates an empty matrix using default storage format (dense).
	   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).
	   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.
	   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.
	   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.
	   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.
	   *
	   * Examples:
	   *
	   *    let m = math.matrix([[1, 2], [3, 4]])
	   *    m.size()                        // Array [2, 2]
	   *    m.resize([3, 2], 5)
	   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
	   *    m.get([1, 0])                    // number 3
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, number, string, unit, sparse
	   *
	   * @param {Array | Matrix} [data]    A multi dimensional array
	   * @param {string} [format]          The Matrix storage format, either `'dense'` or `'sparse'`
	   * @param {string} [datatype]        Type of the values
	   *
	   * @return {Matrix} The created matrix
	   */
	  return typed(name$V, {
	    '': function _() {
	      return _create([]);
	    },
	    string: function string(format) {
	      return _create([], format);
	    },
	    'string, string': function stringString(format, datatype) {
	      return _create([], format, datatype);
	    },
	    Array: function Array(data) {
	      return _create(data);
	    },
	    Matrix: function Matrix(data) {
	      return _create(data, data.storage());
	    },
	    'Array | Matrix, string': _create,
	    'Array | Matrix, string, string': _create
	  });

	  /**
	   * Create a new Matrix with given storage format
	   * @param {Array} data
	   * @param {string} [format]
	   * @param {string} [datatype]
	   * @returns {Matrix} Returns a new Matrix
	   * @private
	   */
	  function _create(data, format, datatype) {
	    // get storage format constructor
	    if (format === 'dense' || format === 'default' || format === undefined) {
	      return new DenseMatrix(data, datatype);
	    }
	    if (format === 'sparse') {
	      return new SparseMatrix(data, datatype);
	    }
	    throw new TypeError('Unknown matrix type ' + JSON.stringify(format) + '.');
	  }
	});

	var name$U = 'matrixFromColumns';
	var dependencies$T = ['typed', 'matrix', 'flatten', 'size'];
	var createMatrixFromColumns = /* #__PURE__ */factory(name$U, dependencies$T, _ref => {
	  var {
	    typed,
	    matrix,
	    flatten,
	    size
	  } = _ref;
	  /**
	   * Create a dense matrix from vectors as individual columns.
	   * If you pass row vectors, they will be transposed (but not conjugated!)
	   *
	   * Syntax:
	   *
	   *    math.matrixFromColumns(...arr)
	   *    math.matrixFromColumns(col1, col2)
	   *    math.matrixFromColumns(col1, col2, col3)
	   *
	   * Examples:
	   *
	   *    math.matrixFromColumns([1, 2, 3], [[4],[5],[6]])
	   *    math.matrixFromColumns(...vectors)
	   *
	   * See also:
	   *
	   *    matrix, matrixFromRows, matrixFromFunction, zeros
	   *
	   * @param {... Array | Matrix} cols Multiple columns
	   * @return { number[][] | Matrix } if at least one of the arguments is an array, an array will be returned
	   */
	  return typed(name$U, {
	    '...Array': function Array(arr) {
	      return _createArray(arr);
	    },
	    '...Matrix': function Matrix(arr) {
	      return matrix(_createArray(arr.map(m => m.toArray())));
	    }

	    // TODO implement this properly for SparseMatrix
	  });

	  function _createArray(arr) {
	    if (arr.length === 0) throw new TypeError('At least one column is needed to construct a matrix.');
	    var N = checkVectorTypeAndReturnLength(arr[0]);

	    // create an array with empty rows
	    var result = [];
	    for (var i = 0; i < N; i++) {
	      result[i] = [];
	    }

	    // loop columns
	    for (var col of arr) {
	      var colLength = checkVectorTypeAndReturnLength(col);
	      if (colLength !== N) {
	        throw new TypeError('The vectors had different length: ' + (N | 0) + ' ≠ ' + (colLength | 0));
	      }
	      var f = flatten(col);

	      // push a value to each row
	      for (var _i = 0; _i < N; _i++) {
	        result[_i].push(f[_i]);
	      }
	    }
	    return result;
	  }
	  function checkVectorTypeAndReturnLength(vec) {
	    var s = size(vec);
	    if (s.length === 1) {
	      // 1D vector
	      return s[0];
	    } else if (s.length === 2) {
	      // 2D vector
	      if (s[0] === 1) {
	        // row vector
	        return s[1];
	      } else if (s[1] === 1) {
	        // col vector
	        return s[0];
	      } else {
	        throw new TypeError('At least one of the arguments is not a vector.');
	      }
	    } else {
	      throw new TypeError('Only one- or two-dimensional vectors are supported.');
	    }
	  }
	});

	var name$T = 'unaryMinus';
	var dependencies$S = ['typed'];
	var createUnaryMinus = /* #__PURE__ */factory(name$T, dependencies$S, _ref => {
	  var {
	    typed
	  } = _ref;
	  /**
	   * Inverse the sign of a value, apply a unary minus operation.
	   *
	   * For matrices, the function is evaluated element wise. Boolean values and
	   * strings will be converted to a number. For complex numbers, both real and
	   * complex value are inverted.
	   *
	   * Syntax:
	   *
	   *    math.unaryMinus(x)
	   *
	   * Examples:
	   *
	   *    math.unaryMinus(3.5)      // returns -3.5
	   *    math.unaryMinus(-4.2)     // returns 4.2
	   *
	   * See also:
	   *
	   *    add, subtract, unaryPlus
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.
	   */
	  return typed(name$T, {
	    number: unaryMinusNumber,
	    'Complex | BigNumber | Fraction': x => x.neg(),
	    Unit: typed.referToSelf(self => x => {
	      var res = x.clone();
	      res.value = typed.find(self, res.valueType())(x.value);
	      return res;
	    }),
	    // deep map collection, skip zeros since unaryMinus(0) = 0
	    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))

	    // TODO: add support for string
	  });
	});

	var name$S = 'abs';
	var dependencies$R = ['typed'];
	var createAbs = /* #__PURE__ */factory(name$S, dependencies$R, _ref => {
	  var {
	    typed
	  } = _ref;
	  /**
	   * Calculate the absolute value of a number. For matrices, the function is
	   * evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.abs(x)
	   *
	   * Examples:
	   *
	   *    math.abs(3.5)                // returns number 3.5
	   *    math.abs(-4.2)               // returns number 4.2
	   *
	   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]
	   *
	   * See also:
	   *
	   *    sign
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
	   *            A number or matrix for which to get the absolute value
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
	   *            Absolute value of `x`
	   */
	  return typed(name$S, {
	    number: absNumber,
	    'Complex | BigNumber | Fraction | Unit': x => x.abs(),
	    // deep map collection, skip zeros since abs(0) = 0
	    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))
	  });
	});

	var name$R = 'addScalar';
	var dependencies$Q = ['typed'];
	var createAddScalar = /* #__PURE__ */factory(name$R, dependencies$Q, _ref => {
	  var {
	    typed
	  } = _ref;
	  /**
	   * Add two scalar values, `x + y`.
	   * This function is meant for internal use: it is used by the public function
	   * `add`
	   *
	   * This function does not support collections (Array or Matrix).
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add
	   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add
	   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`
	   * @private
	   */
	  return typed(name$R, {
	    'number, number': addNumber,
	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.add(y);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.plus(y);
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.add(y);
	    },
	    'Unit, Unit': typed.referToSelf(self => (x, y) => {
	      if (x.value === null || x.value === undefined) {
	        throw new Error('Parameter x contains a unit with undefined value');
	      }
	      if (y.value === null || y.value === undefined) {
	        throw new Error('Parameter y contains a unit with undefined value');
	      }
	      if (!x.equalBase(y)) throw new Error('Units do not match');
	      var res = x.clone();
	      res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);
	      res.fixPrefix = false;
	      return res;
	    })
	  });
	});

	var name$Q = 'matAlgo11xS0s';
	var dependencies$P = ['typed', 'equalScalar'];
	var createMatAlgo11xS0s = /* #__PURE__ */factory(name$Q, dependencies$P, _ref => {
	  var {
	    typed,
	    equalScalar
	  } = _ref;
	  /**
	   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
	   * Callback function invoked NZ times (number of nonzero items in S).
	   *
	   *
	   *          ┌  f(Sij, b)  ; S(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  0          ; otherwise
	   *
	   *
	   * @param {Matrix}   s                 The SparseMatrix instance (S)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
	   */
	  return function matAlgo11xS0s(s, b, callback, inverse) {
	    // sparse matrix arrays
	    var avalues = s._values;
	    var aindex = s._index;
	    var aptr = s._ptr;
	    var asize = s._size;
	    var adt = s._datatype;

	    // sparse matrix cannot be a Pattern matrix
	    if (!avalues) {
	      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
	    }

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];

	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // initialize ptr
	      cptr[j] = cindex.length;
	      // values in j
	      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var i = aindex[k];
	        // invoke callback
	        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b);
	        // check value is zero
	        if (!eq(v, zero)) {
	          // push index & value
	          cindex.push(i);
	          cvalues.push(v);
	        }
	      }
	    }
	    // update ptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return s.createSparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };
	});

	var name$P = 'matAlgo12xSfs';
	var dependencies$O = ['typed', 'DenseMatrix'];
	var createMatAlgo12xSfs = /* #__PURE__ */factory(name$P, dependencies$O, _ref => {
	  var {
	    typed,
	    DenseMatrix
	  } = _ref;
	  /**
	   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
	   * Callback function invoked MxN times.
	   *
	   *
	   *          ┌  f(Sij, b)  ; S(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  f(0, b)    ; otherwise
	   *
	   *
	   * @param {Matrix}   s                 The SparseMatrix instance (S)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
	   */
	  return function matAlgo12xSfs(s, b, callback, inverse) {
	    // sparse matrix arrays
	    var avalues = s._values;
	    var aindex = s._index;
	    var aptr = s._ptr;
	    var asize = s._size;
	    var adt = s._datatype;

	    // sparse matrix cannot be a Pattern matrix
	    if (!avalues) {
	      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
	    }

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cdata = [];

	    // workspaces
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // columns mark
	      var mark = j + 1;
	      // values in j
	      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var r = aindex[k];
	        // update workspace
	        x[r] = avalues[k];
	        w[r] = mark;
	      }
	      // loop rows
	      for (var i = 0; i < rows; i++) {
	        // initialize C on first column
	        if (j === 0) {
	          // create row array
	          cdata[i] = [];
	        }
	        // check sparse matrix has a value @ i,j
	        if (w[i] === mark) {
	          // invoke callback, update C
	          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
	        } else {
	          // dense matrix value @ i, j
	          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);
	        }
	      }
	    }

	    // return dense matrix
	    return new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };
	});

	var name$O = 'matAlgo14xDs';
	var dependencies$N = ['typed'];
	var createMatAlgo14xDs = /* #__PURE__ */factory(name$O, dependencies$N, _ref => {
	  var {
	    typed
	  } = _ref;
	  /**
	   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).
	   * Callback function invoked MxN times.
	   *
	   * C(i,j,...z) = f(Aij..z, b)
	   *
	   * @param {Matrix}   a                 The DenseMatrix instance (A)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij..z,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042
	   */
	  return function matAlgo14xDs(a, b, callback, inverse) {
	    // a arrays
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;

	    // datatype
	    var dt;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // populate cdata, iterate through dimensions
	    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : [];

	    // c matrix
	    return a.createDenseMatrix({
	      data: cdata,
	      size: clone$2(asize),
	      datatype: dt
	    });
	  };

	  // recursive function
	  function _iterate(f, level, s, n, av, bv, inverse) {
	    // initialize array for this level
	    var cv = [];
	    // check we reach the last level
	    if (level === s.length - 1) {
	      // loop arrays in last level
	      for (var i = 0; i < n; i++) {
	        // invoke callback and store value
	        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
	      }
	    } else {
	      // iterate current level
	      for (var j = 0; j < n; j++) {
	        // iterate next level
	        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
	      }
	    }
	    return cv;
	  }
	});

	var name$N = 'matAlgo03xDSf';
	var dependencies$M = ['typed'];
	var createMatAlgo03xDSf = /* #__PURE__ */factory(name$N, dependencies$M, _ref => {
	  var {
	    typed
	  } = _ref;
	  /**
	   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).
	   * Callback function invoked M*N times.
	   *
	   *
	   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  f(Dij, 0)    ; otherwise
	   *
	   *
	   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
	   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)
	   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
	   */
	  return function matAlgo03xDSf(denseMatrix, sparseMatrix, callback, inverse) {
	    // dense matrix arrays
	    var adata = denseMatrix._data;
	    var asize = denseMatrix._size;
	    var adt = denseMatrix._datatype;
	    // sparse matrix arrays
	    var bvalues = sparseMatrix._values;
	    var bindex = sparseMatrix._index;
	    var bptr = sparseMatrix._ptr;
	    var bsize = sparseMatrix._size;
	    var bdt = sparseMatrix._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) {
	      throw new DimensionError(asize.length, bsize.length);
	    }

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    }

	    // sparse matrix cannot be a Pattern matrix
	    if (!bvalues) {
	      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
	    }

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result (DenseMatrix)
	    var cdata = [];

	    // initialize dense matrix
	    for (var z = 0; z < rows; z++) {
	      // initialize row
	      cdata[z] = [];
	    }

	    // workspace
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // loop columns in b
	    for (var j = 0; j < columns; j++) {
	      // column mark
	      var mark = j + 1;
	      // values in column j
	      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var i = bindex[k];
	        // update workspace
	        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
	        w[i] = mark;
	      }
	      // process workspace
	      for (var y = 0; y < rows; y++) {
	        // check we have a calculated value for current row
	        if (w[y] === mark) {
	          // use calculated value
	          cdata[y][j] = x[y];
	        } else {
	          // calculate value
	          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);
	        }
	      }
	    }

	    // return dense matrix
	    return denseMatrix.createDenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };
	});

	var name$M = 'matAlgo05xSfSf';
	var dependencies$L = ['typed', 'equalScalar'];
	var createMatAlgo05xSfSf = /* #__PURE__ */factory(name$M, dependencies$L, _ref => {
	  var {
	    typed,
	    equalScalar
	  } = _ref;
	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
	   * Callback function invoked MAX(NNZA, NNZB) times
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  return function matAlgo05xSfSf(a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) {
	      throw new DimensionError(asize.length, bsize.length);
	    }

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    }

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = [];

	    // workspaces
	    var xa = cvalues ? [] : undefined;
	    var xb = cvalues ? [] : undefined;
	    // marks indicating we have a value in x for a given column
	    var wa = [];
	    var wb = [];

	    // vars
	    var i, j, k, k1;

	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // columns mark
	      var mark = j + 1;
	      // loop values A(:,j)
	      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {
	        // row
	        i = aindex[k];
	        // push index
	        cindex.push(i);
	        // update workspace
	        wa[i] = mark;
	        // check we need to process values
	        if (xa) {
	          xa[i] = avalues[k];
	        }
	      }
	      // loop values B(:,j)
	      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {
	        // row
	        i = bindex[k];
	        // check row existed in A
	        if (wa[i] !== mark) {
	          // push index
	          cindex.push(i);
	        }
	        // update workspace
	        wb[i] = mark;
	        // check we need to process values
	        if (xb) {
	          xb[i] = bvalues[k];
	        }
	      }
	      // check we need to process values (non pattern matrix)
	      if (cvalues) {
	        // initialize first index in j
	        k = cptr[j];
	        // loop index in j
	        while (k < cindex.length) {
	          // row
	          i = cindex[k];
	          // marks
	          var wai = wa[i];
	          var wbi = wb[i];
	          // check Aij or Bij are nonzero
	          if (wai === mark || wbi === mark) {
	            // matrix values @ i,j
	            var va = wai === mark ? xa[i] : zero;
	            var vb = wbi === mark ? xb[i] : zero;
	            // Cij
	            var vc = cf(va, vb);
	            // check for zero
	            if (!eq(vc, zero)) {
	              // push value
	              cvalues.push(vc);
	              // increment pointer
	              k++;
	            } else {
	              // remove value @ i, do not increment pointer
	              cindex.splice(k, 1);
	            }
	          }
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return a.createSparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };
	});

	var name$L = 'matAlgo13xDD';
	var dependencies$K = ['typed'];
	var createMatAlgo13xDD = /* #__PURE__ */factory(name$L, dependencies$K, _ref => {
	  var {
	    typed
	  } = _ref;
	  /**
	   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).
	   * Callback function invoked MxN times.
	   *
	   * C(i,j,...z) = f(Aij..z, Bij..z)
	   *
	   * @param {Matrix}   a                 The DenseMatrix instance (A)
	   * @param {Matrix}   b                 The DenseMatrix instance (B)
	   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658
	   */
	  return function matAlgo13xDD(a, b, callback) {
	    // a arrays
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b arrays
	    var bdata = b._data;
	    var bsize = b._size;
	    var bdt = b._datatype;
	    // c arrays
	    var csize = [];

	    // validate dimensions
	    if (asize.length !== bsize.length) {
	      throw new DimensionError(asize.length, bsize.length);
	    }

	    // validate each one of the dimension sizes
	    for (var s = 0; s < asize.length; s++) {
	      // must match
	      if (asize[s] !== bsize[s]) {
	        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	      }
	      // update dimension in c
	      csize[s] = asize[s];
	    }

	    // datatype
	    var dt;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // populate cdata, iterate through dimensions
	    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : [];

	    // c matrix
	    return a.createDenseMatrix({
	      data: cdata,
	      size: csize,
	      datatype: dt
	    });
	  };

	  // recursive function
	  function _iterate(f, level, s, n, av, bv) {
	    // initialize array for this level
	    var cv = [];
	    // check we reach the last level
	    if (level === s.length - 1) {
	      // loop arrays in last level
	      for (var i = 0; i < n; i++) {
	        // invoke callback and store value
	        cv[i] = f(av[i], bv[i]);
	      }
	    } else {
	      // iterate current level
	      for (var j = 0; j < n; j++) {
	        // iterate next level
	        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
	      }
	    }
	    return cv;
	  }
	});

	var name$K = 'broadcast';
	var dependancies = ['concat'];
	var createBroadcast = /* #__PURE__ */factory(name$K, dependancies, _ref => {
	  var {
	    concat
	  } = _ref;
	  /**
	  * Broadcasts two matrices, and return both in an array
	  * It checks if it's possible with broadcasting rules
	  *
	  * @param {Matrix}   A      First Matrix
	  * @param {Matrix}   B      Second Matrix
	  *
	  * @return {Matrix[]}      [ broadcastedA, broadcastedB ]
	  */
	  return function (A, B) {
	    var N = Math.max(A._size.length, B._size.length); // max number of dims
	    if (A._size.length === B._size.length) {
	      if (A._size.every((dim, i) => dim === B._size[i])) {
	        // If matrices have the same size return them
	        return [A, B];
	      }
	    }
	    var sizeA = _padLeft(A._size, N, 0); // pad to the left to align dimensions to the right
	    var sizeB = _padLeft(B._size, N, 0); // pad to the left to align dimensions to the right

	    // calculate the max dimensions
	    var sizeMax = [];
	    for (var dim = 0; dim < N; dim++) {
	      sizeMax[dim] = Math.max(sizeA[dim], sizeB[dim]);
	    }

	    // check if the broadcasting rules applyes for both matrices
	    checkBroadcastingRules(sizeA, sizeMax);
	    checkBroadcastingRules(sizeB, sizeMax);

	    // reshape A or B if needed to make them ready for concat
	    var AA = A.clone();
	    var BB = B.clone();
	    if (AA._size.length < N) {
	      AA.reshape(_padLeft(AA._size, N, 1));
	    } else if (BB._size.length < N) {
	      BB.reshape(_padLeft(BB._size, N, 1));
	    }

	    // stretches the matrices on each dimension to make them the same size
	    for (var _dim = 0; _dim < N; _dim++) {
	      if (AA._size[_dim] < sizeMax[_dim]) {
	        AA = _stretch(AA, sizeMax[_dim], _dim);
	      }
	      if (BB._size[_dim] < sizeMax[_dim]) {
	        BB = _stretch(BB, sizeMax[_dim], _dim);
	      }
	    }

	    // return the array with the two broadcasted matrices
	    return [AA, BB];
	  };
	  function _padLeft(shape, N, filler) {
	    // pads an array of dimensions with numbers to the left, unitl the number of dimensions is N
	    return [...Array(N - shape.length).fill(filler), ...shape];
	  }
	  function _stretch(arrayToStretch, sizeToStretch, dimToStretch) {
	    // stretches a matrix up to a certain size in a certain dimension
	    return concat(...Array(sizeToStretch).fill(arrayToStretch), dimToStretch);
	  }
	});

	var name$J = 'matrixAlgorithmSuite';
	var dependencies$J = ['typed', 'matrix', 'concat'];
	var createMatrixAlgorithmSuite = /* #__PURE__ */factory(name$J, dependencies$J, _ref => {
	  var {
	    typed,
	    matrix,
	    concat
	  } = _ref;
	  var matAlgo13xDD = createMatAlgo13xDD({
	    typed
	  });
	  var matAlgo14xDs = createMatAlgo14xDs({
	    typed
	  });
	  var broadcast = createBroadcast({
	    concat
	  });

	  /**
	   * Return a signatures object with the usual boilerplate of
	   * matrix algorithms, based on a plain options object with the
	   * following properties:
	   *   elop: function -- the elementwise operation to use, defaults to self
	   *   SS: function -- the algorithm to apply for two sparse matrices
	   *   DS: function -- the algorithm to apply for a dense and a sparse matrix
	   *   SD: function -- algo for a sparse and a dense; defaults to SD flipped
	   *   Ss: function -- the algorithm to apply for a sparse matrix and scalar
	   *   sS: function -- algo for scalar and sparse; defaults to Ss flipped
	   *   scalar: string -- typed-function type for scalars, defaults to 'any'
	   *
	   * If Ss is not specified, no matrix-scalar signatures are generated.
	   *
	   * @param {object} options
	   * @return {Object<string, function>} signatures
	   */
	  return function matrixAlgorithmSuite(options) {
	    var elop = options.elop;
	    var SD = options.SD || options.DS;
	    var matrixSignatures;
	    if (elop) {
	      // First the dense ones
	      matrixSignatures = {
	        'DenseMatrix, DenseMatrix': (x, y) => matAlgo13xDD(...broadcast(x, y), elop),
	        'Array, Array': (x, y) => matAlgo13xDD(...broadcast(matrix(x), matrix(y)), elop).valueOf(),
	        'Array, DenseMatrix': (x, y) => matAlgo13xDD(...broadcast(matrix(x), y), elop),
	        'DenseMatrix, Array': (x, y) => matAlgo13xDD(...broadcast(x, matrix(y)), elop)
	      };
	      // Now incorporate sparse matrices
	      if (options.SS) {
	        matrixSignatures['SparseMatrix, SparseMatrix'] = (x, y) => options.SS(...broadcast(x, y), elop, false);
	      }
	      if (options.DS) {
	        matrixSignatures['DenseMatrix, SparseMatrix'] = (x, y) => options.DS(...broadcast(x, y), elop, false);
	        matrixSignatures['Array, SparseMatrix'] = (x, y) => options.DS(...broadcast(matrix(x), y), elop, false);
	      }
	      if (SD) {
	        matrixSignatures['SparseMatrix, DenseMatrix'] = (x, y) => SD(...broadcast(y, x), elop, true);
	        matrixSignatures['SparseMatrix, Array'] = (x, y) => SD(...broadcast(matrix(y), x), elop, true);
	      }
	    } else {
	      // No elop, use this
	      // First the dense ones
	      matrixSignatures = {
	        'DenseMatrix, DenseMatrix': typed.referToSelf(self => (x, y) => {
	          return matAlgo13xDD(...broadcast(x, y), self);
	        }),
	        'Array, Array': typed.referToSelf(self => (x, y) => {
	          return matAlgo13xDD(...broadcast(matrix(x), matrix(y)), self).valueOf();
	        }),
	        'Array, DenseMatrix': typed.referToSelf(self => (x, y) => {
	          return matAlgo13xDD(...broadcast(matrix(x), y), self);
	        }),
	        'DenseMatrix, Array': typed.referToSelf(self => (x, y) => {
	          return matAlgo13xDD(...broadcast(x, matrix(y)), self);
	        })
	      };
	      // Now incorporate sparse matrices
	      if (options.SS) {
	        matrixSignatures['SparseMatrix, SparseMatrix'] = typed.referToSelf(self => (x, y) => {
	          return options.SS(...broadcast(x, y), self, false);
	        });
	      }
	      if (options.DS) {
	        matrixSignatures['DenseMatrix, SparseMatrix'] = typed.referToSelf(self => (x, y) => {
	          return options.DS(...broadcast(x, y), self, false);
	        });
	        matrixSignatures['Array, SparseMatrix'] = typed.referToSelf(self => (x, y) => {
	          return options.DS(...broadcast(matrix(x), y), self, false);
	        });
	      }
	      if (SD) {
	        matrixSignatures['SparseMatrix, DenseMatrix'] = typed.referToSelf(self => (x, y) => {
	          return SD(...broadcast(y, x), self, true);
	        });
	        matrixSignatures['SparseMatrix, Array'] = typed.referToSelf(self => (x, y) => {
	          return SD(...broadcast(matrix(y), x), self, true);
	        });
	      }
	    }

	    // Now add the scalars
	    var scalar = options.scalar || 'any';
	    var Ds = options.Ds || options.Ss;
	    if (Ds) {
	      if (elop) {
	        matrixSignatures['DenseMatrix,' + scalar] = (x, y) => matAlgo14xDs(x, y, elop, false);
	        matrixSignatures[scalar + ', DenseMatrix'] = (x, y) => matAlgo14xDs(y, x, elop, true);
	        matrixSignatures['Array,' + scalar] = (x, y) => matAlgo14xDs(matrix(x), y, elop, false).valueOf();
	        matrixSignatures[scalar + ', Array'] = (x, y) => matAlgo14xDs(matrix(y), x, elop, true).valueOf();
	      } else {
	        matrixSignatures['DenseMatrix,' + scalar] = typed.referToSelf(self => (x, y) => {
	          return matAlgo14xDs(x, y, self, false);
	        });
	        matrixSignatures[scalar + ', DenseMatrix'] = typed.referToSelf(self => (x, y) => {
	          return matAlgo14xDs(y, x, self, true);
	        });
	        matrixSignatures['Array,' + scalar] = typed.referToSelf(self => (x, y) => {
	          return matAlgo14xDs(matrix(x), y, self, false).valueOf();
	        });
	        matrixSignatures[scalar + ', Array'] = typed.referToSelf(self => (x, y) => {
	          return matAlgo14xDs(matrix(y), x, self, true).valueOf();
	        });
	      }
	    }
	    var sS = options.sS !== undefined ? options.sS : options.Ss;
	    if (elop) {
	      if (options.Ss) {
	        matrixSignatures['SparseMatrix,' + scalar] = (x, y) => options.Ss(x, y, elop, false);
	      }
	      if (sS) {
	        matrixSignatures[scalar + ', SparseMatrix'] = (x, y) => sS(y, x, elop, true);
	      }
	    } else {
	      if (options.Ss) {
	        matrixSignatures['SparseMatrix,' + scalar] = typed.referToSelf(self => (x, y) => {
	          return options.Ss(x, y, self, false);
	        });
	      }
	      if (sS) {
	        matrixSignatures[scalar + ', SparseMatrix'] = typed.referToSelf(self => (x, y) => {
	          return sS(y, x, self, true);
	        });
	      }
	    }
	    // Also pull in the scalar signatures if the operator is a typed function
	    if (elop && elop.signatures) {
	      extend(matrixSignatures, elop.signatures);
	    }
	    return matrixSignatures;
	  };
	});

	var name$I = 'matAlgo01xDSid';
	var dependencies$I = ['typed'];
	var createMatAlgo01xDSid = /* #__PURE__ */factory(name$I, dependencies$I, _ref => {
	  var {
	    typed
	  } = _ref;
	  /**
	   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
	   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
	   *
	   *
	   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  Dij          ; otherwise
	   *
	   *
	   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
	   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
	   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
	   */
	  return function algorithm1(denseMatrix, sparseMatrix, callback, inverse) {
	    // dense matrix arrays
	    var adata = denseMatrix._data;
	    var asize = denseMatrix._size;
	    var adt = denseMatrix._datatype;
	    // sparse matrix arrays
	    var bvalues = sparseMatrix._values;
	    var bindex = sparseMatrix._index;
	    var bptr = sparseMatrix._ptr;
	    var bsize = sparseMatrix._size;
	    var bdt = sparseMatrix._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) {
	      throw new DimensionError(asize.length, bsize.length);
	    }

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    }

	    // sparse matrix cannot be a Pattern matrix
	    if (!bvalues) {
	      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
	    }

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // process data types
	    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined;
	    // callback function
	    var cf = dt ? typed.find(callback, [dt, dt]) : callback;

	    // vars
	    var i, j;

	    // result (DenseMatrix)
	    var cdata = [];
	    // initialize c
	    for (i = 0; i < rows; i++) {
	      cdata[i] = [];
	    }

	    // workspace
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // loop columns in b
	    for (j = 0; j < columns; j++) {
	      // column mark
	      var mark = j + 1;
	      // values in column j
	      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = bindex[k];
	        // update workspace
	        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
	        // mark i as updated
	        w[i] = mark;
	      }
	      // loop rows
	      for (i = 0; i < rows; i++) {
	        // check row is in workspace
	        if (w[i] === mark) {
	          // c[i][j] was already calculated
	          cdata[i][j] = x[i];
	        } else {
	          // item does not exist in S
	          cdata[i][j] = adata[i][j];
	        }
	      }
	    }

	    // return dense matrix
	    return denseMatrix.createDenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };
	});

	var name$H = 'matAlgo04xSidSid';
	var dependencies$H = ['typed', 'equalScalar'];
	var createMatAlgo04xSidSid = /* #__PURE__ */factory(name$H, dependencies$H, _ref => {
	  var {
	    typed,
	    equalScalar
	  } = _ref;
	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
	   * Callback function invoked MAX(NNZA, NNZB) times
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
	   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0 && B(i,j) === 0
	   *          └  B(i,j)       ; A(i,j) === 0
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  return function matAlgo04xSidSid(a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) {
	      throw new DimensionError(asize.length, bsize.length);
	    }

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    }

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = [];

	    // workspace
	    var xa = avalues && bvalues ? [] : undefined;
	    var xb = avalues && bvalues ? [] : undefined;
	    // marks indicating we have a value in x for a given column
	    var wa = [];
	    var wb = [];

	    // vars
	    var i, j, k, k0, k1;

	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // columns mark
	      var mark = j + 1;
	      // loop A(:,j)
	      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = aindex[k];
	        // update c
	        cindex.push(i);
	        // update workspace
	        wa[i] = mark;
	        // check we need to process values
	        if (xa) {
	          xa[i] = avalues[k];
	        }
	      }
	      // loop B(:,j)
	      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = bindex[k];
	        // check row exists in A
	        if (wa[i] === mark) {
	          // update record in xa @ i
	          if (xa) {
	            // invoke callback
	            var v = cf(xa[i], bvalues[k]);
	            // check for zero
	            if (!eq(v, zero)) {
	              // update workspace
	              xa[i] = v;
	            } else {
	              // remove mark (index will be removed later)
	              wa[i] = null;
	            }
	          }
	        } else {
	          // update c
	          cindex.push(i);
	          // update workspace
	          wb[i] = mark;
	          // check we need to process values
	          if (xb) {
	            xb[i] = bvalues[k];
	          }
	        }
	      }
	      // check we need to process values (non pattern matrix)
	      if (xa && xb) {
	        // initialize first index in j
	        k = cptr[j];
	        // loop index in j
	        while (k < cindex.length) {
	          // row
	          i = cindex[k];
	          // check workspace has value @ i
	          if (wa[i] === mark) {
	            // push value (Aij != 0 || (Aij != 0 && Bij != 0))
	            cvalues[k] = xa[i];
	            // increment pointer
	            k++;
	          } else if (wb[i] === mark) {
	            // push value (bij != 0)
	            cvalues[k] = xb[i];
	            // increment pointer
	            k++;
	          } else {
	            // remove index @ k
	            cindex.splice(k, 1);
	          }
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return a.createSparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };
	});

	var name$G = 'matAlgo10xSids';
	var dependencies$G = ['typed', 'DenseMatrix'];
	var createMatAlgo10xSids = /* #__PURE__ */factory(name$G, dependencies$G, _ref => {
	  var {
	    typed,
	    DenseMatrix
	  } = _ref;
	  /**
	   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
	   * Callback function invoked NZ times (number of nonzero items in S).
	   *
	   *
	   *          ┌  f(Sij, b)  ; S(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  b          ; otherwise
	   *
	   *
	   * @param {Matrix}   s                 The SparseMatrix instance (S)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
	   */
	  return function matAlgo10xSids(s, b, callback, inverse) {
	    // sparse matrix arrays
	    var avalues = s._values;
	    var aindex = s._index;
	    var aptr = s._ptr;
	    var asize = s._size;
	    var adt = s._datatype;

	    // sparse matrix cannot be a Pattern matrix
	    if (!avalues) {
	      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
	    }

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cdata = [];

	    // workspaces
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // columns mark
	      var mark = j + 1;
	      // values in j
	      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var r = aindex[k];
	        // update workspace
	        x[r] = avalues[k];
	        w[r] = mark;
	      }
	      // loop rows
	      for (var i = 0; i < rows; i++) {
	        // initialize C on first column
	        if (j === 0) {
	          // create row array
	          cdata[i] = [];
	        }
	        // check sparse matrix has a value @ i,j
	        if (w[i] === mark) {
	          // invoke callback, update C
	          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
	        } else {
	          // dense matrix value @ i, j
	          cdata[i][j] = b;
	        }
	      }
	    }

	    // return dense matrix
	    return new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };
	});

	var name$F = 'multiplyScalar';
	var dependencies$F = ['typed'];
	var createMultiplyScalar = /* #__PURE__ */factory(name$F, dependencies$F, _ref => {
	  var {
	    typed
	  } = _ref;
	  /**
	   * Multiply two scalar values, `x * y`.
	   * This function is meant for internal use: it is used by the public function
	   * `multiply`
	   *
	   * This function does not support collections (Array or Matrix).
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply
	   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply
	   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`
	   * @private
	   */
	  return typed('multiplyScalar', {
	    'number, number': multiplyNumber,
	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.mul(y);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.times(y);
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.mul(y);
	    },
	    'number | Fraction | BigNumber | Complex, Unit': (x, y) => y.multiply(x),
	    'Unit, number | Fraction | BigNumber | Complex | Unit': (x, y) => x.multiply(y)
	  });
	});

	var name$E = 'multiply';
	var dependencies$E = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'equalScalar', 'dot'];
	var createMultiply = /* #__PURE__ */factory(name$E, dependencies$E, _ref => {
	  var {
	    typed,
	    matrix,
	    addScalar,
	    multiplyScalar,
	    equalScalar,
	    dot
	  } = _ref;
	  var matAlgo11xS0s = createMatAlgo11xS0s({
	    typed,
	    equalScalar
	  });
	  var matAlgo14xDs = createMatAlgo14xDs({
	    typed
	  });
	  function _validateMatrixDimensions(size1, size2) {
	    // check left operand dimensions
	    switch (size1.length) {
	      case 1:
	        // check size2
	        switch (size2.length) {
	          case 1:
	            // Vector x Vector
	            if (size1[0] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');
	            }
	            break;
	          case 2:
	            // Vector x Matrix
	            if (size1[0] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');
	            }
	            break;
	          default:
	            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
	        }
	        break;
	      case 2:
	        // check size2
	        switch (size2.length) {
	          case 1:
	            // Matrix x Vector
	            if (size1[1] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');
	            }
	            break;
	          case 2:
	            // Matrix x Matrix
	            if (size1[1] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');
	            }
	            break;
	          default:
	            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
	        }
	        break;
	      default:
	        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');
	    }
	  }

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Dense Vector   (N)
	   * @param {Matrix} b            Dense Vector   (N)
	   *
	   * @return {number}             Scalar value
	   */
	  function _multiplyVectorVector(a, b, n) {
	    // check empty vector
	    if (n === 0) {
	      throw new Error('Cannot multiply two empty vectors');
	    }
	    return dot(a, b);
	  }

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Dense Vector   (M)
	   * @param {Matrix} b            Matrix         (MxN)
	   *
	   * @return {Matrix}             Dense Vector   (N)
	   */
	  function _multiplyVectorMatrix(a, b) {
	    // process storage
	    if (b.storage() !== 'dense') {
	      throw new Error('Support for SparseMatrix not implemented');
	    }
	    return _multiplyVectorDenseMatrix(a, b);
	  }

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Dense Vector   (M)
	   * @param {Matrix} b            Dense Matrix   (MxN)
	   *
	   * @return {Matrix}             Dense Vector   (N)
	   */
	  function _multiplyVectorDenseMatrix(a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b dense
	    var bdata = b._data;
	    var bsize = b._size;
	    var bdt = b._datatype;
	    // rows & columns
	    var alength = asize[0];
	    var bcolumns = bsize[1];

	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    }

	    // result
	    var c = [];

	    // loop matrix columns
	    for (var j = 0; j < bcolumns; j++) {
	      // sum (do not initialize it with zero)
	      var sum = mf(adata[0], bdata[0][j]);
	      // loop vector
	      for (var i = 1; i < alength; i++) {
	        // multiply & accumulate
	        sum = af(sum, mf(adata[i], bdata[i][j]));
	      }
	      c[j] = sum;
	    }

	    // return matrix
	    return a.createDenseMatrix({
	      data: c,
	      size: [bcolumns],
	      datatype: dt
	    });
	  }

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Matrix         (MxN)
	   * @param {Matrix} b            Dense Vector   (N)
	   *
	   * @return {Matrix}             Dense Vector   (M)
	   */
	  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {
	    'DenseMatrix, any': _multiplyDenseMatrixVector,
	    'SparseMatrix, any': _multiplySparseMatrixVector
	  });

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Matrix         (MxN)
	   * @param {Matrix} b            Matrix         (NxC)
	   *
	   * @return {Matrix}             Matrix         (MxC)
	   */
	  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {
	    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,
	    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,
	    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,
	    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix
	  });

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            DenseMatrix  (MxN)
	   * @param {Matrix} b            Dense Vector (N)
	   *
	   * @return {Matrix}             Dense Vector (M)
	   */
	  function _multiplyDenseMatrixVector(a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b dense
	    var bdata = b._data;
	    var bdt = b._datatype;
	    // rows & columns
	    var arows = asize[0];
	    var acolumns = asize[1];

	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    }

	    // result
	    var c = [];

	    // loop matrix a rows
	    for (var i = 0; i < arows; i++) {
	      // current row
	      var row = adata[i];
	      // sum (do not initialize it with zero)
	      var sum = mf(row[0], bdata[0]);
	      // loop matrix a columns
	      for (var j = 1; j < acolumns; j++) {
	        // multiply & accumulate
	        sum = af(sum, mf(row[j], bdata[j]));
	      }
	      c[i] = sum;
	    }

	    // return matrix
	    return a.createDenseMatrix({
	      data: c,
	      size: [arows],
	      datatype: dt
	    });
	  }

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            DenseMatrix    (MxN)
	   * @param {Matrix} b            DenseMatrix    (NxC)
	   *
	   * @return {Matrix}             DenseMatrix    (MxC)
	   */
	  function _multiplyDenseMatrixDenseMatrix(a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b dense
	    var bdata = b._data;
	    var bsize = b._size;
	    var bdt = b._datatype;
	    // rows & columns
	    var arows = asize[0];
	    var acolumns = asize[1];
	    var bcolumns = bsize[1];

	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    }

	    // result
	    var c = [];

	    // loop matrix a rows
	    for (var i = 0; i < arows; i++) {
	      // current row
	      var row = adata[i];
	      // initialize row array
	      c[i] = [];
	      // loop matrix b columns
	      for (var j = 0; j < bcolumns; j++) {
	        // sum (avoid initializing sum to zero)
	        var sum = mf(row[0], bdata[0][j]);
	        // loop matrix a columns
	        for (var x = 1; x < acolumns; x++) {
	          // multiply & accumulate
	          sum = af(sum, mf(row[x], bdata[x][j]));
	        }
	        c[i][j] = sum;
	      }
	    }

	    // return matrix
	    return a.createDenseMatrix({
	      data: c,
	      size: [arows, bcolumns],
	      datatype: dt
	    });
	  }

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            DenseMatrix    (MxN)
	   * @param {Matrix} b            SparseMatrix   (NxC)
	   *
	   * @return {Matrix}             SparseMatrix   (MxC)
	   */
	  function _multiplyDenseMatrixSparseMatrix(a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b sparse
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;
	    // validate b matrix
	    if (!bvalues) {
	      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');
	    }
	    // rows & columns
	    var arows = asize[0];
	    var bcolumns = bsize[1];

	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;
	    // equalScalar signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	    }

	    // result
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];
	    // c matrix
	    var c = b.createSparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, bcolumns],
	      datatype: dt
	    });

	    // loop b columns
	    for (var jb = 0; jb < bcolumns; jb++) {
	      // update ptr
	      cptr[jb] = cindex.length;
	      // indeces in column jb
	      var kb0 = bptr[jb];
	      var kb1 = bptr[jb + 1];
	      // do not process column jb if no data exists
	      if (kb1 > kb0) {
	        // last row mark processed
	        var last = 0;
	        // loop a rows
	        for (var i = 0; i < arows; i++) {
	          // column mark
	          var mark = i + 1;
	          // C[i, jb]
	          var cij = void 0;
	          // values in b column j
	          for (var kb = kb0; kb < kb1; kb++) {
	            // row
	            var ib = bindex[kb];
	            // check value has been initialized
	            if (last !== mark) {
	              // first value in column jb
	              cij = mf(adata[i][ib], bvalues[kb]);
	              // update mark
	              last = mark;
	            } else {
	              // accumulate value
	              cij = af(cij, mf(adata[i][ib], bvalues[kb]));
	            }
	          }
	          // check column has been processed and value != 0
	          if (last === mark && !eq(cij, zero)) {
	            // push row & value
	            cindex.push(i);
	            cvalues.push(cij);
	          }
	        }
	      }
	    }
	    // update ptr
	    cptr[bcolumns] = cindex.length;

	    // return sparse matrix
	    return c;
	  }

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            SparseMatrix    (MxN)
	   * @param {Matrix} b            Dense Vector (N)
	   *
	   * @return {Matrix}             SparseMatrix    (M, 1)
	   */
	  function _multiplySparseMatrixVector(a, b) {
	    // a sparse
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var adt = a._datatype;
	    // validate a matrix
	    if (!avalues) {
	      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
	    }
	    // b dense
	    var bdata = b._data;
	    var bdt = b._datatype;
	    // rows & columns
	    var arows = a._size[0];
	    var brows = b._size[0];
	    // result
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];

	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;
	    // equalScalar signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	    }

	    // workspace
	    var x = [];
	    // vector with marks indicating a value x[i] exists in a given column
	    var w = [];

	    // update ptr
	    cptr[0] = 0;
	    // rows in b
	    for (var ib = 0; ib < brows; ib++) {
	      // b[ib]
	      var vbi = bdata[ib];
	      // check b[ib] != 0, avoid loops
	      if (!eq(vbi, zero)) {
	        // A values & index in ib column
	        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	          // a row
	          var ia = aindex[ka];
	          // check value exists in current j
	          if (!w[ia]) {
	            // ia is new entry in j
	            w[ia] = true;
	            // add i to pattern of C
	            cindex.push(ia);
	            // x(ia) = A
	            x[ia] = mf(vbi, avalues[ka]);
	          } else {
	            // i exists in C already
	            x[ia] = af(x[ia], mf(vbi, avalues[ka]));
	          }
	        }
	      }
	    }
	    // copy values from x to column jb of c
	    for (var p1 = cindex.length, p = 0; p < p1; p++) {
	      // row
	      var ic = cindex[p];
	      // copy value
	      cvalues[p] = x[ic];
	    }
	    // update ptr
	    cptr[1] = cindex.length;

	    // return sparse matrix
	    return a.createSparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, 1],
	      datatype: dt
	    });
	  }

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            SparseMatrix      (MxN)
	   * @param {Matrix} b            DenseMatrix       (NxC)
	   *
	   * @return {Matrix}             SparseMatrix      (MxC)
	   */
	  function _multiplySparseMatrixDenseMatrix(a, b) {
	    // a sparse
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var adt = a._datatype;
	    // validate a matrix
	    if (!avalues) {
	      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
	    }
	    // b dense
	    var bdata = b._data;
	    var bdt = b._datatype;
	    // rows & columns
	    var arows = a._size[0];
	    var brows = b._size[0];
	    var bcolumns = b._size[1];

	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;
	    // equalScalar signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	    }

	    // result
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];
	    // c matrix
	    var c = a.createSparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, bcolumns],
	      datatype: dt
	    });

	    // workspace
	    var x = [];
	    // vector with marks indicating a value x[i] exists in a given column
	    var w = [];

	    // loop b columns
	    for (var jb = 0; jb < bcolumns; jb++) {
	      // update ptr
	      cptr[jb] = cindex.length;
	      // mark in workspace for current column
	      var mark = jb + 1;
	      // rows in jb
	      for (var ib = 0; ib < brows; ib++) {
	        // b[ib, jb]
	        var vbij = bdata[ib][jb];
	        // check b[ib, jb] != 0, avoid loops
	        if (!eq(vbij, zero)) {
	          // A values & index in ib column
	          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	            // a row
	            var ia = aindex[ka];
	            // check value exists in current j
	            if (w[ia] !== mark) {
	              // ia is new entry in j
	              w[ia] = mark;
	              // add i to pattern of C
	              cindex.push(ia);
	              // x(ia) = A
	              x[ia] = mf(vbij, avalues[ka]);
	            } else {
	              // i exists in C already
	              x[ia] = af(x[ia], mf(vbij, avalues[ka]));
	            }
	          }
	        }
	      }
	      // copy values from x to column jb of c
	      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
	        // row
	        var ic = cindex[p];
	        // copy value
	        cvalues[p] = x[ic];
	      }
	    }
	    // update ptr
	    cptr[bcolumns] = cindex.length;

	    // return sparse matrix
	    return c;
	  }

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            SparseMatrix      (MxN)
	   * @param {Matrix} b            SparseMatrix      (NxC)
	   *
	   * @return {Matrix}             SparseMatrix      (MxC)
	   */
	  function _multiplySparseMatrixSparseMatrix(a, b) {
	    // a sparse
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var adt = a._datatype;
	    // b sparse
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bdt = b._datatype;

	    // rows & columns
	    var arows = a._size[0];
	    var bcolumns = b._size[1];
	    // flag indicating both matrices (a & b) contain data
	    var values = avalues && bvalues;

	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    }

	    // result
	    var cvalues = values ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // c matrix
	    var c = a.createSparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, bcolumns],
	      datatype: dt
	    });

	    // workspace
	    var x = values ? [] : undefined;
	    // vector with marks indicating a value x[i] exists in a given column
	    var w = [];
	    // variables
	    var ka, ka0, ka1, kb, kb0, kb1, ia, ib;
	    // loop b columns
	    for (var jb = 0; jb < bcolumns; jb++) {
	      // update ptr
	      cptr[jb] = cindex.length;
	      // mark in workspace for current column
	      var mark = jb + 1;
	      // B values & index in j
	      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {
	        // b row
	        ib = bindex[kb];
	        // check we need to process values
	        if (values) {
	          // loop values in a[:,ib]
	          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	            // row
	            ia = aindex[ka];
	            // check value exists in current j
	            if (w[ia] !== mark) {
	              // ia is new entry in j
	              w[ia] = mark;
	              // add i to pattern of C
	              cindex.push(ia);
	              // x(ia) = A
	              x[ia] = mf(bvalues[kb], avalues[ka]);
	            } else {
	              // i exists in C already
	              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
	            }
	          }
	        } else {
	          // loop values in a[:,ib]
	          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	            // row
	            ia = aindex[ka];
	            // check value exists in current j
	            if (w[ia] !== mark) {
	              // ia is new entry in j
	              w[ia] = mark;
	              // add i to pattern of C
	              cindex.push(ia);
	            }
	          }
	        }
	      }
	      // check we need to process matrix values (pattern matrix)
	      if (values) {
	        // copy values from x to column jb of c
	        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
	          // row
	          var ic = cindex[p];
	          // copy value
	          cvalues[p] = x[ic];
	        }
	      }
	    }
	    // update ptr
	    cptr[bcolumns] = cindex.length;

	    // return sparse matrix
	    return c;
	  }

	  /**
	   * Multiply two or more values, `x * y`.
	   * For matrices, the matrix product is calculated.
	   *
	   * Syntax:
	   *
	   *    math.multiply(x, y)
	   *    math.multiply(x, y, z, ...)
	   *
	   * Examples:
	   *
	   *    math.multiply(4, 5.2)        // returns number 20.8
	   *    math.multiply(2, 3, 4)       // returns number 24
	   *
	   *    const a = math.complex(2, 3)
	   *    const b = math.complex(4, 1)
	   *    math.multiply(a, b)          // returns Complex 5 + 14i
	   *
	   *    const c = [[1, 2], [4, 3]]
	   *    const d = [[1, 2, 3], [3, -4, 7]]
	   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]
	   *
	   *    const e = math.unit('2.1 km')
	   *    math.multiply(3, e)          // returns Unit 6.3 km
	   *
	   * See also:
	   *
	   *    divide, prod, cross, dot
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`
	   */
	  return typed(name$E, multiplyScalar, {
	    // we extend the signatures of multiplyScalar with signatures dealing with matrices

	    'Array, Array': typed.referTo('Matrix, Matrix', selfMM => (x, y) => {
	      // check dimensions
	      _validateMatrixDimensions(arraySize(x), arraySize(y));

	      // use dense matrix implementation
	      var m = selfMM(matrix(x), matrix(y));
	      // return array or scalar
	      return isMatrix(m) ? m.valueOf() : m;
	    }),
	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // dimensions
	      var xsize = x.size();
	      var ysize = y.size();

	      // check dimensions
	      _validateMatrixDimensions(xsize, ysize);

	      // process dimensions
	      if (xsize.length === 1) {
	        // process y dimensions
	        if (ysize.length === 1) {
	          // Vector * Vector
	          return _multiplyVectorVector(x, y, xsize[0]);
	        }
	        // Vector * Matrix
	        return _multiplyVectorMatrix(x, y);
	      }
	      // process y dimensions
	      if (ysize.length === 1) {
	        // Matrix * Vector
	        return _multiplyMatrixVector(x, y);
	      }
	      // Matrix * Matrix
	      return _multiplyMatrixMatrix(x, y);
	    },
	    'Matrix, Array': typed.referTo('Matrix,Matrix', selfMM => (x, y) => selfMM(x, matrix(y))),
	    'Array, Matrix': typed.referToSelf(self => (x, y) => {
	      // use Matrix * Matrix implementation
	      return self(matrix(x, y.storage()), y);
	    }),
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return matAlgo11xS0s(x, y, multiplyScalar, false);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return matAlgo14xDs(x, y, multiplyScalar, false);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return matAlgo11xS0s(y, x, multiplyScalar, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return matAlgo14xDs(y, x, multiplyScalar, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return matAlgo14xDs(matrix(x), y, multiplyScalar, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return matAlgo14xDs(matrix(y), x, multiplyScalar, true).valueOf();
	    },
	    'any, any': multiplyScalar,
	    'any, any, ...any': typed.referToSelf(self => (x, y, rest) => {
	      var result = self(x, y);
	      for (var i = 0; i < rest.length; i++) {
	        result = self(result, rest[i]);
	      }
	      return result;
	    })
	  });
	});

	var name$D = 'sign';
	var dependencies$D = ['typed', 'BigNumber', 'Fraction', 'complex'];
	var createSign = /* #__PURE__ */factory(name$D, dependencies$D, _ref => {
	  var {
	    typed,
	    BigNumber: _BigNumber,
	    complex,
	    Fraction: _Fraction
	  } = _ref;
	  /**
	   * Compute the sign of a value. The sign of a value x is:
	   *
	   * -  1 when x > 0
	   * - -1 when x < 0
	   * -  0 when x == 0
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sign(x)
	   *
	   * Examples:
	   *
	   *    math.sign(3.5)               // returns 1
	   *    math.sign(-4.2)              // returns -1
	   *    math.sign(0)                 // returns 0
	   *
	   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]
	   *
	   * See also:
	   *
	   *    abs
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
	   *            The number for which to determine the sign
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
	   *            The sign of `x`
	   */
	  return typed(name$D, {
	    number: signNumber,
	    Complex: function Complex(x) {
	      return x.im === 0 ? complex(signNumber(x.re)) : x.sign();
	    },
	    BigNumber: function BigNumber(x) {
	      return new _BigNumber(x.cmp(0));
	    },
	    Fraction: function Fraction(x) {
	      return new _Fraction(x.s, 1);
	    },
	    // deep map collection, skip zeros since sign(0) = 0
	    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self)),
	    Unit: typed.referToSelf(self => x => {
	      if (!x._isDerived() && x.units[0].unit.offset !== 0) {
	        throw new TypeError('sign is ambiguous for units with offset');
	      }
	      return typed.find(self, x.valueType())(x.value);
	    })
	  });
	});

	var name$C = 'sqrt';
	var dependencies$C = ['config', 'typed', 'Complex'];
	var createSqrt = /* #__PURE__ */factory(name$C, dependencies$C, _ref => {
	  var {
	    config,
	    typed,
	    Complex
	  } = _ref;
	  /**
	   * Calculate the square root of a value.
	   *
	   * For matrices, if you want the matrix square root of a square matrix,
	   * use the `sqrtm` function. If you wish to apply `sqrt` elementwise to
	   * a matrix M, use `math.map(M, math.sqrt)`.
	   *
	   * Syntax:
	   *
	   *    math.sqrt(x)
	   *
	   * Examples:
	   *
	   *    math.sqrt(25)                // returns 5
	   *    math.square(5)               // returns 25
	   *    math.sqrt(-4)                // returns Complex 2i
	   *
	   * See also:
	   *
	   *    square, multiply, cube, cbrt, sqrtm
	   *
	   * @param {number | BigNumber | Complex | Unit} x
	   *            Value for which to calculate the square root.
	   * @return {number | BigNumber | Complex | Unit}
	   *            Returns the square root of `x`
	   */
	  return typed('sqrt', {
	    number: _sqrtNumber,
	    Complex: function Complex(x) {
	      return x.sqrt();
	    },
	    BigNumber: function BigNumber(x) {
	      if (!x.isNegative() || config.predictable) {
	        return x.sqrt();
	      } else {
	        // negative value -> downgrade to number to do complex value computation
	        return _sqrtNumber(x.toNumber());
	      }
	    },
	    Unit: function Unit(x) {
	      // Someday will work for complex units when they are implemented
	      return x.pow(0.5);
	    }
	  });

	  /**
	   * Calculate sqrt for a number
	   * @param {number} x
	   * @returns {number | Complex} Returns the square root of x
	   * @private
	   */
	  function _sqrtNumber(x) {
	    if (isNaN(x)) {
	      return NaN;
	    } else if (x >= 0 || config.predictable) {
	      return Math.sqrt(x);
	    } else {
	      return new Complex(x, 0).sqrt();
	    }
	  }
	});

	var name$B = 'subtract';
	var dependencies$B = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix', 'concat'];
	var createSubtract = /* #__PURE__ */factory(name$B, dependencies$B, _ref => {
	  var {
	    typed,
	    matrix,
	    equalScalar,
	    addScalar,
	    unaryMinus,
	    DenseMatrix,
	    concat
	  } = _ref;
	  // TODO: split function subtract in two: subtract and subtractScalar

	  var matAlgo01xDSid = createMatAlgo01xDSid({
	    typed
	  });
	  var matAlgo03xDSf = createMatAlgo03xDSf({
	    typed
	  });
	  var matAlgo05xSfSf = createMatAlgo05xSfSf({
	    typed,
	    equalScalar
	  });
	  var matAlgo10xSids = createMatAlgo10xSids({
	    typed,
	    DenseMatrix
	  });
	  var matAlgo12xSfs = createMatAlgo12xSfs({
	    typed,
	    DenseMatrix
	  });
	  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({
	    typed,
	    matrix,
	    concat
	  });

	  /**
	   * Subtract two values, `x - y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.subtract(x, y)
	   *
	   * Examples:
	   *
	   *    math.subtract(5.3, 2)        // returns number 3.3
	   *
	   *    const a = math.complex(2, 3)
	   *    const b = math.complex(4, 1)
	   *    math.subtract(a, b)          // returns Complex -2 + 2i
	   *
	   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]
	   *
	   *    const c = math.unit('2.1 km')
	   *    const d = math.unit('500m')
	   *    math.subtract(c, d)          // returns Unit 1.6 km
	   *
	   * See also:
	   *
	   *    add
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x
	   *            Initial value
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y
	   *            Value to subtract from `x`
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
	   *            Subtraction of `x` and `y`
	   */
	  return typed(name$B, {
	    'number, number': (x, y) => x - y,
	    'Complex, Complex': (x, y) => x.sub(y),
	    'BigNumber, BigNumber': (x, y) => x.minus(y),
	    'Fraction, Fraction': (x, y) => x.sub(y),
	    'Unit, Unit': typed.referToSelf(self => (x, y) => {
	      if (x.value === null) {
	        throw new Error('Parameter x contains a unit with undefined value');
	      }
	      if (y.value === null) {
	        throw new Error('Parameter y contains a unit with undefined value');
	      }
	      if (!x.equalBase(y)) {
	        throw new Error('Units do not match');
	      }
	      var res = x.clone();
	      res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);
	      res.fixPrefix = false;
	      return res;
	    })
	  }, matrixAlgorithmSuite({
	    SS: matAlgo05xSfSf,
	    DS: matAlgo01xDSid,
	    SD: matAlgo03xDSf,
	    Ss: matAlgo12xSfs,
	    sS: matAlgo10xSids
	  }));
	});

	var name$A = 'matAlgo07xSSf';
	var dependencies$A = ['typed', 'DenseMatrix'];
	var createMatAlgo07xSSf = /* #__PURE__ */factory(name$A, dependencies$A, _ref => {
	  var {
	    typed,
	    DenseMatrix
	  } = _ref;
	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).
	   * Callback function invoked MxN times.
	   *
	   * C(i,j) = f(Aij, Bij)
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  return function matAlgo07xSSf(a, b, callback) {
	    // sparse matrix arrays
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bsize = b._size;
	    var bdt = b._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) {
	      throw new DimensionError(asize.length, bsize.length);
	    }

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    }

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // vars
	    var i, j;

	    // result arrays
	    var cdata = [];
	    // initialize c
	    for (i = 0; i < rows; i++) {
	      cdata[i] = [];
	    }

	    // workspaces
	    var xa = [];
	    var xb = [];
	    // marks indicating we have a value in x for a given column
	    var wa = [];
	    var wb = [];

	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // columns mark
	      var mark = j + 1;
	      // scatter the values of A(:,j) into workspace
	      _scatter(a, j, wa, xa, mark);
	      // scatter the values of B(:,j) into workspace
	      _scatter(b, j, wb, xb, mark);
	      // loop rows
	      for (i = 0; i < rows; i++) {
	        // matrix values @ i,j
	        var va = wa[i] === mark ? xa[i] : zero;
	        var vb = wb[i] === mark ? xb[i] : zero;
	        // invoke callback
	        cdata[i][j] = cf(va, vb);
	      }
	    }

	    // return dense matrix
	    return new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };
	  function _scatter(m, j, w, x, mark) {
	    // a arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // loop values in column j
	    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {
	      // row
	      var i = index[k];
	      // update workspace
	      w[i] = mark;
	      x[i] = values[k];
	    }
	  }
	});

	var name$z = 'conj';
	var dependencies$z = ['typed'];
	var createConj = /* #__PURE__ */factory(name$z, dependencies$z, _ref => {
	  var {
	    typed
	  } = _ref;
	  /**
	   * Compute the complex conjugate of a complex value.
	   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.conj(x)
	   *
	   * Examples:
	   *
	   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i
	   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i
	   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i
	   *
	   * See also:
	   *
	   *    re, im, arg, abs
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            The complex conjugate of x
	   */
	  return typed(name$z, {
	    'number | BigNumber | Fraction': x => x,
	    Complex: x => x.conjugate(),
	    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))
	  });
	});

	var name$y = 'im';
	var dependencies$y = ['typed'];
	var createIm = /* #__PURE__ */factory(name$y, dependencies$y, _ref => {
	  var {
	    typed
	  } = _ref;
	  /**
	   * Get the imaginary part of a complex number.
	   * For a complex number `a + bi`, the function returns `b`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.im(x)
	   *
	   * Examples:
	   *
	   *    const a = math.complex(2, 3)
	   *    math.re(a)                     // returns number 2
	   *    math.im(a)                     // returns number 3
	   *
	   *    math.re(math.complex('-5.2i')) // returns number -5.2
	   *    math.re(math.complex(2.4))     // returns number 0
	   *
	   * See also:
	   *
	   *    re, conj, abs, arg
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Array | Matrix} The imaginary part of x
	   */
	  return typed(name$y, {
	    number: () => 0,
	    'BigNumber | Fraction': x => x.mul(0),
	    Complex: x => x.im,
	    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))
	  });
	});

	var name$x = 're';
	var dependencies$x = ['typed'];
	var createRe = /* #__PURE__ */factory(name$x, dependencies$x, _ref => {
	  var {
	    typed
	  } = _ref;
	  /**
	   * Get the real part of a complex number.
	   * For a complex number `a + bi`, the function returns `a`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.re(x)
	   *
	   * Examples:
	   *
	   *    const a = math.complex(2, 3)
	   *    math.re(a)                     // returns number 2
	   *    math.im(a)                     // returns number 3
	   *
	   *    math.re(math.complex('-5.2i')) // returns number 0
	   *    math.re(math.complex(2.4))     // returns number 2.4
	   *
	   * See also:
	   *
	   *    im, conj, abs, arg
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Array | Matrix} The real part of x
	   */
	  return typed(name$x, {
	    'number | BigNumber | Fraction': x => x,
	    Complex: x => x.re,
	    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))
	  });
	});

	var name$w = 'concat';
	var dependencies$w = ['typed', 'matrix', 'isInteger'];
	var createConcat = /* #__PURE__ */factory(name$w, dependencies$w, _ref => {
	  var {
	    typed,
	    matrix,
	    isInteger
	  } = _ref;
	  /**
	   * Concatenate two or more matrices.
	   *
	   * Syntax:
	   *
	   *     math.concat(A, B, C, ...)
	   *     math.concat(A, B, C, ..., dim)
	   *
	   * Where:
	   *
	   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
	   *   By default the last dimension of the matrices.
	   *
	   * Examples:
	   *
	   *    const A = [[1, 2], [5, 6]]
	   *    const B = [[3, 4], [7, 8]]
	   *
	   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]
	   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]
	   *    math.concat('hello', ' ', 'world') // returns 'hello world'
	   *
	   * See also:
	   *
	   *    size, squeeze, subset, transpose
	   *
	   * @param {... Array | Matrix} args     Two or more matrices
	   * @return {Array | Matrix} Concatenated matrix
	   */
	  return typed(name$w, {
	    // TODO: change signature to '...Array | Matrix, dim?' when supported
	    '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {
	      var i;
	      var len = args.length;
	      var dim = -1; // zero-based dimension
	      var prevDim;
	      var asMatrix = false;
	      var matrices = []; // contains multi dimensional arrays

	      for (i = 0; i < len; i++) {
	        var arg = args[i];

	        // test whether we need to return a Matrix (if not we return an Array)
	        if (isMatrix(arg)) {
	          asMatrix = true;
	        }
	        if (isNumber(arg) || isBigNumber(arg)) {
	          if (i !== len - 1) {
	            throw new Error('Dimension must be specified as last argument');
	          }

	          // last argument contains the dimension on which to concatenate
	          prevDim = dim;
	          dim = arg.valueOf(); // change BigNumber to number

	          if (!isInteger(dim)) {
	            throw new TypeError('Integer number expected for dimension');
	          }
	          if (dim < 0 || i > 0 && dim > prevDim) {
	            // TODO: would be more clear when throwing a DimensionError here
	            throw new IndexError(dim, prevDim + 1);
	          }
	        } else {
	          // this is a matrix or array
	          var m = clone$2(arg).valueOf();
	          var size = arraySize(m);
	          matrices[i] = m;
	          prevDim = dim;
	          dim = size.length - 1;

	          // verify whether each of the matrices has the same number of dimensions
	          if (i > 0 && dim !== prevDim) {
	            throw new DimensionError(prevDim + 1, dim + 1);
	          }
	        }
	      }
	      if (matrices.length === 0) {
	        throw new SyntaxError('At least one matrix expected');
	      }
	      var res = matrices.shift();
	      while (matrices.length) {
	        res = concat$1(res, matrices.shift(), dim);
	      }
	      return asMatrix ? matrix(res) : res;
	    },
	    '...string': function string(args) {
	      return args.join('');
	    }
	  });
	});

	var name$v = 'column';
	var dependencies$v = ['typed', 'Index', 'matrix', 'range'];
	var createColumn = /* #__PURE__ */factory(name$v, dependencies$v, _ref => {
	  var {
	    typed,
	    Index,
	    matrix,
	    range
	  } = _ref;
	  /**
	   * Return a column from a Matrix.
	   *
	   * Syntax:
	   *
	   *     math.column(value, index)
	   *
	   * Example:
	   *
	   *     // get a column
	   *     const d = [[1, 2], [3, 4]]
	   *     math.column(d, 1) // returns [[2], [4]]
	   *
	   * See also:
	   *
	   *     row
	   *
	   * @param {Array | Matrix } value   An array or matrix
	   * @param {number} column           The index of the column
	   * @return {Array | Matrix}         The retrieved column
	   */
	  return typed(name$v, {
	    'Matrix, number': _column,
	    'Array, number': function ArrayNumber(value, column) {
	      return _column(matrix(clone$2(value)), column).valueOf();
	    }
	  });

	  /**
	   * Retrieve a column of a matrix
	   * @param {Matrix } value  A matrix
	   * @param {number} column  The index of the column
	   * @return {Matrix}        The retrieved column
	   */
	  function _column(value, column) {
	    // check dimensions
	    if (value.size().length !== 2) {
	      throw new Error('Only two dimensional matrix is supported');
	    }
	    validateIndex(column, value.size()[1]);
	    var rowRange = range(0, value.size()[0]);
	    var index = new Index(rowRange, column);
	    var result = value.subset(index);
	    return isMatrix(result) ? result : matrix([[result]]);
	  }
	});

	var name$u = 'diag';
	var dependencies$u = ['typed', 'matrix', 'DenseMatrix', 'SparseMatrix'];
	var createDiag = /* #__PURE__ */factory(name$u, dependencies$u, _ref => {
	  var {
	    typed,
	    matrix,
	    DenseMatrix,
	    SparseMatrix
	  } = _ref;
	  /**
	   * Create a diagonal matrix or retrieve the diagonal of a matrix
	   *
	   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.
	   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.
	   * When k is positive, the values are placed on the super diagonal.
	   * When k is negative, the values are placed on the sub diagonal.
	   *
	   * Syntax:
	   *
	   *     math.diag(X)
	   *     math.diag(X, format)
	   *     math.diag(X, k)
	   *     math.diag(X, k, format)
	   *
	   * Examples:
	   *
	   *     // create a diagonal matrix
	   *     math.diag([1, 2, 3])      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]
	   *     math.diag([1, 2, 3], 1)   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]
	   *     math.diag([1, 2, 3], -1)  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]
	   *
	   *    // retrieve the diagonal from a matrix
	   *    const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
	   *    math.diag(a)   // returns [1, 5, 9]
	   *
	   * See also:
	   *
	   *     ones, zeros, identity
	   *
	   * @param {Matrix | Array} x          A two dimensional matrix or a vector
	   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled
	   *                                    in or retrieved.
	   * @param {string} [format='dense']   The matrix storage format.
	   *
	   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.
	   */
	  return typed(name$u, {
	    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments

	    Array: function Array(x) {
	      return _diag(x, 0, arraySize(x), null);
	    },
	    'Array, number': function ArrayNumber(x, k) {
	      return _diag(x, k, arraySize(x), null);
	    },
	    'Array, BigNumber': function ArrayBigNumber(x, k) {
	      return _diag(x, k.toNumber(), arraySize(x), null);
	    },
	    'Array, string': function ArrayString(x, format) {
	      return _diag(x, 0, arraySize(x), format);
	    },
	    'Array, number, string': function ArrayNumberString(x, k, format) {
	      return _diag(x, k, arraySize(x), format);
	    },
	    'Array, BigNumber, string': function ArrayBigNumberString(x, k, format) {
	      return _diag(x, k.toNumber(), arraySize(x), format);
	    },
	    Matrix: function Matrix(x) {
	      return _diag(x, 0, x.size(), x.storage());
	    },
	    'Matrix, number': function MatrixNumber(x, k) {
	      return _diag(x, k, x.size(), x.storage());
	    },
	    'Matrix, BigNumber': function MatrixBigNumber(x, k) {
	      return _diag(x, k.toNumber(), x.size(), x.storage());
	    },
	    'Matrix, string': function MatrixString(x, format) {
	      return _diag(x, 0, x.size(), format);
	    },
	    'Matrix, number, string': function MatrixNumberString(x, k, format) {
	      return _diag(x, k, x.size(), format);
	    },
	    'Matrix, BigNumber, string': function MatrixBigNumberString(x, k, format) {
	      return _diag(x, k.toNumber(), x.size(), format);
	    }
	  });

	  /**
	   * Creeate diagonal matrix from a vector or vice versa
	   * @param {Array | Matrix} x
	   * @param {number} k
	   * @param {string} format Storage format for matrix. If null,
	   *                          an Array is returned
	   * @returns {Array | Matrix}
	   * @private
	   */
	  function _diag(x, k, size, format) {
	    if (!isInteger$1(k)) {
	      throw new TypeError('Second parameter in function diag must be an integer');
	    }
	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;

	    // check dimensions
	    switch (size.length) {
	      case 1:
	        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);
	      case 2:
	        return _getDiagonal(x, k, format, size, kSub, kSuper);
	    }
	    throw new RangeError('Matrix for function diag must be 2 dimensional');
	  }
	  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {
	    // matrix size
	    var ms = [l + kSub, l + kSuper];
	    if (format && format !== 'sparse' && format !== 'dense') {
	      throw new TypeError("Unknown matrix type ".concat(format, "\""));
	    }

	    // create diagonal matrix
	    var m = format === 'sparse' ? SparseMatrix.diagonal(ms, x, k) : DenseMatrix.diagonal(ms, x, k);
	    // check we need to return a matrix
	    return format !== null ? m : m.valueOf();
	  }
	  function _getDiagonal(x, k, format, s, kSub, kSuper) {
	    // check x is a Matrix
	    if (isMatrix(x)) {
	      // get diagonal matrix
	      var dm = x.diagonal(k);
	      // check we need to return a matrix
	      if (format !== null) {
	        // check we need to change matrix format
	        if (format !== dm.storage()) {
	          return matrix(dm, format);
	        }
	        return dm;
	      }
	      return dm.valueOf();
	    }
	    // vector size
	    var n = Math.min(s[0] - kSub, s[1] - kSuper);
	    // diagonal values
	    var vector = [];
	    // loop diagonal
	    for (var i = 0; i < n; i++) {
	      vector[i] = x[i + kSub][i + kSuper];
	    }
	    // check we need to return a matrix
	    return format !== null ? matrix(vector) : vector;
	  }
	});

	var name$t = 'flatten';
	var dependencies$t = ['typed', 'matrix'];
	var createFlatten = /* #__PURE__ */factory(name$t, dependencies$t, _ref => {
	  var {
	    typed,
	    matrix
	  } = _ref;
	  /**
	   * Flatten a multidimensional matrix into a single dimensional matrix.
	   * A new matrix is returned, the original matrix is left untouched.
	   *
	   * Syntax:
	   *
	   *    math.flatten(x)
	   *
	   * Examples:
	   *
	   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]
	   *
	   * See also:
	   *
	   *    concat, resize, size, squeeze
	   *
	   * @param {Matrix | Array} x   Matrix to be flattened
	   * @return {Matrix | Array} Returns the flattened matrix
	   */
	  return typed(name$t, {
	    Array: function Array(x) {
	      return flatten$1(x);
	    },
	    Matrix: function Matrix(x) {
	      var flat = flatten$1(x.toArray());
	      // TODO: return the same matrix type as x (Dense or Sparse Matrix)
	      return matrix(flat);
	    }
	  });
	});

	var name$s = 'getMatrixDataType';
	var dependencies$s = ['typed'];
	var createGetMatrixDataType = /* #__PURE__ */factory(name$s, dependencies$s, _ref => {
	  var {
	    typed
	  } = _ref;
	  /**
	   * Find the data type of all elements in a matrix or array,
	   * for example 'number' if all items are a number and 'Complex' if all values
	   * are complex numbers.
	   * If a matrix contains more than one data type, it will return 'mixed'.
	   *
	   * Syntax:
	   *
	   *    math.getMatrixDataType(x)
	   *
	   * Examples:
	   *
	   *    const x = [ [1, 2, 3], [4, 5, 6] ]
	   *    const mixedX = [ [1, true], [2, 3] ]
	   *    const fractionX = [ [math.fraction(1, 3)], [math.fraction(1, 3)] ]
	   *    const unitX = [ [math.unit('5cm')], [math.unit('5cm')] ]
	   *    const bigNumberX = [ [math.bignumber(1)], [math.bignumber(0)] ]
	   *    const sparse = math.sparse(x)
	   *    const dense = math.matrix(x)
	   *    math.getMatrixDataType(x)   // returns 'number'
	   *    math.getMatrixDataType(sparse)   // returns 'number'
	   *    math.getMatrixDataType(dense)   // returns 'number'
	   *    math.getMatrixDataType(mixedX) // returns 'mixed'
	   *    math.getMatrixDataType(fractionX) // returns 'Fraction'
	   *    math.getMatrixDataType(unitX) // returns 'Unit'
	   *    math.getMatrixDataType(bigNumberX) // return 'BigNumber'
	   *
	   * See also:
	   *  SparseMatrix, DenseMatrix
	   *
	   * @param {...Matrix | Array} x   The Matrix with values.
	   *
	   * @return {string} A string representation of the matrix type
	   */
	  return typed(name$s, {
	    Array: function Array(x) {
	      return getArrayDataType(x, typeOf);
	    },
	    Matrix: function Matrix(x) {
	      return x.getDataType();
	    }
	  });
	});

	var name$r = 'identity';
	var dependencies$r = ['typed', 'config', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix'];
	var createIdentity = /* #__PURE__ */factory(name$r, dependencies$r, _ref => {
	  var {
	    typed,
	    config,
	    matrix,
	    BigNumber,
	    DenseMatrix,
	    SparseMatrix
	  } = _ref;
	  /**
	   * Create a 2-dimensional identity matrix with size m x n or n x n.
	   * The matrix has ones on the diagonal and zeros elsewhere.
	   *
	   * Syntax:
	   *
	   *    math.identity(n)
	   *    math.identity(n, format)
	   *    math.identity(m, n)
	   *    math.identity(m, n, format)
	   *    math.identity([m, n])
	   *    math.identity([m, n], format)
	   *
	   * Examples:
	   *
	   *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
	   *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]
	   *
	   *    const A = [[1, 2, 3], [4, 5, 6]]
	   *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]
	   *
	   * See also:
	   *
	   *    diag, ones, zeros, size, range
	   *
	   * @param {...number | Matrix | Array} size   The size for the matrix
	   * @param {string} [format]                   The Matrix storage format
	   *
	   * @return {Matrix | Array | number} A matrix with ones on the diagonal.
	   */
	  return typed(name$r, {
	    '': function _() {
	      return config.matrix === 'Matrix' ? matrix([]) : [];
	    },
	    string: function string(format) {
	      return matrix(format);
	    },
	    'number | BigNumber': function numberBigNumber(rows) {
	      return _identity(rows, rows, config.matrix === 'Matrix' ? 'dense' : undefined);
	    },
	    'number | BigNumber, string': function numberBigNumberString(rows, format) {
	      return _identity(rows, rows, format);
	    },
	    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {
	      return _identity(rows, cols, config.matrix === 'Matrix' ? 'dense' : undefined);
	    },
	    'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {
	      return _identity(rows, cols, format);
	    },
	    Array: function Array(size) {
	      return _identityVector(size);
	    },
	    'Array, string': function ArrayString(size, format) {
	      return _identityVector(size, format);
	    },
	    Matrix: function Matrix(size) {
	      return _identityVector(size.valueOf(), size.storage());
	    },
	    'Matrix, string': function MatrixString(size, format) {
	      return _identityVector(size.valueOf(), format);
	    }
	  });
	  function _identityVector(size, format) {
	    switch (size.length) {
	      case 0:
	        return format ? matrix(format) : [];
	      case 1:
	        return _identity(size[0], size[0], format);
	      case 2:
	        return _identity(size[0], size[1], format);
	      default:
	        throw new Error('Vector containing two values expected');
	    }
	  }

	  /**
	   * Create an identity matrix
	   * @param {number | BigNumber} rows
	   * @param {number | BigNumber} cols
	   * @param {string} [format]
	   * @returns {Matrix}
	   * @private
	   */
	  function _identity(rows, cols, format) {
	    // BigNumber constructor with the right precision
	    var Big = isBigNumber(rows) || isBigNumber(cols) ? BigNumber : null;
	    if (isBigNumber(rows)) rows = rows.toNumber();
	    if (isBigNumber(cols)) cols = cols.toNumber();
	    if (!isInteger$1(rows) || rows < 1) {
	      throw new Error('Parameters in function identity must be positive integers');
	    }
	    if (!isInteger$1(cols) || cols < 1) {
	      throw new Error('Parameters in function identity must be positive integers');
	    }
	    var one = Big ? new BigNumber(1) : 1;
	    var defaultValue = Big ? new Big(0) : 0;
	    var size = [rows, cols];

	    // check we need to return a matrix
	    if (format) {
	      // create diagonal matrix (use optimized implementation for storage format)
	      if (format === 'sparse') {
	        return SparseMatrix.diagonal(size, one, 0, defaultValue);
	      }
	      if (format === 'dense') {
	        return DenseMatrix.diagonal(size, one, 0, defaultValue);
	      }
	      throw new TypeError("Unknown matrix type \"".concat(format, "\""));
	    }

	    // create and resize array
	    var res = resize([], size, defaultValue);
	    // fill in ones on the diagonal
	    var minimum = rows < cols ? rows : cols;
	    // fill diagonal
	    for (var d = 0; d < minimum; d++) {
	      res[d][d] = one;
	    }
	    return res;
	  }
	});

	function noBignumber() {
	  throw new Error('No "bignumber" implementation available');
	}
	function noFraction() {
	  throw new Error('No "fraction" implementation available');
	}
	function noMatrix() {
	  throw new Error('No "matrix" implementation available');
	}

	var name$q = 'range';
	var dependencies$q = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq', 'add', 'isPositive'];
	var createRange = /* #__PURE__ */factory(name$q, dependencies$q, _ref => {
	  var {
	    typed,
	    config,
	    matrix,
	    bignumber,
	    smaller,
	    smallerEq,
	    larger,
	    largerEq,
	    add,
	    isPositive
	  } = _ref;
	  /**
	   * Create an array from a range.
	   * By default, the range end is excluded. This can be customized by providing
	   * an extra parameter `includeEnd`.
	   *
	   * Syntax:
	   *
	   *     math.range(str [, includeEnd])               // Create a range from a string,
	   *                                                  // where the string contains the
	   *                                                  // start, optional step, and end,
	   *                                                  // separated by a colon.
	   *     math.range(start, end [, includeEnd])        // Create a range with start and
	   *                                                  // end and a step size of 1.
	   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,
	   *                                                  // and end.
	   *
	   * Where:
	   *
	   * - `str: string`
	   *   A string 'start:end' or 'start:step:end'
	   * - `start: {number | BigNumber | Unit}`
	   *   Start of the range
	   * - `end: number | BigNumber | Unit`
	   *   End of the range, excluded by default, included when parameter includeEnd=true
	   * - `step: number | BigNumber | Unit`
	   *   Step size. Default value is 1.
	   * - `includeEnd: boolean`
	   *   Option to specify whether to include the end or not. False by default.
	   *
	   * Examples:
	   *
	   *     math.range(2, 6)        // [2, 3, 4, 5]
	   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]
	   *     math.range('2:1:6')     // [2, 3, 4, 5]
	   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]
	   *     math.range(math.unit(2, 'm'), math.unit(-3, 'm'), math.unit(-1, 'm')) // [2 m, 1 m, 0 m , -1 m, -2 m]
	   *
	   * See also:
	   *
	   *     ones, zeros, size, subset
	   *
	   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.
	   * @return {Array | Matrix} range
	   */
	  return typed(name$q, {
	    // TODO: simplify signatures when typed-function supports default values and optional arguments

	    // TODO: a number or boolean should not be converted to string here
	    string: _strRange,
	    'string, boolean': _strRange,
	    'number, number': function numberNumber(start, end) {
	      return _out(_range(start, end, 1, false));
	    },
	    'number, number, number': function numberNumberNumber(start, end, step) {
	      return _out(_range(start, end, step, false));
	    },
	    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {
	      return _out(_range(start, end, 1, includeEnd));
	    },
	    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {
	      return _out(_range(start, end, step, includeEnd));
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {
	      var BigNumber = start.constructor;
	      return _out(_range(start, end, new BigNumber(1), false));
	    },
	    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {
	      return _out(_range(start, end, step, false));
	    },
	    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {
	      var BigNumber = start.constructor;
	      return _out(_range(start, end, new BigNumber(1), includeEnd));
	    },
	    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {
	      return _out(_range(start, end, step, includeEnd));
	    },
	    'Unit, Unit, Unit': function UnitUnitUnit(start, end, step) {
	      return _out(_range(start, end, step, false));
	    },
	    'Unit, Unit, Unit, boolean': function UnitUnitUnitBoolean(start, end, step, includeEnd) {
	      return _out(_range(start, end, step, includeEnd));
	    }
	  });
	  function _out(arr) {
	    if (config.matrix === 'Matrix') {
	      return matrix ? matrix(arr) : noMatrix();
	    }
	    return arr;
	  }
	  function _strRange(str, includeEnd) {
	    var r = _parse(str);
	    if (!r) {
	      throw new SyntaxError('String "' + str + '" is no valid range');
	    }
	    if (config.number === 'BigNumber') {
	      if (bignumber === undefined) {
	        noBignumber();
	      }
	      return _out(_range(bignumber(r.start), bignumber(r.end), bignumber(r.step)));
	    } else {
	      return _out(_range(r.start, r.end, r.step, includeEnd));
	    }
	  }

	  /**
	   * Create a range with numbers or BigNumbers
	   * @param {number | BigNumber | Unit} start
	   * @param {number | BigNumber | Unit} end
	   * @param {number | BigNumber | Unit} step
	   * @param {boolean} includeEnd
	   * @returns {Array} range
	   * @private
	   */
	  function _range(start, end, step, includeEnd) {
	    var array = [];
	    var ongoing = isPositive(step) ? includeEnd ? smallerEq : smaller : includeEnd ? largerEq : larger;
	    var x = start;
	    while (ongoing(x, end)) {
	      array.push(x);
	      x = add(x, step);
	    }
	    return array;
	  }

	  /**
	   * Parse a string into a range,
	   * The string contains the start, optional step, and end, separated by a colon.
	   * If the string does not contain a valid range, null is returned.
	   * For example str='0:2:11'.
	   * @param {string} str
	   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step
	   * @private
	   */
	  function _parse(str) {
	    var args = str.split(':');

	    // number
	    var nums = args.map(function (arg) {
	      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string
	      return Number(arg);
	    });
	    var invalid = nums.some(function (num) {
	      return isNaN(num);
	    });
	    if (invalid) {
	      return null;
	    }
	    switch (nums.length) {
	      case 2:
	        return {
	          start: nums[0],
	          end: nums[1],
	          step: 1
	        };
	      case 3:
	        return {
	          start: nums[0],
	          end: nums[2],
	          step: nums[1]
	        };
	      default:
	        return null;
	    }
	  }
	});

	var name$p = 'size';
	var dependencies$p = ['typed', 'config', '?matrix'];
	var createSize = /* #__PURE__ */factory(name$p, dependencies$p, _ref => {
	  var {
	    typed,
	    config,
	    matrix
	  } = _ref;
	  /**
	   * Calculate the size of a matrix or scalar.
	   *
	   * Syntax:
	   *
	   *     math.size(x)
	   *
	   * Examples:
	   *
	   *     math.size(2.3)                  // returns []
	   *     math.size('hello world')        // returns [11]
	   *
	   *     const A = [[1, 2, 3], [4, 5, 6]]
	   *     math.size(A)                    // returns [2, 3]
	   *     math.size(math.range(1,6))      // returns [5]
	   *
	   * See also:
	   *
	   *     count, resize, squeeze, subset
	   *
	   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix
	   * @return {Array | Matrix} A vector with size of `x`.
	   */
	  return typed(name$p, {
	    Matrix: function Matrix(x) {
	      return x.create(x.size());
	    },
	    Array: arraySize,
	    string: function string(x) {
	      return config.matrix === 'Array' ? [x.length] : matrix([x.length]);
	    },
	    'number | Complex | BigNumber | Unit | boolean | null': function numberComplexBigNumberUnitBooleanNull(x) {
	      // scalar
	      return config.matrix === 'Array' ? [] : matrix ? matrix([]) : noMatrix();
	    }
	  });
	});

	var name$o = 'transpose';
	var dependencies$o = ['typed', 'matrix'];
	var createTranspose = /* #__PURE__ */factory(name$o, dependencies$o, _ref => {
	  var {
	    typed,
	    matrix
	  } = _ref;
	  /**
	   * Transpose a matrix. All values of the matrix are reflected over its
	   * main diagonal. Only applicable to two dimensional matrices containing
	   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional
	   * vectors and scalars return the input unchanged.
	   *
	   * Syntax:
	   *
	   *     math.transpose(x)
	   *
	   * Examples:
	   *
	   *     const A = [[1, 2, 3], [4, 5, 6]]
	   *     math.transpose(A)               // returns [[1, 4], [2, 5], [3, 6]]
	   *
	   * See also:
	   *
	   *     diag, inv, subset, squeeze
	   *
	   * @param {Array | Matrix} x  Matrix to be transposed
	   * @return {Array | Matrix}   The transposed matrix
	   */
	  return typed(name$o, {
	    Array: x => transposeMatrix(matrix(x)).valueOf(),
	    Matrix: transposeMatrix,
	    any: clone$2 // scalars
	  });

	  function transposeMatrix(x) {
	    // matrix size
	    var size = x.size();

	    // result
	    var c;

	    // process dimensions
	    switch (size.length) {
	      case 1:
	        // vector
	        c = x.clone();
	        break;
	      case 2:
	        {
	          // rows and columns
	          var rows = size[0];
	          var columns = size[1];

	          // check columns
	          if (columns === 0) {
	            // throw exception
	            throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format(size) + ')');
	          }

	          // process storage format
	          switch (x.storage()) {
	            case 'dense':
	              c = _denseTranspose(x, rows, columns);
	              break;
	            case 'sparse':
	              c = _sparseTranspose(x, rows, columns);
	              break;
	          }
	        }
	        break;
	      default:
	        // multi dimensional
	        throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format(size) + ')');
	    }
	    return c;
	  }
	  function _denseTranspose(m, rows, columns) {
	    // matrix array
	    var data = m._data;
	    // transposed matrix data
	    var transposed = [];
	    var transposedRow;
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // initialize row
	      transposedRow = transposed[j] = [];
	      // loop rows
	      for (var i = 0; i < rows; i++) {
	        // set data
	        transposedRow[i] = clone$2(data[i][j]);
	      }
	    }
	    // return matrix
	    return m.createDenseMatrix({
	      data: transposed,
	      size: [columns, rows],
	      datatype: m._datatype
	    });
	  }
	  function _sparseTranspose(m, rows, columns) {
	    // matrix arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // result matrices
	    var cvalues = values ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // row counts
	    var w = [];
	    for (var x = 0; x < rows; x++) {
	      w[x] = 0;
	    }
	    // vars
	    var p, l, j;
	    // loop values in matrix
	    for (p = 0, l = index.length; p < l; p++) {
	      // number of values in row
	      w[index[p]]++;
	    }
	    // cumulative sum
	    var sum = 0;
	    // initialize cptr with the cummulative sum of row counts
	    for (var i = 0; i < rows; i++) {
	      // update cptr
	      cptr.push(sum);
	      // update sum
	      sum += w[i];
	      // update w
	      w[i] = cptr[i];
	    }
	    // update cptr
	    cptr.push(sum);
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // values & index in column
	      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {
	        // C values & index
	        var q = w[index[k]]++;
	        // C[j, i] = A[i, j]
	        cindex[q] = j;
	        // check we need to process values (pattern matrix)
	        if (values) {
	          cvalues[q] = clone$2(values[k]);
	        }
	      }
	    }
	    // return matrix
	    return m.createSparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [columns, rows],
	      datatype: m._datatype
	    });
	  }
	});

	var name$n = 'ctranspose';
	var dependencies$n = ['typed', 'transpose', 'conj'];
	var createCtranspose = /* #__PURE__ */factory(name$n, dependencies$n, _ref => {
	  var {
	    typed,
	    transpose,
	    conj
	  } = _ref;
	  /**
	   * Transpose and complex conjugate a matrix. All values of the matrix are
	   * reflected over its main diagonal and then the complex conjugate is
	   * taken. This is equivalent to complex conjugation for scalars and
	   * vectors.
	   *
	   * Syntax:
	   *
	   *     math.ctranspose(x)
	   *
	   * Examples:
	   *
	   *     const A = [[1, 2, 3], [4, 5, math.complex(6,7)]]
	   *     math.ctranspose(A)               // returns [[1, 4], [2, 5], [3, {re:6,im:7}]]
	   *
	   * See also:
	   *
	   *     transpose, diag, inv, subset, squeeze
	   *
	   * @param {Array | Matrix} x  Matrix to be ctransposed
	   * @return {Array | Matrix}   The ctransposed matrix
	   */
	  return typed(name$n, {
	    any: function any(x) {
	      return conj(transpose(x));
	    }
	  });
	});

	var name$m = 'zeros';
	var dependencies$m = ['typed', 'config', 'matrix', 'BigNumber'];
	var createZeros = /* #__PURE__ */factory(name$m, dependencies$m, _ref => {
	  var {
	    typed,
	    config,
	    matrix,
	    BigNumber
	  } = _ref;
	  /**
	   * Create a matrix filled with zeros. The created matrix can have one or
	   * multiple dimensions.
	   *
	   * Syntax:
	   *
	   *    math.zeros(m)
	   *    math.zeros(m, format)
	   *    math.zeros(m, n)
	   *    math.zeros(m, n, format)
	   *    math.zeros([m, n])
	   *    math.zeros([m, n], format)
	   *
	   * Examples:
	   *
	   *    math.zeros()                   // returns []
	   *    math.zeros(3)                  // returns [0, 0, 0]
	   *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]
	   *    math.zeros(3, 'dense')         // returns [0, 0, 0]
	   *
	   *    const A = [[1, 2, 3], [4, 5, 6]]
	   *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]
	   *
	   * See also:
	   *
	   *    ones, identity, size, range
	   *
	   * @param {...(number|BigNumber) | Array} size    The size of each dimension of the matrix
	   * @param {string} [format]           The Matrix storage format
	   *
	   * @return {Array | Matrix}           A matrix filled with zeros
	   */
	  return typed(name$m, {
	    '': function _() {
	      return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');
	    },
	    // math.zeros(m, n, p, ..., format)
	    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
	    '...number | BigNumber | string': function numberBigNumberString(size) {
	      var last = size[size.length - 1];
	      if (typeof last === 'string') {
	        var format = size.pop();
	        return _zeros(size, format);
	      } else if (config.matrix === 'Array') {
	        return _zeros(size);
	      } else {
	        return _zeros(size, 'default');
	      }
	    },
	    Array: _zeros,
	    Matrix: function Matrix(size) {
	      var format = size.storage();
	      return _zeros(size.valueOf(), format);
	    },
	    'Array | Matrix, string': function ArrayMatrixString(size, format) {
	      return _zeros(size.valueOf(), format);
	    }
	  });

	  /**
	   * Create an Array or Matrix with zeros
	   * @param {Array} size
	   * @param {string} [format='default']
	   * @return {Array | Matrix}
	   * @private
	   */
	  function _zeros(size, format) {
	    var hasBigNumbers = _normalize(size);
	    var defaultValue = hasBigNumbers ? new BigNumber(0) : 0;
	    _validate(size);
	    if (format) {
	      // return a matrix
	      var m = matrix(format);
	      if (size.length > 0) {
	        return m.resize(size, defaultValue);
	      }
	      return m;
	    } else {
	      // return an Array
	      var arr = [];
	      if (size.length > 0) {
	        return resize(arr, size, defaultValue);
	      }
	      return arr;
	    }
	  }

	  // replace BigNumbers with numbers, returns true if size contained BigNumbers
	  function _normalize(size) {
	    var hasBigNumbers = false;
	    size.forEach(function (value, index, arr) {
	      if (isBigNumber(value)) {
	        hasBigNumbers = true;
	        arr[index] = value.toNumber();
	      }
	    });
	    return hasBigNumbers;
	  }

	  // validate arguments
	  function _validate(size) {
	    size.forEach(function (value) {
	      if (typeof value !== 'number' || !isInteger$1(value) || value < 0) {
	        throw new Error('Parameters in function zeros must be positive integers');
	      }
	    });
	  }
	});

	// TODO: zeros contains almost the same code as ones. Reuse this?

	var name$l = 'numeric';
	var dependencies$l = ['number', '?bignumber', '?fraction'];
	var createNumeric = /* #__PURE__ */factory(name$l, dependencies$l, _ref => {
	  var {
	    number: _number,
	    bignumber,
	    fraction
	  } = _ref;
	  var validInputTypes = {
	    string: true,
	    number: true,
	    BigNumber: true,
	    Fraction: true
	  };

	  // Load the conversion functions for each output type
	  var validOutputTypes = {
	    number: x => _number(x),
	    BigNumber: bignumber ? x => bignumber(x) : noBignumber,
	    Fraction: fraction ? x => fraction(x) : noFraction
	  };

	  /**
	   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.
	   *
	   * Syntax:
	   *
	   *    math.numeric(x)
	   *
	   * Examples:
	   *
	   *    math.numeric('4')                           // returns 4
	   *    math.numeric('4', 'number')                 // returns 4
	   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4
	   *    math.numeric('4', 'Fraction')               // returns Fraction 4
	   *    math.numeric(4, 'Fraction')                 // returns Fraction 4
	   *    math.numeric(math.fraction(2, 5), 'number') // returns 0.4
	   *
	   * See also:
	   *
	   *    number, fraction, bignumber, string, format
	   *
	   * @param {string | number | BigNumber | Fraction } value
	   *              A numeric value or a string containing a numeric value
	   * @param {string} outputType
	   *              Desired numeric output type.
	   *              Available values: 'number', 'BigNumber', or 'Fraction'
	   * @return {number | BigNumber | Fraction}
	   *              Returns an instance of the numeric in the requested type
	   */
	  return function numeric(value) {
	    var outputType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'number';
	    var check = arguments.length > 2 ? arguments[2] : undefined;
	    if (check !== undefined) {
	      throw new SyntaxError('numeric() takes one or two arguments');
	    }
	    var inputType = typeOf(value);
	    if (!(inputType in validInputTypes)) {
	      throw new TypeError('Cannot convert ' + value + ' of type "' + inputType + '"; valid input types are ' + Object.keys(validInputTypes).join(', '));
	    }
	    if (!(outputType in validOutputTypes)) {
	      throw new TypeError('Cannot convert ' + value + ' to type "' + outputType + '"; valid output types are ' + Object.keys(validOutputTypes).join(', '));
	    }
	    if (outputType === inputType) {
	      return value;
	    } else {
	      return validOutputTypes[outputType](value);
	    }
	  };
	});

	var name$k = 'divideScalar';
	var dependencies$k = ['typed', 'numeric'];
	var createDivideScalar = /* #__PURE__ */factory(name$k, dependencies$k, _ref => {
	  var {
	    typed,
	    numeric
	  } = _ref;
	  /**
	   * Divide two scalar values, `x / y`.
	   * This function is meant for internal use: it is used by the public functions
	   * `divide` and `inv`.
	   *
	   * This function does not support collections (Array or Matrix).
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator
	   * @param  {number | BigNumber | Fraction | Complex} y          Denominator
	   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`
	   * @private
	   */
	  return typed(name$k, {
	    'number, number': function numberNumber(x, y) {
	      return x / y;
	    },
	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.div(y);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.div(y);
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.div(y);
	    },
	    'Unit, number | Complex | Fraction | BigNumber | Unit': (x, y) => x.divide(y),
	    'number | Fraction | Complex | BigNumber, Unit': (x, y) => y.divideInto(x)
	  });
	});

	var name$j = 'pow';
	var dependencies$j = ['typed', 'config', 'identity', 'multiply', 'matrix', 'inv', 'fraction', 'number', 'Complex'];
	var createPow = /* #__PURE__ */factory(name$j, dependencies$j, _ref => {
	  var {
	    typed,
	    config,
	    identity,
	    multiply,
	    matrix,
	    inv,
	    number,
	    fraction,
	    Complex
	  } = _ref;
	  /**
	   * Calculates the power of x to y, `x ^ y`.
	   *
	   * Matrix exponentiation is supported for square matrices `x` and integers `y`:
	   * when `y` is nonnegative, `x` may be any square matrix; and when `y` is
	   * negative, `x` must be invertible, and then this function returns
	   * inv(x)^(-y).
	   *
	   * For cubic roots of negative numbers, the function returns the principal
	   * root by default. In order to let the function return the real root,
	   * math.js can be configured with `math.config({predictable: true})`.
	   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.
	   *
	   * Syntax:
	   *
	   *    math.pow(x, y)
	   *
	   * Examples:
	   *
	   *    math.pow(2, 3)               // returns number 8
	   *
	   *    const a = math.complex(2, 3)
	   *    math.pow(a, 2)                // returns Complex -5 + 12i
	   *
	   *    const b = [[1, 2], [4, 3]]
	   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]
	   *
	   *    const c = [[1, 2], [4, 3]]
	   *    math.pow(c, -1)               // returns Array [[-0.6, 0.4], [0.8, -0.2]]
	   *
	   * See also:
	   *
	   *    multiply, sqrt, cbrt, nthRoot
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
	   * @param  {number | BigNumber | Complex} y                          The exponent
	   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`
	   */
	  return typed(name$j, {
	    'number, number': _pow,
	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.pow(y);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      if (y.isInteger() || x >= 0 || config.predictable) {
	        return x.pow(y);
	      } else {
	        return new Complex(x.toNumber(), 0).pow(y.toNumber(), 0);
	      }
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      var result = x.pow(y);
	      if (result != null) {
	        return result;
	      }
	      if (config.predictable) {
	        throw new Error('Result of pow is non-rational and cannot be expressed as a fraction');
	      } else {
	        return _pow(x.valueOf(), y.valueOf());
	      }
	    },
	    'Array, number': _powArray,
	    'Array, BigNumber': function ArrayBigNumber(x, y) {
	      return _powArray(x, y.toNumber());
	    },
	    'Matrix, number': _powMatrix,
	    'Matrix, BigNumber': function MatrixBigNumber(x, y) {
	      return _powMatrix(x, y.toNumber());
	    },
	    'Unit, number | BigNumber': function UnitNumberBigNumber(x, y) {
	      return x.pow(y);
	    }
	  });

	  /**
	   * Calculates the power of x to y, x^y, for two numbers.
	   * @param {number} x
	   * @param {number} y
	   * @return {number | Complex} res
	   * @private
	   */
	  function _pow(x, y) {
	    // Alternatively could define a 'realmode' config option or something, but
	    // 'predictable' will work for now
	    if (config.predictable && !isInteger$1(y) && x < 0) {
	      // Check to see if y can be represented as a fraction
	      try {
	        var yFrac = fraction(y);
	        var yNum = number(yFrac);
	        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {
	          if (yFrac.d % 2 === 1) {
	            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);
	          }
	        }
	      } catch (ex) {
	        // fraction() throws an error if y is Infinity, etc.
	      }

	      // Unable to express y as a fraction, so continue on
	    }

	    // **for predictable mode** x^Infinity === NaN if x < -1
	    // N.B. this behavour is different from `Math.pow` which gives
	    // (-2)^Infinity === Infinity
	    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {
	      return NaN;
	    }
	    if (isInteger$1(y) || x >= 0 || config.predictable) {
	      return powNumber(x, y);
	    } else {
	      // TODO: the following infinity checks are duplicated from powNumber. Deduplicate this somehow

	      // x^Infinity === 0 if -1 < x < 1
	      // A real number 0 is returned instead of complex(0)
	      if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {
	        return 0;
	      }
	      return new Complex(x, 0).pow(y, 0);
	    }
	  }

	  /**
	   * Calculate the power of a 2d array
	   * @param {Array} x     must be a 2 dimensional, square matrix
	   * @param {number} y    a integer value (positive if `x` is not invertible)
	   * @returns {Array}
	   * @private
	   */
	  function _powArray(x, y) {
	    if (!isInteger$1(y)) {
	      throw new TypeError('For A^b, b must be an integer (value is ' + y + ')');
	    }
	    // verify that A is a 2 dimensional square matrix
	    var s = arraySize(x);
	    if (s.length !== 2) {
	      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');
	    }
	    if (s[0] !== s[1]) {
	      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');
	    }
	    if (y < 0) {
	      try {
	        return _powArray(inv(x), -y);
	      } catch (error) {
	        if (error.message === 'Cannot calculate inverse, determinant is zero') {
	          throw new TypeError('For A^b, when A is not invertible, b must be a positive integer (value is ' + y + ')');
	        }
	        throw error;
	      }
	    }
	    var res = identity(s[0]).valueOf();
	    var px = x;
	    while (y >= 1) {
	      if ((y & 1) === 1) {
	        res = multiply(px, res);
	      }
	      y >>= 1;
	      px = multiply(px, px);
	    }
	    return res;
	  }

	  /**
	   * Calculate the power of a 2d matrix
	   * @param {Matrix} x     must be a 2 dimensional, square matrix
	   * @param {number} y    a positive, integer value
	   * @returns {Matrix}
	   * @private
	   */
	  function _powMatrix(x, y) {
	    return matrix(_powArray(x.valueOf(), y));
	  }
	});

	function createSolveValidation(_ref) {
	  var {
	    DenseMatrix
	  } = _ref;
	  /**
	   * Validates matrix and column vector b for backward/forward substitution algorithms.
	   *
	   * @param {Matrix} m            An N x N matrix
	   * @param {Array | Matrix} b    A column vector
	   * @param {Boolean} copy        Return a copy of vector b
	   *
	   * @return {DenseMatrix}        Dense column vector b
	   */
	  return function solveValidation(m, b, copy) {
	    var mSize = m.size();
	    if (mSize.length !== 2) {
	      throw new RangeError('Matrix must be two dimensional (size: ' + format(mSize) + ')');
	    }
	    var rows = mSize[0];
	    var columns = mSize[1];
	    if (rows !== columns) {
	      throw new RangeError('Matrix must be square (size: ' + format(mSize) + ')');
	    }
	    var data = [];
	    if (isMatrix(b)) {
	      var bSize = b.size();
	      var bdata = b._data;

	      // 1-dim vector
	      if (bSize.length === 1) {
	        if (bSize[0] !== rows) {
	          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        }
	        for (var i = 0; i < rows; i++) {
	          data[i] = [bdata[i]];
	        }
	        return new DenseMatrix({
	          data,
	          size: [rows, 1],
	          datatype: b._datatype
	        });
	      }

	      // 2-dim column
	      if (bSize.length === 2) {
	        if (bSize[0] !== rows || bSize[1] !== 1) {
	          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        }
	        if (isDenseMatrix(b)) {
	          if (copy) {
	            data = [];
	            for (var _i = 0; _i < rows; _i++) {
	              data[_i] = [bdata[_i][0]];
	            }
	            return new DenseMatrix({
	              data,
	              size: [rows, 1],
	              datatype: b._datatype
	            });
	          }
	          return b;
	        }
	        if (isSparseMatrix(b)) {
	          for (var _i2 = 0; _i2 < rows; _i2++) {
	            data[_i2] = [0];
	          }
	          var values = b._values;
	          var index = b._index;
	          var ptr = b._ptr;
	          for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {
	            var _i3 = index[k];
	            data[_i3][0] = values[k];
	          }
	          return new DenseMatrix({
	            data,
	            size: [rows, 1],
	            datatype: b._datatype
	          });
	        }
	      }
	      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');
	    }
	    if (isArray(b)) {
	      var bsize = arraySize(b);
	      if (bsize.length === 1) {
	        if (bsize[0] !== rows) {
	          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        }
	        for (var _i4 = 0; _i4 < rows; _i4++) {
	          data[_i4] = [b[_i4]];
	        }
	        return new DenseMatrix({
	          data,
	          size: [rows, 1]
	        });
	      }
	      if (bsize.length === 2) {
	        if (bsize[0] !== rows || bsize[1] !== 1) {
	          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        }
	        for (var _i5 = 0; _i5 < rows; _i5++) {
	          data[_i5] = [b[_i5][0]];
	        }
	        return new DenseMatrix({
	          data,
	          size: [rows, 1]
	        });
	      }
	      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');
	    }
	  };
	}

	var name$i = 'usolve';
	var dependencies$i = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
	var createUsolve = /* #__PURE__ */factory(name$i, dependencies$i, _ref => {
	  var {
	    typed,
	    matrix,
	    divideScalar,
	    multiplyScalar,
	    subtract,
	    equalScalar,
	    DenseMatrix
	  } = _ref;
	  var solveValidation = createSolveValidation({
	    DenseMatrix
	  });

	  /**
	   * Finds one solution of a linear equation system by backward substitution. Matrix must be an upper triangular matrix. Throws an error if there's no solution.
	   *
	   * `U * x = b`
	   *
	   * Syntax:
	   *
	   *    math.usolve(U, b)
	   *
	   * Examples:
	   *
	   *    const a = [[-2, 3], [2, 1]]
	   *    const b = [11, 9]
	   *    const x = usolve(a, b)  // [[8], [9]]
	   *
	   * See also:
	   *
	   *    usolveAll, lup, slu, usolve, lusolve
	   *
	   * @param {Matrix, Array} U       A N x N matrix or array (U)
	   * @param {Matrix, Array} b       A column vector with the b values
	   *
	   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
	   */
	  return typed(name$i, {
	    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
	      return _sparseBackwardSubstitution(m, b);
	    },
	    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
	      return _denseBackwardSubstitution(m, b);
	    },
	    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
	      var m = matrix(a);
	      var r = _denseBackwardSubstitution(m, b);
	      return r.valueOf();
	    }
	  });
	  function _denseBackwardSubstitution(m, b) {
	    // make b into a column vector
	    b = solveValidation(m, b, true);
	    var bdata = b._data;
	    var rows = m._size[0];
	    var columns = m._size[1];

	    // result
	    var x = [];
	    var mdata = m._data;
	    // loop columns backwards
	    for (var j = columns - 1; j >= 0; j--) {
	      // b[j]
	      var bj = bdata[j][0] || 0;
	      // x[j]
	      var xj = void 0;
	      if (!equalScalar(bj, 0)) {
	        // value at [j, j]
	        var vjj = mdata[j][j];
	        if (equalScalar(vjj, 0)) {
	          // system cannot be solved
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        }
	        xj = divideScalar(bj, vjj);

	        // loop rows
	        for (var i = j - 1; i >= 0; i--) {
	          // update copy of b
	          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, mdata[i][j]))];
	        }
	      } else {
	        // zero value at j
	        xj = 0;
	      }
	      // update x
	      x[j] = [xj];
	    }
	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  }
	  function _sparseBackwardSubstitution(m, b) {
	    // make b into a column vector
	    b = solveValidation(m, b, true);
	    var bdata = b._data;
	    var rows = m._size[0];
	    var columns = m._size[1];
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;

	    // result
	    var x = [];

	    // loop columns backwards
	    for (var j = columns - 1; j >= 0; j--) {
	      var bj = bdata[j][0] || 0;
	      if (!equalScalar(bj, 0)) {
	        // non-degenerate row, find solution

	        var vjj = 0;

	        // upper triangular matrix values & index (column j)
	        var jValues = [];
	        var jIndices = [];

	        // first & last indeces in column
	        var firstIndex = ptr[j];
	        var lastIndex = ptr[j + 1];

	        // values in column, find value at [j, j], loop backwards
	        for (var k = lastIndex - 1; k >= firstIndex; k--) {
	          var i = index[k];

	          // check row (rows are not sorted!)
	          if (i === j) {
	            vjj = values[k];
	          } else if (i < j) {
	            // store upper triangular
	            jValues.push(values[k]);
	            jIndices.push(i);
	          }
	        }

	        // at this point we must have a value in vjj
	        if (equalScalar(vjj, 0)) {
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        }
	        var xj = divideScalar(bj, vjj);
	        for (var _k = 0, _lastIndex = jIndices.length; _k < _lastIndex; _k++) {
	          var _i = jIndices[_k];
	          bdata[_i] = [subtract(bdata[_i][0], multiplyScalar(xj, jValues[_k]))];
	        }
	        x[j] = [xj];
	      } else {
	        // degenerate row, we can choose any value
	        x[j] = [0];
	      }
	    }
	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  }
	});

	var name$h = 'usolveAll';
	var dependencies$h = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
	var createUsolveAll = /* #__PURE__ */factory(name$h, dependencies$h, _ref => {
	  var {
	    typed,
	    matrix,
	    divideScalar,
	    multiplyScalar,
	    subtract,
	    equalScalar,
	    DenseMatrix
	  } = _ref;
	  var solveValidation = createSolveValidation({
	    DenseMatrix
	  });

	  /**
	   * Finds all solutions of a linear equation system by backward substitution. Matrix must be an upper triangular matrix.
	   *
	   * `U * x = b`
	   *
	   * Syntax:
	   *
	   *    math.usolveAll(U, b)
	   *
	   * Examples:
	   *
	   *    const a = [[-2, 3], [2, 1]]
	   *    const b = [11, 9]
	   *    const x = usolveAll(a, b)  // [ [[8], [9]] ]
	   *
	   * See also:
	   *
	   *    usolve, lup, slu, usolve, lusolve
	   *
	   * @param {Matrix, Array} U       A N x N matrix or array (U)
	   * @param {Matrix, Array} b       A column vector with the b values
	   *
	   * @return {DenseMatrix[] | Array[]}  An array of affine-independent column vectors (x) that solve the linear system
	   */
	  return typed(name$h, {
	    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
	      return _sparseBackwardSubstitution(m, b);
	    },
	    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
	      return _denseBackwardSubstitution(m, b);
	    },
	    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
	      var m = matrix(a);
	      var R = _denseBackwardSubstitution(m, b);
	      return R.map(r => r.valueOf());
	    }
	  });
	  function _denseBackwardSubstitution(m, b_) {
	    // the algorithm is derived from
	    // https://www.overleaf.com/read/csvgqdxggyjv

	    // array of right-hand sides
	    var B = [solveValidation(m, b_, true)._data.map(e => e[0])];
	    var M = m._data;
	    var rows = m._size[0];
	    var columns = m._size[1];

	    // loop columns backwards
	    for (var i = columns - 1; i >= 0; i--) {
	      var L = B.length;

	      // loop right-hand sides
	      for (var k = 0; k < L; k++) {
	        var b = B[k];
	        if (!equalScalar(M[i][i], 0)) {
	          // non-singular row

	          b[i] = divideScalar(b[i], M[i][i]);
	          for (var j = i - 1; j >= 0; j--) {
	            // b[j] -= b[i] * M[j,i]
	            b[j] = subtract(b[j], multiplyScalar(b[i], M[j][i]));
	          }
	        } else if (!equalScalar(b[i], 0)) {
	          // singular row, nonzero RHS

	          if (k === 0) {
	            // There is no valid solution
	            return [];
	          } else {
	            // This RHS is invalid but other solutions may still exist
	            B.splice(k, 1);
	            k -= 1;
	            L -= 1;
	          }
	        } else if (k === 0) {
	          // singular row, RHS is zero

	          var bNew = [...b];
	          bNew[i] = 1;
	          for (var _j = i - 1; _j >= 0; _j--) {
	            bNew[_j] = subtract(bNew[_j], M[_j][i]);
	          }
	          B.push(bNew);
	        }
	      }
	    }
	    return B.map(x => new DenseMatrix({
	      data: x.map(e => [e]),
	      size: [rows, 1]
	    }));
	  }
	  function _sparseBackwardSubstitution(m, b_) {
	    // array of right-hand sides
	    var B = [solveValidation(m, b_, true)._data.map(e => e[0])];
	    var rows = m._size[0];
	    var columns = m._size[1];
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;

	    // loop columns backwards
	    for (var i = columns - 1; i >= 0; i--) {
	      var L = B.length;

	      // loop right-hand sides
	      for (var k = 0; k < L; k++) {
	        var b = B[k];

	        // values & indices (column i)
	        var iValues = [];
	        var iIndices = [];

	        // first & last indeces in column
	        var firstIndex = ptr[i];
	        var lastIndex = ptr[i + 1];

	        // find the value at [i, i]
	        var Mii = 0;
	        for (var j = lastIndex - 1; j >= firstIndex; j--) {
	          var J = index[j];
	          // check row
	          if (J === i) {
	            Mii = values[j];
	          } else if (J < i) {
	            // store upper triangular
	            iValues.push(values[j]);
	            iIndices.push(J);
	          }
	        }
	        if (!equalScalar(Mii, 0)) {
	          // non-singular row

	          b[i] = divideScalar(b[i], Mii);

	          // loop upper triangular
	          for (var _j2 = 0, _lastIndex = iIndices.length; _j2 < _lastIndex; _j2++) {
	            var _J = iIndices[_j2];
	            b[_J] = subtract(b[_J], multiplyScalar(b[i], iValues[_j2]));
	          }
	        } else if (!equalScalar(b[i], 0)) {
	          // singular row, nonzero RHS

	          if (k === 0) {
	            // There is no valid solution
	            return [];
	          } else {
	            // This RHS is invalid but other solutions may still exist
	            B.splice(k, 1);
	            k -= 1;
	            L -= 1;
	          }
	        } else if (k === 0) {
	          // singular row, RHS is zero

	          var bNew = [...b];
	          bNew[i] = 1;

	          // loop upper triangular
	          for (var _j3 = 0, _lastIndex2 = iIndices.length; _j3 < _lastIndex2; _j3++) {
	            var _J2 = iIndices[_j3];
	            bNew[_J2] = subtract(bNew[_J2], iValues[_j3]);
	          }
	          B.push(bNew);
	        }
	      }
	    }
	    return B.map(x => new DenseMatrix({
	      data: x.map(e => [e]),
	      size: [rows, 1]
	    }));
	  }
	});

	var name$g = 'equal';
	var dependencies$g = ['typed', 'matrix', 'equalScalar', 'DenseMatrix', 'concat'];
	var createEqual = /* #__PURE__ */factory(name$g, dependencies$g, _ref => {
	  var {
	    typed,
	    matrix,
	    equalScalar,
	    DenseMatrix,
	    concat
	  } = _ref;
	  var matAlgo03xDSf = createMatAlgo03xDSf({
	    typed
	  });
	  var matAlgo07xSSf = createMatAlgo07xSSf({
	    typed,
	    DenseMatrix
	  });
	  var matAlgo12xSfs = createMatAlgo12xSfs({
	    typed,
	    DenseMatrix
	  });
	  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({
	    typed,
	    matrix,
	    concat
	  });

	  /**
	   * Test whether two values are equal.
	   *
	   * The function tests whether the relative difference between x and y is
	   * smaller than the configured epsilon. The function cannot be used to
	   * compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.
	   *
	   * Values `null` and `undefined` are compared strictly, thus `null` is only
	   * equal to `null` and nothing else, and `undefined` is only equal to
	   * `undefined` and nothing else. Strings are compared by their numerical value.
	   *
	   * Syntax:
	   *
	   *    math.equal(x, y)
	   *
	   * Examples:
	   *
	   *    math.equal(2 + 2, 3)         // returns false
	   *    math.equal(2 + 2, 4)         // returns true
	   *
	   *    const a = math.unit('50 cm')
	   *    const b = math.unit('5 m')
	   *    math.equal(a, b)             // returns true
	   *
	   *    const c = [2, 5, 1]
	   *    const d = [2, 7, 1]
	   *
	   *    math.equal(c, d)             // returns [true, false, true]
	   *    math.deepEqual(c, d)         // returns false
	   *
	   *    math.equal("1000", "1e3")    // returns true
	   *    math.equal(0, null)          // returns false
	   *
	   * See also:
	   *
	   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText
	   *
	   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false
	   */
	  return typed(name$g, createEqualNumber({
	    typed,
	    equalScalar
	  }), matrixAlgorithmSuite({
	    elop: equalScalar,
	    SS: matAlgo07xSSf,
	    DS: matAlgo03xDSf,
	    Ss: matAlgo12xSfs
	  }));
	});
	var createEqualNumber = factory(name$g, ['typed', 'equalScalar'], _ref2 => {
	  var {
	    typed,
	    equalScalar
	  } = _ref2;
	  return typed(name$g, {
	    'any, any': function anyAny(x, y) {
	      // strict equality for null and undefined?
	      if (x === null) {
	        return y === null;
	      }
	      if (y === null) {
	        return x === null;
	      }
	      if (x === undefined) {
	        return y === undefined;
	      }
	      if (y === undefined) {
	        return x === undefined;
	      }
	      return equalScalar(x, y);
	    }
	  });
	});

	var name$f = 'smaller';
	var dependencies$f = ['typed', 'config', 'matrix', 'DenseMatrix', 'concat'];
	var createSmaller = /* #__PURE__ */factory(name$f, dependencies$f, _ref => {
	  var {
	    typed,
	    config,
	    matrix,
	    DenseMatrix,
	    concat
	  } = _ref;
	  var matAlgo03xDSf = createMatAlgo03xDSf({
	    typed
	  });
	  var matAlgo07xSSf = createMatAlgo07xSSf({
	    typed,
	    DenseMatrix
	  });
	  var matAlgo12xSfs = createMatAlgo12xSfs({
	    typed,
	    DenseMatrix
	  });
	  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({
	    typed,
	    matrix,
	    concat
	  });
	  var compareUnits = createCompareUnits({
	    typed
	  });

	  /**
	   * Test whether value x is smaller than y.
	   *
	   * The function returns true when x is smaller than y and the relative
	   * difference between x and y is smaller than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * Strings are compared by their numerical value.
	   *
	   * Syntax:
	   *
	   *    math.smaller(x, y)
	   *
	   * Examples:
	   *
	   *    math.smaller(2, 3)            // returns true
	   *    math.smaller(5, 2 * 2)        // returns false
	   *
	   *    const a = math.unit('5 cm')
	   *    const b = math.unit('2 inch')
	   *    math.smaller(a, b)            // returns true
	   *
	   * See also:
	   *
	   *    equal, unequal, smallerEq, smaller, smallerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
	   */
	  return typed(name$f, createSmallerNumber({
	    typed,
	    config
	  }), {
	    'boolean, boolean': (x, y) => x < y,
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.lt(y) && !nearlyEqual(x, y, config.epsilon);
	    },
	    'Fraction, Fraction': (x, y) => x.compare(y) === -1,
	    'Complex, Complex': function ComplexComplex(x, y) {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    }
	  }, compareUnits, matrixAlgorithmSuite({
	    SS: matAlgo07xSSf,
	    DS: matAlgo03xDSf,
	    Ss: matAlgo12xSfs
	  }));
	});
	var createSmallerNumber = /* #__PURE__ */factory(name$f, ['typed', 'config'], _ref2 => {
	  var {
	    typed,
	    config
	  } = _ref2;
	  return typed(name$f, {
	    'number, number': function numberNumber(x, y) {
	      return x < y && !nearlyEqual$1(x, y, config.epsilon);
	    }
	  });
	});

	var name$e = 'smallerEq';
	var dependencies$e = ['typed', 'config', 'matrix', 'DenseMatrix', 'concat'];
	var createSmallerEq = /* #__PURE__ */factory(name$e, dependencies$e, _ref => {
	  var {
	    typed,
	    config,
	    matrix,
	    DenseMatrix,
	    concat
	  } = _ref;
	  var matAlgo03xDSf = createMatAlgo03xDSf({
	    typed
	  });
	  var matAlgo07xSSf = createMatAlgo07xSSf({
	    typed,
	    DenseMatrix
	  });
	  var matAlgo12xSfs = createMatAlgo12xSfs({
	    typed,
	    DenseMatrix
	  });
	  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({
	    typed,
	    matrix,
	    concat
	  });
	  var compareUnits = createCompareUnits({
	    typed
	  });

	  /**
	   * Test whether value x is smaller or equal to y.
	   *
	   * The function returns true when x is smaller than y or the relative
	   * difference between x and y is smaller than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * Strings are compared by their numerical value.
	   *
	   * Syntax:
	   *
	   *    math.smallerEq(x, y)
	   *
	   * Examples:
	   *
	   *    math.smaller(1 + 2, 3)        // returns false
	   *    math.smallerEq(1 + 2, 3)      // returns true
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, larger, largerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
	   */
	  return typed(name$e, createSmallerEqNumber({
	    typed,
	    config
	  }), {
	    'boolean, boolean': (x, y) => x <= y,
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.lte(y) || nearlyEqual(x, y, config.epsilon);
	    },
	    'Fraction, Fraction': (x, y) => x.compare(y) !== 1,
	    'Complex, Complex': function ComplexComplex() {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    }
	  }, compareUnits, matrixAlgorithmSuite({
	    SS: matAlgo07xSSf,
	    DS: matAlgo03xDSf,
	    Ss: matAlgo12xSfs
	  }));
	});
	var createSmallerEqNumber = /* #__PURE__ */factory(name$e, ['typed', 'config'], _ref2 => {
	  var {
	    typed,
	    config
	  } = _ref2;
	  return typed(name$e, {
	    'number, number': function numberNumber(x, y) {
	      return x <= y || nearlyEqual$1(x, y, config.epsilon);
	    }
	  });
	});

	var name$d = 'larger';
	var dependencies$d = ['typed', 'config', 'matrix', 'DenseMatrix', 'concat'];
	var createLarger = /* #__PURE__ */factory(name$d, dependencies$d, _ref => {
	  var {
	    typed,
	    config,
	    matrix,
	    DenseMatrix,
	    concat
	  } = _ref;
	  var matAlgo03xDSf = createMatAlgo03xDSf({
	    typed
	  });
	  var matAlgo07xSSf = createMatAlgo07xSSf({
	    typed,
	    DenseMatrix
	  });
	  var matAlgo12xSfs = createMatAlgo12xSfs({
	    typed,
	    DenseMatrix
	  });
	  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({
	    typed,
	    matrix,
	    concat
	  });
	  var compareUnits = createCompareUnits({
	    typed
	  });

	  /**
	   * Test whether value x is larger than y.
	   *
	   * The function returns true when x is larger than y and the relative
	   * difference between x and y is larger than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * Strings are compared by their numerical value.
	   *
	   * Syntax:
	   *
	   *    math.larger(x, y)
	   *
	   * Examples:
	   *
	   *    math.larger(2, 3)             // returns false
	   *    math.larger(5, 2 + 2)         // returns true
	   *
	   *    const a = math.unit('5 cm')
	   *    const b = math.unit('2 inch')
	   *    math.larger(a, b)             // returns false
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, smallerEq, largerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false
	   */
	  return typed(name$d, createLargerNumber({
	    typed,
	    config
	  }), {
	    'boolean, boolean': (x, y) => x > y,
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.gt(y) && !nearlyEqual(x, y, config.epsilon);
	    },
	    'Fraction, Fraction': (x, y) => x.compare(y) === 1,
	    'Complex, Complex': function ComplexComplex() {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    }
	  }, compareUnits, matrixAlgorithmSuite({
	    SS: matAlgo07xSSf,
	    DS: matAlgo03xDSf,
	    Ss: matAlgo12xSfs
	  }));
	});
	var createLargerNumber = /* #__PURE__ */factory(name$d, ['typed', 'config'], _ref2 => {
	  var {
	    typed,
	    config
	  } = _ref2;
	  return typed(name$d, {
	    'number, number': function numberNumber(x, y) {
	      return x > y && !nearlyEqual$1(x, y, config.epsilon);
	    }
	  });
	});

	var name$c = 'largerEq';
	var dependencies$c = ['typed', 'config', 'matrix', 'DenseMatrix', 'concat'];
	var createLargerEq = /* #__PURE__ */factory(name$c, dependencies$c, _ref => {
	  var {
	    typed,
	    config,
	    matrix,
	    DenseMatrix,
	    concat
	  } = _ref;
	  var matAlgo03xDSf = createMatAlgo03xDSf({
	    typed
	  });
	  var matAlgo07xSSf = createMatAlgo07xSSf({
	    typed,
	    DenseMatrix
	  });
	  var matAlgo12xSfs = createMatAlgo12xSfs({
	    typed,
	    DenseMatrix
	  });
	  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({
	    typed,
	    matrix,
	    concat
	  });
	  var compareUnits = createCompareUnits({
	    typed
	  });

	  /**
	   * Test whether value x is larger or equal to y.
	   *
	   * The function returns true when x is larger than y or the relative
	   * difference between x and y is smaller than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * Strings are compared by their numerical value.
	   *
	   * Syntax:
	   *
	   *    math.largerEq(x, y)
	   *
	   * Examples:
	   *
	   *    math.larger(2, 1 + 1)         // returns false
	   *    math.largerEq(2, 1 + 1)       // returns true
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, smallerEq, larger, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false
	   */
	  return typed(name$c, createLargerEqNumber({
	    typed,
	    config
	  }), {
	    'boolean, boolean': (x, y) => x >= y,
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.gte(y) || nearlyEqual(x, y, config.epsilon);
	    },
	    'Fraction, Fraction': (x, y) => x.compare(y) !== -1,
	    'Complex, Complex': function ComplexComplex() {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    }
	  }, compareUnits, matrixAlgorithmSuite({
	    SS: matAlgo07xSSf,
	    DS: matAlgo03xDSf,
	    Ss: matAlgo12xSfs
	  }));
	});
	var createLargerEqNumber = /* #__PURE__ */factory(name$c, ['typed', 'config'], _ref2 => {
	  var {
	    typed,
	    config
	  } = _ref2;
	  return typed(name$c, {
	    'number, number': function numberNumber(x, y) {
	      return x >= y || nearlyEqual$1(x, y, config.epsilon);
	    }
	  });
	});

	var name$b = 'ImmutableDenseMatrix';
	var dependencies$b = ['smaller', 'DenseMatrix'];
	var createImmutableDenseMatrixClass = /* #__PURE__ */factory(name$b, dependencies$b, _ref => {
	  var {
	    smaller,
	    DenseMatrix
	  } = _ref;
	  function ImmutableDenseMatrix(data, datatype) {
	    if (!(this instanceof ImmutableDenseMatrix)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	    if (datatype && !isString(datatype)) {
	      throw new Error('Invalid datatype: ' + datatype);
	    }
	    if (isMatrix(data) || isArray(data)) {
	      // use DenseMatrix implementation
	      var matrix = new DenseMatrix(data, datatype);
	      // internal structures
	      this._data = matrix._data;
	      this._size = matrix._size;
	      this._datatype = matrix._datatype;
	      this._min = null;
	      this._max = null;
	    } else if (data && isArray(data.data) && isArray(data.size)) {
	      // initialize fields from JSON representation
	      this._data = data.data;
	      this._size = data.size;
	      this._datatype = data.datatype;
	      this._min = typeof data.min !== 'undefined' ? data.min : null;
	      this._max = typeof data.max !== 'undefined' ? data.max : null;
	    } else if (data) {
	      // unsupported type
	      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');
	    } else {
	      // nothing provided
	      this._data = [];
	      this._size = [0];
	      this._datatype = datatype;
	      this._min = null;
	      this._max = null;
	    }
	  }
	  ImmutableDenseMatrix.prototype = new DenseMatrix();

	  /**
	   * Attach type information
	   */
	  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';
	  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;

	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     const subset = matrix.subset(index)               // retrieve subset
	   *     const value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @param {Index} index
	   * @param {Array | ImmutableDenseMatrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */
	  ImmutableDenseMatrix.prototype.subset = function (index) {
	    switch (arguments.length) {
	      case 1:
	        {
	          // use base implementation
	          var m = DenseMatrix.prototype.subset.call(this, index);
	          // check result is a matrix
	          if (isMatrix(m)) {
	            // return immutable matrix
	            return new ImmutableDenseMatrix({
	              data: m._data,
	              size: m._size,
	              datatype: m._datatype
	            });
	          }
	          return m;
	        }
	      // intentional fall through
	      case 2:
	      case 3:
	        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');
	      default:
	        throw new SyntaxError('Wrong number of arguments');
	    }
	  };

	  /**
	   * Replace a single element in the matrix.
	   * @param {Number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be left undefined.
	   * @return {ImmutableDenseMatrix} self
	   */
	  ImmutableDenseMatrix.prototype.set = function () {
	    throw new Error('Cannot invoke set on an Immutable Matrix instance');
	  };

	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @param {Number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */
	  ImmutableDenseMatrix.prototype.resize = function () {
	    throw new Error('Cannot invoke resize on an Immutable Matrix instance');
	  };

	  /**
	   * Disallows reshaping in favor of immutability.
	   *
	   * @throws {Error} Operation not allowed
	   */
	  ImmutableDenseMatrix.prototype.reshape = function () {
	    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');
	  };

	  /**
	   * Create a clone of the matrix
	   * @return {ImmutableDenseMatrix} clone
	   */
	  ImmutableDenseMatrix.prototype.clone = function () {
	    return new ImmutableDenseMatrix({
	      data: clone$2(this._data),
	      size: clone$2(this._size),
	      datatype: this._datatype
	    });
	  };

	  /**
	   * Get a JSON representation of the matrix
	   * @returns {Object}
	   */
	  ImmutableDenseMatrix.prototype.toJSON = function () {
	    return {
	      mathjs: 'ImmutableDenseMatrix',
	      data: this._data,
	      size: this._size,
	      datatype: this._datatype
	    };
	  };

	  /**
	   * Generate a matrix from a JSON object
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "ImmutableDenseMatrix", data: [], size: []}`,
	   *                       where mathjs is optional
	   * @returns {ImmutableDenseMatrix}
	   */
	  ImmutableDenseMatrix.fromJSON = function (json) {
	    return new ImmutableDenseMatrix(json);
	  };

	  /**
	   * Swap rows i and j in Matrix.
	   *
	   * @param {Number} i       Matrix row index 1
	   * @param {Number} j       Matrix row index 2
	   *
	   * @return {Matrix}        The matrix reference
	   */
	  ImmutableDenseMatrix.prototype.swapRows = function () {
	    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');
	  };

	  /**
	   * Calculate the minimum value in the set
	   * @return {Number | undefined} min
	   */
	  ImmutableDenseMatrix.prototype.min = function () {
	    // check min has been calculated before
	    if (this._min === null) {
	      // minimum
	      var m = null;
	      // compute min
	      this.forEach(function (v) {
	        if (m === null || smaller(v, m)) {
	          m = v;
	        }
	      });
	      this._min = m !== null ? m : undefined;
	    }
	    return this._min;
	  };

	  /**
	   * Calculate the maximum value in the set
	   * @return {Number | undefined} max
	   */
	  ImmutableDenseMatrix.prototype.max = function () {
	    // check max has been calculated before
	    if (this._max === null) {
	      // maximum
	      var m = null;
	      // compute max
	      this.forEach(function (v) {
	        if (m === null || smaller(m, v)) {
	          m = v;
	        }
	      });
	      this._max = m !== null ? m : undefined;
	    }
	    return this._max;
	  };
	  return ImmutableDenseMatrix;
	}, {
	  isClass: true
	});

	var name$a = 'Index';
	var dependencies$a = ['ImmutableDenseMatrix', 'getMatrixDataType'];
	var createIndexClass = /* #__PURE__ */factory(name$a, dependencies$a, _ref => {
	  var {
	    ImmutableDenseMatrix,
	    getMatrixDataType
	  } = _ref;
	  /**
	   * Create an index. An Index can store ranges and sets for multiple dimensions.
	   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
	   *
	   * Usage:
	   *     const index = new Index(range1, range2, matrix1, array1, ...)
	   *
	   * Where each parameter can be any of:
	   *     A number
	   *     A string (containing a name of an object property)
	   *     An instance of Range
	   *     An Array with the Set values
	   *     An Array with Booleans
	   *     A Matrix with the Set values
	   *     A Matrix with Booleans
	   *
	   * The parameters start, end, and step must be integer numbers.
	   *
	   * @class Index
	   * @Constructor Index
	   * @param {...*} ranges
	   */
	  function Index(ranges) {
	    if (!(this instanceof Index)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	    this._dimensions = [];
	    this._sourceSize = [];
	    this._isScalar = true;
	    for (var i = 0, ii = arguments.length; i < ii; i++) {
	      var arg = arguments[i];
	      var argIsArray = isArray(arg);
	      var argIsMatrix = isMatrix(arg);
	      var sourceSize = null;
	      if (isRange(arg)) {
	        this._dimensions.push(arg);
	        this._isScalar = false;
	      } else if (argIsArray || argIsMatrix) {
	        // create matrix
	        var m = void 0;
	        if (getMatrixDataType(arg) === 'boolean') {
	          if (argIsArray) m = _createImmutableMatrix(_booleansArrayToNumbersForIndex(arg).valueOf());
	          if (argIsMatrix) m = _createImmutableMatrix(_booleansArrayToNumbersForIndex(arg._data).valueOf());
	          sourceSize = arg.valueOf().length;
	        } else {
	          m = _createImmutableMatrix(arg.valueOf());
	        }
	        this._dimensions.push(m);
	        // size
	        var size = m.size();
	        // scalar
	        if (size.length !== 1 || size[0] !== 1 || sourceSize !== null) {
	          this._isScalar = false;
	        }
	      } else if (typeof arg === 'number') {
	        this._dimensions.push(_createImmutableMatrix([arg]));
	      } else if (typeof arg === 'string') {
	        // object property (arguments.count should be 1)
	        this._dimensions.push(arg);
	      } else {
	        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
	      }
	      this._sourceSize.push(sourceSize);
	      // TODO: implement support for wildcard '*'
	    }
	  }

	  /**
	   * Attach type information
	   */
	  Index.prototype.type = 'Index';
	  Index.prototype.isIndex = true;
	  function _createImmutableMatrix(arg) {
	    // loop array elements
	    for (var i = 0, l = arg.length; i < l; i++) {
	      if (typeof arg[i] !== 'number' || !isInteger$1(arg[i])) {
	        throw new TypeError('Index parameters must be positive integer numbers');
	      }
	    }
	    // create matrix
	    return new ImmutableDenseMatrix(arg);
	  }

	  /**
	   * Create a clone of the index
	   * @memberof Index
	   * @return {Index} clone
	   */
	  Index.prototype.clone = function () {
	    var index = new Index();
	    index._dimensions = clone$2(this._dimensions);
	    index._isScalar = this._isScalar;
	    index._sourceSize = this._sourceSize;
	    return index;
	  };

	  /**
	   * Create an index from an array with ranges/numbers
	   * @memberof Index
	   * @param {Array.<Array | number>} ranges
	   * @return {Index} index
	   * @private
	   */
	  Index.create = function (ranges) {
	    var index = new Index();
	    Index.apply(index, ranges);
	    return index;
	  };

	  /**
	   * Retrieve the size of the index, the number of elements for each dimension.
	   * @memberof Index
	   * @returns {number[]} size
	   */
	  Index.prototype.size = function () {
	    var size = [];
	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var d = this._dimensions[i];
	      size[i] = typeof d === 'string' ? 1 : d.size()[0];
	    }
	    return size;
	  };

	  /**
	   * Get the maximum value for each of the indexes ranges.
	   * @memberof Index
	   * @returns {number[]} max
	   */
	  Index.prototype.max = function () {
	    var values = [];
	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var range = this._dimensions[i];
	      values[i] = typeof range === 'string' ? range : range.max();
	    }
	    return values;
	  };

	  /**
	   * Get the minimum value for each of the indexes ranges.
	   * @memberof Index
	   * @returns {number[]} min
	   */
	  Index.prototype.min = function () {
	    var values = [];
	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var range = this._dimensions[i];
	      values[i] = typeof range === 'string' ? range : range.min();
	    }
	    return values;
	  };

	  /**
	   * Loop over each of the ranges of the index
	   * @memberof Index
	   * @param {Function} callback   Called for each range with a Range as first
	   *                              argument, the dimension as second, and the
	   *                              index object as third.
	   */
	  Index.prototype.forEach = function (callback) {
	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      callback(this._dimensions[i], i, this);
	    }
	  };

	  /**
	   * Retrieve the dimension for the given index
	   * @memberof Index
	   * @param {Number} dim                  Number of the dimension
	   * @returns {Range | null} range
	   */
	  Index.prototype.dimension = function (dim) {
	    return this._dimensions[dim] || null;
	  };

	  /**
	   * Test whether this index contains an object property
	   * @returns {boolean} Returns true if the index is an object property
	   */
	  Index.prototype.isObjectProperty = function () {
	    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';
	  };

	  /**
	   * Returns the object property name when the Index holds a single object property,
	   * else returns null
	   * @returns {string | null}
	   */
	  Index.prototype.getObjectProperty = function () {
	    return this.isObjectProperty() ? this._dimensions[0] : null;
	  };

	  /**
	   * Test whether this index contains only a single value.
	   *
	   * This is the case when the index is created with only scalar values as ranges,
	   * not for ranges resolving into a single value.
	   * @memberof Index
	   * @return {boolean} isScalar
	   */
	  Index.prototype.isScalar = function () {
	    return this._isScalar;
	  };

	  /**
	   * Expand the Index into an array.
	   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]
	   * @memberof Index
	   * @returns {Array} array
	   */
	  Index.prototype.toArray = function () {
	    var array = [];
	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var dimension = this._dimensions[i];
	      array.push(typeof dimension === 'string' ? dimension : dimension.toArray());
	    }
	    return array;
	  };

	  /**
	   * Get the primitive value of the Index, a two dimensional array.
	   * Equivalent to Index.toArray().
	   * @memberof Index
	   * @returns {Array} array
	   */
	  Index.prototype.valueOf = Index.prototype.toArray;

	  /**
	   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'
	   * @memberof Index
	   * @returns {String} str
	   */
	  Index.prototype.toString = function () {
	    var strings = [];
	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var dimension = this._dimensions[i];
	      if (typeof dimension === 'string') {
	        strings.push(JSON.stringify(dimension));
	      } else {
	        strings.push(dimension.toString());
	      }
	    }
	    return '[' + strings.join(', ') + ']';
	  };

	  /**
	   * Get a JSON representation of the Index
	   * @memberof Index
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Index", "ranges": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
	   */
	  Index.prototype.toJSON = function () {
	    return {
	      mathjs: 'Index',
	      dimensions: this._dimensions
	    };
	  };

	  /**
	   * Instantiate an Index from a JSON object
	   * @memberof Index
	   * @param {Object} json A JSON object structured as:
	   *                     `{"mathjs": "Index", "dimensions": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
	   * @return {Index}
	   */
	  Index.fromJSON = function (json) {
	    return Index.create(json.dimensions);
	  };
	  return Index;
	}, {
	  isClass: true
	});

	/**
	 * Receives an array of booleans and returns an array of Numbers for Index
	 * @param {Array} booleanArrayIndex An array of booleans
	 * @return {Array} A set of numbers ready for index
	 */
	function _booleansArrayToNumbersForIndex(booleanArrayIndex) {
	  // gets an array of booleans and returns an array of numbers
	  var indexOfNumbers = [];
	  booleanArrayIndex.forEach((bool, idx) => {
	    if (bool) {
	      indexOfNumbers.push(idx);
	    }
	  });
	  return indexOfNumbers;
	}

	var name$9 = 'atan';
	var dependencies$9 = ['typed'];
	var createAtan = /* #__PURE__ */factory(name$9, dependencies$9, _ref => {
	  var {
	    typed
	  } = _ref;
	  /**
	   * Calculate the inverse tangent of a value.
	   *
	   * To avoid confusion with matrix arctangent, this function does not apply
	   * to matrices.
	   *
	   * Syntax:
	   *
	   *    math.atan(x)
	   *
	   * Examples:
	   *
	   *    math.atan(0.5)           // returns number 0.4636476090008061
	   *    math.atan(2)             // returns number 1.1071487177940904
	   *    math.atan(math.tan(1.5)) // returns number 1.5
	   *
	   * See also:
	   *
	   *    tan, asin, acos
	   *
	   * @param {number | BigNumber | Complex} x   Function input
	   * @return {number | BigNumber | Complex} The arc tangent of x
	   */
	  return typed('atan', {
	    number: function number(x) {
	      return Math.atan(x);
	    },
	    Complex: function Complex(x) {
	      return x.atan();
	    },
	    BigNumber: function BigNumber(x) {
	      return x.atan();
	    }
	  });
	});

	var createTrigUnit = /* #__PURE__ */factory('trigUnit', ['typed'], _ref => {
	  var {
	    typed
	  } = _ref;
	  return {
	    Unit: typed.referToSelf(self => x => {
	      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function cot is no angle');
	      }
	      return typed.find(self, x.valueType())(x.value);
	    })
	  };
	});

	var name$8 = 'cos';
	var dependencies$8 = ['typed'];
	var createCos = /* #__PURE__ */factory(name$8, dependencies$8, _ref => {
	  var {
	    typed
	  } = _ref;
	  var trigUnit = createTrigUnit({
	    typed
	  });

	  /**
	   * Calculate the cosine of a value.
	   *
	   * To avoid confusion with the matrix cosine, this function does not
	   * apply to matrices.
	   *
	   * Syntax:
	   *
	   *    math.cos(x)
	   *
	   * Examples:
	   *
	   *    math.cos(2)                      // returns number -0.4161468365471422
	   *    math.cos(math.pi / 4)            // returns number  0.7071067811865475
	   *    math.cos(math.unit(180, 'deg'))  // returns number -1
	   *    math.cos(math.unit(60, 'deg'))   // returns number  0.5
	   *
	   *    const angle = 0.2
	   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
	   *
	   * See also:
	   *
	   *    cos, tan
	   *
	   * @param {number | BigNumber | Complex | Unit} x  Function input
	   * @return {number | BigNumber | Complex} Cosine of x
	   */
	  return typed(name$8, {
	    number: Math.cos,
	    'Complex | BigNumber': x => x.cos()
	  }, trigUnit);
	});

	var name$7 = 'sin';
	var dependencies$7 = ['typed'];
	var createSin = /* #__PURE__ */factory(name$7, dependencies$7, _ref => {
	  var {
	    typed
	  } = _ref;
	  var trigUnit = createTrigUnit({
	    typed
	  });

	  /**
	   * Calculate the sine of a value.
	   *
	   * To avoid confusion with the matrix sine, this function does not apply
	   * to matrices.
	   *
	   * Syntax:
	   *
	   *    math.sin(x)
	   *
	   * Examples:
	   *
	   *    math.sin(2)                      // returns number 0.9092974268256813
	   *    math.sin(math.pi / 4)            // returns number 0.7071067811865475
	   *    math.sin(math.unit(90, 'deg'))   // returns number 1
	   *    math.sin(math.unit(30, 'deg'))   // returns number 0.5
	   *
	   *    const angle = 0.2
	   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
	   *
	   * See also:
	   *
	   *    cos, tan
	   *
	   * @param {number | BigNumber | Complex | Unit} x  Function input
	   * @return {number | BigNumber | Complex} Sine of x
	   */
	  return typed(name$7, {
	    number: Math.sin,
	    'Complex | BigNumber': x => x.sin()
	  }, trigUnit);
	});

	var name$6 = 'add';
	var dependencies$6 = ['typed', 'matrix', 'addScalar', 'equalScalar', 'DenseMatrix', 'SparseMatrix', 'concat'];
	var createAdd = /* #__PURE__ */factory(name$6, dependencies$6, _ref => {
	  var {
	    typed,
	    matrix,
	    addScalar,
	    equalScalar,
	    DenseMatrix,
	    SparseMatrix,
	    concat
	  } = _ref;
	  var matAlgo01xDSid = createMatAlgo01xDSid({
	    typed
	  });
	  var matAlgo04xSidSid = createMatAlgo04xSidSid({
	    typed,
	    equalScalar
	  });
	  var matAlgo10xSids = createMatAlgo10xSids({
	    typed,
	    DenseMatrix
	  });
	  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({
	    typed,
	    matrix,
	    concat
	  });
	  /**
	  * Add two or more values, `x + y`.
	  * For matrices, the function is evaluated element wise.
	  *
	  * Syntax:
	  *
	  *    math.add(x, y)
	  *    math.add(x, y, z, ...)
	  *
	  * Examples:
	  *
	  *    math.add(2, 3)               // returns number 5
	  *    math.add(2, 3, 4)            // returns number 9
	  *
	  *    const a = math.complex(2, 3)
	  *    const b = math.complex(-4, 1)
	  *    math.add(a, b)               // returns Complex -2 + 4i
	  *
	  *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]
	  *
	  *    const c = math.unit('5 cm')
	  *    const d = math.unit('2.1 mm')
	  *    math.add(c, d)               // returns Unit 52.1 mm
	  *
	  *    math.add("2.3", "4")         // returns number 6.3
	  *
	  * See also:
	  *
	  *    subtract, sum
	  *
	  * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add
	  * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add
	  * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`
	  */
	  return typed(name$6, {
	    'any, any': addScalar,
	    'any, any, ...any': typed.referToSelf(self => (x, y, rest) => {
	      var result = self(x, y);
	      for (var i = 0; i < rest.length; i++) {
	        result = self(result, rest[i]);
	      }
	      return result;
	    })
	  }, matrixAlgorithmSuite({
	    elop: addScalar,
	    DS: matAlgo01xDSid,
	    SS: matAlgo04xSidSid,
	    Ss: matAlgo10xSids
	  }));
	});

	var name$5 = 'norm';
	var dependencies$5 = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix', 'ctranspose', 'eigs'];
	var createNorm = /* #__PURE__ */factory(name$5, dependencies$5, _ref => {
	  var {
	    typed,
	    abs,
	    add,
	    pow,
	    conj,
	    sqrt,
	    multiply,
	    equalScalar,
	    larger,
	    smaller,
	    matrix,
	    ctranspose,
	    eigs
	  } = _ref;
	  /**
	   * Calculate the norm of a number, vector or matrix.
	   *
	   * The second parameter p is optional. If not provided, it defaults to 2.
	   *
	   * Syntax:
	   *
	   *    math.norm(x)
	   *    math.norm(x, p)
	   *
	   * Examples:
	   *
	   *    math.abs(-3.5)                         // returns 3.5
	   *    math.norm(-3.5)                        // returns 3.5
	   *
	   *    math.norm(math.complex(3, -4))         // returns 5
	   *
	   *    math.norm([1, 2, -3], Infinity)        // returns 3
	   *    math.norm([1, 2, -3], -Infinity)       // returns 1
	   *
	   *    math.norm([3, 4], 2)                   // returns 5
	   *
	   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6
	   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7
	   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661
	   *
	   * See also:
	   *
	   *    abs, hypot
	   *
	   * @param  {number | BigNumber | Complex | Array | Matrix} x
	   *            Value for which to calculate the norm
	   * @param  {number | BigNumber | string} [p=2]
	   *            Vector space.
	   *            Supported numbers include Infinity and -Infinity.
	   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)
	   * @return {number | BigNumber} the p-norm
	   */
	  return typed(name$5, {
	    number: Math.abs,
	    Complex: function Complex(x) {
	      return x.abs();
	    },
	    BigNumber: function BigNumber(x) {
	      // norm(x) = abs(x)
	      return x.abs();
	    },
	    boolean: function boolean(x) {
	      // norm(x) = abs(x)
	      return Math.abs(x);
	    },
	    Array: function Array(x) {
	      return _norm(matrix(x), 2);
	    },
	    Matrix: function Matrix(x) {
	      return _norm(x, 2);
	    },
	    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {
	      return _norm(matrix(x), p);
	    },
	    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {
	      return _norm(x, p);
	    }
	  });

	  /**
	   * Calculate the plus infinity norm for a vector
	   * @param {Matrix} x
	   * @returns {number} Returns the norm
	   * @private
	   */
	  function _vectorNormPlusInfinity(x) {
	    // norm(x, Infinity) = max(abs(x))
	    var pinf = 0;
	    // skip zeros since abs(0) === 0
	    x.forEach(function (value) {
	      var v = abs(value);
	      if (larger(v, pinf)) {
	        pinf = v;
	      }
	    }, true);
	    return pinf;
	  }

	  /**
	   * Calculate the minus infinity norm for a vector
	   * @param {Matrix} x
	   * @returns {number} Returns the norm
	   * @private
	   */
	  function _vectorNormMinusInfinity(x) {
	    // norm(x, -Infinity) = min(abs(x))
	    var ninf;
	    // skip zeros since abs(0) === 0
	    x.forEach(function (value) {
	      var v = abs(value);
	      if (!ninf || smaller(v, ninf)) {
	        ninf = v;
	      }
	    }, true);
	    return ninf || 0;
	  }

	  /**
	   * Calculate the norm for a vector
	   * @param {Matrix} x
	   * @param {number | string} p
	   * @returns {number} Returns the norm
	   * @private
	   */
	  function _vectorNorm(x, p) {
	    // check p
	    if (p === Number.POSITIVE_INFINITY || p === 'inf') {
	      return _vectorNormPlusInfinity(x);
	    }
	    if (p === Number.NEGATIVE_INFINITY || p === '-inf') {
	      return _vectorNormMinusInfinity(x);
	    }
	    if (p === 'fro') {
	      return _norm(x, 2);
	    }
	    if (typeof p === 'number' && !isNaN(p)) {
	      // check p != 0
	      if (!equalScalar(p, 0)) {
	        // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p
	        var n = 0;
	        // skip zeros since abs(0) === 0
	        x.forEach(function (value) {
	          n = add(pow(abs(value), p), n);
	        }, true);
	        return pow(n, 1 / p);
	      }
	      return Number.POSITIVE_INFINITY;
	    }
	    // invalid parameter value
	    throw new Error('Unsupported parameter value');
	  }

	  /**
	   * Calculate the Frobenius norm for a matrix
	   * @param {Matrix} x
	   * @returns {number} Returns the norm
	   * @private
	   */
	  function _matrixNormFrobenius(x) {
	    // norm(x) = sqrt(sum(diag(x'x)))
	    var fro = 0;
	    x.forEach(function (value, index) {
	      fro = add(fro, multiply(value, conj(value)));
	    });
	    return abs(sqrt(fro));
	  }

	  /**
	   * Calculate the norm L1 for a matrix
	   * @param {Matrix} x
	   * @returns {number} Returns the norm
	   * @private
	   */
	  function _matrixNormOne(x) {
	    // norm(x) = the largest column sum
	    var c = [];
	    // result
	    var maxc = 0;
	    // skip zeros since abs(0) == 0
	    x.forEach(function (value, index) {
	      var j = index[1];
	      var cj = add(c[j] || 0, abs(value));
	      if (larger(cj, maxc)) {
	        maxc = cj;
	      }
	      c[j] = cj;
	    }, true);
	    return maxc;
	  }

	  /**
	   * Calculate the norm L2 for a matrix
	   * @param {Matrix} x
	   * @returns {number} Returns the norm
	   * @private
	   */
	  function _matrixNormTwo(x) {
	    // norm(x) = sqrt( max eigenvalue of A*.A)
	    var sizeX = x.size();
	    if (sizeX[0] !== sizeX[1]) {
	      throw new RangeError('Invalid matrix dimensions');
	    }
	    var tx = ctranspose(x);
	    var squaredX = multiply(tx, x);
	    var eigenVals = eigs(squaredX).values.toArray();
	    var rho = eigenVals[eigenVals.length - 1];
	    return abs(sqrt(rho));
	  }

	  /**
	   * Calculate the infinity norm for a matrix
	   * @param {Matrix} x
	   * @returns {number} Returns the norm
	   * @private
	   */
	  function _matrixNormInfinity(x) {
	    // norm(x) = the largest row sum
	    var r = [];
	    // result
	    var maxr = 0;
	    // skip zeros since abs(0) == 0
	    x.forEach(function (value, index) {
	      var i = index[0];
	      var ri = add(r[i] || 0, abs(value));
	      if (larger(ri, maxr)) {
	        maxr = ri;
	      }
	      r[i] = ri;
	    }, true);
	    return maxr;
	  }

	  /**
	   * Calculate the norm for a 2D Matrix (M*N)
	   * @param {Matrix} x
	   * @param {number | string} p
	   * @returns {number} Returns the norm
	   * @private
	   */
	  function _matrixNorm(x, p) {
	    // check p
	    if (p === 1) {
	      return _matrixNormOne(x);
	    }
	    if (p === Number.POSITIVE_INFINITY || p === 'inf') {
	      return _matrixNormInfinity(x);
	    }
	    if (p === 'fro') {
	      return _matrixNormFrobenius(x);
	    }
	    if (p === 2) {
	      return _matrixNormTwo(x);
	    } // invalid parameter value

	    throw new Error('Unsupported parameter value ' + p);
	  }

	  /**
	   * Calculate the norm for an array
	   * @param {Matrix} x
	   * @param {number | string} p
	   * @returns {number} Returns the norm
	   * @private
	   */
	  function _norm(x, p) {
	    // size
	    var sizeX = x.size();

	    // check if it is a vector
	    if (sizeX.length === 1) {
	      return _vectorNorm(x, p);
	    }
	    // MxN matrix
	    if (sizeX.length === 2) {
	      if (sizeX[0] && sizeX[1]) {
	        return _matrixNorm(x, p);
	      } else {
	        throw new RangeError('Invalid matrix dimensions');
	      }
	    }
	  }
	});

	var name$4 = 'dot';
	var dependencies$4 = ['typed', 'addScalar', 'multiplyScalar', 'conj', 'size'];
	var createDot = /* #__PURE__ */factory(name$4, dependencies$4, _ref => {
	  var {
	    typed,
	    addScalar,
	    multiplyScalar,
	    conj,
	    size
	  } = _ref;
	  /**
	   * Calculate the dot product of two vectors. The dot product of
	   * `A = [a1, a2, ..., an]` and `B = [b1, b2, ..., bn]` is defined as:
	   *
	   *    dot(A, B) = conj(a1) * b1 + conj(a2) * b2 + ... + conj(an) * bn
	   *
	   * Syntax:
	   *
	   *    math.dot(x, y)
	   *
	   * Examples:
	   *
	   *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15
	   *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15
	   *
	   * See also:
	   *
	   *    multiply, cross
	   *
	   * @param  {Array | Matrix} x     First vector
	   * @param  {Array | Matrix} y     Second vector
	   * @return {number}               Returns the dot product of `x` and `y`
	   */
	  return typed(name$4, {
	    'Array | DenseMatrix, Array | DenseMatrix': _denseDot,
	    'SparseMatrix, SparseMatrix': _sparseDot
	  });
	  function _validateDim(x, y) {
	    var xSize = _size(x);
	    var ySize = _size(y);
	    var xLen, yLen;
	    if (xSize.length === 1) {
	      xLen = xSize[0];
	    } else if (xSize.length === 2 && xSize[1] === 1) {
	      xLen = xSize[0];
	    } else {
	      throw new RangeError('Expected a column vector, instead got a matrix of size (' + xSize.join(', ') + ')');
	    }
	    if (ySize.length === 1) {
	      yLen = ySize[0];
	    } else if (ySize.length === 2 && ySize[1] === 1) {
	      yLen = ySize[0];
	    } else {
	      throw new RangeError('Expected a column vector, instead got a matrix of size (' + ySize.join(', ') + ')');
	    }
	    if (xLen !== yLen) throw new RangeError('Vectors must have equal length (' + xLen + ' != ' + yLen + ')');
	    if (xLen === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');
	    return xLen;
	  }
	  function _denseDot(a, b) {
	    var N = _validateDim(a, b);
	    var adata = isMatrix(a) ? a._data : a;
	    var adt = isMatrix(a) ? a._datatype : undefined;
	    var bdata = isMatrix(b) ? b._data : b;
	    var bdt = isMatrix(b) ? b._datatype : undefined;

	    // are these 2-dimensional column vectors? (as opposed to 1-dimensional vectors)
	    var aIsColumn = _size(a).length === 2;
	    var bIsColumn = _size(b).length === 2;
	    var add = addScalar;
	    var mul = multiplyScalar;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      var dt = adt;
	      // find signatures that matches (dt, dt)
	      add = typed.find(addScalar, [dt, dt]);
	      mul = typed.find(multiplyScalar, [dt, dt]);
	    }

	    // both vectors 1-dimensional
	    if (!aIsColumn && !bIsColumn) {
	      var c = mul(conj(adata[0]), bdata[0]);
	      for (var i = 1; i < N; i++) {
	        c = add(c, mul(conj(adata[i]), bdata[i]));
	      }
	      return c;
	    }

	    // a is 1-dim, b is column
	    if (!aIsColumn && bIsColumn) {
	      var _c = mul(conj(adata[0]), bdata[0][0]);
	      for (var _i = 1; _i < N; _i++) {
	        _c = add(_c, mul(conj(adata[_i]), bdata[_i][0]));
	      }
	      return _c;
	    }

	    // a is column, b is 1-dim
	    if (aIsColumn && !bIsColumn) {
	      var _c2 = mul(conj(adata[0][0]), bdata[0]);
	      for (var _i2 = 1; _i2 < N; _i2++) {
	        _c2 = add(_c2, mul(conj(adata[_i2][0]), bdata[_i2]));
	      }
	      return _c2;
	    }

	    // both vectors are column
	    if (aIsColumn && bIsColumn) {
	      var _c3 = mul(conj(adata[0][0]), bdata[0][0]);
	      for (var _i3 = 1; _i3 < N; _i3++) {
	        _c3 = add(_c3, mul(conj(adata[_i3][0]), bdata[_i3][0]));
	      }
	      return _c3;
	    }
	  }
	  function _sparseDot(x, y) {
	    _validateDim(x, y);
	    var xindex = x._index;
	    var xvalues = x._values;
	    var yindex = y._index;
	    var yvalues = y._values;

	    // TODO optimize add & mul using datatype
	    var c = 0;
	    var add = addScalar;
	    var mul = multiplyScalar;
	    var i = 0;
	    var j = 0;
	    while (i < xindex.length && j < yindex.length) {
	      var I = xindex[i];
	      var J = yindex[j];
	      if (I < J) {
	        i++;
	        continue;
	      }
	      if (I > J) {
	        j++;
	        continue;
	      }
	      if (I === J) {
	        c = add(c, mul(xvalues[i], yvalues[j]));
	        i++;
	        j++;
	      }
	    }
	    return c;
	  }

	  // TODO remove this once #1771 is fixed
	  function _size(x) {
	    return isMatrix(x) ? x.size() : size(x);
	  }
	});

	var name$3 = 'qr';
	var dependencies$3 = ['typed', 'matrix', 'zeros', 'identity', 'isZero', 'equal', 'sign', 'sqrt', 'conj', 'unaryMinus', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtract', 'complex'];
	var createQr = /* #__PURE__ */factory(name$3, dependencies$3, _ref => {
	  var {
	    typed,
	    matrix,
	    zeros,
	    identity,
	    isZero,
	    equal,
	    sign,
	    sqrt,
	    conj,
	    unaryMinus,
	    addScalar,
	    divideScalar,
	    multiplyScalar,
	    subtract,
	    complex
	  } = _ref;
	  /**
	   * Calculate the Matrix QR decomposition. Matrix `A` is decomposed in
	   * two matrices (`Q`, `R`) where `Q` is an
	   * orthogonal matrix and `R` is an upper triangular matrix.
	   *
	   * Syntax:
	   *
	   *    math.qr(A)
	   *
	   * Example:
	   *
	   *    const m = [
	   *      [1, -1,  4],
	   *      [1,  4, -2],
	   *      [1,  4,  2],
	   *      [1,  -1, 0]
	   *    ]
	   *    const result = math.qr(m)
	   *    // r = {
	   *    //   Q: [
	   *    //     [0.5, -0.5,   0.5],
	   *    //     [0.5,  0.5,  -0.5],
	   *    //     [0.5,  0.5,   0.5],
	   *    //     [0.5, -0.5,  -0.5],
	   *    //   ],
	   *    //   R: [
	   *    //     [2, 3,  2],
	   *    //     [0, 5, -2],
	   *    //     [0, 0,  4],
	   *    //     [0, 0,  0]
	   *    //   ]
	   *    // }
	   *
	   * See also:
	   *
	   *    lup, lusolve
	   *
	   * @param {Matrix | Array} A    A two dimensional matrix or array
	   * for which to get the QR decomposition.
	   *
	   * @return {{Q: Array | Matrix, R: Array | Matrix}} Q: the orthogonal
	   * matrix and R: the upper triangular matrix
	   */
	  return _extends$1(typed(name$3, {
	    DenseMatrix: function DenseMatrix(m) {
	      return _denseQR(m);
	    },
	    SparseMatrix: function SparseMatrix(m) {
	      return _sparseQR();
	    },
	    Array: function Array(a) {
	      // create dense matrix from array
	      var m = matrix(a);
	      // lup, use matrix implementation
	      var r = _denseQR(m);
	      // result
	      return {
	        Q: r.Q.valueOf(),
	        R: r.R.valueOf()
	      };
	    }
	  }), {
	    _denseQRimpl
	  });
	  function _denseQRimpl(m) {
	    // rows & columns (m x n)
	    var rows = m._size[0]; // m
	    var cols = m._size[1]; // n

	    var Q = identity([rows], 'dense');
	    var Qdata = Q._data;
	    var R = m.clone();
	    var Rdata = R._data;

	    // vars
	    var i, j, k;
	    var w = zeros([rows], '');
	    for (k = 0; k < Math.min(cols, rows); ++k) {
	      /*
	       * **k-th Household matrix**
	       *
	       * The matrix I - 2*v*transpose(v)
	       * x     = first column of A
	       * x1    = first element of x
	       * alpha = x1 / |x1| * |x|
	       * e1    = tranpose([1, 0, 0, ...])
	       * u     = x - alpha * e1
	       * v     = u / |u|
	       *
	       * Household matrix = I - 2 * v * tranpose(v)
	       *
	       *  * Initially Q = I and R = A.
	       *  * Household matrix is a reflection in a plane normal to v which
	       *    will zero out all but the top right element in R.
	       *  * Appplying reflection to both Q and R will not change product.
	       *  * Repeat this process on the (1,1) minor to get R as an upper
	       *    triangular matrix.
	       *  * Reflections leave the magnitude of the columns of Q unchanged
	       *    so Q remains othoganal.
	       *
	       */

	      var pivot = Rdata[k][k];
	      var sgn = unaryMinus(equal(pivot, 0) ? 1 : sign(pivot));
	      var conjSgn = conj(sgn);
	      var alphaSquared = 0;
	      for (i = k; i < rows; i++) {
	        alphaSquared = addScalar(alphaSquared, multiplyScalar(Rdata[i][k], conj(Rdata[i][k])));
	      }
	      var alpha = multiplyScalar(sgn, sqrt(alphaSquared));
	      if (!isZero(alpha)) {
	        // first element in vector u
	        var u1 = subtract(pivot, alpha);

	        // w = v * u1 / |u|    (only elements k to (rows-1) are used)
	        w[k] = 1;
	        for (i = k + 1; i < rows; i++) {
	          w[i] = divideScalar(Rdata[i][k], u1);
	        }

	        // tau = - conj(u1 / alpha)
	        var tau = unaryMinus(conj(divideScalar(u1, alpha)));
	        var s = void 0;

	        /*
	         * tau and w have been choosen so that
	         *
	         * 2 * v * tranpose(v) = tau * w * tranpose(w)
	         */

	        /*
	         * -- calculate R = R - tau * w * tranpose(w) * R --
	         * Only do calculation with rows k to (rows-1)
	         * Additionally columns 0 to (k-1) will not be changed by this
	         *   multiplication so do not bother recalculating them
	         */
	        for (j = k; j < cols; j++) {
	          s = 0.0;

	          // calculate jth element of [tranpose(w) * R]
	          for (i = k; i < rows; i++) {
	            s = addScalar(s, multiplyScalar(conj(w[i]), Rdata[i][j]));
	          }

	          // calculate the jth element of [tau * transpose(w) * R]
	          s = multiplyScalar(s, tau);
	          for (i = k; i < rows; i++) {
	            Rdata[i][j] = multiplyScalar(subtract(Rdata[i][j], multiplyScalar(w[i], s)), conjSgn);
	          }
	        }
	        /*
	         * -- calculate Q = Q - tau * Q * w * transpose(w) --
	         * Q is a square matrix (rows x rows)
	         * Only do calculation with columns k to (rows-1)
	         * Additionally rows 0 to (k-1) will not be changed by this
	         *   multiplication so do not bother recalculating them
	         */
	        for (i = 0; i < rows; i++) {
	          s = 0.0;

	          // calculate ith element of [Q * w]
	          for (j = k; j < rows; j++) {
	            s = addScalar(s, multiplyScalar(Qdata[i][j], w[j]));
	          }

	          // calculate the ith element of [tau * Q * w]
	          s = multiplyScalar(s, tau);
	          for (j = k; j < rows; ++j) {
	            Qdata[i][j] = divideScalar(subtract(Qdata[i][j], multiplyScalar(s, conj(w[j]))), conjSgn);
	          }
	        }
	      }
	    }

	    // return matrices
	    return {
	      Q,
	      R,
	      toString: function toString() {
	        return 'Q: ' + this.Q.toString() + '\nR: ' + this.R.toString();
	      }
	    };
	  }
	  function _denseQR(m) {
	    var ret = _denseQRimpl(m);
	    var Rdata = ret.R._data;
	    if (m._data.length > 0) {
	      var zero = Rdata[0][0].type === 'Complex' ? complex(0) : 0;
	      for (var i = 0; i < Rdata.length; ++i) {
	        for (var j = 0; j < i && j < (Rdata[0] || []).length; ++j) {
	          Rdata[i][j] = zero;
	        }
	      }
	    }
	    return ret;
	  }
	  function _sparseQR(m) {
	    throw new Error('qr not implemented for sparse matrices yet');
	  }
	});

	var name$2 = 'det';
	var dependencies$2 = ['typed', 'matrix', 'subtract', 'multiply', 'divideScalar', 'isZero', 'unaryMinus'];
	var createDet = /* #__PURE__ */factory(name$2, dependencies$2, _ref => {
	  var {
	    typed,
	    matrix,
	    subtract,
	    multiply,
	    divideScalar,
	    isZero,
	    unaryMinus
	  } = _ref;
	  /**
	   * Calculate the determinant of a matrix.
	   *
	   * Syntax:
	   *
	   *    math.det(x)
	   *
	   * Examples:
	   *
	   *    math.det([[1, 2], [3, 4]]) // returns -2
	   *
	   *    const A = [
	   *      [-2, 2, 3],
	   *      [-1, 1, 3],
	   *      [2, 0, -1]
	   *    ]
	   *    math.det(A) // returns 6
	   *
	   * See also:
	   *
	   *    inv
	   *
	   * @param {Array | Matrix} x  A matrix
	   * @return {number} The determinant of `x`
	   */
	  return typed(name$2, {
	    any: function any(x) {
	      return clone$2(x);
	    },
	    'Array | Matrix': function det(x) {
	      var size;
	      if (isMatrix(x)) {
	        size = x.size();
	      } else if (Array.isArray(x)) {
	        x = matrix(x);
	        size = x.size();
	      } else {
	        // a scalar
	        size = [];
	      }
	      switch (size.length) {
	        case 0:
	          // scalar
	          return clone$2(x);
	        case 1:
	          // vector
	          if (size[0] === 1) {
	            return clone$2(x.valueOf()[0]);
	          }
	          if (size[0] === 0) {
	            return 1; // det of an empty matrix is per definition 1
	          } else {
	            throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');
	          }
	        case 2:
	          {
	            // two-dimensional array
	            var rows = size[0];
	            var cols = size[1];
	            if (rows === cols) {
	              return _det(x.clone().valueOf(), rows);
	            }
	            if (cols === 0) {
	              return 1; // det of an empty matrix is per definition 1
	            } else {
	              throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');
	            }
	          }
	        default:
	          // multi dimensional array
	          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + format(size) + ')');
	      }
	    }
	  });

	  /**
	   * Calculate the determinant of a matrix
	   * @param {Array[]} matrix  A square, two dimensional matrix
	   * @param {number} rows     Number of rows of the matrix (zero-based)
	   * @param {number} cols     Number of columns of the matrix (zero-based)
	   * @returns {number} det
	   * @private
	   */
	  function _det(matrix, rows, cols) {
	    if (rows === 1) {
	      // this is a 1 x 1 matrix
	      return clone$2(matrix[0][0]);
	    } else if (rows === 2) {
	      // this is a 2 x 2 matrix
	      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12
	      return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));
	    } else {
	      // Bareiss algorithm
	      // this algorithm have same complexity as LUP decomposition (O(n^3))
	      // but it preserve precision of floating point more relative to the LUP decomposition
	      var negated = false;
	      var rowIndices = new Array(rows).fill(0).map((_, i) => i); // matrix index of row i
	      for (var k = 0; k < rows; k++) {
	        var k_ = rowIndices[k];
	        if (isZero(matrix[k_][k])) {
	          var _k = void 0;
	          for (_k = k + 1; _k < rows; _k++) {
	            if (!isZero(matrix[rowIndices[_k]][k])) {
	              k_ = rowIndices[_k];
	              rowIndices[_k] = rowIndices[k];
	              rowIndices[k] = k_;
	              negated = !negated;
	              break;
	            }
	          }
	          if (_k === rows) return matrix[k_][k]; // some zero of the type
	        }

	        var piv = matrix[k_][k];
	        var piv_ = k === 0 ? 1 : matrix[rowIndices[k - 1]][k - 1];
	        for (var i = k + 1; i < rows; i++) {
	          var i_ = rowIndices[i];
	          for (var j = k + 1; j < rows; j++) {
	            matrix[i_][j] = divideScalar(subtract(multiply(matrix[i_][j], piv), multiply(matrix[i_][k], matrix[k_][j])), piv_);
	          }
	        }
	      }
	      var det = matrix[rowIndices[rows - 1]][rows - 1];
	      return negated ? unaryMinus(det) : det;
	    }
	  }
	});

	var name$1 = 'inv';
	var dependencies$1 = ['typed', 'matrix', 'divideScalar', 'addScalar', 'multiply', 'unaryMinus', 'det', 'identity', 'abs'];
	var createInv = /* #__PURE__ */factory(name$1, dependencies$1, _ref => {
	  var {
	    typed,
	    matrix,
	    divideScalar,
	    addScalar,
	    multiply,
	    unaryMinus,
	    det,
	    identity,
	    abs
	  } = _ref;
	  /**
	   * Calculate the inverse of a square matrix.
	   *
	   * Syntax:
	   *
	   *     math.inv(x)
	   *
	   * Examples:
	   *
	   *     math.inv([[1, 2], [3, 4]])  // returns [[-2, 1], [1.5, -0.5]]
	   *     math.inv(4)                 // returns 0.25
	   *     1 / 4                       // returns 0.25
	   *
	   * See also:
	   *
	   *     det, transpose
	   *
	   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed
	   * @return {number | Complex | Array | Matrix} The inverse of `x`.
	   */
	  return typed(name$1, {
	    'Array | Matrix': function ArrayMatrix(x) {
	      var size = isMatrix(x) ? x.size() : arraySize(x);
	      switch (size.length) {
	        case 1:
	          // vector
	          if (size[0] === 1) {
	            if (isMatrix(x)) {
	              return matrix([divideScalar(1, x.valueOf()[0])]);
	            } else {
	              return [divideScalar(1, x[0])];
	            }
	          } else {
	            throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');
	          }
	        case 2:
	          // two dimensional array
	          {
	            var rows = size[0];
	            var cols = size[1];
	            if (rows === cols) {
	              if (isMatrix(x)) {
	                return matrix(_inv(x.valueOf(), rows, cols), x.storage());
	              } else {
	                // return an Array
	                return _inv(x, rows, cols);
	              }
	            } else {
	              throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');
	            }
	          }
	        default:
	          // multi dimensional array
	          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + format(size) + ')');
	      }
	    },
	    any: function any(x) {
	      // scalar
	      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers
	    }
	  });

	  /**
	   * Calculate the inverse of a square matrix
	   * @param {Array[]} mat     A square matrix
	   * @param {number} rows     Number of rows
	   * @param {number} cols     Number of columns, must equal rows
	   * @return {Array[]} inv    Inverse matrix
	   * @private
	   */
	  function _inv(mat, rows, cols) {
	    var r, s, f, value, temp;
	    if (rows === 1) {
	      // this is a 1 x 1 matrix
	      value = mat[0][0];
	      if (value === 0) {
	        throw Error('Cannot calculate inverse, determinant is zero');
	      }
	      return [[divideScalar(1, value)]];
	    } else if (rows === 2) {
	      // this is a 2 x 2 matrix
	      var d = det(mat);
	      if (d === 0) {
	        throw Error('Cannot calculate inverse, determinant is zero');
	      }
	      return [[divideScalar(mat[1][1], d), divideScalar(unaryMinus(mat[0][1]), d)], [divideScalar(unaryMinus(mat[1][0]), d), divideScalar(mat[0][0], d)]];
	    } else {
	      // this is a matrix of 3 x 3 or larger
	      // calculate inverse using gauss-jordan elimination
	      //      https://en.wikipedia.org/wiki/Gaussian_elimination
	      //      http://mathworld.wolfram.com/MatrixInverse.html
	      //      http://math.uww.edu/~mcfarlat/inverse.htm

	      // make a copy of the matrix (only the arrays, not of the elements)
	      var A = mat.concat();
	      for (r = 0; r < rows; r++) {
	        A[r] = A[r].concat();
	      }

	      // create an identity matrix which in the end will contain the
	      // matrix inverse
	      var B = identity(rows).valueOf();

	      // loop over all columns, and perform row reductions
	      for (var c = 0; c < cols; c++) {
	        // Pivoting: Swap row c with row r, where row r contains the largest element A[r][c]
	        var ABig = abs(A[c][c]);
	        var rBig = c;
	        r = c + 1;
	        while (r < rows) {
	          if (abs(A[r][c]) > ABig) {
	            ABig = abs(A[r][c]);
	            rBig = r;
	          }
	          r++;
	        }
	        if (ABig === 0) {
	          throw Error('Cannot calculate inverse, determinant is zero');
	        }
	        r = rBig;
	        if (r !== c) {
	          temp = A[c];
	          A[c] = A[r];
	          A[r] = temp;
	          temp = B[c];
	          B[c] = B[r];
	          B[r] = temp;
	        }

	        // eliminate non-zero values on the other rows at column c
	        var Ac = A[c];
	        var Bc = B[c];
	        for (r = 0; r < rows; r++) {
	          var Ar = A[r];
	          var Br = B[r];
	          if (r !== c) {
	            // eliminate value at column c and row r
	            if (Ar[c] !== 0) {
	              f = divideScalar(unaryMinus(Ar[c]), Ac[c]);

	              // add (f * row c) to row r to eliminate the value
	              // at column c
	              for (s = c; s < cols; s++) {
	                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));
	              }
	              for (s = 0; s < cols; s++) {
	                Br[s] = addScalar(Br[s], multiply(f, Bc[s]));
	              }
	            }
	          } else {
	            // normalize value at Acc to 1,
	            // divide each value on row r with the value at Acc
	            f = Ac[c];
	            for (s = c; s < cols; s++) {
	              Ar[s] = divideScalar(Ar[s], f);
	            }
	            for (s = 0; s < cols; s++) {
	              Br[s] = divideScalar(Br[s], f);
	            }
	          }
	        }
	      }
	      return B;
	    }
	  }
	});

	function createComplexEigs(_ref) {
	  var {
	    addScalar,
	    subtract,
	    flatten,
	    multiply,
	    multiplyScalar,
	    divideScalar,
	    sqrt,
	    abs,
	    bignumber,
	    diag,
	    inv,
	    qr,
	    usolve,
	    usolveAll,
	    equal,
	    complex,
	    larger,
	    smaller,
	    matrixFromColumns,
	    dot
	  } = _ref;
	  /**
	   * @param {number[][]} arr the matrix to find eigenvalues of
	   * @param {number} N size of the matrix
	   * @param {number|BigNumber} prec precision, anything lower will be considered zero
	   * @param {'number'|'BigNumber'|'Complex'} type
	   * @param {boolean} findVectors should we find eigenvectors?
	   *
	   * @returns {{ values: number[], vectors: number[][] }}
	   */
	  function complexEigs(arr, N, prec, type, findVectors) {
	    if (findVectors === undefined) {
	      findVectors = true;
	    }

	    // TODO check if any row/col are zero except the diagonal

	    // make sure corresponding rows and columns have similar magnitude
	    // important because of numerical stability
	    // MODIFIES arr by side effect!
	    var R = balance(arr, N, prec, type, findVectors);

	    // R is the row transformation matrix
	    // arr = A' = R A R⁻¹, A is the original matrix
	    // (if findVectors is false, R is undefined)
	    // (And so to return to original matrix: A = R⁻¹ arr R)

	    // TODO if magnitudes of elements vary over many orders,
	    // move greatest elements to the top left corner

	    // using similarity transformations, reduce the matrix
	    // to Hessenberg form (upper triangular plus one subdiagonal row)
	    // updates the transformation matrix R with new row operationsq
	    // MODIFIES arr by side effect!
	    reduceToHessenberg(arr, N, prec, type, findVectors, R);
	    // still true that original A = R⁻¹ arr R)

	    // find eigenvalues
	    var {
	      values,
	      C
	    } = iterateUntilTriangular(arr, N, prec, type, findVectors);

	    // values is the list of eigenvalues, C is the column
	    // transformation matrix that transforms arr, the hessenberg
	    // matrix, to upper triangular
	    // (So U = C⁻¹ arr C and the relationship between current arr
	    // and original A is unchanged.)

	    var vectors;
	    if (findVectors) {
	      vectors = findEigenvectors(arr, N, C, R, values, prec, type);
	      vectors = matrixFromColumns(...vectors);
	    }
	    return {
	      values,
	      vectors
	    };
	  }

	  /**
	   * @param {number[][]} arr
	   * @param {number} N
	   * @param {number} prec
	   * @param {'number'|'BigNumber'|'Complex'} type
	   * @returns {number[][]}
	   */
	  function balance(arr, N, prec, type, findVectors) {
	    var big = type === 'BigNumber';
	    var cplx = type === 'Complex';
	    var realzero = big ? bignumber(0) : 0;
	    var one = big ? bignumber(1) : cplx ? complex(1) : 1;
	    var realone = big ? bignumber(1) : 1;

	    // base of the floating-point arithmetic
	    var radix = big ? bignumber(10) : 2;
	    var radixSq = multiplyScalar(radix, radix);

	    // the diagonal transformation matrix R
	    var Rdiag;
	    if (findVectors) {
	      Rdiag = Array(N).fill(one);
	    }

	    // this isn't the only time we loop thru the matrix...
	    var last = false;
	    while (!last) {
	      // ...haha I'm joking! unless...
	      last = true;
	      for (var i = 0; i < N; i++) {
	        // compute the taxicab norm of i-th column and row
	        // TODO optimize for complex numbers
	        var colNorm = realzero;
	        var rowNorm = realzero;
	        for (var j = 0; j < N; j++) {
	          if (i === j) continue;
	          var c = abs(arr[i][j]); // should be real
	          colNorm = addScalar(colNorm, c);
	          rowNorm = addScalar(rowNorm, c);
	        }
	        if (!equal(colNorm, 0) && !equal(rowNorm, 0)) {
	          // find integer power closest to balancing the matrix
	          // (we want to scale only by integer powers of radix,
	          // so that we don't lose any precision due to round-off)

	          var f = realone;
	          var _c = colNorm;
	          var rowDivRadix = divideScalar(rowNorm, radix);
	          var rowMulRadix = multiplyScalar(rowNorm, radix);
	          while (smaller(_c, rowDivRadix)) {
	            _c = multiplyScalar(_c, radixSq);
	            f = multiplyScalar(f, radix);
	          }
	          while (larger(_c, rowMulRadix)) {
	            _c = divideScalar(_c, radixSq);
	            f = divideScalar(f, radix);
	          }

	          // check whether balancing is needed
	          // condition = (c + rowNorm) / f < 0.95 * (colNorm + rowNorm)
	          var condition = smaller(divideScalar(addScalar(_c, rowNorm), f), multiplyScalar(addScalar(colNorm, rowNorm), 0.95));

	          // apply balancing similarity transformation
	          if (condition) {
	            // we should loop once again to check whether
	            // another rebalancing is needed
	            last = false;
	            var g = divideScalar(1, f);
	            for (var _j = 0; _j < N; _j++) {
	              if (i === _j) {
	                continue;
	              }
	              arr[i][_j] = multiplyScalar(arr[i][_j], f);
	              arr[_j][i] = multiplyScalar(arr[_j][i], g);
	            }

	            // keep track of transformations
	            if (findVectors) {
	              Rdiag[i] = multiplyScalar(Rdiag[i], f);
	            }
	          }
	        }
	      }
	    }

	    // return the diagonal row transformation matrix
	    return diag(Rdiag);
	  }

	  /**
	   * @param {number[][]} arr
	   * @param {number} N
	   * @param {number} prec
	   * @param {'number'|'BigNumber'|'Complex'} type
	   * @param {boolean} findVectors
	   * @param {number[][]} R the row transformation matrix that will be modified
	   */
	  function reduceToHessenberg(arr, N, prec, type, findVectors, R) {
	    var big = type === 'BigNumber';
	    var cplx = type === 'Complex';
	    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;
	    if (big) {
	      prec = bignumber(prec);
	    }
	    for (var i = 0; i < N - 2; i++) {
	      // Find the largest subdiag element in the i-th col

	      var maxIndex = 0;
	      var max = zero;
	      for (var j = i + 1; j < N; j++) {
	        var el = arr[j][i];
	        if (smaller(abs(max), abs(el))) {
	          max = el;
	          maxIndex = j;
	        }
	      }

	      // This col is pivoted, no need to do anything
	      if (smaller(abs(max), prec)) {
	        continue;
	      }
	      if (maxIndex !== i + 1) {
	        // Interchange maxIndex-th and (i+1)-th row
	        var tmp1 = arr[maxIndex];
	        arr[maxIndex] = arr[i + 1];
	        arr[i + 1] = tmp1;

	        // Interchange maxIndex-th and (i+1)-th column
	        for (var _j2 = 0; _j2 < N; _j2++) {
	          var tmp2 = arr[_j2][maxIndex];
	          arr[_j2][maxIndex] = arr[_j2][i + 1];
	          arr[_j2][i + 1] = tmp2;
	        }

	        // keep track of transformations
	        if (findVectors) {
	          var tmp3 = R[maxIndex];
	          R[maxIndex] = R[i + 1];
	          R[i + 1] = tmp3;
	        }
	      }

	      // Reduce following rows and columns
	      for (var _j3 = i + 2; _j3 < N; _j3++) {
	        var n = divideScalar(arr[_j3][i], max);
	        if (n === 0) {
	          continue;
	        }

	        // from j-th row subtract n-times (i+1)th row
	        for (var k = 0; k < N; k++) {
	          arr[_j3][k] = subtract(arr[_j3][k], multiplyScalar(n, arr[i + 1][k]));
	        }

	        // to (i+1)th column add n-times j-th column
	        for (var _k = 0; _k < N; _k++) {
	          arr[_k][i + 1] = addScalar(arr[_k][i + 1], multiplyScalar(n, arr[_k][_j3]));
	        }

	        // keep track of transformations
	        if (findVectors) {
	          for (var _k2 = 0; _k2 < N; _k2++) {
	            R[_j3][_k2] = subtract(R[_j3][_k2], multiplyScalar(n, R[i + 1][_k2]));
	          }
	        }
	      }
	    }
	    return R;
	  }

	  /**
	   * @returns {{values: values, C: Matrix}}
	   * @see Press, Wiliams: Numerical recipes in Fortran 77
	   * @see https://en.wikipedia.org/wiki/QR_algorithm
	   */
	  function iterateUntilTriangular(A, N, prec, type, findVectors) {
	    var big = type === 'BigNumber';
	    var cplx = type === 'Complex';
	    var one = big ? bignumber(1) : cplx ? complex(1) : 1;
	    if (big) {
	      prec = bignumber(prec);
	    }

	    // The Francis Algorithm
	    // The core idea of this algorithm is that doing successive
	    // A' = Q⁺AQ transformations will eventually converge to block-
	    // upper-triangular with diagonal blocks either 1x1 or 2x2.
	    // The Q here is the one from the QR decomposition, A = QR.
	    // Since the eigenvalues of a block-upper-triangular matrix are
	    // the eigenvalues of its diagonal blocks and we know how to find
	    // eigenvalues of a 2x2 matrix, we know the eigenvalues of A.

	    var arr = clone$2(A);

	    // the list of converged eigenvalues
	    var lambdas = [];

	    // size of arr, which will get smaller as eigenvalues converge
	    var n = N;

	    // the diagonal of the block-diagonal matrix that turns
	    // converged 2x2 matrices into upper triangular matrices
	    var Sdiag = [];

	    // N×N matrix describing the overall transformation done during the QR algorithm
	    var Qtotal = findVectors ? diag(Array(N).fill(one)) : undefined;

	    // n×n matrix describing the QR transformations done since last convergence
	    var Qpartial = findVectors ? diag(Array(n).fill(one)) : undefined;

	    // last eigenvalue converged before this many steps
	    var lastConvergenceBefore = 0;
	    while (lastConvergenceBefore <= 100) {
	      lastConvergenceBefore += 1;

	      // TODO if the convergence is slow, do something clever

	      // Perform the factorization

	      var k = 0; // TODO set close to an eigenvalue

	      for (var i = 0; i < n; i++) {
	        arr[i][i] = subtract(arr[i][i], k);
	      }

	      // TODO do an implicit QR transformation
	      var {
	        Q,
	        R
	      } = qr(arr);
	      arr = multiply(R, Q);
	      for (var _i = 0; _i < n; _i++) {
	        arr[_i][_i] = addScalar(arr[_i][_i], k);
	      }

	      // keep track of transformations
	      if (findVectors) {
	        Qpartial = multiply(Qpartial, Q);
	      }

	      // The rightmost diagonal element converged to an eigenvalue
	      if (n === 1 || smaller(abs(arr[n - 1][n - 2]), prec)) {
	        lastConvergenceBefore = 0;
	        lambdas.push(arr[n - 1][n - 1]);

	        // keep track of transformations
	        if (findVectors) {
	          Sdiag.unshift([[1]]);
	          inflateMatrix(Qpartial, N);
	          Qtotal = multiply(Qtotal, Qpartial);
	          if (n > 1) {
	            Qpartial = diag(Array(n - 1).fill(one));
	          }
	        }

	        // reduce the matrix size
	        n -= 1;
	        arr.pop();
	        for (var _i2 = 0; _i2 < n; _i2++) {
	          arr[_i2].pop();
	        }

	        // The rightmost diagonal 2x2 block converged
	      } else if (n === 2 || smaller(abs(arr[n - 2][n - 3]), prec)) {
	        lastConvergenceBefore = 0;
	        var ll = eigenvalues2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1]);
	        lambdas.push(...ll);

	        // keep track of transformations
	        if (findVectors) {
	          Sdiag.unshift(jordanBase2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1], ll[0], ll[1], prec, type));
	          inflateMatrix(Qpartial, N);
	          Qtotal = multiply(Qtotal, Qpartial);
	          if (n > 2) {
	            Qpartial = diag(Array(n - 2).fill(one));
	          }
	        }

	        // reduce the matrix size
	        n -= 2;
	        arr.pop();
	        arr.pop();
	        for (var _i3 = 0; _i3 < n; _i3++) {
	          arr[_i3].pop();
	          arr[_i3].pop();
	        }
	      }
	      if (n === 0) {
	        break;
	      }
	    }

	    // standard sorting
	    lambdas.sort((a, b) => +subtract(abs(a), abs(b)));

	    // the algorithm didn't converge
	    if (lastConvergenceBefore > 100) {
	      var err = Error('The eigenvalues failed to converge. Only found these eigenvalues: ' + lambdas.join(', '));
	      err.values = lambdas;
	      err.vectors = [];
	      throw err;
	    }

	    // combine the overall QR transformation Qtotal with the subsequent
	    // transformation S that turns the diagonal 2x2 blocks to upper triangular
	    var C = findVectors ? multiply(Qtotal, blockDiag(Sdiag, N)) : undefined;
	    return {
	      values: lambdas,
	      C
	    };
	  }

	  /**
	   * @param {Matrix} A hessenberg-form matrix
	   * @param {number} N size of A
	   * @param {Matrix} C column transformation matrix that turns A into upper triangular
	   * @param {Matrix} R similarity that turns original matrix into A
	   * @param {number[]} values array of eigenvalues of A
	   * @param {'number'|'BigNumber'|'Complex'} type
	   * @returns {number[][]} eigenvalues
	   */
	  function findEigenvectors(A, N, C, R, values, prec, type) {
	    var Cinv = inv(C);
	    var U = multiply(Cinv, A, C);
	    var big = type === 'BigNumber';
	    var cplx = type === 'Complex';
	    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;
	    var one = big ? bignumber(1) : cplx ? complex(1) : 1;

	    // turn values into a kind of "multiset"
	    // this way it is easier to find eigenvectors
	    var uniqueValues = [];
	    var multiplicities = [];
	    for (var λ of values) {
	      var i = indexOf(uniqueValues, λ, equal);
	      if (i === -1) {
	        uniqueValues.push(λ);
	        multiplicities.push(1);
	      } else {
	        multiplicities[i] += 1;
	      }
	    }

	    // find eigenvectors by solving U − λE = 0
	    // TODO replace with an iterative eigenvector algorithm
	    // (this one might fail for imprecise eigenvalues)

	    var vectors = [];
	    var len = uniqueValues.length;
	    var b = Array(N).fill(zero);
	    var E = diag(Array(N).fill(one));

	    // eigenvalues for which usolve failed (due to numerical error)
	    var failedLambdas = [];
	    var _loop = function _loop() {
	      var λ = uniqueValues[_i4];
	      var S = subtract(U, multiply(λ, E)); // the characteristic matrix

	      var solutions = usolveAll(S, b);
	      solutions.shift(); // ignore the null vector

	      // looks like we missed something, try inverse iteration
	      while (solutions.length < multiplicities[_i4]) {
	        var approxVec = inverseIterate(S, N, solutions, prec, type);
	        if (approxVec == null) {
	          // no more vectors were found
	          failedLambdas.push(λ);
	          break;
	        }
	        solutions.push(approxVec);
	      }

	      // Transform back into original array coordinates
	      var correction = multiply(inv(R), C);
	      solutions = solutions.map(v => multiply(correction, v));
	      vectors.push(...solutions.map(v => flatten(v)));
	    };
	    for (var _i4 = 0; _i4 < len; _i4++) {
	      _loop();
	    }
	    if (failedLambdas.length !== 0) {
	      var err = new Error('Failed to find eigenvectors for the following eigenvalues: ' + failedLambdas.join(', '));
	      err.values = values;
	      err.vectors = vectors;
	      throw err;
	    }
	    return vectors;
	  }

	  /**
	   * Compute the eigenvalues of an 2x2 matrix
	   * @return {[number,number]}
	   */
	  function eigenvalues2x2(a, b, c, d) {
	    // λ± = ½ trA ± ½ √( tr²A - 4 detA )
	    var trA = addScalar(a, d);
	    var detA = subtract(multiplyScalar(a, d), multiplyScalar(b, c));
	    var x = multiplyScalar(trA, 0.5);
	    var y = multiplyScalar(sqrt(subtract(multiplyScalar(trA, trA), multiplyScalar(4, detA))), 0.5);
	    return [addScalar(x, y), subtract(x, y)];
	  }

	  /**
	   * For an 2x2 matrix compute the transformation matrix S,
	   * so that SAS⁻¹ is an upper triangular matrix
	   * @return {[[number,number],[number,number]]}
	   * @see https://math.berkeley.edu/~ogus/old/Math_54-05/webfoils/jordan.pdf
	   * @see http://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html
	   */
	  function jordanBase2x2(a, b, c, d, l1, l2, prec, type) {
	    var big = type === 'BigNumber';
	    var cplx = type === 'Complex';
	    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;
	    var one = big ? bignumber(1) : cplx ? complex(1) : 1;

	    // matrix is already upper triangular
	    // return an identity matrix
	    if (smaller(abs(c), prec)) {
	      return [[one, zero], [zero, one]];
	    }

	    // matrix is diagonalizable
	    // return its eigenvectors as columns
	    if (larger(abs(subtract(l1, l2)), prec)) {
	      return [[subtract(l1, d), subtract(l2, d)], [c, c]];
	    }

	    // matrix is not diagonalizable
	    // compute off-diagonal elements of N = A - λI
	    // N₁₂ = 0 ⇒ S = ( N⃗₁, I⃗₁ )
	    // N₁₂ ≠ 0 ⇒ S = ( N⃗₂, I⃗₂ )

	    var na = subtract(a, l1);
	    var nb = subtract(b, l1);
	    var nc = subtract(c, l1);
	    var nd = subtract(d, l1);
	    if (smaller(abs(nb), prec)) {
	      return [[na, one], [nc, zero]];
	    } else {
	      return [[nb, zero], [nd, one]];
	    }
	  }

	  /**
	   * Enlarge the matrix from n×n to N×N, setting the new
	   * elements to 1 on diagonal and 0 elsewhere
	   */
	  function inflateMatrix(arr, N) {
	    // add columns
	    for (var i = 0; i < arr.length; i++) {
	      arr[i].push(...Array(N - arr[i].length).fill(0));
	    }

	    // add rows
	    for (var _i5 = arr.length; _i5 < N; _i5++) {
	      arr.push(Array(N).fill(0));
	      arr[_i5][_i5] = 1;
	    }
	    return arr;
	  }

	  /**
	   * Create a block-diagonal matrix with the given square matrices on the diagonal
	   * @param {Matrix[] | number[][][]} arr array of matrices to be placed on the diagonal
	   * @param {number} N the size of the resulting matrix
	   */
	  function blockDiag(arr, N) {
	    var M = [];
	    for (var i = 0; i < N; i++) {
	      M[i] = Array(N).fill(0);
	    }
	    var I = 0;
	    for (var sub of arr) {
	      var n = sub.length;
	      for (var _i6 = 0; _i6 < n; _i6++) {
	        for (var j = 0; j < n; j++) {
	          M[I + _i6][I + j] = sub[_i6][j];
	        }
	      }
	      I += n;
	    }
	    return M;
	  }

	  /**
	   * Finds the index of an element in an array using a custom equality function
	   * @template T
	   * @param {Array<T>} arr array in which to search
	   * @param {T} el the element to find
	   * @param {function(T, T): boolean} fn the equality function, first argument is an element of `arr`, the second is always `el`
	   * @returns {number} the index of `el`, or -1 when it's not in `arr`
	   */
	  function indexOf(arr, el, fn) {
	    for (var i = 0; i < arr.length; i++) {
	      if (fn(arr[i], el)) {
	        return i;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Provided a near-singular upper-triangular matrix A and a list of vectors,
	   * finds an eigenvector of A with the smallest eigenvalue, which is orthogonal
	   * to each vector in the list
	   * @template T
	   * @param {T[][]} A near-singular square matrix
	   * @param {number} N dimension
	   * @param {T[][]} orthog list of vectors
	   * @param {number} prec epsilon
	   * @param {'number'|'BigNumber'|'Complex'} type
	   * @return {T[] | null} eigenvector
	   *
	   * @see Numerical Recipes for Fortran 77 – 11.7 Eigenvalues or Eigenvectors by Inverse Iteration
	   */
	  function inverseIterate(A, N, orthog, prec, type) {
	    var largeNum = type === 'BigNumber' ? bignumber(1000) : 1000;
	    var b; // the vector

	    // you better choose a random vector before I count to five
	    var i = 0;
	    while (true) {
	      b = randomOrthogonalVector(N, orthog, type);
	      b = usolve(A, b);
	      if (larger(norm(b), largeNum)) {
	        break;
	      }
	      if (++i >= 5) {
	        return null;
	      }
	    }

	    // you better converge before I count to ten
	    i = 0;
	    while (true) {
	      var c = usolve(A, b);
	      if (smaller(norm(orthogonalComplement(b, [c])), prec)) {
	        break;
	      }
	      if (++i >= 10) {
	        return null;
	      }
	      b = normalize(c);
	    }
	    return b;
	  }

	  /**
	   * Generates a random unit vector of dimension N, orthogonal to each vector in the list
	   * @template T
	   * @param {number} N dimension
	   * @param {T[][]} orthog list of vectors
	   * @param {'number'|'BigNumber'|'Complex'} type
	   * @returns {T[]} random vector
	   */
	  function randomOrthogonalVector(N, orthog, type) {
	    var big = type === 'BigNumber';
	    var cplx = type === 'Complex';

	    // generate random vector with the correct type
	    var v = Array(N).fill(0).map(_ => 2 * Math.random() - 1);
	    if (big) {
	      v = v.map(n => bignumber(n));
	    }
	    if (cplx) {
	      v = v.map(n => complex(n));
	    }

	    // project to orthogonal complement
	    v = orthogonalComplement(v, orthog);

	    // normalize
	    return normalize(v, type);
	  }

	  /**
	   * Project vector v to the orthogonal complement of an array of vectors
	   */
	  function orthogonalComplement(v, orthog) {
	    for (var w of orthog) {
	      // v := v − (w, v)/∥w∥² w
	      v = subtract(v, multiply(divideScalar(dot(w, v), dot(w, w)), w));
	    }
	    return v;
	  }

	  /**
	   * Calculate the norm of a vector.
	   * We can't use math.norm because factory can't handle circular dependency.
	   * Seriously, I'm really fed up with factory.
	   */
	  function norm(v) {
	    return abs(sqrt(dot(v, v)));
	  }

	  /**
	   * Normalize a vector
	   * @template T
	   * @param {T[]} v
	   * @param {'number'|'BigNumber'|'Complex'} type
	   * @returns {T[]} normalized vec
	   */
	  function normalize(v, type) {
	    var big = type === 'BigNumber';
	    var cplx = type === 'Complex';
	    var one = big ? bignumber(1) : cplx ? complex(1) : 1;
	    return multiply(divideScalar(one, norm(v)), v);
	  }
	  return complexEigs;
	}

	function createRealSymmetric(_ref) {
	  var {
	    config,
	    addScalar,
	    subtract,
	    abs,
	    atan,
	    cos,
	    sin,
	    multiplyScalar,
	    inv,
	    bignumber,
	    multiply,
	    add
	  } = _ref;
	  /**
	   * @param {number[] | BigNumber[]} arr
	   * @param {number} N
	   * @param {number} prec
	   * @param {'number' | 'BigNumber'} type
	   */
	  function main(arr, N) {
	    var prec = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : config.epsilon;
	    var type = arguments.length > 3 ? arguments[3] : undefined;
	    if (type === 'number') {
	      return diag(arr, prec);
	    }
	    if (type === 'BigNumber') {
	      return diagBig(arr, prec);
	    }
	    throw TypeError('Unsupported data type: ' + type);
	  }

	  // diagonalization implementation for number (efficient)
	  function diag(x, precision) {
	    var N = x.length;
	    var e0 = Math.abs(precision / N);
	    var psi;
	    var Sij = new Array(N);
	    // Sij is Identity Matrix
	    for (var i = 0; i < N; i++) {
	      Sij[i] = createArray(N, 0);
	      Sij[i][i] = 1.0;
	    }
	    // initial error
	    var Vab = getAij(x);
	    while (Math.abs(Vab[1]) >= Math.abs(e0)) {
	      var _i = Vab[0][0];
	      var j = Vab[0][1];
	      psi = getTheta(x[_i][_i], x[j][j], x[_i][j]);
	      x = x1(x, psi, _i, j);
	      Sij = Sij1(Sij, psi, _i, j);
	      Vab = getAij(x);
	    }
	    var Ei = createArray(N, 0); // eigenvalues
	    for (var _i2 = 0; _i2 < N; _i2++) {
	      Ei[_i2] = x[_i2][_i2];
	    }
	    return sorting(clone$2(Ei), clone$2(Sij));
	  }

	  // diagonalization implementation for bigNumber
	  function diagBig(x, precision) {
	    var N = x.length;
	    var e0 = abs(precision / N);
	    var psi;
	    var Sij = new Array(N);
	    // Sij is Identity Matrix
	    for (var i = 0; i < N; i++) {
	      Sij[i] = createArray(N, 0);
	      Sij[i][i] = 1.0;
	    }
	    // initial error
	    var Vab = getAijBig(x);
	    while (abs(Vab[1]) >= abs(e0)) {
	      var _i3 = Vab[0][0];
	      var j = Vab[0][1];
	      psi = getThetaBig(x[_i3][_i3], x[j][j], x[_i3][j]);
	      x = x1Big(x, psi, _i3, j);
	      Sij = Sij1Big(Sij, psi, _i3, j);
	      Vab = getAijBig(x);
	    }
	    var Ei = createArray(N, 0); // eigenvalues
	    for (var _i4 = 0; _i4 < N; _i4++) {
	      Ei[_i4] = x[_i4][_i4];
	    }
	    // return [clone(Ei), clone(Sij)]
	    return sorting(clone$2(Ei), clone$2(Sij));
	  }

	  // get angle
	  function getTheta(aii, ajj, aij) {
	    var denom = ajj - aii;
	    if (Math.abs(denom) <= config.epsilon) {
	      return Math.PI / 4.0;
	    } else {
	      return 0.5 * Math.atan(2.0 * aij / (ajj - aii));
	    }
	  }

	  // get angle
	  function getThetaBig(aii, ajj, aij) {
	    var denom = subtract(ajj, aii);
	    if (abs(denom) <= config.epsilon) {
	      return bignumber(-1).acos().div(4);
	    } else {
	      return multiplyScalar(0.5, atan(multiply(2.0, aij, inv(denom))));
	    }
	  }

	  // update eigvec
	  function Sij1(Sij, theta, i, j) {
	    var N = Sij.length;
	    var c = Math.cos(theta);
	    var s = Math.sin(theta);
	    var Ski = createArray(N, 0);
	    var Skj = createArray(N, 0);
	    for (var k = 0; k < N; k++) {
	      Ski[k] = c * Sij[k][i] - s * Sij[k][j];
	      Skj[k] = s * Sij[k][i] + c * Sij[k][j];
	    }
	    for (var _k = 0; _k < N; _k++) {
	      Sij[_k][i] = Ski[_k];
	      Sij[_k][j] = Skj[_k];
	    }
	    return Sij;
	  }
	  // update eigvec for overlap
	  function Sij1Big(Sij, theta, i, j) {
	    var N = Sij.length;
	    var c = cos(theta);
	    var s = sin(theta);
	    var Ski = createArray(N, bignumber(0));
	    var Skj = createArray(N, bignumber(0));
	    for (var k = 0; k < N; k++) {
	      Ski[k] = subtract(multiplyScalar(c, Sij[k][i]), multiplyScalar(s, Sij[k][j]));
	      Skj[k] = addScalar(multiplyScalar(s, Sij[k][i]), multiplyScalar(c, Sij[k][j]));
	    }
	    for (var _k2 = 0; _k2 < N; _k2++) {
	      Sij[_k2][i] = Ski[_k2];
	      Sij[_k2][j] = Skj[_k2];
	    }
	    return Sij;
	  }

	  // update matrix
	  function x1Big(Hij, theta, i, j) {
	    var N = Hij.length;
	    var c = bignumber(cos(theta));
	    var s = bignumber(sin(theta));
	    var c2 = multiplyScalar(c, c);
	    var s2 = multiplyScalar(s, s);
	    var Aki = createArray(N, bignumber(0));
	    var Akj = createArray(N, bignumber(0));
	    // 2cs Hij
	    var csHij = multiply(bignumber(2), c, s, Hij[i][j]);
	    //  Aii
	    var Aii = addScalar(subtract(multiplyScalar(c2, Hij[i][i]), csHij), multiplyScalar(s2, Hij[j][j]));
	    var Ajj = add(multiplyScalar(s2, Hij[i][i]), csHij, multiplyScalar(c2, Hij[j][j]));
	    // 0  to i
	    for (var k = 0; k < N; k++) {
	      Aki[k] = subtract(multiplyScalar(c, Hij[i][k]), multiplyScalar(s, Hij[j][k]));
	      Akj[k] = addScalar(multiplyScalar(s, Hij[i][k]), multiplyScalar(c, Hij[j][k]));
	    }
	    // Modify Hij
	    Hij[i][i] = Aii;
	    Hij[j][j] = Ajj;
	    Hij[i][j] = bignumber(0);
	    Hij[j][i] = bignumber(0);
	    // 0  to i
	    for (var _k3 = 0; _k3 < N; _k3++) {
	      if (_k3 !== i && _k3 !== j) {
	        Hij[i][_k3] = Aki[_k3];
	        Hij[_k3][i] = Aki[_k3];
	        Hij[j][_k3] = Akj[_k3];
	        Hij[_k3][j] = Akj[_k3];
	      }
	    }
	    return Hij;
	  }

	  // update matrix
	  function x1(Hij, theta, i, j) {
	    var N = Hij.length;
	    var c = Math.cos(theta);
	    var s = Math.sin(theta);
	    var c2 = c * c;
	    var s2 = s * s;
	    var Aki = createArray(N, 0);
	    var Akj = createArray(N, 0);
	    //  Aii
	    var Aii = c2 * Hij[i][i] - 2 * c * s * Hij[i][j] + s2 * Hij[j][j];
	    var Ajj = s2 * Hij[i][i] + 2 * c * s * Hij[i][j] + c2 * Hij[j][j];
	    // 0  to i
	    for (var k = 0; k < N; k++) {
	      Aki[k] = c * Hij[i][k] - s * Hij[j][k];
	      Akj[k] = s * Hij[i][k] + c * Hij[j][k];
	    }
	    // Modify Hij
	    Hij[i][i] = Aii;
	    Hij[j][j] = Ajj;
	    Hij[i][j] = 0;
	    Hij[j][i] = 0;
	    // 0  to i
	    for (var _k4 = 0; _k4 < N; _k4++) {
	      if (_k4 !== i && _k4 !== j) {
	        Hij[i][_k4] = Aki[_k4];
	        Hij[_k4][i] = Aki[_k4];
	        Hij[j][_k4] = Akj[_k4];
	        Hij[_k4][j] = Akj[_k4];
	      }
	    }
	    return Hij;
	  }

	  // get max off-diagonal value from Upper Diagonal
	  function getAij(Mij) {
	    var N = Mij.length;
	    var maxMij = 0;
	    var maxIJ = [0, 1];
	    for (var i = 0; i < N; i++) {
	      for (var j = i + 1; j < N; j++) {
	        if (Math.abs(maxMij) < Math.abs(Mij[i][j])) {
	          maxMij = Math.abs(Mij[i][j]);
	          maxIJ = [i, j];
	        }
	      }
	    }
	    return [maxIJ, maxMij];
	  }

	  // get max off-diagonal value from Upper Diagonal
	  function getAijBig(Mij) {
	    var N = Mij.length;
	    var maxMij = 0;
	    var maxIJ = [0, 1];
	    for (var i = 0; i < N; i++) {
	      for (var j = i + 1; j < N; j++) {
	        if (abs(maxMij) < abs(Mij[i][j])) {
	          maxMij = abs(Mij[i][j]);
	          maxIJ = [i, j];
	        }
	      }
	    }
	    return [maxIJ, maxMij];
	  }

	  // sort results
	  function sorting(E, S) {
	    var N = E.length;
	    var values = Array(N);
	    var vectors = Array(N);
	    for (var k = 0; k < N; k++) {
	      vectors[k] = Array(N);
	    }
	    for (var i = 0; i < N; i++) {
	      var minID = 0;
	      var minE = E[0];
	      for (var j = 0; j < E.length; j++) {
	        if (abs(E[j]) < abs(minE)) {
	          minID = j;
	          minE = E[minID];
	        }
	      }
	      values[i] = E.splice(minID, 1)[0];
	      for (var _k5 = 0; _k5 < N; _k5++) {
	        vectors[_k5][i] = S[_k5][minID];
	        S[_k5].splice(minID, 1);
	      }
	    }
	    return {
	      values,
	      vectors
	    };
	  }

	  /**
	   * Create an array of a certain size and fill all items with an initial value
	   * @param {number} size
	   * @param {number} value
	   * @return {number[]}
	   */
	  function createArray(size, value) {
	    // TODO: as soon as all browsers support Array.fill, use that instead (IE doesn't support it)
	    var array = new Array(size);
	    for (var i = 0; i < size; i++) {
	      array[i] = value;
	    }
	    return array;
	  }
	  return main;
	}

	var name = 'eigs';

	// The absolute state of math.js's dependency system:
	var dependencies = ['config', 'typed', 'matrix', 'addScalar', 'equal', 'subtract', 'abs', 'atan', 'cos', 'sin', 'multiplyScalar', 'divideScalar', 'inv', 'bignumber', 'multiply', 'add', 'larger', 'column', 'flatten', 'number', 'complex', 'sqrt', 'diag', 'qr', 'usolve', 'usolveAll', 'im', 're', 'smaller', 'matrixFromColumns', 'dot'];
	var createEigs = /* #__PURE__ */factory(name, dependencies, _ref => {
	  var {
	    config,
	    typed,
	    matrix,
	    addScalar,
	    subtract,
	    equal,
	    abs,
	    atan,
	    cos,
	    sin,
	    multiplyScalar,
	    divideScalar,
	    inv,
	    bignumber,
	    multiply,
	    add,
	    larger,
	    column,
	    flatten,
	    number,
	    complex,
	    sqrt,
	    diag,
	    qr,
	    usolve,
	    usolveAll,
	    im,
	    re,
	    smaller,
	    matrixFromColumns,
	    dot
	  } = _ref;
	  var doRealSymetric = createRealSymmetric({
	    config,
	    addScalar,
	    subtract,
	    column,
	    flatten,
	    equal,
	    abs,
	    atan,
	    cos,
	    sin,
	    multiplyScalar,
	    inv,
	    bignumber,
	    complex,
	    multiply,
	    add
	  });
	  var doComplexEigs = createComplexEigs({
	    config,
	    addScalar,
	    subtract,
	    multiply,
	    multiplyScalar,
	    flatten,
	    divideScalar,
	    sqrt,
	    abs,
	    bignumber,
	    diag,
	    qr,
	    inv,
	    usolve,
	    usolveAll,
	    equal,
	    complex,
	    larger,
	    smaller,
	    matrixFromColumns,
	    dot
	  });

	  /**
	   * Compute eigenvalues and eigenvectors of a matrix. The eigenvalues are sorted by their absolute value, ascending.
	   * An eigenvalue with multiplicity k will be listed k times. The eigenvectors are returned as columns of a matrix –
	   * the eigenvector that belongs to the j-th eigenvalue in the list (eg. `values[j]`) is the j-th column (eg. `column(vectors, j)`).
	   * If the algorithm fails to converge, it will throw an error – in that case, however, you may still find useful information
	   * in `err.values` and `err.vectors`.
	   *
	   * Syntax:
	   *
	   *     math.eigs(x, [prec])
	   *
	   * Examples:
	   *
	   *     const { eigs, multiply, column, transpose } = math
	   *     const H = [[5, 2.3], [2.3, 1]]
	   *     const ans = eigs(H) // returns {values: [E1,E2...sorted], vectors: [v1,v2.... corresponding vectors as columns]}
	   *     const E = ans.values
	   *     const U = ans.vectors
	   *     multiply(H, column(U, 0)) // returns multiply(E[0], column(U, 0))
	   *     const UTxHxU = multiply(transpose(U), H, U) // diagonalizes H
	   *     E[0] == UTxHxU[0][0]  // returns true
	   *
	   * See also:
	   *
	   *     inv
	   *
	   * @param {Array | Matrix} x  Matrix to be diagonalized
	   *
	   * @param {number | BigNumber} [prec] Precision, default value: 1e-15
	   * @return {{values: Array|Matrix, vectors: Array|Matrix}} Object containing an array of eigenvalues and a matrix with eigenvectors as columns.
	   *
	   */
	  return typed('eigs', {
	    Array: function Array(x) {
	      var mat = matrix(x);
	      return computeValuesAndVectors(mat);
	    },
	    'Array, number|BigNumber': function ArrayNumberBigNumber(x, prec) {
	      var mat = matrix(x);
	      return computeValuesAndVectors(mat, prec);
	    },
	    Matrix: function Matrix(mat) {
	      var {
	        values,
	        vectors
	      } = computeValuesAndVectors(mat);
	      return {
	        values: matrix(values),
	        vectors: matrix(vectors)
	      };
	    },
	    'Matrix, number|BigNumber': function MatrixNumberBigNumber(mat, prec) {
	      var {
	        values,
	        vectors
	      } = computeValuesAndVectors(mat, prec);
	      return {
	        values: matrix(values),
	        vectors: matrix(vectors)
	      };
	    }
	  });
	  function computeValuesAndVectors(mat, prec) {
	    if (prec === undefined) {
	      prec = config.epsilon;
	    }
	    var size = mat.size();
	    if (size.length !== 2 || size[0] !== size[1]) {
	      throw new RangeError('Matrix must be square (size: ' + format(size) + ')');
	    }
	    var arr = mat.toArray();
	    var N = size[0];
	    if (isReal(arr, N, prec)) {
	      coerceReal(arr, N);
	      if (isSymmetric(arr, N, prec)) {
	        var _type = coerceTypes(mat, arr, N);
	        return doRealSymetric(arr, N, prec, _type);
	      }
	    }
	    var type = coerceTypes(mat, arr, N);
	    return doComplexEigs(arr, N, prec, type);
	  }

	  /** @return {boolean} */
	  function isSymmetric(arr, N, prec) {
	    for (var i = 0; i < N; i++) {
	      for (var j = i; j < N; j++) {
	        // TODO proper comparison of bignum and frac
	        if (larger(bignumber(abs(subtract(arr[i][j], arr[j][i]))), prec)) {
	          return false;
	        }
	      }
	    }
	    return true;
	  }

	  /** @return {boolean} */
	  function isReal(arr, N, prec) {
	    for (var i = 0; i < N; i++) {
	      for (var j = 0; j < N; j++) {
	        // TODO proper comparison of bignum and frac
	        if (larger(bignumber(abs(im(arr[i][j]))), prec)) {
	          return false;
	        }
	      }
	    }
	    return true;
	  }
	  function coerceReal(arr, N) {
	    for (var i = 0; i < N; i++) {
	      for (var j = 0; j < N; j++) {
	        arr[i][j] = re(arr[i][j]);
	      }
	    }
	  }

	  /** @return {'number' | 'BigNumber' | 'Complex'} */
	  function coerceTypes(mat, arr, N) {
	    /** @type {string} */
	    var type = mat.datatype();
	    if (type === 'number' || type === 'BigNumber' || type === 'Complex') {
	      return type;
	    }
	    var hasNumber = false;
	    var hasBig = false;
	    var hasComplex = false;
	    for (var i = 0; i < N; i++) {
	      for (var j = 0; j < N; j++) {
	        var el = arr[i][j];
	        if (isNumber(el) || isFraction(el)) {
	          hasNumber = true;
	        } else if (isBigNumber(el)) {
	          hasBig = true;
	        } else if (isComplex(el)) {
	          hasComplex = true;
	        } else {
	          throw TypeError('Unsupported type in Matrix: ' + typeOf(el));
	        }
	      }
	    }
	    if (hasBig && hasComplex) {
	      console.warn('Complex BigNumbers not supported, this operation will lose precission.');
	    }
	    if (hasComplex) {
	      for (var _i = 0; _i < N; _i++) {
	        for (var _j = 0; _j < N; _j++) {
	          arr[_i][_j] = complex(arr[_i][_j]);
	        }
	      }
	      return 'Complex';
	    }
	    if (hasBig) {
	      for (var _i2 = 0; _i2 < N; _i2++) {
	        for (var _j2 = 0; _j2 < N; _j2++) {
	          arr[_i2][_j2] = bignumber(arr[_i2][_j2]);
	        }
	      }
	      return 'BigNumber';
	    }
	    if (hasNumber) {
	      for (var _i3 = 0; _i3 < N; _i3++) {
	        for (var _j3 = 0; _j3 < N; _j3++) {
	          arr[_i3][_j3] = number(arr[_i3][_j3]);
	        }
	      }
	      return 'number';
	    } else {
	      throw TypeError('Matrix contains unsupported types only.');
	    }
	  }
	});

	/**
	 * THIS FILE IS AUTO-GENERATED
	 * DON'T MAKE CHANGES HERE
	 */
	var BigNumber = /* #__PURE__ */createBigNumberClass({
	  config: config$2
	});
	var Complex = /* #__PURE__ */createComplexClass({});
	var Fraction = /* #__PURE__ */createFractionClass({});
	var Matrix = /* #__PURE__ */createMatrixClass({});
	var DenseMatrix = /* #__PURE__ */createDenseMatrixClass({
	  Matrix
	});
	var typed = /* #__PURE__ */createTyped({
	  BigNumber,
	  Complex,
	  DenseMatrix,
	  Fraction
	});
	var abs = /* #__PURE__ */createAbs({
	  typed
	});
	var addScalar = /* #__PURE__ */createAddScalar({
	  typed
	});
	var atan = /* #__PURE__ */createAtan({
	  typed
	});
	var bignumber = /* #__PURE__ */createBignumber({
	  BigNumber,
	  typed
	});
	var complex = /* #__PURE__ */createComplex({
	  Complex,
	  typed
	});
	var conj = /* #__PURE__ */createConj({
	  typed
	});
	var cos = /* #__PURE__ */createCos({
	  typed
	});
	var equalScalar = /* #__PURE__ */createEqualScalar({
	  config: config$2,
	  typed
	});
	var getMatrixDataType = /* #__PURE__ */createGetMatrixDataType({
	  typed
	});
	var im = /* #__PURE__ */createIm({
	  typed
	});
	var isInteger = /* #__PURE__ */createIsInteger({
	  typed
	});
	var isPositive = /* #__PURE__ */createIsPositive({
	  typed
	});
	var isZero = /* #__PURE__ */createIsZero({
	  typed
	});
	var multiplyScalar = /* #__PURE__ */createMultiplyScalar({
	  typed
	});
	var number = /* #__PURE__ */createNumber({
	  typed
	});
	var re = /* #__PURE__ */createRe({
	  typed
	});
	var sign = /* #__PURE__ */createSign({
	  BigNumber,
	  Fraction,
	  complex,
	  typed
	});
	var sin = /* #__PURE__ */createSin({
	  typed
	});
	var SparseMatrix = /* #__PURE__ */createSparseMatrixClass({
	  Matrix,
	  equalScalar,
	  typed
	});
	var sqrt = /* #__PURE__ */createSqrt({
	  Complex,
	  config: config$2,
	  typed
	});
	var unaryMinus = /* #__PURE__ */createUnaryMinus({
	  typed
	});
	var fraction = /* #__PURE__ */createFraction({
	  Fraction,
	  typed
	});
	var matrix = /* #__PURE__ */createMatrix({
	  DenseMatrix,
	  Matrix,
	  SparseMatrix,
	  typed
	});
	var numeric = /* #__PURE__ */createNumeric({
	  bignumber,
	  fraction,
	  number
	});
	var size = /* #__PURE__ */createSize({
	  matrix,
	  config: config$2,
	  typed
	});
	var transpose = /* #__PURE__ */createTranspose({
	  matrix,
	  typed
	});
	var zeros = /* #__PURE__ */createZeros({
	  BigNumber,
	  config: config$2,
	  matrix,
	  typed
	});
	var concat = /* #__PURE__ */createConcat({
	  isInteger,
	  matrix,
	  typed
	});
	var ctranspose = /* #__PURE__ */createCtranspose({
	  conj,
	  transpose,
	  typed
	});
	var diag = /* #__PURE__ */createDiag({
	  DenseMatrix,
	  SparseMatrix,
	  matrix,
	  typed
	});
	var divideScalar = /* #__PURE__ */createDivideScalar({
	  numeric,
	  typed
	});
	var equal = /* #__PURE__ */createEqual({
	  DenseMatrix,
	  concat,
	  equalScalar,
	  matrix,
	  typed
	});
	var flatten = /* #__PURE__ */createFlatten({
	  matrix,
	  typed
	});
	var identity = /* #__PURE__ */createIdentity({
	  BigNumber,
	  DenseMatrix,
	  SparseMatrix,
	  config: config$2,
	  matrix,
	  typed
	});
	var largerEq = /* #__PURE__ */createLargerEq({
	  DenseMatrix,
	  concat,
	  config: config$2,
	  matrix,
	  typed
	});
	var matrixFromColumns = /* #__PURE__ */createMatrixFromColumns({
	  flatten,
	  matrix,
	  size,
	  typed
	});
	var smaller = /* #__PURE__ */createSmaller({
	  DenseMatrix,
	  concat,
	  config: config$2,
	  matrix,
	  typed
	});
	var subtract = /* #__PURE__ */createSubtract({
	  DenseMatrix,
	  addScalar,
	  concat,
	  equalScalar,
	  matrix,
	  typed,
	  unaryMinus
	});
	var usolve = /* #__PURE__ */createUsolve({
	  DenseMatrix,
	  divideScalar,
	  equalScalar,
	  matrix,
	  multiplyScalar,
	  subtract,
	  typed
	});
	var add = /* #__PURE__ */createAdd({
	  DenseMatrix,
	  SparseMatrix,
	  addScalar,
	  concat,
	  equalScalar,
	  matrix,
	  typed
	});
	var dot = /* #__PURE__ */createDot({
	  addScalar,
	  conj,
	  multiplyScalar,
	  size,
	  typed
	});
	var ImmutableDenseMatrix = /* #__PURE__ */createImmutableDenseMatrixClass({
	  DenseMatrix,
	  smaller
	});
	var Index = /* #__PURE__ */createIndexClass({
	  ImmutableDenseMatrix,
	  getMatrixDataType
	});
	var larger = /* #__PURE__ */createLarger({
	  DenseMatrix,
	  concat,
	  config: config$2,
	  matrix,
	  typed
	});
	var multiply = /* #__PURE__ */createMultiply({
	  addScalar,
	  dot,
	  equalScalar,
	  matrix,
	  multiplyScalar,
	  typed
	});
	var qr = /* #__PURE__ */createQr({
	  addScalar,
	  complex,
	  conj,
	  divideScalar,
	  equal,
	  identity,
	  isZero,
	  matrix,
	  multiplyScalar,
	  sign,
	  sqrt,
	  subtract,
	  typed,
	  unaryMinus,
	  zeros
	});
	var usolveAll = /* #__PURE__ */createUsolveAll({
	  DenseMatrix,
	  divideScalar,
	  equalScalar,
	  matrix,
	  multiplyScalar,
	  subtract,
	  typed
	});
	var det = /* #__PURE__ */createDet({
	  divideScalar,
	  isZero,
	  matrix,
	  multiply,
	  subtract,
	  typed,
	  unaryMinus
	});
	var smallerEq = /* #__PURE__ */createSmallerEq({
	  DenseMatrix,
	  concat,
	  config: config$2,
	  matrix,
	  typed
	});
	var range = /* #__PURE__ */createRange({
	  bignumber,
	  matrix,
	  add,
	  config: config$2,
	  isPositive,
	  larger,
	  largerEq,
	  smaller,
	  smallerEq,
	  typed
	});
	var column = /* #__PURE__ */createColumn({
	  Index,
	  matrix,
	  range,
	  typed
	});
	var inv = /* #__PURE__ */createInv({
	  abs,
	  addScalar,
	  det,
	  divideScalar,
	  identity,
	  matrix,
	  multiply,
	  typed,
	  unaryMinus
	});
	var pow = /* #__PURE__ */createPow({
	  Complex,
	  config: config$2,
	  fraction,
	  identity,
	  inv,
	  matrix,
	  multiply,
	  number,
	  typed
	});
	var eigs = /* #__PURE__ */createEigs({
	  abs,
	  add,
	  addScalar,
	  atan,
	  bignumber,
	  column,
	  complex,
	  config: config$2,
	  cos,
	  diag,
	  divideScalar,
	  dot,
	  equal,
	  flatten,
	  im,
	  inv,
	  larger,
	  matrix,
	  matrixFromColumns,
	  multiply,
	  multiplyScalar,
	  number,
	  qr,
	  re,
	  sin,
	  smaller,
	  sqrt,
	  subtract,
	  typed,
	  usolve,
	  usolveAll
	});
	var norm = /* #__PURE__ */createNorm({
	  abs,
	  add,
	  conj,
	  ctranspose,
	  eigs,
	  equalScalar,
	  larger,
	  matrix,
	  multiply,
	  pow,
	  smaller,
	  sqrt,
	  typed
	});

	// SVG portion of a NodeLink

	//Creates paths between two ports
	class PathGenerator {
	  constructor(source_point, source_port, target_point, target_port, source_dims, target_dims) {
	    this.point_arrays = {
	      source: [source_point],
	      target: [target_point]
	    };
	    this.last_point = {
	      source: source_point,
	      target: target_point
	    };
	    this.direction = {
	      source: port_direction[source_port],
	      target: port_direction[target_port]
	    };
	    this.hasTicked = {
	      source: false,
	      target: false
	    };
	    this.node_dims = {
	      source: source_dims,
	      target: target_dims
	    };
	    this.findcounter = 0;
	    this.full_array = [];
	  }

	  //finds and returns the path
	  findPath() {
	    try {
	      this.findNextPoint();
	    } catch (err) {
	      console.log('error calculating path');
	    }
	    this.full_array = this.joinArrays();
	    return this.full_array;
	  }

	  //gets the total length of our path
	  getPathLength() {
	    let length = 0;
	    for (var i = 1; i < this.full_array.length; i++) {
	      let seg_len = norm(subtract(this.full_array[i], this.full_array[i - 1]));
	      length += seg_len;
	    }
	    return length;
	  }

	  //gets the point at the given fraction of our path length
	  getFractionalPoint(position) {
	    let length = this.getPathLength();
	    if (length == 0) return [0, 0];
	    let point = this.full_array[1];
	    let run_length = 0;
	    let target_length = length * position;
	    for (var i = 1; i < this.full_array.length; i++) {
	      let seg = subtract(this.full_array[i], this.full_array[i - 1]);
	      let seg_len = norm(seg);
	      if (run_length + seg_len < target_length) run_length += seg_len;else {
	        let remaining_len = target_length - run_length;
	        return add(this.full_array[i - 1], multiply(seg, remaining_len / seg_len));
	      }
	    }
	    return point;
	  }

	  //Recursively checks to see whether we need to move around a node, if not, we just need to join the arrays
	  findNextPoint() {
	    if (this.findcounter > 8) return;
	    this.findcounter++;
	    //Determine which case we have:
	    if (dot(this.direction['source'], subtract(this.last_point['target'], this.last_point['source'])) < 0) {
	      this.tickPerpendicular('source');
	      this.findNextPoint();
	    } else if (dot(this.direction['target'], subtract(this.last_point['source'], this.last_point['target'])) < 0) {
	      this.tickPerpendicular('target');
	      this.findNextPoint();
	    }
	  }
	  addPoint(point, port = 'source') {
	    this.point_arrays[port].push(point);
	    this.last_point[port] = point;
	  }
	  addDelta(delta, port = 'source') {
	    this.addPoint(add(delta, this.last_point[port]), port);
	  }

	  //Pads out away from the node edge
	  padOut(port) {
	    this.addDelta(multiply(port_padding, this.direction[port]), port);
	  }

	  //Turns perpendicular to move around the edge of the node
	  tickPerpendicular(port = 'source') {
	    let otherport = 'target';
	    if (port == 'target') otherport = 'source';
	    this.padOut(port);
	    var new_direction = multiply(matrix([multiply([1, 0], this.direction[port][1] ** 2), multiply([0, 1], this.direction[port][0] ** 2)]), subtract(this.last_point[otherport], this.last_point[port]))._data;
	    let norm$1 = norm(new_direction);
	    if (norm$1 == 0) throw 'Non-numeric';
	    this.direction[port] = multiply(1.0 / norm(new_direction), new_direction);
	    this.addDelta(multiply(this.getNodeOutline(this.direction[port], port), this.direction[port]), port);
	  }

	  //Determines how far we need to move in order to move around the edge of the node
	  getNodeOutline(direction, port) {
	    if (this.hasTicked[port]) {
	      return Math.abs(dot(direction, this.node_dims[port]));
	    } else {
	      this.hasTicked[port] = true;
	      return Math.abs(dot(direction, this.node_dims[port]) / 2);
	    }
	  }

	  //joins the two arrays, either as a corner or a double corner
	  joinArrays() {
	    var joined = this.point_arrays['source'].slice();
	    //We have remaining either a corner or both point towards each other
	    if (dot(this.direction['source'], this.direction['target']) == 0) {
	      //corner
	      joined.push([this.direction['source'][0] ** 2 * this.last_point['target'][0] + this.direction['target'][0] ** 2 * this.last_point['source'][0], this.direction['source'][1] ** 2 * this.last_point['target'][1] + this.direction['target'][1] ** 2 * this.last_point['source'][1]]);
	    } else {
	      if (this.hasTicked.source == false && this.hasTicked.target == false) {
	        this.padOut('target');
	        this.padOut('source');
	      }
	      //double corner
	      let diff = subtract(this.last_point['target'], this.last_point['source']);
	      let mid1 = [this.direction['source'][0] ** 2 * diff[0] / 2, this.direction['source'][1] ** 2 * diff[1] / 2];
	      let mid2 = [-(this.direction['source'][0] ** 2) * diff[0] / 2, -(this.direction['source'][1] ** 2) * diff[1] / 2];
	      joined.push(add(this.last_point['source'], mid1));
	      joined.push(add(this.last_point['target'], mid2));
	    }
	    for (var i = this.point_arrays['target'].length - 1; i >= 0; i--) {
	      joined.push(this.point_arrays['target'][i]);
	    }
	    return joined;
	  }
	}
	class NodeLinkSVG extends Component {
	  componentDidUpdate() {
	    if (this.props.hovered || this.state.hovered || this.props.selected || this.props.node_selected) ;
	  }
	  getPathArray(source_point, source_port, target_point, target_port) {
	    var source_dims = [this.props.source_dimensions.width, this.props.source_dimensions.height];
	    var target_dims = [this.props.target_dimensions.width, this.props.target_dimensions.height];
	    var path_generator = new PathGenerator(source_point, source_port, target_point, target_port, source_dims, target_dims);
	    return path_generator;
	  }
	  getPath(path_array) {
	    var path = 'M';
	    for (var i = 0; i < path_array.length; i++) {
	      if (i > 0) path += ' L';
	      var thispoint = path_array[i];
	      path += thispoint[0] + ' ' + thispoint[1];
	    }
	    return path;
	  }
	  render() {
	    try {
	      const source_transform = getSVGTranslation(this.props.source_port_handle.select(function () {
	        return this.parentNode;
	      }).attr('transform'));
	      const target_transform = getSVGTranslation(this.props.target_port_handle.select(function () {
	        return this.parentNode;
	      }).attr('transform'));
	      const source_point = [parseInt(this.props.source_port_handle.attr('cx')) + parseInt(source_transform[0]), parseInt(this.props.source_port_handle.attr('cy')) + parseInt(source_transform[1])];
	      const target_point = [parseInt(this.props.target_port_handle.attr('cx')) + parseInt(target_transform[0]), parseInt(this.props.target_port_handle.attr('cy')) + parseInt(target_transform[1])];
	      var path_array = this.getPathArray(source_point, this.props.source_port, target_point, this.props.target_port);
	      var path = this.getPath(path_array.findPath());
	      let style;
	      if (this.props.style) style = {
	        ...this.props.style
	      };else style = {};
	      if (this.props.hovered || this.state.hovered) {
	        style.stroke = 'yellow';
	        style.opacity = 1;
	      } else if (this.props.node_selected) {
	        style.stroke = myColour;
	        style.opacity = 0.4;
	      } else if (this.props.selected) {
	        style.stroke = myColour;
	        style.opacity = 1;
	      } else if (this.props.lock) {
	        style.stroke = lock.user_colour;
	        style.opacity = 1;
	      } else {
	        style.stroke = 'black';
	        style.opacity = 0.4;
	      }
	      let title;
	      if (this.props.title && this.props.title != '') {
	        let text_position = path_array.getFractionalPoint(this.props.text_position / 100.0);
	        title = /*#__PURE__*/reactExports.createElement("foreignObject", {
	          width: "100",
	          height: "100",
	          x: text_position[0] - 50,
	          y: text_position[1] - 50
	        }, /*#__PURE__*/reactExports.createElement("div", {
	          className: "nodelinkwrapper"
	        }, /*#__PURE__*/reactExports.createElement("div", {
	          className: "nodelinktext",
	          dangerouslySetInnerHTML: {
	            __html: this.props.title
	          },
	          onClick: this.props.clickFunction
	        })));
	      }
	      return /*#__PURE__*/reactExports.createElement("g", {
	        ref: this.maindiv,
	        stroke: "black",
	        fill: "none"
	      }, /*#__PURE__*/reactExports.createElement("path", {
	        opacity: "0",
	        strokeWidth: "10px",
	        d: path,
	        onClick: this.props.clickFunction,
	        onMouseEnter: () => this.setState({
	          hovered: true
	        }),
	        onMouseLeave: () => this.setState({
	          hovered: false
	        }),
	        className: 'nodelink'
	      }), /*#__PURE__*/reactExports.createElement("path", {
	        style: style,
	        strokeWidth: "2px",
	        d: path,
	        markerEnd: "url(#arrow)"
	      }), title);
	    } catch (err) {
	      console.log('could not draw a node link');
	      return null;
	    }
	  }
	}

	var shim = {exports: {}};

	var useSyncExternalStoreShim_production_min = {};

	/**
	 * @license React
	 * use-sync-external-store-shim.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredUseSyncExternalStoreShim_production_min;

	function requireUseSyncExternalStoreShim_production_min () {
		if (hasRequiredUseSyncExternalStoreShim_production_min) return useSyncExternalStoreShim_production_min;
		hasRequiredUseSyncExternalStoreShim_production_min = 1;
	var e=reactExports;function h(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var k="function"===typeof Object.is?Object.is:h,l=e.useState,m=e.useEffect,n=e.useLayoutEffect,p=e.useDebugValue;function q(a,b){var d=b(),f=l({inst:{value:d,getSnapshot:b}}),c=f[0].inst,g=f[1];n(function(){c.value=d;c.getSnapshot=b;r(c)&&g({inst:c});},[a,d,b]);m(function(){r(c)&&g({inst:c});return a(function(){r(c)&&g({inst:c});})},[a]);p(d);return d}
		function r(a){var b=a.getSnapshot;a=a.value;try{var d=b();return !k(a,d)}catch(f){return !0}}function t(a,b){return b()}var u="undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement?t:q;useSyncExternalStoreShim_production_min.useSyncExternalStore=void 0!==e.useSyncExternalStore?e.useSyncExternalStore:u;
		return useSyncExternalStoreShim_production_min;
	}

	var useSyncExternalStoreShim_development = {};

	/**
	 * @license React
	 * use-sync-external-store-shim.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredUseSyncExternalStoreShim_development;

	function requireUseSyncExternalStoreShim_development () {
		if (hasRequiredUseSyncExternalStoreShim_development) return useSyncExternalStoreShim_development;
		hasRequiredUseSyncExternalStoreShim_development = 1;

		if (process.env.NODE_ENV !== "production") {
		  (function() {

		/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		if (
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
		    'function'
		) {
		  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
		}
		          var React = reactExports;

		var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

		function error(format) {
		  {
		    {
		      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
		        args[_key2 - 1] = arguments[_key2];
		      }

		      printWarning('error', format, args);
		    }
		  }
		}

		function printWarning(level, format, args) {
		  // When changing this logic, you might want to also
		  // update consoleWithStackDev.www.js as well.
		  {
		    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
		    var stack = ReactDebugCurrentFrame.getStackAddendum();

		    if (stack !== '') {
		      format += '%s';
		      args = args.concat([stack]);
		    } // eslint-disable-next-line react-internal/safe-string-coercion


		    var argsWithFormat = args.map(function (item) {
		      return String(item);
		    }); // Careful: RN currently depends on this prefix

		    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
		    // breaks IE9: https://github.com/facebook/react/issues/13610
		    // eslint-disable-next-line react-internal/no-production-logging

		    Function.prototype.apply.call(console[level], console, argsWithFormat);
		  }
		}

		/**
		 * inlined Object.is polyfill to avoid requiring consumers ship their own
		 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
		 */
		function is(x, y) {
		  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
		  ;
		}

		var objectIs = typeof Object.is === 'function' ? Object.is : is;

		// dispatch for CommonJS interop named imports.

		var useState = React.useState,
		    useEffect = React.useEffect,
		    useLayoutEffect = React.useLayoutEffect,
		    useDebugValue = React.useDebugValue;
		var didWarnOld18Alpha = false;
		var didWarnUncachedGetSnapshot = false; // Disclaimer: This shim breaks many of the rules of React, and only works
		// because of a very particular set of implementation details and assumptions
		// -- change any one of them and it will break. The most important assumption
		// is that updates are always synchronous, because concurrent rendering is
		// only available in versions of React that also have a built-in
		// useSyncExternalStore API. And we only use this shim when the built-in API
		// does not exist.
		//
		// Do not assume that the clever hacks used by this hook also work in general.
		// The point of this shim is to replace the need for hacks by other libraries.

		function useSyncExternalStore(subscribe, getSnapshot, // Note: The shim does not use getServerSnapshot, because pre-18 versions of
		// React do not expose a way to check if we're hydrating. So users of the shim
		// will need to track that themselves and return the correct value
		// from `getSnapshot`.
		getServerSnapshot) {
		  {
		    if (!didWarnOld18Alpha) {
		      if (React.startTransition !== undefined) {
		        didWarnOld18Alpha = true;

		        error('You are using an outdated, pre-release alpha of React 18 that ' + 'does not support useSyncExternalStore. The ' + 'use-sync-external-store shim will not work correctly. Upgrade ' + 'to a newer pre-release.');
		      }
		    }
		  } // Read the current snapshot from the store on every render. Again, this
		  // breaks the rules of React, and only works here because of specific
		  // implementation details, most importantly that updates are
		  // always synchronous.


		  var value = getSnapshot();

		  {
		    if (!didWarnUncachedGetSnapshot) {
		      var cachedValue = getSnapshot();

		      if (!objectIs(value, cachedValue)) {
		        error('The result of getSnapshot should be cached to avoid an infinite loop');

		        didWarnUncachedGetSnapshot = true;
		      }
		    }
		  } // Because updates are synchronous, we don't queue them. Instead we force a
		  // re-render whenever the subscribed state changes by updating an some
		  // arbitrary useState hook. Then, during render, we call getSnapshot to read
		  // the current value.
		  //
		  // Because we don't actually use the state returned by the useState hook, we
		  // can save a bit of memory by storing other stuff in that slot.
		  //
		  // To implement the early bailout, we need to track some things on a mutable
		  // object. Usually, we would put that in a useRef hook, but we can stash it in
		  // our useState hook instead.
		  //
		  // To force a re-render, we call forceUpdate({inst}). That works because the
		  // new object always fails an equality check.


		  var _useState = useState({
		    inst: {
		      value: value,
		      getSnapshot: getSnapshot
		    }
		  }),
		      inst = _useState[0].inst,
		      forceUpdate = _useState[1]; // Track the latest getSnapshot function with a ref. This needs to be updated
		  // in the layout phase so we can access it during the tearing check that
		  // happens on subscribe.


		  useLayoutEffect(function () {
		    inst.value = value;
		    inst.getSnapshot = getSnapshot; // Whenever getSnapshot or subscribe changes, we need to check in the
		    // commit phase if there was an interleaved mutation. In concurrent mode
		    // this can happen all the time, but even in synchronous mode, an earlier
		    // effect may have mutated the store.

		    if (checkIfSnapshotChanged(inst)) {
		      // Force a re-render.
		      forceUpdate({
		        inst: inst
		      });
		    }
		  }, [subscribe, value, getSnapshot]);
		  useEffect(function () {
		    // Check for changes right before subscribing. Subsequent changes will be
		    // detected in the subscription handler.
		    if (checkIfSnapshotChanged(inst)) {
		      // Force a re-render.
		      forceUpdate({
		        inst: inst
		      });
		    }

		    var handleStoreChange = function () {
		      // TODO: Because there is no cross-renderer API for batching updates, it's
		      // up to the consumer of this library to wrap their subscription event
		      // with unstable_batchedUpdates. Should we try to detect when this isn't
		      // the case and print a warning in development?
		      // The store changed. Check if the snapshot changed since the last time we
		      // read from the store.
		      if (checkIfSnapshotChanged(inst)) {
		        // Force a re-render.
		        forceUpdate({
		          inst: inst
		        });
		      }
		    }; // Subscribe to the store and return a clean-up function.


		    return subscribe(handleStoreChange);
		  }, [subscribe]);
		  useDebugValue(value);
		  return value;
		}

		function checkIfSnapshotChanged(inst) {
		  var latestGetSnapshot = inst.getSnapshot;
		  var prevValue = inst.value;

		  try {
		    var nextValue = latestGetSnapshot();
		    return !objectIs(prevValue, nextValue);
		  } catch (error) {
		    return true;
		  }
		}

		function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {
		  // Note: The shim does not use getServerSnapshot, because pre-18 versions of
		  // React do not expose a way to check if we're hydrating. So users of the shim
		  // will need to track that themselves and return the correct value
		  // from `getSnapshot`.
		  return getSnapshot();
		}

		var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

		var isServerEnvironment = !canUseDOM;

		var shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore;
		var useSyncExternalStore$2 = React.useSyncExternalStore !== undefined ? React.useSyncExternalStore : shim;

		useSyncExternalStoreShim_development.useSyncExternalStore = useSyncExternalStore$2;
		          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		if (
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
		    'function'
		) {
		  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
		}
		        
		  })();
		}
		return useSyncExternalStoreShim_development;
	}

	if (process.env.NODE_ENV === 'production') {
	  shim.exports = requireUseSyncExternalStoreShim_production_min();
	} else {
	  shim.exports = requireUseSyncExternalStoreShim_development();
	}

	var shimExports = shim.exports;

	var withSelector_production_min = {};

	/**
	 * @license React
	 * use-sync-external-store-shim/with-selector.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredWithSelector_production_min;

	function requireWithSelector_production_min () {
		if (hasRequiredWithSelector_production_min) return withSelector_production_min;
		hasRequiredWithSelector_production_min = 1;
	var h=reactExports,n=shimExports;function p(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var q="function"===typeof Object.is?Object.is:p,r=n.useSyncExternalStore,t=h.useRef,u=h.useEffect,v=h.useMemo,w=h.useDebugValue;
		withSelector_production_min.useSyncExternalStoreWithSelector=function(a,b,e,l,g){var c=t(null);if(null===c.current){var f={hasValue:!1,value:null};c.current=f;}else f=c.current;c=v(function(){function a(a){if(!c){c=!0;d=a;a=l(a);if(void 0!==g&&f.hasValue){var b=f.value;if(g(b,a))return k=b}return k=a}b=k;if(q(d,a))return b;var e=l(a);if(void 0!==g&&g(b,e))return b;d=a;return k=e}var c=!1,d,k,m=void 0===e?null:e;return [function(){return a(b())},null===m?void 0:function(){return a(m())}]},[b,e,l,g]);var d=r(a,c[0],c[1]);
		u(function(){f.hasValue=!0;f.value=d;},[d]);w(d);return d};
		return withSelector_production_min;
	}

	var withSelector_development = {};

	/**
	 * @license React
	 * use-sync-external-store-shim/with-selector.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredWithSelector_development;

	function requireWithSelector_development () {
		if (hasRequiredWithSelector_development) return withSelector_development;
		hasRequiredWithSelector_development = 1;

		if (process.env.NODE_ENV !== "production") {
		  (function() {

		/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		if (
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
		    'function'
		) {
		  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
		}
		          var React = reactExports;
		var shim = shimExports;

		/**
		 * inlined Object.is polyfill to avoid requiring consumers ship their own
		 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
		 */
		function is(x, y) {
		  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
		  ;
		}

		var objectIs = typeof Object.is === 'function' ? Object.is : is;

		var useSyncExternalStore = shim.useSyncExternalStore;

		// for CommonJS interop.

		var useRef = React.useRef,
		    useEffect = React.useEffect,
		    useMemo = React.useMemo,
		    useDebugValue = React.useDebugValue; // Same as useSyncExternalStore, but supports selector and isEqual arguments.

		function useSyncExternalStoreWithSelector(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {
		  // Use this to track the rendered snapshot.
		  var instRef = useRef(null);
		  var inst;

		  if (instRef.current === null) {
		    inst = {
		      hasValue: false,
		      value: null
		    };
		    instRef.current = inst;
		  } else {
		    inst = instRef.current;
		  }

		  var _useMemo = useMemo(function () {
		    // Track the memoized state using closure variables that are local to this
		    // memoized instance of a getSnapshot function. Intentionally not using a
		    // useRef hook, because that state would be shared across all concurrent
		    // copies of the hook/component.
		    var hasMemo = false;
		    var memoizedSnapshot;
		    var memoizedSelection;

		    var memoizedSelector = function (nextSnapshot) {
		      if (!hasMemo) {
		        // The first time the hook is called, there is no memoized result.
		        hasMemo = true;
		        memoizedSnapshot = nextSnapshot;

		        var _nextSelection = selector(nextSnapshot);

		        if (isEqual !== undefined) {
		          // Even if the selector has changed, the currently rendered selection
		          // may be equal to the new selection. We should attempt to reuse the
		          // current value if possible, to preserve downstream memoizations.
		          if (inst.hasValue) {
		            var currentSelection = inst.value;

		            if (isEqual(currentSelection, _nextSelection)) {
		              memoizedSelection = currentSelection;
		              return currentSelection;
		            }
		          }
		        }

		        memoizedSelection = _nextSelection;
		        return _nextSelection;
		      } // We may be able to reuse the previous invocation's result.


		      // We may be able to reuse the previous invocation's result.
		      var prevSnapshot = memoizedSnapshot;
		      var prevSelection = memoizedSelection;

		      if (objectIs(prevSnapshot, nextSnapshot)) {
		        // The snapshot is the same as last time. Reuse the previous selection.
		        return prevSelection;
		      } // The snapshot has changed, so we need to compute a new selection.


		      // The snapshot has changed, so we need to compute a new selection.
		      var nextSelection = selector(nextSnapshot); // If a custom isEqual function is provided, use that to check if the data
		      // has changed. If it hasn't, return the previous selection. That signals
		      // to React that the selections are conceptually equal, and we can bail
		      // out of rendering.

		      // If a custom isEqual function is provided, use that to check if the data
		      // has changed. If it hasn't, return the previous selection. That signals
		      // to React that the selections are conceptually equal, and we can bail
		      // out of rendering.
		      if (isEqual !== undefined && isEqual(prevSelection, nextSelection)) {
		        return prevSelection;
		      }

		      memoizedSnapshot = nextSnapshot;
		      memoizedSelection = nextSelection;
		      return nextSelection;
		    }; // Assigning this to a constant so that Flow knows it can't change.


		    // Assigning this to a constant so that Flow knows it can't change.
		    var maybeGetServerSnapshot = getServerSnapshot === undefined ? null : getServerSnapshot;

		    var getSnapshotWithSelector = function () {
		      return memoizedSelector(getSnapshot());
		    };

		    var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? undefined : function () {
		      return memoizedSelector(maybeGetServerSnapshot());
		    };
		    return [getSnapshotWithSelector, getServerSnapshotWithSelector];
		  }, [getSnapshot, getServerSnapshot, selector, isEqual]),
		      getSelection = _useMemo[0],
		      getServerSelection = _useMemo[1];

		  var value = useSyncExternalStore(subscribe, getSelection, getServerSelection);
		  useEffect(function () {
		    inst.hasValue = true;
		    inst.value = value;
		  }, [value]);
		  useDebugValue(value);
		  return value;
		}

		withSelector_development.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector;
		          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		if (
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
		    'function'
		) {
		  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
		}
		        
		  })();
		}
		return withSelector_development;
	}

	if (process.env.NODE_ENV === 'production') {
	  requireWithSelector_production_min();
	} else {
	  requireWithSelector_development();
	}

	// Default to a dummy "batch" implementation that just runs the callback
	function defaultNoopBatch(callback) {
	  callback();
	}

	let batch = defaultNoopBatch; // Allow injecting another batching function later

	const setBatch = newBatch => batch = newBatch; // Supply a getter just to skip dealing with ESM bindings

	const getBatch = () => batch;

	const ContextKey = Symbol.for(`react-redux-context`);
	const gT = typeof globalThis !== "undefined" ? globalThis :
	/* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
	{};

	function getContext() {
	  var _gT$ContextKey;

	  if (!reactExports.createContext) return {};
	  const contextMap = (_gT$ContextKey = gT[ContextKey]) != null ? _gT$ContextKey : gT[ContextKey] = new Map();
	  let realContext = contextMap.get(reactExports.createContext);

	  if (!realContext) {
	    realContext = reactExports.createContext(null);

	    if (process.env.NODE_ENV !== 'production') {
	      realContext.displayName = 'ReactRedux';
	    }

	    contextMap.set(reactExports.createContext, realContext);
	  }

	  return realContext;
	}

	const ReactReduxContext = /*#__PURE__*/getContext();

	const notInitialized = () => {
	  throw new Error('uSES not initialized!');
	};

	function _extends() {
	  _extends = Object.assign ? Object.assign.bind() : function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];
	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }
	    return target;
	  };
	  return _extends.apply(this, arguments);
	}

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;
	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }
	  return target;
	}

	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */


	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */

	}

	function verify(selector, methodName) {
	  if (!selector) {
	    throw new Error(`Unexpected value for ${methodName} in connect.`);
	  } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
	    if (!Object.prototype.hasOwnProperty.call(selector, 'dependsOnOwnProps')) {
	      warning(`The selector for ${methodName} of connect did not specify a value for dependsOnOwnProps.`);
	    }
	  }
	}

	function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps) {
	  verify(mapStateToProps, 'mapStateToProps');
	  verify(mapDispatchToProps, 'mapDispatchToProps');
	  verify(mergeProps, 'mergeProps');
	}

	const _excluded$1 = ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"];
	function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, {
	  areStatesEqual,
	  areOwnPropsEqual,
	  areStatePropsEqual
	}) {
	  let hasRunAtLeastOnce = false;
	  let state;
	  let ownProps;
	  let stateProps;
	  let dispatchProps;
	  let mergedProps;

	  function handleFirstCall(firstState, firstOwnProps) {
	    state = firstState;
	    ownProps = firstOwnProps;
	    stateProps = mapStateToProps(state, ownProps);
	    dispatchProps = mapDispatchToProps(dispatch, ownProps);
	    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    hasRunAtLeastOnce = true;
	    return mergedProps;
	  }

	  function handleNewPropsAndNewState() {
	    stateProps = mapStateToProps(state, ownProps);
	    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
	    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    return mergedProps;
	  }

	  function handleNewProps() {
	    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
	    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
	    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    return mergedProps;
	  }

	  function handleNewState() {
	    const nextStateProps = mapStateToProps(state, ownProps);
	    const statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
	    stateProps = nextStateProps;
	    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    return mergedProps;
	  }

	  function handleSubsequentCalls(nextState, nextOwnProps) {
	    const propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
	    const stateChanged = !areStatesEqual(nextState, state, nextOwnProps, ownProps);
	    state = nextState;
	    ownProps = nextOwnProps;
	    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
	    if (propsChanged) return handleNewProps();
	    if (stateChanged) return handleNewState();
	    return mergedProps;
	  }

	  return function pureFinalPropsSelector(nextState, nextOwnProps) {
	    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
	  };
	}
	// TODO: Add more comments
	// The selector returned by selectorFactory will memoize its results,
	// allowing connect's shouldComponentUpdate to return false if final
	// props have not changed.
	function finalPropsSelectorFactory(dispatch, _ref) {
	  let {
	    initMapStateToProps,
	    initMapDispatchToProps,
	    initMergeProps
	  } = _ref,
	      options = _objectWithoutPropertiesLoose(_ref, _excluded$1);

	  const mapStateToProps = initMapStateToProps(dispatch, options);
	  const mapDispatchToProps = initMapDispatchToProps(dispatch, options);
	  const mergeProps = initMergeProps(dispatch, options);

	  if (process.env.NODE_ENV !== 'production') {
	    verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps);
	  }

	  return pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
	}

	function bindActionCreators(actionCreators, dispatch) {
	  const boundActionCreators = {};

	  for (const key in actionCreators) {
	    const actionCreator = actionCreators[key];

	    if (typeof actionCreator === 'function') {
	      boundActionCreators[key] = (...args) => dispatch(actionCreator(...args));
	    }
	  }

	  return boundActionCreators;
	}

	/**
	 * @param {any} obj The object to inspect.
	 * @returns {boolean} True if the argument appears to be a plain object.
	 */
	function isPlainObject(obj) {
	  if (typeof obj !== 'object' || obj === null) return false;
	  let proto = Object.getPrototypeOf(obj);
	  if (proto === null) return true;
	  let baseProto = proto;

	  while (Object.getPrototypeOf(baseProto) !== null) {
	    baseProto = Object.getPrototypeOf(baseProto);
	  }

	  return proto === baseProto;
	}

	function verifyPlainObject(value, displayName, methodName) {
	  if (!isPlainObject(value)) {
	    warning(`${methodName}() in ${displayName} must return a plain object. Instead received ${value}.`);
	  }
	}

	function wrapMapToPropsConstant( // * Note:
	//  It seems that the dispatch argument
	//  could be a dispatch function in some cases (ex: whenMapDispatchToPropsIsMissing)
	//  and a state object in some others (ex: whenMapStateToPropsIsMissing)
	// eslint-disable-next-line no-unused-vars
	getConstant) {
	  return function initConstantSelector(dispatch) {
	    const constant = getConstant(dispatch);

	    function constantSelector() {
	      return constant;
	    }

	    constantSelector.dependsOnOwnProps = false;
	    return constantSelector;
	  };
	} // dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args
	// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine
	// whether mapToProps needs to be invoked when props have changed.
	//
	// A length of one signals that mapToProps does not depend on props from the parent component.
	// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and
	// therefore not reporting its length accurately..
	// TODO Can this get pulled out so that we can subscribe directly to the store if we don't need ownProps?

	function getDependsOnOwnProps(mapToProps) {
	  return mapToProps.dependsOnOwnProps ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
	} // Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,
	// this function wraps mapToProps in a proxy function which does several things:
	//
	//  * Detects whether the mapToProps function being called depends on props, which
	//    is used by selectorFactory to decide if it should reinvoke on props changes.
	//
	//  * On first call, handles mapToProps if returns another function, and treats that
	//    new function as the true mapToProps for subsequent calls.
	//
	//  * On first call, verifies the first result is a plain object, in order to warn
	//    the developer that their mapToProps function is not returning a valid result.
	//

	function wrapMapToPropsFunc(mapToProps, methodName) {
	  return function initProxySelector(dispatch, {
	    displayName
	  }) {
	    const proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
	      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch, undefined);
	    }; // allow detectFactoryAndVerify to get ownProps


	    proxy.dependsOnOwnProps = true;

	    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
	      proxy.mapToProps = mapToProps;
	      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
	      let props = proxy(stateOrDispatch, ownProps);

	      if (typeof props === 'function') {
	        proxy.mapToProps = props;
	        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
	        props = proxy(stateOrDispatch, ownProps);
	      }

	      if (process.env.NODE_ENV !== 'production') verifyPlainObject(props, displayName, methodName);
	      return props;
	    };

	    return proxy;
	  };
	}

	function createInvalidArgFactory(arg, name) {
	  return (dispatch, options) => {
	    throw new Error(`Invalid value of type ${typeof arg} for ${name} argument when connecting component ${options.wrappedComponentName}.`);
	  };
	}

	function mapDispatchToPropsFactory(mapDispatchToProps) {
	  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? wrapMapToPropsConstant(dispatch => // @ts-ignore
	  bindActionCreators(mapDispatchToProps, dispatch)) : !mapDispatchToProps ? wrapMapToPropsConstant(dispatch => ({
	    dispatch
	  })) : typeof mapDispatchToProps === 'function' ? // @ts-ignore
	  wrapMapToPropsFunc(mapDispatchToProps, 'mapDispatchToProps') : createInvalidArgFactory(mapDispatchToProps, 'mapDispatchToProps');
	}

	function mapStateToPropsFactory(mapStateToProps) {
	  return !mapStateToProps ? wrapMapToPropsConstant(() => ({})) : typeof mapStateToProps === 'function' ? // @ts-ignore
	  wrapMapToPropsFunc(mapStateToProps, 'mapStateToProps') : createInvalidArgFactory(mapStateToProps, 'mapStateToProps');
	}

	function defaultMergeProps(stateProps, dispatchProps, ownProps) {
	  // @ts-ignore
	  return _extends({}, ownProps, stateProps, dispatchProps);
	}
	function wrapMergePropsFunc(mergeProps) {
	  return function initMergePropsProxy(dispatch, {
	    displayName,
	    areMergedPropsEqual
	  }) {
	    let hasRunOnce = false;
	    let mergedProps;
	    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
	      const nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

	      if (hasRunOnce) {
	        if (!areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
	      } else {
	        hasRunOnce = true;
	        mergedProps = nextMergedProps;
	        if (process.env.NODE_ENV !== 'production') verifyPlainObject(mergedProps, displayName, 'mergeProps');
	      }

	      return mergedProps;
	    };
	  };
	}
	function mergePropsFactory(mergeProps) {
	  return !mergeProps ? () => defaultMergeProps : typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : createInvalidArgFactory(mergeProps, 'mergeProps');
	}

	// well as nesting subscriptions of descendant components, so that we can ensure the
	// ancestor components re-render before descendants

	function createListenerCollection() {
	  const batch = getBatch();
	  let first = null;
	  let last = null;
	  return {
	    clear() {
	      first = null;
	      last = null;
	    },

	    notify() {
	      batch(() => {
	        let listener = first;

	        while (listener) {
	          listener.callback();
	          listener = listener.next;
	        }
	      });
	    },

	    get() {
	      let listeners = [];
	      let listener = first;

	      while (listener) {
	        listeners.push(listener);
	        listener = listener.next;
	      }

	      return listeners;
	    },

	    subscribe(callback) {
	      let isSubscribed = true;
	      let listener = last = {
	        callback,
	        next: null,
	        prev: last
	      };

	      if (listener.prev) {
	        listener.prev.next = listener;
	      } else {
	        first = listener;
	      }

	      return function unsubscribe() {
	        if (!isSubscribed || first === null) return;
	        isSubscribed = false;

	        if (listener.next) {
	          listener.next.prev = listener.prev;
	        } else {
	          last = listener.prev;
	        }

	        if (listener.prev) {
	          listener.prev.next = listener.next;
	        } else {
	          first = listener.next;
	        }
	      };
	    }

	  };
	}

	const nullListeners = {
	  notify() {},

	  get: () => []
	};
	function createSubscription(store, parentSub) {
	  let unsubscribe;
	  let listeners = nullListeners;

	  function addNestedSub(listener) {
	    trySubscribe();
	    return listeners.subscribe(listener);
	  }

	  function notifyNestedSubs() {
	    listeners.notify();
	  }

	  function handleChangeWrapper() {
	    if (subscription.onStateChange) {
	      subscription.onStateChange();
	    }
	  }

	  function isSubscribed() {
	    return Boolean(unsubscribe);
	  }

	  function trySubscribe() {
	    if (!unsubscribe) {
	      unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);
	      listeners = createListenerCollection();
	    }
	  }

	  function tryUnsubscribe() {
	    if (unsubscribe) {
	      unsubscribe();
	      unsubscribe = undefined;
	      listeners.clear();
	      listeners = nullListeners;
	    }
	  }

	  const subscription = {
	    addNestedSub,
	    notifyNestedSubs,
	    handleChangeWrapper,
	    isSubscribed,
	    trySubscribe,
	    tryUnsubscribe,
	    getListeners: () => listeners
	  };
	  return subscription;
	}

	// To get around it, we can conditionally useEffect on the server (no-op) and
	// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store
	// subscription callback always has the selector from the latest render commit
	// available, otherwise a store update may happen between render and the effect,
	// which may cause missed updates; we also must ensure the store subscription
	// is created synchronously, otherwise a store update may occur before the
	// subscription is created and an inconsistent state may be observed
	// Matches logic in React's `shared/ExecutionEnvironment` file

	const canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');
	const useIsomorphicLayoutEffect = canUseDOM ? reactExports.useLayoutEffect : reactExports.useEffect;

	function is(x, y) {
	  if (x === y) {
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    return x !== x && y !== y;
	  }
	}

	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) return true;

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  const keysA = Object.keys(objA);
	  const keysB = Object.keys(objB);
	  if (keysA.length !== keysB.length) return false;

	  for (let i = 0; i < keysA.length; i++) {
	    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	const _excluded = ["reactReduxForwardedRef"];
	let useSyncExternalStore = notInitialized;
	const initializeConnect = fn => {
	  useSyncExternalStore = fn;
	}; // Define some constant arrays just to avoid re-creating these
	const NO_SUBSCRIPTION_ARRAY = [null, null]; // Attempts to stringify whatever not-really-a-component value we were given
	// for logging in an error message

	const stringifyComponent = Comp => {
	  try {
	    return JSON.stringify(Comp);
	  } catch (err) {
	    return String(Comp);
	  }
	};

	// This is "just" a `useLayoutEffect`, but with two modifications:
	// - we need to fall back to `useEffect` in SSR to avoid annoying warnings
	// - we extract this to a separate function to avoid closing over values
	//   and causing memory leaks
	function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
	  useIsomorphicLayoutEffect(() => effectFunc(...effectArgs), dependencies);
	} // Effect callback, extracted: assign the latest props values to refs for later usage


	function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, // actualChildProps: unknown,
	childPropsFromStoreUpdate, notifyNestedSubs) {
	  // We want to capture the wrapper props and child props we used for later comparisons
	  lastWrapperProps.current = wrapperProps;
	  renderIsScheduled.current = false; // If the render was from a store update, clear out that reference and cascade the subscriber update

	  if (childPropsFromStoreUpdate.current) {
	    childPropsFromStoreUpdate.current = null;
	    notifyNestedSubs();
	  }
	} // Effect callback, extracted: subscribe to the Redux store or nearest connected ancestor,
	// check for updates after dispatched actions, and trigger re-renders.


	function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, // forceComponentUpdateDispatch: React.Dispatch<any>,
	additionalSubscribeListener) {
	  // If we're not subscribed to the store, nothing to do here
	  if (!shouldHandleStateChanges) return () => {}; // Capture values for checking if and when this component unmounts

	  let didUnsubscribe = false;
	  let lastThrownError = null; // We'll run this callback every time a store subscription update propagates to this component

	  const checkForUpdates = () => {
	    if (didUnsubscribe || !isMounted.current) {
	      // Don't run stale listeners.
	      // Redux doesn't guarantee unsubscriptions happen until next dispatch.
	      return;
	    } // TODO We're currently calling getState ourselves here, rather than letting `uSES` do it


	    const latestStoreState = store.getState();
	    let newChildProps, error;

	    try {
	      // Actually run the selector with the most recent store state and wrapper props
	      // to determine what the child props should be
	      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);
	    } catch (e) {
	      error = e;
	      lastThrownError = e;
	    }

	    if (!error) {
	      lastThrownError = null;
	    } // If the child props haven't changed, nothing to do here - cascade the subscription update


	    if (newChildProps === lastChildProps.current) {
	      if (!renderIsScheduled.current) {
	        notifyNestedSubs();
	      }
	    } else {
	      // Save references to the new child props.  Note that we track the "child props from store update"
	      // as a ref instead of a useState/useReducer because we need a way to determine if that value has
	      // been processed.  If this went into useState/useReducer, we couldn't clear out the value without
	      // forcing another re-render, which we don't want.
	      lastChildProps.current = newChildProps;
	      childPropsFromStoreUpdate.current = newChildProps;
	      renderIsScheduled.current = true; // TODO This is hacky and not how `uSES` is meant to be used
	      // Trigger the React `useSyncExternalStore` subscriber

	      additionalSubscribeListener();
	    }
	  }; // Actually subscribe to the nearest connected ancestor (or store)


	  subscription.onStateChange = checkForUpdates;
	  subscription.trySubscribe(); // Pull data from the store after first render in case the store has
	  // changed since we began.

	  checkForUpdates();

	  const unsubscribeWrapper = () => {
	    didUnsubscribe = true;
	    subscription.tryUnsubscribe();
	    subscription.onStateChange = null;

	    if (lastThrownError) {
	      // It's possible that we caught an error due to a bad mapState function, but the
	      // parent re-rendered without this component and we're about to unmount.
	      // This shouldn't happen as long as we do top-down subscriptions correctly, but
	      // if we ever do those wrong, this throw will surface the error in our tests.
	      // In that case, throw the error from here so it doesn't get lost.
	      throw lastThrownError;
	    }
	  };

	  return unsubscribeWrapper;
	} // Reducer initial state creation for our update reducer

	function strictEqual(a, b) {
	  return a === b;
	}
	/**
	 * Infers the type of props that a connector will inject into a component.
	 */


	let hasWarnedAboutDeprecatedPureOption = false;
	/**
	 * Connects a React component to a Redux store.
	 *
	 * - Without arguments, just wraps the component, without changing the behavior / props
	 *
	 * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior
	 * is to override ownProps (as stated in the docs), so what remains is everything that's
	 * not a state or dispatch prop
	 *
	 * - When 3rd param is passed, we don't know if ownProps propagate and whether they
	 * should be valid component props, because it depends on mergeProps implementation.
	 * As such, it is the user's responsibility to extend ownProps interface from state or
	 * dispatch props or both when applicable
	 *
	 * @param mapStateToProps A function that extracts values from state
	 * @param mapDispatchToProps Setup for dispatching actions
	 * @param mergeProps Optional callback to merge state and dispatch props together
	 * @param options Options for configuring the connection
	 *
	 */

	function connect(mapStateToProps, mapDispatchToProps, mergeProps, {
	  // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.
	  // @ts-ignore
	  pure,
	  areStatesEqual = strictEqual,
	  areOwnPropsEqual = shallowEqual,
	  areStatePropsEqual = shallowEqual,
	  areMergedPropsEqual = shallowEqual,
	  // use React's forwardRef to expose a ref of the wrapped component
	  forwardRef = false,
	  // the context consumer to use
	  context = ReactReduxContext
	} = {}) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (pure !== undefined && !hasWarnedAboutDeprecatedPureOption) {
	      hasWarnedAboutDeprecatedPureOption = true;
	      warning('The `pure` option has been removed. `connect` is now always a "pure/memoized" component');
	    }
	  }

	  const Context = context;
	  const initMapStateToProps = mapStateToPropsFactory(mapStateToProps);
	  const initMapDispatchToProps = mapDispatchToPropsFactory(mapDispatchToProps);
	  const initMergeProps = mergePropsFactory(mergeProps);
	  const shouldHandleStateChanges = Boolean(mapStateToProps);

	  const wrapWithConnect = WrappedComponent => {
	    if (process.env.NODE_ENV !== 'production' && !reactIsExports$1.isValidElementType(WrappedComponent)) {
	      throw new Error(`You must pass a component to the function returned by connect. Instead received ${stringifyComponent(WrappedComponent)}`);
	    }

	    const wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
	    const displayName = `Connect(${wrappedComponentName})`;
	    const selectorFactoryOptions = {
	      shouldHandleStateChanges,
	      displayName,
	      wrappedComponentName,
	      WrappedComponent,
	      // @ts-ignore
	      initMapStateToProps,
	      // @ts-ignore
	      initMapDispatchToProps,
	      initMergeProps,
	      areStatesEqual,
	      areStatePropsEqual,
	      areOwnPropsEqual,
	      areMergedPropsEqual
	    };

	    function ConnectFunction(props) {
	      const [propsContext, reactReduxForwardedRef, wrapperProps] = reactExports.useMemo(() => {
	        // Distinguish between actual "data" props that were passed to the wrapper component,
	        // and values needed to control behavior (forwarded refs, alternate context instances).
	        // To maintain the wrapperProps object reference, memoize this destructuring.
	        const {
	          reactReduxForwardedRef
	        } = props,
	              wrapperProps = _objectWithoutPropertiesLoose(props, _excluded);

	        return [props.context, reactReduxForwardedRef, wrapperProps];
	      }, [props]);
	      const ContextToUse = reactExports.useMemo(() => {
	        // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.
	        // Memoize the check that determines which context instance we should use.
	        return propsContext && propsContext.Consumer && // @ts-ignore
	        reactIsExports$1.isContextConsumer( /*#__PURE__*/reactExports.createElement(propsContext.Consumer, null)) ? propsContext : Context;
	      }, [propsContext, Context]); // Retrieve the store and ancestor subscription via context, if available

	      const contextValue = reactExports.useContext(ContextToUse); // The store _must_ exist as either a prop or in context.
	      // We'll check to see if it _looks_ like a Redux store first.
	      // This allows us to pass through a `store` prop that is just a plain value.

	      const didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
	      const didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);

	      if (process.env.NODE_ENV !== 'production' && !didStoreComeFromProps && !didStoreComeFromContext) {
	        throw new Error(`Could not find "store" in the context of ` + `"${displayName}". Either wrap the root component in a <Provider>, ` + `or pass a custom React context provider to <Provider> and the corresponding ` + `React context consumer to ${displayName} in connect options.`);
	      } // Based on the previous check, one of these must be true


	      const store = didStoreComeFromProps ? props.store : contextValue.store;
	      const getServerState = didStoreComeFromContext ? contextValue.getServerState : store.getState;
	      const childPropsSelector = reactExports.useMemo(() => {
	        // The child props selector needs the store reference as an input.
	        // Re-create this selector whenever the store changes.
	        return finalPropsSelectorFactory(store.dispatch, selectorFactoryOptions);
	      }, [store]);
	      const [subscription, notifyNestedSubs] = reactExports.useMemo(() => {
	        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY; // This Subscription's source should match where store came from: props vs. context. A component
	        // connected to the store via props shouldn't use subscription from context, or vice versa.

	        const subscription = createSubscription(store, didStoreComeFromProps ? undefined : contextValue.subscription); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in
	        // the middle of the notification loop, where `subscription` will then be null. This can
	        // probably be avoided if Subscription's listeners logic is changed to not call listeners
	        // that have been unsubscribed in the  middle of the notification loop.

	        const notifyNestedSubs = subscription.notifyNestedSubs.bind(subscription);
	        return [subscription, notifyNestedSubs];
	      }, [store, didStoreComeFromProps, contextValue]); // Determine what {store, subscription} value should be put into nested context, if necessary,
	      // and memoize that value to avoid unnecessary context updates.

	      const overriddenContextValue = reactExports.useMemo(() => {
	        if (didStoreComeFromProps) {
	          // This component is directly subscribed to a store from props.
	          // We don't want descendants reading from this store - pass down whatever
	          // the existing context value is from the nearest connected ancestor.
	          return contextValue;
	        } // Otherwise, put this component's subscription instance into context, so that
	        // connected descendants won't update until after this component is done


	        return _extends({}, contextValue, {
	          subscription
	        });
	      }, [didStoreComeFromProps, contextValue, subscription]); // Set up refs to coordinate values between the subscription effect and the render logic

	      const lastChildProps = reactExports.useRef();
	      const lastWrapperProps = reactExports.useRef(wrapperProps);
	      const childPropsFromStoreUpdate = reactExports.useRef();
	      const renderIsScheduled = reactExports.useRef(false);
	      reactExports.useRef(false);
	      const isMounted = reactExports.useRef(false);
	      const latestSubscriptionCallbackError = reactExports.useRef();
	      useIsomorphicLayoutEffect(() => {
	        isMounted.current = true;
	        return () => {
	          isMounted.current = false;
	        };
	      }, []);
	      const actualChildPropsSelector = reactExports.useMemo(() => {
	        const selector = () => {
	          // Tricky logic here:
	          // - This render may have been triggered by a Redux store update that produced new child props
	          // - However, we may have gotten new wrapper props after that
	          // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.
	          // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.
	          // So, we'll use the child props from store update only if the wrapper props are the same as last time.
	          if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {
	            return childPropsFromStoreUpdate.current;
	          } // TODO We're reading the store directly in render() here. Bad idea?
	          // This will likely cause Bad Things (TM) to happen in Concurrent Mode.
	          // Note that we do this because on renders _not_ caused by store updates, we need the latest store state
	          // to determine what the child props should be.


	          return childPropsSelector(store.getState(), wrapperProps);
	        };

	        return selector;
	      }, [store, wrapperProps]); // We need this to execute synchronously every time we re-render. However, React warns
	      // about useLayoutEffect in SSR, so we try to detect environment and fall back to
	      // just useEffect instead to avoid the warning, since neither will run anyway.

	      const subscribeForReact = reactExports.useMemo(() => {
	        const subscribe = reactListener => {
	          if (!subscription) {
	            return () => {};
	          }

	          return subscribeUpdates(shouldHandleStateChanges, store, subscription, // @ts-ignore
	          childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, reactListener);
	        };

	        return subscribe;
	      }, [subscription]);
	      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs]);
	      let actualChildProps;

	      try {
	        actualChildProps = useSyncExternalStore( // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing
	        subscribeForReact, // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,
	        // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.
	        actualChildPropsSelector, getServerState ? () => childPropsSelector(getServerState(), wrapperProps) : actualChildPropsSelector);
	      } catch (err) {
	        if (latestSubscriptionCallbackError.current) {
	          err.message += `\nThe error may be correlated with this previous error:\n${latestSubscriptionCallbackError.current.stack}\n\n`;
	        }

	        throw err;
	      }

	      useIsomorphicLayoutEffect(() => {
	        latestSubscriptionCallbackError.current = undefined;
	        childPropsFromStoreUpdate.current = undefined;
	        lastChildProps.current = actualChildProps;
	      }); // Now that all that's done, we can finally try to actually render the child component.
	      // We memoize the elements for the rendered child component as an optimization.

	      const renderedWrappedComponent = reactExports.useMemo(() => {
	        return (
	          /*#__PURE__*/
	          // @ts-ignore
	          reactExports.createElement(WrappedComponent, _extends({}, actualChildProps, {
	            ref: reactReduxForwardedRef
	          }))
	        );
	      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]); // If React sees the exact same element reference as last time, it bails out of re-rendering
	      // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.

	      const renderedChild = reactExports.useMemo(() => {
	        if (shouldHandleStateChanges) {
	          // If this component is subscribed to store updates, we need to pass its own
	          // subscription instance down to our descendants. That means rendering the same
	          // Context instance, and putting a different value into the context.
	          return /*#__PURE__*/reactExports.createElement(ContextToUse.Provider, {
	            value: overriddenContextValue
	          }, renderedWrappedComponent);
	        }

	        return renderedWrappedComponent;
	      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);
	      return renderedChild;
	    }

	    const _Connect = reactExports.memo(ConnectFunction);

	    // Add a hacky cast to get the right output type
	    const Connect = _Connect;
	    Connect.WrappedComponent = WrappedComponent;
	    Connect.displayName = ConnectFunction.displayName = displayName;

	    if (forwardRef) {
	      const _forwarded = reactExports.forwardRef(function forwardConnectRef(props, ref) {
	        // @ts-ignore
	        return /*#__PURE__*/reactExports.createElement(Connect, _extends({}, props, {
	          reactReduxForwardedRef: ref
	        }));
	      });

	      const forwarded = _forwarded;
	      forwarded.displayName = displayName;
	      forwarded.WrappedComponent = WrappedComponent;
	      return hoistStatics(forwarded, WrappedComponent);
	    }

	    return hoistStatics(Connect, WrappedComponent);
	  };

	  return wrapWithConnect;
	}

	function Provider({
	  store,
	  context,
	  children,
	  serverState,
	  stabilityCheck = 'once',
	  noopCheck = 'once'
	}) {
	  const contextValue = reactExports.useMemo(() => {
	    const subscription = createSubscription(store);
	    return {
	      store,
	      subscription,
	      getServerState: serverState ? () => serverState : undefined,
	      stabilityCheck,
	      noopCheck
	    };
	  }, [store, serverState, stabilityCheck, noopCheck]);
	  const previousState = reactExports.useMemo(() => store.getState(), [store]);
	  useIsomorphicLayoutEffect(() => {
	    const {
	      subscription
	    } = contextValue;
	    subscription.onStateChange = subscription.notifyNestedSubs;
	    subscription.trySubscribe();

	    if (previousState !== store.getState()) {
	      subscription.notifyNestedSubs();
	    }

	    return () => {
	      subscription.tryUnsubscribe();
	      subscription.onStateChange = undefined;
	    };
	  }, [contextValue, previousState]);
	  const Context = context || ReactReduxContext; // @ts-ignore 'AnyAction' is assignable to the constraint of type 'A', but 'A' could be instantiated with a different subtype

	  return /*#__PURE__*/reactExports.createElement(Context.Provider, {
	    value: contextValue
	  }, children);
	}

	// The primary entry point assumes we're working with standard ReactDOM/RN, but
	// older versions that do not include `useSyncExternalStore` (React 16.9 - 17.x).
	// Because of that, the useSyncExternalStore compat shim is needed.
	initializeConnect(shimExports.useSyncExternalStore); // Enable batched updates in our subscriptions for use
	// with standard React renderers (ReactDOM, React Native)

	setBatch(reactDomExports.unstable_batchedUpdates);

	/*******************************************************
	 *
	 *  This file contains selectors to encapsulate accessing the
	 *  Redux state directly
	 *
	 *
	 *
	 *
	 *
	 *******************************************************/

	const getColumnByID = (state, id) => {
	  for (var i in state.column) {
	    var column = state.column[i];
	    if (column.id == id) return {
	      data: column,
	      sibling_count: state.workflow.columnworkflow_set.length,
	      columnworkflows: state.workflow.columnworkflow_set,
	      column_order: state.workflow.columnworkflow_set.map(columnworkflow_id => getColumnWorkflowByID(state, columnworkflow_id).data.column)
	    };
	  }
	};
	const getColumnWorkflowByID = (state, id) => {
	  for (var i in state.columnworkflow) {
	    var columnworkflow = state.columnworkflow[i];
	    if (columnworkflow.id == id) return {
	      data: columnworkflow,
	      order: state.workflow.columnworkflow_set
	    };
	  }
	};
	const getWeekByID = (state, id) => {
	  for (var i in state.week) {
	    var week = state.week[i];
	    if (week.id == id) {
	      if (week.is_dropped === undefined) {
	        week.is_dropped = getDropped(id, 'week');
	      }
	      return {
	        data: week,
	        column_order: state.workflow.columnworkflow_set.map(columnworkflow_id => getColumnWorkflowByID(state, columnworkflow_id).data.column),
	        sibling_count: state.workflow.weekworkflow_set.length,
	        nodeweeks: state.nodeweek,
	        workflow_id: state.workflow.id
	      };
	    }
	  }
	};
	const getTermByID = (state, id) => {
	  for (var i in state.week) {
	    var week = state.week[i];
	    if (week.id == id) {
	      if (week.is_dropped === undefined) {
	        week.is_dropped = getDropped(id, 'week');
	      }
	      var nodeweeks = week.nodeweek_set;
	      let column_order = filterThenSortByID(state.columnworkflow, state.workflow.columnworkflow_set).map(columnworkflow => columnworkflow.column);
	      var nodes_by_column = {};
	      for (var j = 0; j < column_order.length; j++) {
	        nodes_by_column[column_order[j]] = [];
	      }
	      for (var j = 0; j < nodeweeks.length; j++) {
	        let node_week = getNodeWeekByID(state, nodeweeks[j]).data;
	        let node = getNodeByID(state, node_week.node).data;
	        if (node.column) nodes_by_column[node.column].push(nodeweeks[j]);else nodes_by_column[nodes_by_column.keys()[0]].push(nodeweeks[j]);
	      }
	      return {
	        data: week,
	        column_order: column_order,
	        nodes_by_column: nodes_by_column,
	        nodeweeks: state.nodeweek
	      };
	    }
	  }
	};
	const getWeekWorkflowByID = (state, id) => {
	  for (var i in state.weekworkflow) {
	    var weekworkflow = state.weekworkflow[i];
	    if (weekworkflow.id == id) return {
	      data: weekworkflow,
	      order: state.workflow.weekworkflow_set
	    };
	  }
	};
	const getNodeByID = (state, id) => {
	  for (var i in state.node) {
	    var node = state.node[i];
	    if (node.id == id) {
	      if (node.is_dropped === undefined) {
	        node.is_dropped = getDropped(id, 'node');
	      }
	      return {
	        data: node,
	        column: state.column.find(column => column.id == node.column),
	        object_sets: state.objectset
	      };
	    }
	  }
	  console.log('failed to find node');
	};
	const getNodeWeekByID = (state, id) => {
	  for (var i in state.nodeweek) {
	    var nodeweek = state.nodeweek[i];
	    if (nodeweek.id == id) {
	      let node = getNodeByID(state, nodeweek.node).data;
	      return {
	        data: nodeweek,
	        order: getWeekByID(state, nodeweek.week).nodeweek_set,
	        column: node.column
	      };
	    }
	  }
	};
	const getNodeLinkByID = (state, id) => {
	  for (var i in state.nodelink) {
	    var nodelink = state.nodelink[i];
	    if (nodelink.id == id) return {
	      data: nodelink
	    };
	  }
	};

	/**
	 * @todo normalize the arguments order
	 * Find the root outcome, and as we go, create pairs of parent outcome ids / throughmodel ids.
	 * These can later be pieced together in an iteration over the outcomes to create a list of ranks.
	 *
	 * @param id
	 * @param rank
	 * @param state
	 * @returns {*|{rank: *, id: *}}
	 */
	function findRootOutcome(id, rank, state) {
	  for (let i = 0; i < state.length; i++) {
	    if (state[i].child == id) {
	      rank.unshift({
	        parent: state[i].parent,
	        through: state[i].id
	      });
	      return findRootOutcome(state[i].parent, rank, state);
	    }
	  }
	  return {
	    id: id,
	    rank: rank
	  };
	}
	function findTopRank(state, outcome) {
	  for (let j = 0; j < state.outcomeworkflow.length; j++) {
	    if (state.outcomeworkflow[j].outcome == outcome.id) {
	      if (state.outcomeworkflow[j].workflow == state.workflow.id) {
	        return state.workflow.outcomeworkflow_set.indexOf(state.outcomeworkflow[j].id) + 1;
	      }
	      for (let k = 0; k < state.child_workflow.length; k++) {
	        let index = state.child_workflow[k].outcomeworkflow_set.indexOf(state.outcomeworkflow[j].id);
	        if (index >= 0) {
	          return index + 1;
	        }
	      }
	      for (let k = 0; k < state.parent_workflow.length; k++) {
	        let index = state.parent_workflow[k].outcomeworkflow_set.indexOf(state.outcomeworkflow[j].id);
	        if (index >= 0) {
	          return index + 1;
	        }
	      }
	    }
	  }
	}
	const getOutcomeByID = (state, id) => {
	  let state_section = state.outcome;
	  for (var i in state_section) {
	    var outcome = state_section[i];
	    if (outcome.id == id) {
	      if (outcome.is_dropped === undefined) {
	        outcome.is_dropped = getDropped(id, 'outcome', outcome.depth);
	      }
	      let root_outcome;
	      let rank = [];
	      let titles = [];
	      let top_rank;
	      if (outcome.depth > 0) {
	        let state_outcomeoutcome_section = state.outcomeoutcome;
	        let root_info = findRootOutcome(outcome.id, [], state_outcomeoutcome_section);
	        rank = root_info.rank.map(x => null);
	        titles = rank.map(x => null);
	        for (let j = 0; j < state_section.length; j++) {
	          if (state_section[j].id == root_info.id) root_outcome = state_section[j];
	          for (let k = 0; k < root_info.rank.length; k++) {
	            if (root_info.rank[k].parent == state_section[j].id) {
	              titles[k] = state_section[j].title;
	              if (rank[k]) continue;
	              if (state_section[j].code) {
	                if (k > 0) rank[k - 1] = state_section[j].code;else top_rank = state_section[j].code;
	              }
	              rank[k] = state_section[j].child_outcome_links.indexOf(root_info.rank[k].through) + 1;
	            }
	          }
	        }
	      } else {
	        root_outcome = outcome;
	        if (outcome.code) top_rank = outcome.code;
	      }
	      if (!top_rank) top_rank = findTopRank(state, root_outcome);
	      titles.push(outcome.title);
	      rank.unshift(top_rank);
	      let hovertext = rank.map((rank_i, i) => rank_i + '. ' + titles[i]).join(' -> ');
	      let prefix = rank.join('.');
	      return {
	        data: outcome,
	        hovertext: hovertext,
	        prefix: prefix,
	        object_sets: state.objectset,
	        workflow_id: state.workflow.id
	      };
	    }
	  }
	  console.log('failed to find outcome');
	};
	const getChildWorkflowByID = (state, id) => {
	  for (var i in state.child_workflow) {
	    var workflow = state.child_workflow[i];
	    if (workflow.id == id) return {
	      data: workflow
	    };
	  }
	  console.log('failed to find child workflow');
	  return -1;
	};
	const getOutcomeOutcomeByID = (state, id) => {
	  let state_section = state.outcomeoutcome;
	  for (var i in state_section) {
	    var outcomeoutcome = state_section[i];
	    if (outcomeoutcome.id == id) return {
	      data: outcomeoutcome
	    };
	  }
	  console.log('failed to find outcomeoutcome');
	};
	const getOutcomeNodeByID = (state, id) => {
	  for (var i in state.outcomenode) {
	    var outcomenode = state.outcomenode[i];
	    if (outcomenode.id == id) return {
	      data: outcomenode
	    };
	  }
	  console.log('failed to find outcomenode');
	};
	const getOutcomeHorizontalLinkByID = (state, id) => {
	  for (var i in state.outcomehorizontallink) {
	    var outcomehorizontallink = state.outcomehorizontallink[i];
	    if (outcomehorizontallink.id == id) return {
	      data: outcomehorizontallink
	    };
	  }
	  console.log('failed to find outcomehorizontallink');
	};
	const getStrategyByID = (state, id) => {
	  for (var i in state.strategy) {
	    var strategy = state.strategy[i];
	    if (strategy.id == id) return {
	      data: strategy
	    };
	  }
	};

	//Categorizes the outcomes based on their sets, if sets appropriate to that outcome type exist. Also ensures that hidden outcomes are hidden.
	const getSortedOutcomesFromOutcomeWorkflowSet = (state, outcomeworkflow_set) => {
	  let outcomeworkflows = filterThenSortByID(state.outcomeworkflow, outcomeworkflow_set);
	  let outcome_ids = outcomeworkflows.map(outcomeworkflow => outcomeworkflow.outcome);
	  let outcomes = filterThenSortByID(state.outcome, outcome_ids);
	  for (var i = 0; i < outcomes.length; i++) {
	    outcomes[i].outcomeworkflow = outcomeworkflows[i].id;
	    outcomes[i].through_no_drag = outcomeworkflows[i].no_drag;
	  }
	  if (outcomes.length == 0) return outcomes;
	  let base_title = capWords(window.gettext('outcomes'));
	  let object_sets = state.objectset.filter(objectset => objectset.term == outcomes[0].type);
	  if (object_sets.length == 0) return [{
	    objectset: {
	      title: base_title
	    },
	    outcomes: outcomes
	  }];
	  let uncategorized = outcomes.filter(outcome => outcome.sets.length == 0);
	  let categories = [];
	  if (uncategorized.length > 0) categories = [{
	    objectset: {
	      title: window.gettext('Uncategorized')
	    },
	    outcomes: uncategorized
	  }];
	  categories = [...categories, ...object_sets.filter(objectset => !objectset.hidden).map(objectset => ({
	    objectset: objectset,
	    outcomes: outcomes.filter(outcome => outcome.sets.indexOf(objectset.id) >= 0)
	  }))];
	  return categories;
	};
	const getSortedOutcomeNodesFromNodes = (state, nodes) => {
	  let outcomenode_ids = [];
	  for (let i = 0; i < nodes.length; i++) {
	    outcomenode_ids = outcomenode_ids.concat(nodes[i].outcomenode_unique_set);
	  }
	  let outcomenodes = filterThenSortByID(state.outcomenode, outcomenode_ids);
	  let outcomes = filterThenSortByID(state.outcome, outcomenodes.map(outcomenode => outcomenode.outcome)).map((outcome, i) => ({
	    ...outcome,
	    degree: outcomenodes[i].degree
	  }));
	  if (outcomes.length == 0) return outcomes;
	  let base_title = capWords(window.gettext('outcomes'));
	  let object_sets = state.objectset.filter(objectset => objectset.term == outcomes[0].type);
	  if (object_sets.length == 0) return [{
	    objectset: {
	      title: base_title
	    },
	    outcomes: outcomes
	  }];
	  let categories = [{
	    objectset: {
	      title: window.gettext('Uncategorized')
	    },
	    outcomes: outcomes.filter(outcome => outcome.sets.length == 0)
	  }, ...object_sets.filter(objectset => !objectset.hidden).map(objectset => ({
	    objectset: objectset,
	    outcomes: outcomes.filter(outcome => outcome.sets.indexOf(objectset.id) >= 0)
	  }))];
	  return categories;
	};

	/*******************************************************
	 * HELPER
	 *******************************************************/
	const getDropped = (objectID, objectType, depth = 1) => {
	  let default_drop = get_default_drop_state(objectID, objectType, depth);
	  try {
	    let stored_drop = JSON.parse(window.localStorage.getItem(objectType + objectID));
	    if (stored_drop === null) return default_drop;
	    return stored_drop;
	  } catch (err) {
	    return default_drop;
	  }
	};

	// @todo doesn't really belong here (not a state selector)
	//Categorizes the outcomes based on their sets, if sets appropriate to that outcome type exist. Also ensures that hidden outcomes are hidden.
	const getSortedOutcomeIDFromOutcomeWorkflowSet = (outcomes_unsorted, outcomeworkflows_unsorted, outcomeworkflow_set, object_sets_unfiltered) => {
	  let outcomeworkflows = filterThenSortByID(outcomeworkflows_unsorted, outcomeworkflow_set);
	  let outcome_ids = outcomeworkflows.map(outcomeworkflow => outcomeworkflow.outcome);
	  let outcomes = filterThenSortByID(outcomes_unsorted, outcome_ids);
	  for (var i = 0; i < outcomes.length; i++) {
	    outcomes[i].outcomeworkflow = outcomeworkflows[i].id;
	    outcomes[i].through_no_drag = outcomeworkflows[i].no_drag;
	  }
	  if (outcomes.length == 0) return outcomes.map(outcome => outcome.id);
	  let base_title = capWords(window.gettext('outcomes'));
	  let object_sets = object_sets_unfiltered.filter(objectset => objectset.term == outcomes[0].type);
	  if (object_sets.length == 0) return [{
	    objectset: {
	      title: base_title
	    },
	    outcomes: outcomes.map(outcome => outcome.id)
	  }];
	  let uncategorized = outcomes.filter(outcome => outcome.sets.length == 0).map(outcome => outcome.id);
	  let categories = [];
	  if (uncategorized.length > 0) categories = [{
	    objectset: {
	      title: window.gettext('Uncategorized')
	    },
	    outcomes: uncategorized
	  }];
	  categories = [...categories, ...object_sets.filter(objectset => !objectset.hidden).map(objectset => ({
	    objectset: objectset,
	    outcomes: outcomes.filter(outcome => outcome.sets.indexOf(objectset.id) >= 0).map(outcome => outcome.id)
	  }))];
	  return categories;
	};

	//Basic component to represent a node in the outcomes table
	class NodeOutcomeViewUnconnected extends Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'node';
	    this.state = {
	      initial_render: true
	    };
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let data = this.props.data;
	    if (data.represents_workflow) ({
	      ...data,
	      ...data.linked_workflow_data,
	      id: data.id
	    });
	    this.props.renderer.selection_manager;
	    let style = {
	      backgroundColor: getColumnColour(this.props.column)
	    };
	    let css_class = 'node column-' + data.column + ' ' + node_keys[data.node_type];
	    if (data.is_dropped) css_class += ' dropped';
	    if (data.lock) css_class += ' locked locked-' + data.lock.user_id;
	    let comments;
	    return /*#__PURE__*/reactExports.createElement("div", {
	      ref: this.maindiv,
	      className: "table-cell nodewrapper"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: css_class,
	      style: style,
	      id: data.id
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-top-row"
	    }, /*#__PURE__*/reactExports.createElement(NodeTitle, {
	      data: data
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "mouseover-actions"
	    }, comments)), /*#__PURE__*/reactExports.createElement("div", {
	      className: "side-actions"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "comment-indicator-container"
	    })));
	  }
	}
	const mapNodeStateToProps$3 = (state, own_props) => getNodeByID(state, own_props.objectID);
	const NodeOutcomeView = connect(mapNodeStateToProps$3, null)(NodeOutcomeViewUnconnected);

	//The ports used to connect links for the nodes
	class NodePorts extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.state = {};
	  }
	  componentDidUpdate() {
	    $(this.props.node_div.current).triggerHandler('ports-rendered');
	  }
	  componentDidMount() {
	    var thisComponent = this;
	    if (!this.props.renderer.read_only) d3.selectAll('g.port-' + this.props.nodeID + " circle[data-port-type='source']").call(d3.drag().on('start', function (d) {
	      $('.workflow-canvas').addClass('creating-node-link');
	      var canvas_offset = $('.workflow-canvas').offset();
	      d3.select('.node-link-creator').remove();
	      d3.select('.workflow-canvas').append('line').attr('class', 'node-link-creator').attr('x1', event.x - canvas_offset.left).attr('y1', event.y - canvas_offset.top).attr('x2', event.x - canvas_offset.left).attr('y2', event.y - canvas_offset.top).attr('stroke', 'red').attr('stroke-width', '2');
	    }).on('drag', function (d) {
	      var canvas_offset = $('.workflow-canvas').offset();
	      d3.select('.node-link-creator').attr('x2', event.x - canvas_offset.left).attr('y2', event.y - canvas_offset.top);
	    }).on('end', function (d) {
	      $('.workflow-canvas').removeClass('creating-node-link');
	      var target = d3.select(event.target);
	      if (target.attr('data-port-type') == 'target') {
	        thisComponent.nodeLinkAdded(target.attr('data-node-id'), d3.select(this).attr('data-port'), target.attr('data-port'));
	      }
	      d3.select('.node-link-creator').remove();
	    }));
	    this.updatePorts();
	    $(this.props.node_div.current).on('component-updated', this.updatePorts.bind(this));
	    //$(this.props.node_div.current).triggerHandler("ports-rendered");
	  }

	  updatePorts() {
	    if (!this.props.node_div.current) return;
	    var node = $(this.props.node_div.current);
	    var node_offset = getCanvasOffset(node);
	    var node_dimensions = {
	      width: node.outerWidth(),
	      height: node.outerHeight()
	    };
	    //if(node.closest(".week-workflow").hasClass("dragging")||this.state.node_offset==node_offset&&this.state.node_dimensions==node_dimensions)return;
	    this.setState({
	      node_offset: node_offset,
	      node_dimensions: node_dimensions
	    });
	  }
	  nodeLinkAdded(target, source_port, target_port) {
	    let props = this.props;
	    if (target == this.props.nodeID) return;
	    newNodeLink(props.nodeID, target, port_keys.indexOf(source_port), port_keys.indexOf(target_port));
	  }
	  render() {
	    var ports = [];
	    var node_dimensions;
	    if (this.state.node_dimensions) {
	      node_dimensions = this.state.node_dimensions;
	      this.positioned = true;
	    } else node_dimensions = {
	      width: 0,
	      height: 0
	    };
	    for (var port_type in node_ports) for (var port in node_ports[port_type]) {
	      ports.push( /*#__PURE__*/reactExports.createElement("circle", {
	        "data-port-type": port_type,
	        "data-port": port,
	        "data-node-id": this.props.nodeID,
	        r: "6",
	        key: port_type + port,
	        cx: node_ports[port_type][port][0] * node_dimensions.width,
	        cy: node_ports[port_type][port][1] * node_dimensions.height
	      }));
	    }
	    var style = {};
	    if ($(this.props.node_div.current).css('display') == 'none') style['display'] = 'none';
	    var transform;
	    if (this.state.node_offset) transform = 'translate(' + this.state.node_offset.left + ',' + this.state.node_offset.top + ')';else transform = 'translate(0,0)';
	    return /*#__PURE__*/reactExports.createElement("g", {
	      style: style,
	      className: 'node-ports port-' + this.props.nodeID,
	      stroke: "black",
	      strokeWidth: "2",
	      fill: "white",
	      transform: transform
	    }, ports);
	  }
	}

	// A NodeLink that is automatically generated based on node setting. Has no direct back-end representation
	class AutoLinkView extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.eventNameSpace = 'autolink' + props.nodeID;
	    this.rerenderEvents = 'ports-rendered.' + this.eventNameSpace;
	  }
	  componentWillUnmount() {
	    if (this.target_node && this.target_node.length > 0) {
	      this.source_node.off(this.rerenderEvents);
	      this.target_node.off(this.rerenderEvents);
	    }
	  }
	  findAutoTarget() {
	    var ns = this.source_node.closest('.node-week');
	    var next_ns = ns.nextAll('.node-week:not(.ui-sortable-placeholder)').first();
	    var target;
	    if (next_ns.length > 0) {
	      target = next_ns.find('.node').attr('id');
	    } else {
	      var sw = ns.closest('.week-workflow');
	      var next_sw = sw.next();
	      while (next_sw.length > 0) {
	        target = next_sw.find('.node-week:not(ui-sortable-placeholder) .node').attr('id');
	        if (target) break;
	        next_sw = next_sw.next();
	      }
	    }
	    this.setTarget(target);
	  }
	  rerender(evt) {
	    this.setState({});
	  }
	  setTarget(target) {
	    if (target) {
	      if (this.target_node && target == this.target_node.attr('id')) {
	        if (!this.target_port_handle || this.target_port_handle.empty()) {
	          this.target_port_handle = d3.select('g.port-' + target + " circle[data-port-type='target'][data-port='n']");
	        }
	        return;
	      }
	      if (this.target_node) this.target_node.off(this.rerenderEvents);
	      this.target_node = $('.week #' + target + '.node');
	      this.target_port_handle = d3.select('g.port-' + target + " circle[data-port-type='target'][data-port='n']");
	      this.target_node.on(this.rerenderEvents, this.rerender.bind(this));
	      this.target = target;
	    } else {
	      if (this.target_node) this.target_node.off(this.rerenderEvents);
	      this.target_node = null;
	      this.target_port_handle = null;
	      this.target = null;
	    }
	  }
	  render() {
	    if (!this.source_node || this.source_node.length == 0 || !this.source_port_handle || this.source_port_handle.empty()) {
	      this.source_node = $(this.props.node_div.current);
	      this.source_port_handle = d3.select('g.port-' + this.props.nodeID + " circle[data-port-type='source'][data-port='s']");
	      this.source_node.on(this.rerenderEvents, this.rerender.bind(this));
	    }
	    if (this.target_node && this.target_node.parent().parent().length == 0) this.target_node = null;
	    this.findAutoTarget();
	    if (!this.target_node) return null;
	    var source_dims = {
	      width: this.source_node.outerWidth(),
	      height: this.source_node.outerHeight()
	    };
	    var target_dims = {
	      width: this.target_node.outerWidth(),
	      height: this.target_node.outerHeight()
	    };
	    let node_selected = this.source_node.attr('data-selected') === 'true' || this.target_node.attr('data-selected') === 'true';
	    let node_hovered = this.source_node.attr('data-hovered') === 'true' || this.target_node.attr('data-hovered') === 'true';
	    return /*#__PURE__*/reactExports.createElement("div", null, reactDomExports.createPortal( /*#__PURE__*/reactExports.createElement(NodeLinkSVG, {
	      hovered: node_hovered,
	      node_selected: node_selected,
	      source_port_handle: this.source_port_handle,
	      source_port: "2",
	      target_port_handle: this.target_port_handle,
	      target_port: "0",
	      source_dimensions: source_dims,
	      target_dimensions: target_dims
	    }), $('.workflow-canvas')[0]));
	  }
	}

	/**
	 * Creates a menu bar at the top of the page which can be passed
	 * various links, buttons, etc
	 */
	let MenuBar$1 = class MenuBar extends reactExports.Component {
	  /*******************************************************
	   * LIFECYCLE
	   *******************************************************/
	  componentDidMount() {
	    this.dropdownOverflow();
	  }
	  componentDidUpdate() {
	    this.dropdownOverflow();
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  dropdownOverflow() {
	    makeDropdown('#overflow-options', '#overflow-links');
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let overflow_links;
	    if (this.props.overflow_links) overflow_links = this.props.overflow_links();
	    let visible_buttons;
	    if (this.props.visible_buttons) visible_buttons = this.props.visible_buttons();
	    let viewbar;
	    if (this.props.viewbar) viewbar = this.props.viewbar();
	    let userbar;
	    if (this.props.userbar) userbar = this.props.userbar();
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "menubar"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      id: "floatbar",
	      className: "floatbar"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      id: "visible-icons"
	    }, visible_buttons), /*#__PURE__*/reactExports.createElement("div", {
	      id: "overflow-options"
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "hover-shade green material-symbols-rounded"
	    }, "more_horiz"), /*#__PURE__*/reactExports.createElement("div", {
	      id: "overflow-links",
	      className: "create-dropdown"
	    }, overflow_links))), /*#__PURE__*/reactExports.createElement("div", {
	      id: "userbar",
	      className: "floatbar"
	    }, userbar), /*#__PURE__*/reactExports.createElement("div", {
	      id: "viewbar",
	      className: "floatbar"
	    }, viewbar));
	  }
	};

	//Basic component representing a column
	class ColumnView extends EditableComponentWithActions {
	  constructor(props) {
	    super(props);
	    this.objectType = 'column';
	    this.objectClass = '.column';
	  }
	  render() {
	    let data = this.props.data;
	    var title = data.title;
	    if (!title) title = data.column_type_display;
	    let style = {};
	    if (data.lock) {
	      style.border = '2px solid ' + data.lock.user_colour;
	    }
	    let css_class = 'column';
	    if (data.lock) css_class += ' locked locked-' + data.lock.user_id;
	    let mouseover_actions = [];
	    if (!this.props.renderer.read_only) {
	      mouseover_actions.push(this.addInsertSibling(data));
	      mouseover_actions.push(this.addDuplicateSelf(data));
	      mouseover_actions.push(this.addDeleteSelf(data));
	    }
	    if (this.props.renderer.view_comments) mouseover_actions.push(this.addCommenting(data));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      ref: this.maindiv,
	      style: style,
	      className: css_class,
	      onClick: evt => this.props.renderer.selection_manager.changeSelection(evt, this)
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "column-line"
	    }, this.getIcon(), /*#__PURE__*/reactExports.createElement("div", {
	      dangerouslySetInnerHTML: {
	        __html: title
	      }
	    })), this.addEditable(data), /*#__PURE__*/reactExports.createElement("div", {
	      className: "mouseover-actions"
	    }, mouseover_actions));
	  }
	  getIcon() {
	    if (this.props.data.icon && this.props.data.icon != '') {
	      return /*#__PURE__*/reactExports.createElement("span", {
	        className: "material-symbols-rounded"
	      }, this.props.data.icon);
	    }
	    return /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + default_column_settings[this.props.data.column_type].icon + '.svg'
	    });
	  }
	}
	const mapColumnStateToProps = (state, own_props) => getColumnByID(state, own_props.objectID);
	var ColumnView$1 = connect(mapColumnStateToProps, null)(ColumnView);
	class NodeBarColumnUnconnected extends Component {
	  render() {
	    let data = this.props.data;
	    var title;
	    if (data) title = data.title;
	    if (!title) title = data.column_type_display;
	    return /*#__PURE__*/reactExports.createElement("div", {
	      dangerouslySetInnerHTML: {
	        __html: title
	      },
	      className: 'new-node node-bar-column node-bar-sortable column-' + this.props.objectID,
	      ref: this.maindiv,
	      style: {
	        backgroundColor: getColumnColour(data)
	      }
	    });
	  }
	  makeDraggable() {
	    let draggable_selector = 'node-week';
	    let draggable_type = 'nodeweek';
	    $(this.maindiv.current).draggable({
	      helper: (e, item) => {
	        var helper = $(document.createElement('div'));
	        helper.addClass('node-ghost');
	        helper.appendTo(document.body);
	        return helper;
	      },
	      cursor: 'move',
	      cursorAt: {
	        top: 20,
	        left: 100
	      },
	      distance: 10,
	      start: (e, ui) => {
	        $('.workflow-canvas').addClass('dragging-' + draggable_type);
	        $(draggable_selector).addClass('dragging');
	      },
	      stop: (e, ui) => {
	        $('.workflow-canvas').removeClass('dragging-' + draggable_type);
	        $(draggable_selector).removeClass('dragging');
	      }
	    });
	  }
	  componentDidMount() {
	    this.makeDraggable();
	    $(this.maindiv.current)[0].dataDraggable = {
	      column: this.props.data.id,
	      column_type: null
	    };
	  }
	}
	const NodeBarColumn = connect(mapColumnStateToProps, null)(NodeBarColumnUnconnected);
	class NodeBarColumnCreator extends NodeBarColumnUnconnected {
	  render() {
	    var title = 'New ';
	    for (var i = 0; i < this.props.renderer.column_choices.length; i++) {
	      if (this.props.renderer.column_choices[i].type == this.props.columnType) {
	        title += this.props.renderer.column_choices[i].name;
	        break;
	      }
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "new-node new-column node-bar-column node-bar-sortable",
	      ref: this.maindiv
	    }, title);
	  }
	  componentDidMount() {
	    this.makeDraggable();
	    $(this.maindiv.current)[0].dataDraggable = {
	      column: null,
	      column_type: this.props.columnType
	    };
	  }
	}

	//Basic component to represent a columnworkflow
	class ColumnWorkflowView extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'columnworkflow';
	    this.objectClass = '.column-workflow';
	  }
	  render() {
	    let data = this.props.data;
	    let my_class = 'column-workflow column-' + data.id;
	    if (data.no_drag) my_class += ' no-drag';
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: my_class,
	      ref: this.maindiv,
	      id: data.id,
	      "data-child-id": data.column
	    }, /*#__PURE__*/reactExports.createElement(ColumnView$1, {
	      objectID: data.column,
	      parentID: this.props.parentID,
	      throughParentID: data.id,
	      renderer: this.props.renderer
	    }));
	  }
	}
	const mapColumnWorkflowStateToProps = (state, own_props) => getColumnWorkflowByID(state, own_props.objectID);
	var ColumnWorkflowView$1 = connect(mapColumnWorkflowStateToProps, null)(ColumnWorkflowView);
	class NodeBarColumnWorkflowUnconnected extends reactExports.Component {
	  render() {
	    let data = this.props.data;
	    if (data) return /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-bar-column-workflow",
	      ref: this.maindiv
	    }, /*#__PURE__*/reactExports.createElement(NodeBarColumn, {
	      objectID: data.column,
	      renderer: this.props.renderer,
	      throughParentID: data.id,
	      parentID: this.props.parentID
	    }));else return /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-bar-column-workflow",
	      ref: this.maindiv
	    }, /*#__PURE__*/reactExports.createElement(NodeBarColumnCreator, {
	      renderer: this.props.renderer,
	      columnType: this.props.columnType
	    }));
	  }
	}
	const NodeBarColumnWorkflow = connect(mapColumnWorkflowStateToProps, null)(NodeBarColumnWorkflowUnconnected);

	//Basic component to represent a NodeLink
	class NodeLinkView extends EditableComponentWithActions {
	  constructor(props) {
	    super(props);
	    this.objectType = 'nodelink';
	    this.objectClass = '.node-link';
	    this.rerenderEvents = 'ports-rendered.' + this.props.data.id;
	  }
	  render() {
	    let data = this.props.data;
	    if (!this.source_node || !this.source_node.outerWidth() || !this.target_node || !this.target_node.outerWidth() || !this.target_port_handle || this.target_port_handle.empty()) {
	      this.source_node = $(this.props.node_div.current);
	      this.target_node = $('#' + data.target_node + '.node');
	      this.source_node.on(this.rerenderEvents, this.rerender.bind(this));
	      this.target_node.on(this.rerenderEvents, this.rerender.bind(this));
	      this.source_port_handle = d3.select('g.port-' + data.source_node + " circle[data-port-type='source'][data-port='" + port_keys[data.source_port] + "']");
	      this.target_port_handle = d3.select('g.port-' + data.target_node + " circle[data-port-type='target'][data-port='" + port_keys[data.target_port] + "']");
	    }
	    let node_selected = this.source_node.attr('data-selected') === 'true' || this.target_node.attr('data-selected') === 'true';
	    let node_hovered = this.source_node.attr('data-hovered') === 'true' || this.target_node.attr('data-hovered') === 'true';
	    let style = {};
	    if (data.dashed) style.strokeDasharray = '5,5';
	    if (this.source_node.css('display') == 'none' || this.target_node.css('display') == 'none') style['display'] = 'none';
	    var source_dims = {
	      width: this.source_node.outerWidth(),
	      height: this.source_node.outerHeight()
	    };
	    var target_dims = {
	      width: this.target_node.outerWidth(),
	      height: this.target_node.outerHeight()
	    };
	    if (!source_dims.width || !target_dims.width) return null;
	    var selector = this;
	    if (!this.source_node.is(':visible') || !this.target_node.is(':visible')) return null;
	    return /*#__PURE__*/reactExports.createElement("div", null, reactDomExports.createPortal( /*#__PURE__*/reactExports.createElement(NodeLinkSVG, {
	      style: style,
	      hovered: node_hovered,
	      node_selected: node_selected,
	      lock: data.lock,
	      title: data.title,
	      text_position: data.text_position,
	      source_port_handle: this.source_port_handle,
	      source_port: data.source_port,
	      target_port_handle: this.target_port_handle,
	      target_port: data.target_port,
	      clickFunction: evt => this.props.renderer.selection_manager.changeSelection(evt, selector),
	      selected: this.state.selected,
	      source_dimensions: source_dims,
	      target_dimensions: target_dims
	    }), $('.workflow-canvas')[0]), this.addEditable(data));
	  }
	  rerender() {
	    this.setState({});
	  }
	  componentWillUnmount() {
	    if (this.target_node && this.target_node.length > 0) {
	      this.source_node.off(this.rerenderEvents);
	      this.target_node.off(this.rerenderEvents);
	    }
	  }
	}
	const mapNodeLinkStateToProps = (state, own_props) => getNodeLinkByID(state, own_props.objectID);
	var NodeLinkView$1 = connect(mapNodeLinkStateToProps, null)(NodeLinkView);

	class AssignmentView extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      is_dropped: false
	    };
	    if (props.data.user_assignment) this.state.completed = props.data.user_assignment.completed;
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  visitWorkflow(id, evt) {
	    let path = window.config.update_path['workflow'];
	    evt.stopPropagation();
	    window.open(path.replace('0', id));
	  }
	  toggleDrop() {
	    this.setState(state => {
	      return {
	        is_dropped: !state.is_dropped
	      };
	    });
	  }
	  changeCompletion(evt) {
	    let checked = evt.target.checked;
	    this.setState({
	      completed: checked
	    });
	    setAssignmentCompletion(this.props.data.user_assignment.id, checked);
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let data = this.props.data;
	    let node_data = data.task;
	    let data_override;
	    if (node_data.represents_workflow) data_override = {
	      ...node_data,
	      ...node_data.linked_workflow_data,
	      id: data.id
	    };else data_override = {
	      ...node_data
	    };
	    let lefticon;
	    let righticon;
	    if (node_data.context_classification > 0) lefticon = /*#__PURE__*/reactExports.createElement("img", {
	      title: renderer.context_choices.find(obj => obj.type == node_data.context_classification).name,
	      src: window.config.icon_path + context_keys[data.context_classification] + '.svg'
	    });
	    if (node_data.task_classification > 0) righticon = /*#__PURE__*/reactExports.createElement("img", {
	      title: renderer.task_choices.find(obj => obj.type == node_data.task_classification).name,
	      src: window.config.icon_path + task_keys[node_data.task_classification] + '.svg'
	    });
	    let style = {
	      backgroundColor: getColumnColour(node_data)
	    };
	    let mouseover_actions = [];
	    let css_class = 'node assignment';
	    if (this.state.is_dropped) css_class += ' dropped';
	    let linkIcon;
	    let linktext = window.gettext('Visit linked workflow');
	    let clickfunc = this.visitWorkflow.bind(this, node_data.linked_workflow);
	    if (node_data.linked_workflow_data) {
	      if (node_data.linked_workflow_data.deleted) linktext = window.gettext('<Deleted Workflow>');
	      if (node_data.linked_workflow_data.deleted) clickfunc = null;
	    }
	    if (data.linked_workflow_access && node_data.linked_workflow) linkIcon = /*#__PURE__*/reactExports.createElement("div", {
	      className: "hover-shade linked-workflow",
	      onClick: clickfunc
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + 'wflink.svg'
	    }), /*#__PURE__*/reactExports.createElement("div", null, linktext));
	    let parentLinkIcon;
	    let parentlinktext = window.gettext('Visit containing workflow');
	    let parentclickfunc = this.visitWorkflow.bind(this, data.parent_workflow_id);
	    if (data.workflow_access && data.parent_workflow_id) parentLinkIcon = /*#__PURE__*/reactExports.createElement("div", {
	      className: "hover-shade linked-workflow containing-workflow",
	      onClick: parentclickfunc
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + 'wflink.svg'
	    }), /*#__PURE__*/reactExports.createElement("div", null, parentlinktext));
	    let dropText = '';
	    if (data_override.description && data_override.description.replace(/(<p\>|<\/p>|<br>|\n| |[^a-zA-Z0-9])/g, '') != '') dropText = '...';
	    let dropIcon;
	    if (this.state.is_dropped) dropIcon = 'droptriangleup';else dropIcon = 'droptriangledown';
	    let completion_data;
	    if (data.user_assignment) {
	      let disabled = true;
	      if (this.props.renderer.user_role == role_keys.teacher || data.self_reporting && data.user_assignment.liveprojectuser.user.id == user_id) disabled = false;
	      let extra_data;
	      if (data.single_completion && data.user_assignment.completed) {
	        extra_data = [/*#__PURE__*/reactExports.createElement("div", null, window.gettext('Completed by ') + getUserDisplay(data.user_assignment.liveprojectuser.user) + window.gettext(' on '), /*#__PURE__*/reactExports.createElement(DatePicker, {
	          default_value: data.user_assignment.completed_on,
	          disabled: true
	        }))];
	      }
	      completion_data = /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("label", null, window.gettext('Completion'), ": "), /*#__PURE__*/reactExports.createElement("input", {
	        type: "checkbox",
	        disabled: disabled,
	        checked: this.state.completed,
	        onChange: this.changeCompletion.bind(this)
	      }), extra_data);
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      style: style,
	      className: css_class
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "mouseover-actions"
	    }, mouseover_actions), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-top-row"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-icon"
	    }, lefticon), /*#__PURE__*/reactExports.createElement(AssignmentTitle, {
	      user_role: this.props.renderer.user_role,
	      data: data
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-icon"
	    }, righticon)), /*#__PURE__*/reactExports.createElement("div", {
	      className: "assignment-timing"
	    }, /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("label", null, window.gettext('End Date'), ": "), /*#__PURE__*/reactExports.createElement(DatePicker, {
	      id: "end_date",
	      default_value: data.end_date,
	      disabled: true
	    })), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("label", null, window.gettext('Start Date'), ": "), /*#__PURE__*/reactExports.createElement(DatePicker, {
	      id: "start_date",
	      default_value: data.start_date,
	      disabled: true
	    }))), /*#__PURE__*/reactExports.createElement("div", null, completion_data)), parentLinkIcon, linkIcon, /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-details"
	    }, /*#__PURE__*/reactExports.createElement(TitleText, {
	      text: data_override.description,
	      defaultText: window.gettext('No description given')
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-drop-row hover-shade",
	      onClick: this.toggleDrop.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-drop-side node-drop-left"
	    }, dropText), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-drop-middle"
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + dropIcon + '.svg'
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-drop-side node-drop-right"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-drop-time"
	    }, data_override.time_required && data_override.time_required + ' ' + this.props.renderer.time_choices[data_override.time_units].name))));
	  }
	}

	// @todo circular dependency, wait till merge
	class WorkflowVisibility extends WorkflowForMenu {
	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  clickAction() {
	    return null;
	  }
	  getButtons() {
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "permission-select"
	    }, /*#__PURE__*/reactExports.createElement("select", {
	      value: this.props.visibility,
	      onChange: evt => this.props.visibilityFunction(this.props.workflow_data.id, evt.target.value)
	    }, /*#__PURE__*/reactExports.createElement("option", {
	      value: "not_visible"
	    }, window.gettext('Not Visible')), /*#__PURE__*/reactExports.createElement("option", {
	      value: "visible"
	    }, window.gettext('Visible'))));
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    var data = this.props.workflow_data;
	    var css_class = 'workflow-for-menu workflow-visibility hover-shade ' + data.type;
	    if (this.props.selected) css_class += ' selected';
	    let creation_text = window.gettext('Created');
	    if (data.author && data.author !== 'None') creation_text += ' ' + window.gettext('by') + ' ' + data.author;
	    creation_text += ' ' + data.created_on;
	    return /*#__PURE__*/reactExports.createElement("div", {
	      ref: this.maindiv,
	      className: css_class
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-top-row"
	    }, /*#__PURE__*/reactExports.createElement(WorkflowTitle, {
	      class_name: "workflow-title",
	      data: data
	    }), this.getButtons(), this.getTypeIndicator()), /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-created"
	    }, creation_text), /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-description",
	      dangerouslySetInnerHTML: {
	        __html: data.description
	      }
	    }));
	  }
	}

	/**
	 *
	 */
	class ReportRow extends reactExports.Component {
	  render() {
	    let user = this.props.userassignment.liveprojectuser;
	    let userassignment = this.props.userassignment;
	    let updateFunction = this.props.updateFunction;
	    return /*#__PURE__*/reactExports.createElement("tr", null, /*#__PURE__*/reactExports.createElement("td", null, getUserDisplay(user.user) + ' (' + user.role_type_display + ')'), /*#__PURE__*/reactExports.createElement("td", null, /*#__PURE__*/reactExports.createElement("input", {
	      type: "checkbox",
	      checked: userassignment.completed,
	      onChange: evt => updateFunction(userassignment.id, evt.target.checked)
	    })));
	  }
	}

	/**
	 *
	 */
	class LiveAssignmentEdit extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      ...this.props.data,
	      has_changed: false,
	      user_data: {
	        assigned_users: [],
	        other_users: []
	      }
	    };
	    this.changed_values = {};
	  }

	  /*******************************************************
	   * LIFECYCLE
	   *******************************************************/
	  componentDidMount() {
	    let component = this;
	    getAssignmentData(component.props.data.id, component.props.view_type, data => {
	      component.setState({
	        user_data: data.data_package
	      });
	    });
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  switchVisibility(pk, visibility) {
	    let parameter = 'workflow_access';
	    if (this.state.task.linked_workflow === pk) parameter = 'linked_' + parameter;
	    if (visibility === 'visible') {
	      setWorkflowVisibility(this.props.live_project_data.pk, pk, true);
	      let new_state = {};
	      new_state[parameter] = true;
	      this.props.updateAssignment(new_state);
	      this.setState(new_state);
	    } else {
	      setWorkflowVisibility(this.props.live_project_data.pk, pk, false);
	      let new_state = {};
	      new_state[parameter] = false;
	      this.props.updateAssignment(new_state);
	      this.setState(new_state);
	    }
	  }
	  delete() {
	    let data = this.state;
	    if (window.confirm(window.gettext('Are you sure you want to delete this ') + window.gettext('assignment') + '?')) {
	      deleteSelfLive(data.id, 'liveassignment', response_data => {
	        window.location = window.config.update_path.liveproject.replace('0', data.liveproject);
	      });
	    }
	  }
	  changeField(type, new_value) {
	    let new_state = {
	      has_changed: true
	    };
	    new_state[type] = new_value;
	    this.changed_values[type] = new_value;
	    this.setState(new_state);
	  }
	  saveChanges() {
	    updateLiveProjectValue(this.state.id, 'liveassignment', this.changed_values);
	    this.props.updateAssignment(this.changed_values);
	    this.changed_values = {};
	    this.setState({
	      has_changed: false
	    });
	  }
	  changeView(workflow_id) {
	    this.setState({
	      selected_id: workflow_id
	    });
	  }
	  addUser(evt) {
	    let selected = parseInt($('#users_all').val());
	    if (!selected) return;
	    let user_data = {
	      ...this.state.user_data
	    };
	    user_data.assigned_users = user_data.assigned_users.slice();
	    user_data.other_users = user_data.other_users.slice();
	    user_data.assigned_users.push(user_data.other_users.splice(user_data.other_users.findIndex(element => element.user.id == selected), 1)[0]);
	    this.setState({
	      user_data: user_data
	    });
	    addUsersToAssignment(this.state.id, [selected], true);
	  }
	  removeUser(evt) {
	    let selected = parseInt($('#users_chosen').val());
	    if (!selected) return;
	    let user_data = {
	      ...this.state.user_data
	    };
	    user_data.assigned_users = user_data.assigned_users.slice();
	    user_data.other_users = user_data.other_users.slice();
	    user_data.other_users.push(user_data.assigned_users.splice(user_data.assigned_users.findIndex(element => element.user.id == selected), 1)[0]);
	    this.setState({
	      user_data: user_data
	    });
	    addUsersToAssignment(this.state.id, [selected], false);
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let data = this.state;
	    let changeField = this.changeField.bind(this);
	    let assigned_users = this.state.user_data.assigned_users.map(user => /*#__PURE__*/reactExports.createElement("option", {
	      value: user.user.id
	    }, getUserDisplay(user.user) + ' (' + user.role_type_display + ')'));
	    let other_users = this.state.user_data.other_users.map(user => /*#__PURE__*/reactExports.createElement("option", {
	      value: user.user.id
	    }, getUserDisplay(user.user) + ' (' + user.role_type_display + ')'));
	    let linked_workflow;
	    if (this.state.task.linked_workflow) {
	      let visibility = 'not_visible';
	      if (this.state.linked_workflow_access) visibility = 'visible';
	      let warning;
	      if (!this.state.linked_workflow_access) warning = /*#__PURE__*/reactExports.createElement("div", {
	        className: "warning"
	      }, window.gettext('Warning: the linked workflow is not visible to those in the classroom'));
	      linked_workflow = [/*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Linked Workflow'), ":"), warning, /*#__PURE__*/reactExports.createElement(WorkflowVisibility, {
	        workflow_data: this.state.task.linked_workflow_data,
	        visibility: visibility,
	        visibilityFunction: this.switchVisibility.bind(this)
	      })];
	    }
	    let parent_workflow;
	    if (this.state.user_data.parent_workflow) {
	      let parent_visibility = 'not_visible';
	      if (this.state.workflow_access) parent_visibility = 'visible';
	      let warning;
	      if (!this.state.workflow_access) warning = /*#__PURE__*/reactExports.createElement("div", {
	        className: "warning"
	      }, window.gettext('Warning: the workflow the task appears in is not visible to those in the classroom'));
	      parent_workflow = [/*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Task Workflow'), ":"), warning, /*#__PURE__*/reactExports.createElement(WorkflowVisibility, {
	        workflow_data: this.state.user_data.parent_workflow,
	        visibility: parent_visibility,
	        visibilityFunction: this.switchVisibility.bind(this)
	      })];
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-details"
	    }, /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('Configuration'), ":"), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("label", null, window.gettext('End Date'), ": "), /*#__PURE__*/reactExports.createElement(DatePicker, {
	      id: "end_date",
	      default_value: data.end_date,
	      onChange: this.changeField.bind(this, 'end_date')
	    })), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("label", null, window.gettext('Start Date'), ": "), /*#__PURE__*/reactExports.createElement(DatePicker, {
	      id: "start_date",
	      default_value: data.start_date,
	      onChange: this.changeField.bind(this, 'start_date')
	    })), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("label", {
	      htmlFor: "single-completion",
	      title: window.gettext('Whether to mark the assignment as complete if any user has completed it.')
	    }, window.gettext('Mark assignment as complete when a single user has completed it:')), /*#__PURE__*/reactExports.createElement("input", {
	      id: "single-completion",
	      name: "single-completion",
	      type: "checkbox",
	      checked: data.single_completion,
	      onChange: evt => changeField('single_completion', evt.target.checked)
	    })), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("label", {
	      htmlFor: "self-reporting",
	      title: window.gettext('Whether students can mark their own assignments as complete.')
	    }, window.gettext('Let students self-report their assignment completion:')), /*#__PURE__*/reactExports.createElement("input", {
	      id: "self-reporting",
	      name: "self-reporting",
	      type: "checkbox",
	      checked: data.self_reporting,
	      onChange: evt => changeField('self_reporting', evt.target.checked)
	    })), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("button", {
	      disabled: !this.state.has_changed,
	      onClick: this.saveChanges.bind(this)
	    }, window.gettext('Save Changes'))), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("button", {
	      onClick: this.delete.bind(this)
	    }, window.gettext('Delete'))), /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('Users'), ":"), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("div", {
	      className: "multi-select"
	    }, /*#__PURE__*/reactExports.createElement("h5", null, window.gettext('Assigned Users')), /*#__PURE__*/reactExports.createElement("select", {
	      id: "users_chosen",
	      multiple: true
	    }, assigned_users), /*#__PURE__*/reactExports.createElement("button", {
	      id: "remove-user",
	      onClick: this.removeUser.bind(this)
	    }, ' ', window.gettext('Remove'), ' ')), /*#__PURE__*/reactExports.createElement("div", {
	      className: "multi-select"
	    }, /*#__PURE__*/reactExports.createElement("h5", null, window.gettext('Other Users')), /*#__PURE__*/reactExports.createElement("select", {
	      id: "users_all",
	      multiple: true
	    }, other_users), /*#__PURE__*/reactExports.createElement("button", {
	      id: "add-user",
	      onClick: this.addUser.bind(this)
	    }, ' ', window.gettext('Add'), ' '))), /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('Workflows'), ":"), parent_workflow, linked_workflow);
	  }
	}

	/**
	 *
	 */
	class LiveAssignmentReport extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.state = {};
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  defaultRender() {
	    return /*#__PURE__*/reactExports.createElement(WorkflowLoader, null);
	  }
	  updateCompletion(id, completed) {
	    let userassignments = this.state.userassignments.slice();
	    let index = userassignments.findIndex(userassignment => userassignment.id == id);
	    userassignments[index] = {
	      ...userassignments[index],
	      completed: completed
	    };
	    setAssignmentCompletion(id, completed);
	    this.setState({
	      userassignments: userassignments
	    });
	  }

	  /*******************************************************
	   * LIFECYCLE
	   *******************************************************/
	  componentDidMount() {
	    let component = this;
	    getAssignmentData(component.props.data.id, component.props.view_type, data => {
	      component.setState({
	        ...data.data_package
	      });
	    });
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    if (!this.state.userassignments) {
	      return this.defaultRender();
	    }
	    let rows = this.state.userassignments.map(assignment => /*#__PURE__*/reactExports.createElement(ReportRow, {
	      userassignment: assignment,
	      updateFunction: this.updateCompletion.bind(this)
	    }));
	    let total_completion = this.state.userassignments.reduce((accumulator, currentValue) => accumulator + currentValue.completed, 0);
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-details"
	    }, /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('Completion'), ":"), /*#__PURE__*/reactExports.createElement("table", null, rows, /*#__PURE__*/reactExports.createElement("tr", null, /*#__PURE__*/reactExports.createElement("td", null, window.gettext('Total'), ":"), /*#__PURE__*/reactExports.createElement("td", null, total_completion, "/", this.state.userassignments.length))));
	  }
	}
	class LiveAssignmentMenu extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      view_type: 'edit',
	      assignment_data: props.assignment_data
	    };
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  getViewButtons() {
	    return [{
	      type: 'edit',
	      name: window.gettext('Edit')
	    }, {
	      type: 'report',
	      name: window.gettext('Report')
	    }];
	  }
	  changeView(view_type) {
	    this.setState({
	      view_type: view_type
	    });
	  }
	  getContent() {
	    switch (this.state.view_type) {
	      case 'edit':
	        return /*#__PURE__*/reactExports.createElement(LiveAssignmentEdit, {
	          updateAssignment: this.updateAssignment.bind(this),
	          view_type: this.state.view_type,
	          renderer: this.props.renderer,
	          data: this.props.assignment_data,
	          live_project_data: this.props.live_project_data
	        });
	      case 'report':
	        return /*#__PURE__*/reactExports.createElement(LiveAssignmentReport, {
	          view_type: this.state.view_type,
	          renderer: this.props.renderer,
	          data: this.props.assignment_data
	        });
	    }
	  }
	  updateAssignment(new_values) {
	    this.setState({
	      assignment_data: {
	        ...this.state.assignment_data,
	        ...new_values
	      }
	    });
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let data = this.state.assignment_data;
	    let liveproject = this.props.live_project_data;
	    let view_buttons = this.getViewButtons().map(item => {
	      let view_class = 'hover-shade';
	      if (item.type === this.state.view_type) view_class += ' active';
	      return /*#__PURE__*/reactExports.createElement("a", {
	        id: 'button_' + item.type,
	        className: view_class,
	        onClick: this.changeView.bind(this, item.type)
	      }, item.name);
	    });
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-menu"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-header"
	    }, reactDomExports.createPortal( /*#__PURE__*/reactExports.createElement("a", {
	      id: "live-project-return",
	      href: window.config.update_path['liveproject'].replace(0, liveproject.pk),
	      className: "hover-shade no-underline"
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded"
	    }, "arrow_back_ios"), /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Return to Classroom'))), $('.titlebar .title')[0]), /*#__PURE__*/reactExports.createElement(AssignmentView, {
	      renderer: this.props.renderer,
	      data: data
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-view-select hide-print"
	    }, view_buttons), /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-container"
	    }, this.getContent()));
	  }
	}

	/**
	 *
	 */
	class AssignmentViewForNode extends AssignmentView {
	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let data = this.props.data;
	    let node_data = data.task;
	    if (node_data.represents_workflow) ({
	      ...node_data,
	      ...node_data.linked_workflow_data,
	      id: data.id
	    });else ({
	      ...node_data
	    });
	    let css_class = 'assignment-in-node';
	    let completion_data;
	    if (data.user_assignment) {
	      let disabled = true;
	      if (this.props.renderer.user_role == role_keys.teacher || data.self_reporting && data.user_assignment.liveprojectuser.user.id == user_id) disabled = false;
	      let extra_data;
	      if (data.single_completion && data.user_assignment.completed) {
	        extra_data = [/*#__PURE__*/reactExports.createElement("div", null, window.gettext('Completed by ') + getUserDisplay(data.user_assignment.liveprojectuser.user) + window.gettext(' on '), /*#__PURE__*/reactExports.createElement(DatePicker, {
	          default_value: data.user_assignment.completed_on,
	          disabled: true
	        }))];
	      }
	      completion_data = /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("label", null, window.gettext('Completion'), ": "), /*#__PURE__*/reactExports.createElement("input", {
	        type: "checkbox",
	        disabled: disabled,
	        checked: this.state.completed,
	        onChange: this.changeCompletion.bind(this)
	      }), extra_data);
	    } else if (data.completion_info) {
	      completion_data = /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Completion') + ': ' + data.completion_info);
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: css_class
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-top-row"
	    }, /*#__PURE__*/reactExports.createElement(AssignmentTitle, {
	      user_role: this.props.renderer.user_role,
	      data: data
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "assignment-timing"
	    }, /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("label", null, window.gettext('End Date'), ": "), /*#__PURE__*/reactExports.createElement(DatePicker, {
	      id: "end_date",
	      default_value: data.end_date,
	      disabled: true
	    })), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("label", null, window.gettext('Start Date'), ": "), /*#__PURE__*/reactExports.createElement(DatePicker, {
	      id: "start_date",
	      default_value: data.start_date,
	      disabled: true
	    }))), /*#__PURE__*/reactExports.createElement("div", null, completion_data)));
	  }
	}

	/**
	 *
	 */
	class AssignmentBox extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.input = reactExports.createRef();
	    this.state = {
	      my_assignments: [],
	      all_assignments: []
	    };
	  }

	  /*******************************************************
	   * LIFECYCLE
	   *******************************************************/
	  componentDidMount() {
	    this.setState({
	      has_rendered: true
	    });
	  }
	  componentDidUpdate(prevProps) {
	    if (this.props.show && !prevProps.show) this.reloadAssignments();
	    if (!this.props.show && prevProps.show) this.setState({
	      my_assignments: [],
	      all_assignments: []
	    });
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  reloadAssignments() {
	    let node_id = this.props.node_id;
	    let props = this.props;
	    props.renderer.tiny_loader.startLoad();
	    getAssignmentsForNode(node_id, response_data => {
	      props.renderer.tiny_loader.endLoad();
	      this.setState(response_data.data_package);
	      if (!this.props.has_assignment && (response_data.data_package.my_assignments.length > 0 || response_data.data_package.all_assignments.length > 0)) {
	        props.dispatch(reloadAssignmentsAction(props.node_id, true));
	      } else if (this.props.has_assignment && response_data.data_package.my_assignments.length == 0 && response_data.data_package.all_assignments.length == 0) {
	        props.dispatch(reloadAssignmentsAction(props.node_id, false));
	      }
	    });
	  }
	  createAssignment() {
	    let props = this.props;
	    props.renderer.tiny_loader.startLoad();
	    createAssignment(props.node_id, props.renderer.project.id, response_data => {
	      props.renderer.tiny_loader.endLoad();
	      this.reloadAssignments();
	    });
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    if (!this.state.has_rendered) return null;
	    let assignment_indicator = null;
	    if (this.props.has_assignment) assignment_indicator = reactDomExports.createPortal( /*#__PURE__*/reactExports.createElement("div", {
	      className: "comment-indicator hover-shade",
	      onClick: this.props.parent.showAssignment.bind(this.props.parent)
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + 'assignment.svg'
	    })), $(this.props.parent.maindiv.current).children('.side-actions').children('.assignment-indicator-container')[0]);
	    if (!this.props.show) {
	      return assignment_indicator;
	    }
	    let top_contents = [];
	    top_contents.push( /*#__PURE__*/reactExports.createElement("div", {
	      className: "close-button hover-shade",
	      title: window.gettext('Close'),
	      onClick: this.props.parent.showAssignment.bind(this.props.parent)
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + 'close.svg'
	    })));
	    if (this.props.renderer.is_teacher) {
	      top_contents.push( /*#__PURE__*/reactExports.createElement("div", {
	        className: "create-assignment hover-shade",
	        title: window.gettext('Create New'),
	        onClick: this.createAssignment.bind(this)
	      }, /*#__PURE__*/reactExports.createElement("img", {
	        src: window.config.icon_path + 'add_new.svg'
	      })));
	    }
	    if (!this.props.has_assignment) {
	      top_contents.push( /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Not yet assigned')));
	    }
	    let my_assignments = this.state.my_assignments.map(assignment => /*#__PURE__*/reactExports.createElement(AssignmentViewForNode, {
	      data: assignment,
	      renderer: this.props.renderer
	    }));
	    if (my_assignments.length > 0) my_assignments.unshift( /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('My Assignments')));
	    let all_assignments;
	    if (this.props.renderer.is_teacher) {
	      all_assignments = this.state.all_assignments.map(assignment => /*#__PURE__*/reactExports.createElement(AssignmentViewForNode, {
	        data: assignment,
	        renderer: this.props.renderer
	      }));
	      if (all_assignments.length > 0) all_assignments.unshift( /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('All Assignments')));
	      if (my_assignments.length > 0 && all_assignments.length > 0) all_assignments.unshift( /*#__PURE__*/reactExports.createElement("hr", null));
	    }
	    return reactDomExports.createPortal([/*#__PURE__*/reactExports.createElement("div", {
	      className: "comment-box",
	      onClick: evt => evt.stopPropagation()
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "comment-top-row"
	    }, top_contents), my_assignments, all_assignments), assignment_indicator], $(this.props.parent.maindiv.current).children('.side-actions').children('.assignment-indicator-container')[0]);
	  }
	}

	class AssignmentViewSmall extends reactExports.Component {
	  render() {
	    let data = this.props.data;
	    let node_data = data.task;
	    let css_class = 'node assignment';
	    let style = {
	      backgroundColor: getColumnColour(node_data)
	    };
	    return /*#__PURE__*/reactExports.createElement("div", {
	      style: style,
	      className: css_class
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-top-row"
	    }, /*#__PURE__*/reactExports.createElement(AssignmentTitle, {
	      user_role: this.props.renderer.user_role,
	      data: data
	    })));
	  }
	}

	/**
	 * Based on an outcomenode's completion status, return the correct icon
	 *
	 * @param completion_status
	 * @param outcomes_type
	 * @returns {JSX.Element|*[]}
	 */
	function getCompletionImg(completion_status, outcomes_type) {
	  let contents = [];
	  if (outcomes_type === 0 || completion_status & 1) {
	    return /*#__PURE__*/React.createElement("img", {
	      className: "self-completed",
	      src: window.config.icon_path + 'solid_check.svg'
	    });
	  }
	  if (completion_status & 2) {
	    let divclass = '';
	    contents.push( /*#__PURE__*/React.createElement("div", {
	      className: 'outcome-introduced outcome-degree' + divclass
	    }, "I"));
	  }
	  if (completion_status & 4) {
	    let divclass = '';
	    contents.push( /*#__PURE__*/React.createElement("div", {
	      className: 'outcome-developed outcome-degree' + divclass
	    }, "D"));
	  }
	  if (completion_status & 8) {
	    let divclass = '';
	    contents.push( /*#__PURE__*/React.createElement("div", {
	      className: 'outcome-advanced outcome-degree' + divclass
	    }, "A"));
	  }
	  return contents;
	}

	//Basic component representing an outcome to outcome link
	class OutcomeOutcomeView extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'outcomeoutcome';
	  }
	  render() {
	    let data = this.props.data;
	    let my_class = 'outcome-outcome outcome-outcome-' + this.props.parent_depth;
	    if (data.no_drag) my_class += ' no-drag';
	    return /*#__PURE__*/reactExports.createElement("li", {
	      className: my_class,
	      id: data.id,
	      ref: this.maindiv,
	      "data-child-id": data.child
	    }, /*#__PURE__*/reactExports.createElement(OutcomeView$1, {
	      objectID: data.child,
	      parentID: this.props.parentID,
	      throughParentID: data.id,
	      renderer: this.props.renderer,
	      show_horizontal: this.props.show_horizontal
	    }));
	  }
	}
	const mapOutcomeOutcomeStateToProps = (state, own_props) => getOutcomeOutcomeByID(state, own_props.objectID);
	var OutcomeOutcomeView$1 = connect(mapOutcomeOutcomeStateToProps, null)(OutcomeOutcomeView);

	//Basic component representing an outcome to outcome link
	class OutcomeBarOutcomeOutcomeViewUnconnected extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'outcomeoutcome';
	  }
	  render() {
	    let data = this.props.data;
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-outcome",
	      id: data.id,
	      ref: this.maindiv
	    }, /*#__PURE__*/reactExports.createElement(OutcomeBarOutcomeView$1, {
	      objectID: data.child,
	      parentID: this.props.parentID,
	      throughParentID: data.id,
	      renderer: this.props.renderer
	    }));
	  }
	}
	const OutcomeBarOutcomeOutcomeView = connect(mapOutcomeOutcomeStateToProps, null)(OutcomeBarOutcomeOutcomeViewUnconnected);

	//Basic component representing an outcome to outcome link for a simple non-editable block
	class SimpleOutcomeOutcomeViewUnconnected extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'outcomeoutcome';
	  }
	  render() {
	    let data = this.props.data;
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-outcome",
	      id: data.id,
	      ref: this.maindiv
	    }, this.getChildType());
	  }
	  getChildType() {
	    let data = this.props.data;
	    return /*#__PURE__*/reactExports.createElement(SimpleOutcomeView$1, {
	      objectID: data.child,
	      parentID: this.props.parentID,
	      throughParentID: data.id,
	      comments: this.props.comments,
	      edit: this.props.edit,
	      renderer: this.props.renderer
	    });
	  }
	}
	const SimpleOutcomeOutcomeView = connect(mapOutcomeOutcomeStateToProps, null)(SimpleOutcomeOutcomeViewUnconnected);

	//Basic component representing an outcome to outcome link
	class TableOutcomeOutcomeViewUnconnected extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'outcomeoutcome';
	  }
	  render() {
	    let data = this.props.data;
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-outcome",
	      id: data.id,
	      ref: this.maindiv
	    }, /*#__PURE__*/reactExports.createElement(TableOutcomeView$1, {
	      renderer: this.props.renderer,
	      objectID: data.child,
	      parentID: this.props.parentID,
	      throughParentID: data.id,
	      nodecategory: this.props.nodecategory,
	      updateParentCompletion: this.props.updateParentCompletion,
	      completion_status_from_parents: this.props.completion_status_from_parents,
	      outcomes_type: this.props.outcomes_type
	    }));
	  }
	}
	connect(mapOutcomeOutcomeStateToProps, null)(TableOutcomeOutcomeViewUnconnected);

	/**
	 * Basic component representing an outcome in the outcome bar
	 */
	class OutcomeBarOutcomeViewUnconnected extends Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'outcome';
	    this.children_block = reactExports.createRef();
	    this.state = {
	      is_dropped: props.data.depth < 1
	    };
	  }

	  /*******************************************************
	   * LIFECYCLE
	   *******************************************************/
	  componentDidMount() {
	    this.makeDraggable();
	    $(this.maindiv.current)[0].dataDraggable = {
	      outcome: this.props.data.id
	    };
	    $(this.maindiv.current).mouseenter(evt => {
	      this.toggleCSS(true, 'hover');
	    });
	    $(this.maindiv.current).mouseleave(evt => {
	      this.toggleCSS(false, 'hover');
	    });
	    $(this.children_block.current).mouseleave(evt => {
	      this.toggleCSS(true, 'hover');
	    });
	    $(this.children_block.current).mouseenter(evt => {
	      this.toggleCSS(false, 'hover');
	    });
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  toggleDrop(evt) {
	    evt.stopPropagation();
	    this.setState({
	      is_dropped: !this.state.is_dropped
	    });
	  }
	  makeDraggable() {
	    if (this.props.renderer.read_only) return;
	    let draggable_selector = 'outcome';
	    let draggable_type = 'outcome';
	    $(this.maindiv.current).draggable({
	      helper: (e, item) => {
	        var helper = $(document.createElement('div'));
	        helper.addClass('outcome-ghost');
	        helper.appendTo(document.body);
	        return helper;
	      },
	      cursor: 'move',
	      cursorAt: {
	        top: 20,
	        left: 100
	      },
	      distance: 10,
	      start: (e, ui) => {
	        $('.workflow-canvas').addClass('dragging-' + draggable_type);
	        $(draggable_selector).addClass('dragging');
	      },
	      stop: (e, ui) => {
	        $('.workflow-canvas').removeClass('dragging-' + draggable_type);
	        $(draggable_selector).removeClass('dragging');
	      }
	    });
	  }
	  clickFunction(evt) {
	    if (evt.target.checked) {
	      this.toggleCSS(true, 'toggle');
	    } else {
	      this.toggleCSS(false, 'toggle');
	    }
	  }
	  toggleCSS(is_toggled, type) {
	    if (is_toggled) {
	      $('.outcome-' + this.props.data.id).addClass('outcome-' + type);
	      if (this.props.nodes.length) $(this.props.nodes.map(node => '.node#' + node).join(', ')).addClass('outcome-' + type);
	      if (this.props.horizontaloutcomes.length) $(this.props.horizontaloutcomes.map(oc => '.outcome-' + oc).join(', ')).addClass('outcome-' + type);
	    } else {
	      $('.outcome-' + this.props.data.id).removeClass('outcome-' + type);
	      if (this.props.nodes.length) $(this.props.nodes.map(node => '.node#' + node).join(', ')).removeClass('outcome-' + type);
	      if (this.props.horizontaloutcomes.length) $(this.props.horizontaloutcomes.map(oc => '.outcome-' + oc).join(', ')).removeClass('outcome-' + type);
	    }
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let data = this.props.data;
	    let children;
	    let dropIcon;
	    let droptext;
	    if (checkSetHidden(data, this.props.object_sets)) return null;
	    if (this.state.is_dropped) children = data.child_outcome_links.map(outcomeoutcome => /*#__PURE__*/reactExports.createElement(OutcomeBarOutcomeOutcomeView, {
	      key: outcomeoutcome,
	      objectID: outcomeoutcome,
	      parentID: data.id,
	      renderer: this.props.renderer
	    }));
	    if (this.state.is_dropped) dropIcon = 'droptriangleup';else dropIcon = 'droptriangledown';
	    if (this.state.is_dropped) droptext = window.gettext('hide');else droptext = window.gettext('show ') + data.child_outcome_links.length + ' ' + nwindow.gettext('descendant', 'descendants', data.child_outcome_links.length);
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: 'outcome' + (this.state.is_dropped && ' dropped' || '') + ' outcome-' + data.id,
	      ref: this.maindiv
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-title"
	    }, /*#__PURE__*/reactExports.createElement(OutcomeTitle, {
	      data: this.props.data,
	      prefix: this.props.prefix,
	      hovertext: this.props.hovertext
	    })), /*#__PURE__*/reactExports.createElement("input", {
	      className: "outcome-toggle-checkbox",
	      type: "checkbox",
	      title: "Toggle highlighting",
	      onChange: this.clickFunction.bind(this)
	    }), data.depth < 2 && data.child_outcome_links.length > 0 && /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-drop",
	      onClick: this.toggleDrop.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-drop-img"
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + dropIcon + '.svg'
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-drop-text"
	    }, droptext)), data.depth < 2 && /*#__PURE__*/reactExports.createElement("div", {
	      className: "children-block",
	      id: this.props.objectID + '-children-block',
	      ref: this.children_block
	    }, children));
	  }
	}

	/*******************************************************
	 * MAP STATE TO PROPS
	 *******************************************************/
	const mapOutcomeBarOutcomeStateToProps$1 = (state, own_props) => ({
	  ...getOutcomeByID(state, own_props.objectID),
	  nodes: state.outcomenode.filter(outcomenode => outcomenode.outcome == own_props.objectID).map(outcomenode => outcomenode.node),
	  horizontaloutcomes: state.outcomehorizontallink.filter(ochl => ochl.parent_outcome == own_props.objectID).map(ochl => ochl.outcome)
	});

	/*******************************************************
	 * CONNECT REDUX
	 *******************************************************/
	const OutcomeBarOutcomeView = connect(mapOutcomeBarOutcomeStateToProps$1, null)(OutcomeBarOutcomeViewUnconnected);
	var OutcomeBarOutcomeView$1 = OutcomeBarOutcomeView;

	/**
	 *
	 */
	class TableCell extends reactExports.Component {
	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  toggleFunction() {
	    let props = this.props;
	    let value;
	    if (props.degree) value = 0;else value = 1;
	    props.renderer.tiny_loader.startLoad();
	    updateOutcomenodeDegree(props.nodeID, props.outcomeID, value, response_data => {
	      props.renderer.tiny_loader.endLoad();
	    });
	  }
	  changeFunction(evt) {
	    let props = this.props;
	    let value = evt.target.value;
	    props.renderer.tiny_loader.startLoad();
	    updateOutcomenodeDegree(props.nodeID, props.outcomeID, value, response_data => {
	      props.renderer.tiny_loader.endLoad();
	      $(':focus').blur();
	    });
	  }
	  getContents(completion_status, self_completion) {
	    let contents = [];
	    let divclass = '';
	    if (completion_status === 0) {
	      return /*#__PURE__*/reactExports.createElement("img", {
	        src: window.config.icon_path + 'nocheck.svg'
	      });
	    } else if (!completion_status) {
	      return '';
	    }
	    if (this.props.outcomes_type === 0 || completion_status & 1) {
	      if (self_completion) return /*#__PURE__*/reactExports.createElement("img", {
	        className: "self-completed",
	        src: window.config.icon_path + 'solid_check.svg'
	      });else return /*#__PURE__*/reactExports.createElement("img", {
	        src: window.config.icon_path + 'check.svg'
	      });
	    }
	    if (completion_status & 2) {
	      if (self_completion & 2) divclass = ' self-completed';
	      contents.push( /*#__PURE__*/reactExports.createElement("div", {
	        className: 'outcome-introduced outcome-degree' + divclass
	      }, "I"));
	    }
	    if (completion_status & 4) {
	      if (self_completion & 4) divclass = ' self-completed';
	      contents.push( /*#__PURE__*/reactExports.createElement("div", {
	        className: 'outcome-developed outcome-degree' + divclass
	      }, "D"));
	    }
	    if (completion_status & 8) {
	      if (self_completion & 8) divclass = ' self-completed';
	      contents.push( /*#__PURE__*/reactExports.createElement("div", {
	        className: 'outcome-advanced outcome-degree' + divclass
	      }, "A"));
	    }
	    return contents;
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let degree = this.props.degree;
	    let class_name = 'table-cell';
	    let input;
	    if (this.props.total) class_name += ' total-cell';
	    if (this.props.grand_total) class_name += ' grand-total-cell';
	    let checked = false;
	    if (degree) checked = true;
	    if (!this.props.renderer.read_only && !this.props.total) {
	      if (this.props.outcomes_type === 0) {
	        input = /*#__PURE__*/reactExports.createElement("input", {
	          type: "checkbox",
	          onChange: this.toggleFunction.bind(this),
	          checked: checked
	        });
	      } else {
	        input = /*#__PURE__*/reactExports.createElement("select", {
	          value: degree,
	          onChange: this.changeFunction.bind(this)
	        }, /*#__PURE__*/reactExports.createElement("option", {
	          value: 0
	        }, '-'), /*#__PURE__*/reactExports.createElement("option", {
	          value: 1
	        }, 'C'), /*#__PURE__*/reactExports.createElement("option", {
	          value: 2
	        }, 'I'), /*#__PURE__*/reactExports.createElement("option", {
	          value: 4
	        }, 'D'), /*#__PURE__*/reactExports.createElement("option", {
	          value: 8
	        }, 'A'), /*#__PURE__*/reactExports.createElement("option", {
	          value: 6
	        }, 'ID'), /*#__PURE__*/reactExports.createElement("option", {
	          value: 10
	        }, 'IA'), /*#__PURE__*/reactExports.createElement("option", {
	          value: 12
	        }, 'DA'), /*#__PURE__*/reactExports.createElement("option", {
	          value: 14
	        }, 'IDA'));
	      }
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: class_name,
	      ref: this.maindiv
	    }, this.getContents(degree, !this.props.total), input);
	  }
	}

	/**
	 *
	 */
	class TableOutcomeViewUnconnected extends Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'outcome';
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  getIsDropped() {
	    return this.props.data.is_dropped;
	  }
	  getChildOutcomeView(child) {
	    return /*#__PURE__*/reactExports.createElement(TableOutcomeView, {
	      outcomes_type: this.props.outcomes_type,
	      objectID: child.id,
	      outcome_tree: child,
	      renderer: this.props.renderer
	    });
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let data = this.props.data;
	    let is_dropped = this.getIsDropped();
	    let dropIcon;
	    if (is_dropped) dropIcon = 'droptriangleup';else dropIcon = 'droptriangledown';
	    let droptext;
	    if (is_dropped) droptext = window.gettext('hide');else droptext = window.gettext('show ') + data.child_outcome_links.length + ' ' + nwindow.gettext('descendant', 'descendants', data.child_outcome_links.length);
	    let comments;
	    let style;
	    let outcome_head = /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-wrapper"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-head",
	      ref: this.maindiv,
	      style: {
	        paddingLeft: data.depth * 12
	      }
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-title",
	      style: style
	    }, /*#__PURE__*/reactExports.createElement(OutcomeTitle, {
	      data: this.props.data,
	      prefix: this.props.prefix,
	      hovertext: this.props.hovertext
	    })), data.child_outcome_links.length > 0 && /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-drop",
	      onClick: this.toggleDrop.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-drop-img"
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + dropIcon + '.svg'
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-drop-text"
	    }, droptext)), /*#__PURE__*/reactExports.createElement("div", {
	      className: "mouseover-actions"
	    }, comments), /*#__PURE__*/reactExports.createElement("div", {
	      className: "side-actions"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "comment-indicator-container"
	    }))));
	    let outcome_row = this.props.outcome_tree.outcomenodes.map(outcomenodegroup => {
	      let group_row = outcomenodegroup.map(outcomenode => /*#__PURE__*/reactExports.createElement(TableCell, {
	        outcomes_type: this.props.outcomes_type,
	        renderer: this.props.renderer,
	        nodeID: outcomenode.node_id,
	        degree: outcomenode.degree,
	        outcomeID: this.props.outcome_tree.id
	      }));
	      group_row.unshift( /*#__PURE__*/reactExports.createElement(TableCell, {
	        outcomes_type: this.props.outcomes_type,
	        renderer: this.props.renderer,
	        total: true,
	        degree: outcomenodegroup.total
	      }));
	      return /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-group"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell blank-cell"
	      }), group_row);
	    });
	    outcome_row.push( /*#__PURE__*/reactExports.createElement("div", {
	      className: "table-cell blank-cell"
	    }));
	    outcome_row.push( /*#__PURE__*/reactExports.createElement(TableCell, {
	      outcomes_type: this.props.outcomes_type,
	      renderer: this.props.renderer,
	      total: true,
	      grand_total: true,
	      degree: this.props.outcome_tree.outcomenodes.total
	    }));
	    let full_row = /*#__PURE__*/reactExports.createElement("div", {
	      className: 'outcome-row depth-' + data.depth
	    }, outcome_head, /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-cells"
	    }, outcome_row));
	    let child_rows;
	    if (is_dropped) child_rows = this.props.outcome_tree.children.map(child => this.getChildOutcomeView(child));
	    return [full_row, child_rows];
	  }
	}
	const mapOutcomeStateToProps$4 = (state, own_props) => getOutcomeByID(state, own_props.objectID);

	/*******************************************************
	 * CONNECT REDUX
	 *******************************************************/
	const TableOutcomeView = connect(mapOutcomeStateToProps$4, null)(TableOutcomeViewUnconnected);
	var TableOutcomeView$1 = TableOutcomeView;

	class MatrixOutcomeViewUnconnected extends TableOutcomeViewUnconnected {
	  toggleDrop() {
	    this.setState({
	      is_dropped: !this.state.is_dropped
	    });
	  }
	  getIsDropped() {
	    return this.state.is_dropped;
	  }
	  getChildOutcomeView(child) {
	    return /*#__PURE__*/reactExports.createElement(MatrixOutcomeView, {
	      outcomes_type: this.props.outcomes_type,
	      objectID: child.id,
	      outcome_tree: child,
	      renderer: this.props.renderer
	    });
	  }
	}
	const mapOutcomeStateToProps$3 = (state, own_props) => getOutcomeByID(state, own_props.objectID);

	/*******************************************************
	 * CONNECT REDUX
	 *******************************************************/
	const MatrixOutcomeView = connect(mapOutcomeStateToProps$3, null)(MatrixOutcomeViewUnconnected);

	/**
	 *
	 */
	class TableOutcomeBaseUnconnected extends Component {
	  getOutcomeView(outcome_tree) {
	    if (this.props.type === 'outcome_table') {
	      return /*#__PURE__*/reactExports.createElement(TableOutcomeView$1, {
	        outcomes_type: this.props.outcomes_type,
	        objectID: this.outcome_tree.id,
	        outcome_tree: this.outcome_tree,
	        renderer: this.props.renderer
	      });
	    }
	    return /*#__PURE__*/reactExports.createElement(MatrixOutcomeView, {
	      outcomes_type: this.props.outcomes_type,
	      objectID: this.outcome_tree.id,
	      outcome_tree: this.outcome_tree,
	      renderer: this.props.renderer
	    });
	  }
	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let outcome_tree = OutcomeNode.createOutcomeNodeBranch(this.props, this.props.objectID, this.props.nodecategory);
	    //avoid further rerenders if possible
	    let outcome_tree_json = JSON.stringify(outcome_tree);
	    if (this.outcome_tree_json === outcome_tree_json) {
	      outcome_tree = this.outcome_tree;
	    } else {
	      this.outcome_tree = outcome_tree;
	      this.outcome_tree_json = outcome_tree_json;
	    }
	    return this.getOutcomeView(outcome_tree);
	  }
	}

	/*******************************************************
	 * CONNECT REDUX
	 *******************************************************/
	const TableOutcomeBase = connect((state, own_props) => {
	  return {
	    outcomes_type: state.workflow.outcomes_type,
	    outcome: state.outcome,
	    outcomenode: state.outcomenode,
	    outcomeoutcome: state.outcomeoutcome
	  };
	}, null)(TableOutcomeBaseUnconnected);

	//Basic component representing an outcome in a node, or somewhere else where it doesn't have to do anything
	class SimpleOutcomeViewUnconnected extends EditableComponentWithComments {
	  constructor(props) {
	    super(props);
	    this.objectType = 'outcome';
	    this.children_block = reactExports.createRef();
	    this.state = {
	      is_dropped: false
	    };
	  }

	  /*******************************************************
	   * LIFECYCLE
	   *******************************************************/
	  componentDidMount() {
	    if (this.props.checkHidden) this.props.checkHidden();
	  }
	  componentDidUpdate() {
	    if (this.props.checkHidden) this.props.checkHidden();
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  toggleDrop() {
	    this.setState({
	      is_dropped: !this.state.is_dropped
	    });
	  }
	  getChildType(outcomeoutcome) {
	    let data = this.props.data;
	    return /*#__PURE__*/reactExports.createElement(SimpleOutcomeOutcomeView, {
	      key: outcomeoutcome,
	      objectID: outcomeoutcome,
	      parentID: data.id,
	      renderer: this.props.renderer,
	      comments: this.props.comments,
	      edit: this.props.edit
	    });
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let data = this.props.data;
	    let children;
	    let dropIcon;
	    let droptext;
	    let comments;
	    let edit;
	    let onClick;
	    if (checkSetHidden(data, this.props.object_sets)) return null;
	    if (this.state.is_dropped) {
	      children = data.child_outcome_links.map(outcomeoutcome => this.getChildType(outcomeoutcome));
	    }
	    if (this.state.is_dropped) dropIcon = 'droptriangleup';else dropIcon = 'droptriangledown';
	    if (this.state.is_dropped) droptext = window.gettext('hide');else droptext = window.gettext('show ') + data.child_outcome_links.length + ' ' + nwindow.gettext('descendant', 'descendants', data.child_outcome_links.length);
	    if (this.props.renderer.view_comments) comments = this.addCommenting();
	    if (this.props.edit) edit = this.addEditable(data, true);
	    onClick = evt => this.props.renderer.selection_manager.changeSelection(evt, this);
	    let css_class = 'outcome outcome-' + data.id;
	    if (this.state.is_dropped) css_class += ' dropped';
	    if (data.lock) css_class += ' locked locked-' + data.lock.user_id;
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: css_class,
	      style: this.get_border_style(),
	      ref: this.maindiv,
	      onClick: onClick
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-title"
	    }, /*#__PURE__*/reactExports.createElement(OutcomeTitle, {
	      data: data,
	      prefix: this.props.prefix,
	      hovertext: this.props.hovertext
	    })), data.depth < 2 && data.child_outcome_links.length > 0 && /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-drop",
	      onClick: this.toggleDrop.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-drop-img"
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + dropIcon + '.svg'
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-drop-text"
	    }, droptext)), data.depth < 2 && /*#__PURE__*/reactExports.createElement("div", {
	      className: "children-block",
	      id: this.props.objectID + '-children-block',
	      ref: this.children_block
	    }, children), /*#__PURE__*/reactExports.createElement("div", {
	      className: "mouseover-actions"
	    }, comments), /*#__PURE__*/reactExports.createElement("div", {
	      className: "side-actions"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "comment-indicator-container"
	    })), edit);
	  }
	}

	/*******************************************************
	 * MAP STATE
	 *******************************************************/
	const mapOutcomeStateToProps$2 = (state, own_props) => getOutcomeByID(state, own_props.objectID);

	/*******************************************************
	 * CONNECT REDUX
	 *******************************************************/
	const SimpleOutcomeView = connect(mapOutcomeStateToProps$2, null)(SimpleOutcomeViewUnconnected);
	var SimpleOutcomeView$1 = SimpleOutcomeView;

	/**
	 *
	 */
	class OutcomeHorizontalLinkViewUnconnected extends Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'outcomehorizontallink';
	  }

	  /*******************************************************
	   * LIFECYCLE
	   *******************************************************/
	  componentDidMount() {
	    this.checkHidden();
	  }
	  componentDidUpdate() {
	    this.checkHidden();
	  }
	  componentWillUnmount() {
	    this.checkHidden();
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  deleteSelf(data) {
	    let props = this.props;
	    //Temporary confirmation; add better confirmation dialogue later
	    if (window.confirm(window.gettext('Are you sure you want to delete this ') + get_verbose(this.props.data, this.objectType).toLowerCase() + '?')) {
	      props.renderer.tiny_loader.startLoad();
	      updateOutcomehorizontallinkDegree(data.outcome, data.parent_outcome, 0, response_data => {
	        props.renderer.tiny_loader.endLoad();
	      });
	    }
	  }

	  /**
	   * Adds a button that deletes the item (with a confirmation). The callback function is called after the object is removed from the DOM
	   * @param data
	   * @returns {JSX.Element}
	   */
	  addDeleteSelf(data) {
	    let icon = 'close.svg';
	    return /*#__PURE__*/reactExports.createElement(ActionButton, {
	      button_icon: icon,
	      button_class: "delete-self-button",
	      titletext: window.gettext('Delete'),
	      handleClick: this.deleteSelf.bind(this, data)
	    });
	  }

	  /**
	   * @todo what is this doing?
	   */
	  checkHidden() {
	    if ($(this.maindiv.current).children('.outcome').length == 0) $(this.maindiv.current).css('display', 'none');else $(this.maindiv.current).css('display', '');
	    let indicator = $(this.maindiv.current).closest('.outcome-node-indicator');
	    if (indicator.length >= 0) {
	      let num_outcomenodes = indicator.children('.outcome-node-container').children('.outcome-node:not([style*="display: none"])').length;
	      indicator.children('.outcome-node-indicator-number').html(num_outcomenodes);
	      if (num_outcomenodes == 0) indicator.css('display', 'none');else indicator.css('display', '');
	    }
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let data = this.props.data;
	    //It's possible we don't actually have this data, if the horizontal link is dead
	    if (!data) return null;
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: 'outcome-node outcome-' + data.id,
	      id: data.id,
	      ref: this.maindiv
	    }, !this.props.renderer.read_only && /*#__PURE__*/reactExports.createElement("div", null, this.addDeleteSelf(data, 'close.svg')), /*#__PURE__*/reactExports.createElement(SimpleOutcomeView$1, {
	      renderer: this.props.renderer,
	      checkHidden: this.checkHidden.bind(this),
	      objectID: data.parent_outcome,
	      parentID: this.props.parentID,
	      throughParentID: data.id
	    }));
	  }
	}
	const mapOutcomeHorizontalLinkStateToProps = (state, own_props) => getOutcomeHorizontalLinkByID(state, own_props.objectID);

	/*******************************************************
	 * CONNECT REDUX
	 *******************************************************/
	const OutcomeHorizontalLinkView = connect(mapOutcomeHorizontalLinkStateToProps, null)(OutcomeHorizontalLinkViewUnconnected);

	/**
	 * Basic component representing an outcome
	 */
	class OutcomeView extends EditableComponentWithSorting {
	  constructor(props) {
	    super(props);
	    this.objectType = 'outcome';
	    if (props.data.depth === 0) this.objectType = 'outcome_base';
	    this.children_block = reactExports.createRef();
	  }

	  /*******************************************************
	   * LIFECYCLE
	   *******************************************************/
	  componentDidMount() {
	    if (this.props.show_horizontal) this.makeDragAndDrop();
	  }
	  componentDidUpdate() {
	    if (this.props.show_horizontal) this.makeDragAndDrop();
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  makeDragAndDrop() {
	    this.makeSortableNode($(this.children_block.current).children('.outcome-outcome').not('ui-draggable'), this.props.objectID, 'outcomeoutcome', '.outcome-outcome-' + this.props.data.depth, false, false, '#workflow-' + this.props.workflow_id, '.outcome');
	    if (this.props.data.depth === 0) this.makeDroppable();
	  }
	  sortableMovedFunction(id, new_position, type, new_parent, child_id) {
	    this.props.renderer.micro_update(moveOutcomeOutcome(id, new_position, new_parent, child_id));
	    insertedAt(this.props.renderer, child_id, 'outcome', new_parent, 'outcome', new_position, 'outcomeoutcome');
	  }
	  stopSortFunction() {}
	  sortableMovedOutFunction(id, new_position, type, new_parent, child_id) {
	    if (confirm(window.gettext("You've moved an outcome to another workflow. Nodes tagged with this outcome will have it removed. Do you want to continue?"))) {
	      insertedAt(this.props.renderer, null, 'outcome', new_parent, 'outcome', new_position, 'outcomeoutcome');
	      insertedAtInstant(this.props.renderer, child_id, 'outcome', new_parent, 'outcome', new_position, 'outcomeoutcome');
	    }
	  }
	  makeDroppable() {
	    var props = this.props;
	    $(this.maindiv.current).droppable({
	      tolerance: 'pointer',
	      droppable: '.outcome-ghost',
	      over: (e, ui) => {
	        var drop_item = $(e.target);
	        var drag_item = ui.draggable;
	        var drag_helper = ui.helper;
	        drop_item.prevAll().length;
	        parseInt(drop_item.parent().attr('id'));
	        if (drag_item.hasClass('outcome')) {
	          drag_helper.addClass('valid-drop');
	          drop_item.addClass('outcome-drop-over');
	          return;
	        } else {
	          return;
	        }
	      },
	      out: (e, ui) => {
	        var drag_item = ui.draggable;
	        var drag_helper = ui.helper;
	        var drop_item = $(e.target);
	        if (drag_item.hasClass('outcome')) {
	          drag_helper.removeClass('valid-drop');
	          drop_item.removeClass('outcome-drop-over');
	        }
	      },
	      drop: (e, ui) => {
	        $('.outcome-drop-over').removeClass('outcome-drop-over');
	        $(e.target);
	        var drag_item = ui.draggable;
	        if (drag_item.hasClass('outcome')) {
	          props.renderer.tiny_loader.startLoad();
	          updateOutcomehorizontallinkDegree(props.objectID, drag_item[0].dataDraggable.outcome, 1, response_data => {
	            props.renderer.tiny_loader.endLoad();
	          });
	        }
	      }
	    });
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let data = this.props.data;
	    let children;
	    let outcomehorizontallinks;
	    let side_actions = [];
	    let mouseover_actions = [];
	    let dropIcon;
	    let droptext;
	    let style = {};
	    if (checkSetHidden(data, this.props.object_sets)) return null;
	    if (data.is_dropped) children = data.child_outcome_links.map(outcomeoutcome => /*#__PURE__*/reactExports.createElement(OutcomeOutcomeView$1, {
	      key: outcomeoutcome,
	      objectID: outcomeoutcome,
	      parentID: data.id,
	      renderer: this.props.renderer,
	      show_horizontal: this.props.show_horizontal,
	      parent_depth: this.props.data.depth
	    }));
	    if (this.state.show_horizontal_links) outcomehorizontallinks = /*#__PURE__*/reactExports.createElement("div", {
	      className: 'outcome-node-container',
	      onMouseLeave: () => {
	        this.setState({
	          show_horizontal_links: false
	        });
	      }
	    }, data.outcome_horizontal_links_unique.map(horizontal_link => /*#__PURE__*/reactExports.createElement(OutcomeHorizontalLinkView, {
	      key: horizontal_link,
	      objectID: horizontal_link,
	      renderer: this.props.renderer
	    })));
	    if (this.props.show_horizontal && data.outcome_horizontal_links_unique.length > 0) {
	      side_actions.push( /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-node-indicator"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: 'outcome-node-indicator-number',
	        onMouseEnter: () => {
	          this.setState({
	            show_horizontal_links: true
	          });
	        }
	      }, data.outcome_horizontal_links_unique.length), outcomehorizontallinks));
	    }
	    if (!this.props.renderer.read_only) {
	      mouseover_actions.push(this.addInsertSibling(data));
	      mouseover_actions.push(this.addDuplicateSelf(data));
	      mouseover_actions.push(this.addDeleteSelf(data));
	      if (data.depth < 2) mouseover_actions.push(this.addInsertChild(data));
	    }
	    if (this.props.renderer.view_comments) mouseover_actions.push(this.addCommenting(data));
	    if (data.is_dropped) dropIcon = 'droptriangleup';else dropIcon = 'droptriangledown';
	    if (data.is_dropped) droptext = window.gettext('hide');else droptext = window.gettext('show ') + data.child_outcome_links.length + ' ' + nwindow.gettext('descendant', 'descendants', data.child_outcome_links.length);
	    if (!this.props.renderer.read_only && data.depth < 2 && data.child_outcome_links.length === 0 && children) children.push( /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-outcome",
	      style: {
	        height: '5px'
	      }
	    }));
	    if (data.lock) {
	      style.border = '2px solid ' + data.lock.user_colour;
	    }
	    let css_class = 'outcome outcome-' + data.id;
	    if (data.is_dropped) css_class += ' dropped';
	    if (data.lock) css_class += ' locked locked-' + data.lock.user_id;
	    return /*#__PURE__*/reactExports.createElement("div", {
	      style: style,
	      className: css_class,
	      ref: this.maindiv,
	      onClick: evt => this.props.renderer.selection_manager.changeSelection(evt, this)
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-title"
	    }, /*#__PURE__*/reactExports.createElement(OutcomeTitle, {
	      data: this.props.data,
	      prefix: this.props.prefix,
	      hovertext: this.props.hovertext
	    })), data.depth < 2 && data.child_outcome_links.length > 0 && /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-drop",
	      onClick: this.toggleDrop.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-drop-img"
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + dropIcon + '.svg'
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-drop-text"
	    }, droptext)), data.depth < 2 && /*#__PURE__*/reactExports.createElement("ol", {
	      className: 'children-block children-block-' + this.props.data.depth,
	      id: this.props.objectID + '-children-block',
	      ref: this.children_block
	    }, children), !this.props.renderer.read_only && data.depth < 2 && /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-create-child",
	      onClick: this.insertChild.bind(this, data)
	    }, window.gettext('+ Add New')), /*#__PURE__*/reactExports.createElement("div", {
	      className: "mouseover-actions"
	    }, mouseover_actions), this.addEditable(data), /*#__PURE__*/reactExports.createElement("div", {
	      className: "side-actions"
	    }, side_actions, /*#__PURE__*/reactExports.createElement("div", {
	      className: "comment-indicator-container"
	    })));
	  }
	}
	const mapOutcomeStateToProps$1 = (state, own_props) => getOutcomeByID(state, own_props.objectID);

	/*******************************************************
	 * CONNECT REDUX
	 *******************************************************/
	const ConnectedOutcomeView = connect(mapOutcomeStateToProps$1, null)(OutcomeView);
	var OutcomeView$1 = ConnectedOutcomeView;

	//Basic component representing an outcome to node link
	class OutcomeNodeView extends Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'outcomenode';
	  }
	  render() {
	    let data = this.props.data;
	    if (data.outcome === -1) return null;
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: 'outcome-node outcomenode-' + data.id,
	      id: data.id,
	      ref: this.maindiv
	    }, !this.props.renderer.read_only && /*#__PURE__*/reactExports.createElement("div", null, this.addDeleteSelf(data, 'close.svg')), getCompletionImg(data.degree, this.props.outcomes_type), /*#__PURE__*/reactExports.createElement(SimpleOutcomeView$1, {
	      checkHidden: this.checkHidden.bind(this),
	      comments: true,
	      edit: true,
	      objectID: data.outcome,
	      parentID: this.props.parentID,
	      throughParentID: data.id,
	      renderer: this.props.renderer
	    }));
	  }

	  //Adds a button that deletes the item (with a confirmation). The callback function is called after the object is removed from the DOM
	  addDeleteSelf(data) {
	    let icon = 'close.svg';
	    return /*#__PURE__*/reactExports.createElement(ActionButton, {
	      button_icon: icon,
	      button_class: "delete-self-button",
	      titletext: window.gettext('Delete'),
	      handleClick: this.deleteSelf.bind(this, data)
	    });
	  }
	  deleteSelf(data) {
	    let props = this.props;
	    if (this.props.deleteSelfOverride) this.props.deleteSelfOverride();
	    //Temporary confirmation; add better confirmation dialogue later
	    else {
	      props.renderer.tiny_loader.startLoad();
	      updateOutcomenodeDegree(data.node, data.outcome, 0, response_data => {
	        props.renderer.tiny_loader.endLoad();
	      });
	    }
	  }
	  checkHidden() {
	    if ($(this.maindiv.current).children('.outcome').length == 0) $(this.maindiv.current).css('display', 'none');else $(this.maindiv.current).css('display', '');
	    let indicator = $(this.maindiv.current).closest('.outcome-node-indicator');
	    if (indicator.length >= 0) {
	      let num_outcomenodes = indicator.children('.outcome-node-container').children('.outcome-node:not([style*="display: none"])').length;
	      indicator.children('.outcome-node-indicator-number').html(num_outcomenodes);
	      if (num_outcomenodes == 0) indicator.css('display', 'none');else indicator.css('display', '');
	    }
	  }
	  componentDidMount() {
	    this.checkHidden();
	  }
	  componentDidUpdate() {
	    this.checkHidden();
	  }
	  componentWillUnmount() {
	    this.checkHidden();
	  }
	}
	const mapOutcomeNodeStateToProps = (state, own_props) => getOutcomeNodeByID(state, own_props.objectID);
	var OutcomeNodeView$1 = connect(mapOutcomeNodeStateToProps, null)(OutcomeNodeView);

	//Component representing a cell in a totals column
	class TableTotalCellUnconnected extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'outcomenode';
	  }
	  render() {
	    let class_name = 'table-cell total-cell';
	    if (this.props.grand_total) class_name += ' grand-total-cell';
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: class_name,
	      ref: this.maindiv
	    }, this.getContents(this.getCompletionStatus()));
	  }
	  getCompletionStatus() {
	    let completion = {};
	    let nodes = this.props.nodes;
	    //If we are not restricted to a nodes list, use all
	    if (!nodes) nodes = Object.keys(this.props.descendant_completion_status);
	    for (var i = 0; i < nodes.length; i++) {
	      let node = nodes[i];
	      if (this.props.descendant_completion_status[node]) {
	        for (let oc in this.props.descendant_completion_status[node]) {
	          completion[oc] |= this.props.descendant_completion_status[node][oc];
	        }
	      }
	    }
	    if (!$.isEmptyObject(completion)) {
	      return this.checkOutcomeTree(completion, this.props.outcometree);
	    }
	  }
	  checkOutcomeTree(completion, outcometree) {
	    let self_completion = completion[outcometree.id];
	    let child_completion = 15;
	    let child_count = 0;
	    for (var i = 0; i < outcometree.descendants.length; i++) {
	      let check_child = this.checkOutcomeTree(completion, outcometree.descendants[i]);
	      child_completion &= check_child;
	      if (check_child !== undefined) child_count++;
	    }
	    if (child_count > 0) self_completion |= child_completion;
	    return self_completion;
	  }
	  getContents(completion_status, self_completion) {
	    if (completion_status === 0) {
	      return /*#__PURE__*/reactExports.createElement("img", {
	        src: window.config.icon_path + 'nocheck.svg'
	      });
	    } else if (!completion_status) {
	      return '';
	    }
	    if (this.props.outcomes_type == 0 || completion_status & 1) {
	      if (self_completion) return /*#__PURE__*/reactExports.createElement("img", {
	        className: "self-completed",
	        src: window.config.icon_path + 'solid_check.svg'
	      });else return /*#__PURE__*/reactExports.createElement("img", {
	        src: window.config.icon_path + 'check.svg'
	      });
	    }
	    let contents = [];
	    if (completion_status & 2) {
	      let divclass = '';
	      if (self_completion & 2) divclass = ' self-completed';
	      contents.push( /*#__PURE__*/reactExports.createElement("div", {
	        className: 'outcome-introduced outcome-degree' + divclass
	      }, "I"));
	    }
	    if (completion_status & 4) {
	      let divclass = '';
	      if (self_completion & 4) divclass = ' self-completed';
	      contents.push( /*#__PURE__*/reactExports.createElement("div", {
	        className: 'outcome-developed outcome-degree' + divclass
	      }, "D"));
	    }
	    if (completion_status & 8) {
	      let divclass = '';
	      if (self_completion & 8) divclass = ' self-completed';
	      contents.push( /*#__PURE__*/reactExports.createElement("div", {
	        className: 'outcome-advanced outcome-degree' + divclass
	      }, "A"));
	    }
	    return contents;
	  }
	}
	const getOutcomeDescendants = (state, outcome) => {
	  let descendants = [];
	  for (let i = 0; i < outcome.child_outcome_links.length; i++) {
	    let outcomeoutcome = getOutcomeOutcomeByID(state, outcome.child_outcome_links[i]).data;
	    let child = getOutcomeByID(state, outcomeoutcome.child).data;
	    descendants.push(getOutcomeDescendants(state, child));
	  }
	  return {
	    id: outcome.id,
	    descendants: descendants
	  };
	};
	const mapTableTotalCellStateToProps = (state, own_props) => ({
	  outcometree: getOutcomeDescendants(state, getOutcomeByID(state, own_props.outcomeID).data)
	});
	connect(mapTableTotalCellStateToProps, null)(TableTotalCellUnconnected);

	//Basic component to represent a Node
	class NodeView extends EditableComponentWithActions {
	  constructor(props) {
	    super(props);
	    this.objectType = 'node';
	    this.state = {
	      initial_render: true,
	      show_outcomes: false
	    };
	  }

	  /*******************************************************
	   * LIFECYCLE
	   *******************************************************/
	  componentDidMount() {
	    if (this.state.initial_render) this.setState({
	      initial_render: false
	    });
	    $(this.maindiv.current).on('mouseenter', this.mouseIn.bind(this));
	    this.makeDroppable();
	    $(this.maindiv.current).on('dblclick', this.doubleClick.bind(this));
	    this.updateHidden();
	  }
	  componentDidUpdate(prevProps, prevState) {
	    if (this.props.data.is_dropped == prevProps.data.is_dropped) this.updatePorts();else triggerHandlerEach($('.node'), 'component-updated');
	    this.updateHidden();
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  //Checks to see if we should mark this as empty. We don't want to do this if it's the only node in the week.
	  updateHidden() {
	    if ($(this.maindiv.current).css('display') == 'none') {
	      let week = $(this.maindiv.current).parent('.node-week').parent();
	      if (week.children('.node-week:not(.empty)').length > 1) $(this.maindiv.current).parent('.node-week').addClass('empty');
	    } else $(this.maindiv.current).parent('.nodeweek').removeClass('empty');
	  }
	  updatePorts() {
	    $(this.maindiv.current).triggerHandler('component-updated');
	  }
	  doubleClick(evt) {
	    evt.stopPropagation();
	    if (this.props.data.linked_workflow) {
	      window.open(this.props.data.linked_workflow_data.url);
	    }
	  }
	  makeDroppable() {
	    var props = this.props;
	    $(this.maindiv.current).droppable({
	      tolerance: 'pointer',
	      droppable: '.outcome-ghost',
	      over: (e, ui) => {
	        var drop_item = $(e.target);
	        var drag_item = ui.draggable;
	        var drag_helper = ui.helper;
	        drop_item.prevAll().length;
	        parseInt(drop_item.parent().attr('id'));
	        if (drag_item.hasClass('outcome')) {
	          drag_helper.addClass('valid-drop');
	          drop_item.addClass('outcome-drop-over');
	          return;
	        } else {
	          return;
	        }
	      },
	      out: (e, ui) => {
	        var drag_item = ui.draggable;
	        var drag_helper = ui.helper;
	        var drop_item = $(e.target);
	        if (drag_item.hasClass('outcome')) {
	          drag_helper.removeClass('valid-drop');
	          drop_item.removeClass('outcome-drop-over');
	        }
	      },
	      drop: (e, ui) => {
	        $('.outcome-drop-over').removeClass('outcome-drop-over');
	        $(e.target);
	        var drag_item = ui.draggable;
	        if (drag_item.hasClass('outcome')) {
	          props.renderer.tiny_loader.startLoad();
	          updateOutcomenodeDegree(this.props.objectID, drag_item[0].dataDraggable.outcome, 1, response_data => {
	            props.renderer.tiny_loader.endLoad();
	          });
	        }
	      }
	    });
	  }
	  mouseIn(evt) {
	    if ($('.workflow-canvas').hasClass('creating-node-link')) return;
	    if (!this.props.renderer.read_only) $("circle[data-node-id='" + this.props.objectID + "'][data-port-type='source']").addClass('mouseover');
	    d3.selectAll('.node-ports').raise();
	    var mycomponent = this;
	    this.setState({
	      hovered: true
	    });
	    $(document).on('mousemove', function (evt) {
	      if (!mycomponent || !mycomponent.maindiv || mouseOutsidePadding(evt, $(mycomponent.maindiv.current), 20)) {
	        $("circle[data-node-id='" + mycomponent.props.objectID + "'][data-port-type='source']").removeClass('mouseover');
	        $(document).off(evt);
	        mycomponent.setState({
	          hovered: false
	        });
	      }
	    });
	  }
	  addShowAssignment(data) {
	    return [/*#__PURE__*/reactExports.createElement(ActionButton, {
	      key: 0,
	      button_icon: "assignment.svg",
	      button_class: "assignment-button",
	      titletext: window.gettext('Show Assignment Info'),
	      handleClick: this.showAssignment.bind(this)
	    }), /*#__PURE__*/reactExports.createElement(AssignmentBox, {
	      key: 1,
	      dispatch: this.props.dispatch.bind(this),
	      node_id: data.id,
	      show: this.state.show_assignments,
	      has_assignment: this.props.data.has_assignment,
	      parent: this,
	      renderer: this.props.renderer
	    })];
	  }
	  showAssignment(evt) {
	    this.props;
	    evt.stopPropagation();
	    if (!this.state.show_assignments) {
	      this.setState({
	        show_assignments: true
	      });
	    } else this.setState({
	      show_assignments: false
	    });
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let data = this.props.data;
	    let data_override;
	    if (data.represents_workflow) data_override = {
	      ...data,
	      ...data.linked_workflow_data,
	      id: data.id
	    };else data_override = {
	      ...data
	    };
	    let renderer = this.props.renderer;
	    let selection_manager = renderer.selection_manager;
	    var nodePorts;
	    var node_links;
	    var auto_link;
	    if (!this.state.initial_render) {
	      nodePorts = reactDomExports.createPortal( /*#__PURE__*/reactExports.createElement(NodePorts, {
	        renderer: renderer,
	        nodeID: this.props.objectID,
	        node_div: this.maindiv,
	        dispatch: this.props.dispatch
	      }), $('.workflow-canvas')[0]);
	      node_links = data.outgoing_links.map(link => /*#__PURE__*/reactExports.createElement(NodeLinkView$1, {
	        key: link,
	        objectID: link,
	        node_div: this.maindiv,
	        renderer: renderer
	      }));
	      if (data.has_autolink) auto_link = /*#__PURE__*/reactExports.createElement(AutoLinkView, {
	        nodeID: this.props.objectID,
	        node_div: this.maindiv
	      });
	    }
	    let outcomenodes;
	    if (this.state.show_outcomes) outcomenodes = /*#__PURE__*/reactExports.createElement("div", {
	      className: 'outcome-node-container column-' + data.column,
	      onMouseLeave: () => {
	        this.setState({
	          show_outcomes: false
	        });
	      },
	      style: {
	        borderColor: getColumnColour(this.props.column)
	      }
	    }, data.outcomenode_unique_set.map(outcomenode => /*#__PURE__*/reactExports.createElement(OutcomeNodeView$1, {
	      key: outcomenode,
	      objectID: outcomenode,
	      renderer: renderer
	    })));
	    let side_actions = [];
	    if (data.outcomenode_unique_set.length > 0) {
	      side_actions.push( /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-node-indicator"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: 'outcome-node-indicator-number column-' + data.column,
	        onMouseEnter: () => {
	          this.setState({
	            show_outcomes: true
	          });
	        },
	        style: {
	          borderColor: getColumnColour(this.props.column)
	        }
	      }, data.outcomenode_unique_set.length), outcomenodes));
	    }
	    let lefticon;
	    let righticon;
	    if (data.context_classification > 0) lefticon = /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-icon"
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      title: renderer.context_choices.find(obj => obj.type == data.context_classification).name,
	      src: window.config.icon_path + context_keys[data.context_classification] + '.svg'
	    }));
	    if (data.task_classification > 0) righticon = /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-icon"
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      title: renderer.task_choices.find(obj => obj.type == data.task_classification).name,
	      src: window.config.icon_path + task_keys[data.task_classification] + '.svg'
	    }));
	    let dropIcon;
	    if (data.is_dropped) dropIcon = 'droptriangleup';else dropIcon = 'droptriangledown';
	    let linkIcon;
	    let linktext = window.gettext('Visit workflow');
	    let clickfunc = this.doubleClick.bind(this);
	    let link_class = 'linked-workflow';
	    if (data.linked_workflow_data) {
	      if (data.linked_workflow_data.url == 'noaccess' || data.linked_workflow_data.url == 'nouser') {
	        linktext = window.gettext('<Inaccessible>');
	        clickfunc = null;
	        link_class += ' link-noaccess';
	      } else if (data.linked_workflow_data.deleted) {
	        linktext = window.gettext('<Deleted>');
	        clickfunc = null;
	        link_class += ' link-noaccess';
	      } else {
	        link_class += ' hover-shade';
	      }
	    }
	    if (data.linked_workflow) linkIcon = /*#__PURE__*/reactExports.createElement("div", {
	      className: link_class,
	      onClick: clickfunc
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + 'wflink.svg'
	    }), /*#__PURE__*/reactExports.createElement("div", null, linktext));
	    let dropText = '';
	    if (data_override.description && data_override.description.replace(/(<p\>|<\/p>|<br>|\n| |[^a-zA-Z0-9])/g, '') != '') dropText = '...';
	    let titleText = /*#__PURE__*/reactExports.createElement(NodeTitle, {
	      data: data
	    });
	    let style = {
	      left: columnwidth * this.props.column_order.indexOf(data.column) + 'px',
	      backgroundColor: getColumnColour(this.props.column)
	    };
	    if (data.lock) {
	      style.outline = '2px solid ' + data.lock.user_colour;
	    }
	    if (checkSetHidden(data, this.props.object_sets)) style.display = 'none';
	    let css_class = 'node column-' + data.column + ' ' + node_keys[data.node_type];
	    if (data.is_dropped) css_class += ' dropped';
	    if (data.lock) css_class += ' locked locked-' + data.lock.user_id;
	    let mouseover_actions = [];
	    if (!this.props.renderer.read_only) {
	      mouseover_actions.push(this.addInsertSibling(data));
	      mouseover_actions.push(this.addDuplicateSelf(data));
	      mouseover_actions.push(this.addDeleteSelf(data));
	    }
	    if (renderer.view_comments) mouseover_actions.push(this.addCommenting(data));
	    if (renderer.show_assignments) mouseover_actions.push(this.addShowAssignment(data));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      style: style,
	      className: css_class,
	      id: data.id,
	      ref: this.maindiv,
	      "data-selected": this.state.selected,
	      "data-hovered": this.state.hovered,
	      onClick: evt => selection_manager.changeSelection(evt, this)
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-top-row"
	    }, lefticon, titleText, righticon), linkIcon, /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-details"
	    }, /*#__PURE__*/reactExports.createElement(TitleText, {
	      text: data_override.description,
	      defaultText: window.gettext('Click to edit')
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-drop-row hover-shade",
	      onClick: this.toggleDrop.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-drop-side node-drop-left"
	    }, dropText), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-drop-middle"
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + dropIcon + '.svg'
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-drop-side node-drop-right"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-drop-time"
	    }, data_override.time_required && data_override.time_required + ' ' + this.props.renderer.time_choices[data_override.time_units].name))), /*#__PURE__*/reactExports.createElement("div", {
	      className: "mouseover-actions"
	    }, mouseover_actions), this.addEditable(data_override), nodePorts, node_links, auto_link, /*#__PURE__*/reactExports.createElement("div", {
	      className: "side-actions"
	    }, side_actions, /*#__PURE__*/reactExports.createElement("div", {
	      className: "comment-indicator-container"
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "assignment-indicator-container"
	    })));
	  }
	}
	const mapNodeStateToProps$2 = (state, own_props) => getNodeByID(state, own_props.objectID);
	var NodeView$1 = connect(mapNodeStateToProps$2, null)(NodeView);

	//Basic component to represent a Node
	class NodeComparisonViewUnconnected extends EditableComponentWithActions {
	  constructor(props) {
	    super(props);
	    this.objectType = 'node';
	  }
	  render() {
	    let data = this.props.data;
	    let data_override;
	    if (data.represents_workflow) {
	      data_override = {
	        ...data,
	        ...data.linked_workflow_data,
	        id: data.id
	      };
	    } else {
	      data_override = {
	        ...data
	      };
	    }
	    let renderer = this.props.renderer;
	    let selection_manager = renderer.selection_manager;
	    let outcomenodes;
	    if (this.state.show_outcomes) outcomenodes = /*#__PURE__*/reactExports.createElement("div", {
	      className: 'outcome-node-container column-111111-' + data.column,
	      onMouseLeave: () => {
	        this.setState({
	          show_outcomes: false
	        });
	      },
	      style: {
	        borderColor: getColumnColour(this.props.column)
	      }
	    }, data.outcomenode_unique_set.map(outcomenode => /*#__PURE__*/reactExports.createElement(OutcomeNodeView$1, {
	      key: outcomenode,
	      objectID: outcomenode,
	      renderer: renderer
	    })));
	    let side_actions = [];
	    if (data.outcomenode_unique_set.length > 0) {
	      side_actions.push( /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-node-indicator"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: 'outcome-node-indicator-number column-' + data.column,
	        onMouseEnter: () => {
	          this.setState({
	            show_outcomes: true
	          });
	        },
	        style: {
	          borderColor: getColumnColour(this.props.column)
	        }
	      }, data.outcomenode_unique_set.length), outcomenodes));
	    }
	    let lefticon;
	    let righticon;
	    if (data.context_classification > 0) lefticon = /*#__PURE__*/reactExports.createElement("img", {
	      title: renderer.context_choices.find(obj => obj.type == data.context_classification).name,
	      src: window.config.icon_path + context_keys[data.context_classification] + '.svg'
	    });
	    if (data.task_classification > 0) righticon = /*#__PURE__*/reactExports.createElement("img", {
	      title: renderer.task_choices.find(obj => obj.type == data.task_classification).name,
	      src: window.config.icon_path + task_keys[data.task_classification] + '.svg'
	    });
	    let titleText = /*#__PURE__*/reactExports.createElement(NodeTitle, {
	      data: data
	    });
	    let style = {
	      backgroundColor: getColumnColour(this.props.column)
	    };
	    if (data.lock) {
	      style.outline = '2px solid ' + data.lock.user_colour;
	    }
	    if (checkSetHidden(data, this.props.object_sets)) style.display = 'none';
	    let css_class = 'node column-' + data.column + ' ' + node_keys[data.node_type];
	    if (data.lock) css_class += ' locked locked-' + data.lock.user_id;
	    let mouseover_actions = [];
	    if (!this.props.renderer.read_only) {
	      mouseover_actions.push(this.addInsertSibling(data));
	      mouseover_actions.push(this.addDuplicateSelf(data));
	      mouseover_actions.push(this.addDeleteSelf(data));
	    }
	    if (renderer.view_comments) mouseover_actions.push(this.addCommenting(data));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      style: style,
	      className: css_class,
	      id: data.id,
	      ref: this.maindiv,
	      onClick: evt => selection_manager.changeSelection(evt, this)
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-top-row"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-icon"
	    }, lefticon), titleText, /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-icon"
	    }, righticon)), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-details"
	    }, /*#__PURE__*/reactExports.createElement(TitleText, {
	      text: data_override.description,
	      defaultText: "Click to edit"
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "mouseover-actions"
	    }, mouseover_actions), this.addEditable(data_override), /*#__PURE__*/reactExports.createElement("div", {
	      className: "side-actions"
	    }, side_actions));
	  }
	}
	const NodeComparisonView = connect(mapNodeStateToProps$2, null)(NodeComparisonViewUnconnected);

	//Basic component to represent a NodeWeek
	class NodeWeekView extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'nodeweek';
	    this.objectClass = '.node-week';
	  }
	  render() {
	    let data = this.props.data;
	    let my_class = 'node-week';
	    if (data.no_drag) my_class += ' no-drag';
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: my_class,
	      id: data.id,
	      "data-child-id": data.node,
	      "data-column-id": this.props.column,
	      ref: this.maindiv
	    }, this.getNode());
	  }
	  getNode() {
	    let data = this.props.data;
	    return /*#__PURE__*/reactExports.createElement(NodeView$1, {
	      objectID: data.node,
	      parentID: this.props.parentID,
	      throughParentID: data.id,
	      renderer: this.props.renderer,
	      column_order: this.props.column_order
	    });
	  }
	}
	const mapNodeWeekStateToProps = (state, own_props) => getNodeWeekByID(state, own_props.objectID);
	var NodeWeekView$1 = connect(mapNodeWeekStateToProps, null)(NodeWeekView);

	//Basic component to represent a NodeWeek for comparisons
	class NodeWeekComparisonViewUnconnected extends NodeWeekView {
	  getNode() {
	    let data = this.props.data;
	    return /*#__PURE__*/reactExports.createElement(NodeComparisonView, {
	      objectID: data.node,
	      parentID: this.props.parentID,
	      throughParentID: data.id,
	      renderer: this.props.renderer,
	      column_order: this.props.column_order
	    });
	  }
	}
	const NodeWeekComparisonView = connect(mapNodeWeekStateToProps, null)(NodeWeekComparisonViewUnconnected);

	//Basic component to represent a Week
	class WeekViewUnconnected extends EditableComponentWithSorting {
	  constructor(props) {
	    super(props);
	    this.objectType = 'week';
	    this.objectClass = '.week';
	    this.node_block = reactExports.createRef();
	  }
	  render() {
	    let data = this.props.data;
	    let renderer = this.props.renderer;
	    let selection_manager = renderer.selection_manager;
	    var nodes = this.getNodes();
	    let css_class = 'week';
	    if (data.is_strategy) css_class += ' strategy';
	    if (data.lock) css_class += ' locked locked-' + data.lock.user_id;
	    if (data.is_dropped) css_class += ' dropped';
	    let default_text;
	    if (!renderer.is_strategy) default_text = data.week_type_display + ' ' + (this.props.rank + 1);
	    let style = {};
	    if (data.lock) {
	      style.border = '2px solid ' + data.lock.user_colour;
	    }
	    let dropIcon;
	    if (data.is_dropped) dropIcon = 'droptriangleup';else dropIcon = 'droptriangledown';
	    let mouseover_actions = [];
	    if (!this.props.renderer.read_only && !renderer.is_strategy) {
	      mouseover_actions.push(this.addInsertSibling(data));
	      mouseover_actions.push(this.addDuplicateSelf(data));
	      mouseover_actions.push(this.addDeleteSelf(data));
	    }
	    if (renderer.view_comments) mouseover_actions.push(this.addCommenting(data));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      style: style,
	      className: css_class,
	      ref: this.maindiv,
	      onClick: evt => selection_manager.changeSelection(evt, this)
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "mouseover-container-bypass"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "mouseover-actions"
	    }, mouseover_actions)), /*#__PURE__*/reactExports.createElement(TitleText, {
	      text: data.title,
	      defaultText: default_text
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-block",
	      id: this.props.objectID + '-node-block',
	      ref: this.node_block
	    }, nodes), /*#__PURE__*/reactExports.createElement("div", {
	      className: "week-drop-row hover-shade",
	      onClick: this.toggleDrop.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-drop-side node-drop-left"
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-drop-middle"
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + dropIcon + '.svg'
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-drop-side node-drop-right"
	    })), this.addEditable(data), data.strategy_classification > 0 && /*#__PURE__*/reactExports.createElement("div", {
	      className: "strategy-tab"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "strategy-tab-triangle"
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "strategy-tab-square"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "strategy-tab-circle"
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      title: renderer.strategy_classification_choices.find(obj => obj.type == data.strategy_classification).name,
	      src: window.config.icon_path + strategy_keys[data.strategy_classification] + '.svg'
	    })))));
	  }
	  getNodes() {
	    let nodes = this.props.data.nodeweek_set.map(nodeweek => /*#__PURE__*/reactExports.createElement(NodeWeekView$1, {
	      key: nodeweek,
	      objectID: nodeweek,
	      parentID: this.props.data.id,
	      renderer: this.props.renderer,
	      column_order: this.props.column_order
	    }));
	    if (nodes.length == 0) nodes.push( /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-week placeholder",
	      style: {
	        height: '100%'
	      }
	    }, "Drag and drop nodes from the sidebar to add."));
	    return nodes;
	  }
	  componentDidMount() {
	    this.makeDragAndDrop();
	  }
	  componentDidUpdate() {
	    this.makeDragAndDrop();
	    triggerHandlerEach($(this.maindiv.current).find('.node'), 'component-updated');
	  }
	  makeDragAndDrop() {
	    //Makes the nodeweeks in the node block draggable
	    this.makeSortableNode($(this.node_block.current).children('.node-week').not('.ui-draggable'), this.props.objectID, 'nodeweek', '.node-week', false, [200, 1], null, '.node', '.week-block');
	    this.makeDroppable();
	  }
	  sortableColumnChangedFunction(id, delta_x, old_column) {
	    let columns = this.props.column_order;
	    let old_column_index = columns.indexOf(old_column);
	    let new_column_index = old_column_index + delta_x;
	    if (new_column_index < 0 || new_column_index >= columns.length) return;
	    let new_column = columns[new_column_index];

	    //A little hack to stop ourselves from sending this update a hundred times per second
	    if (this.recently_sent_column_change) {
	      if (this.recently_sent_column_change.column == new_column && Date.now() - this.recently_sent_column_change.lastCall <= 500) {
	        this.recently_sent_column_change.lastCall = Date.now();
	        return;
	      }
	    }
	    this.recently_sent_column_change = {
	      column: new_column,
	      lastCall: Date.now()
	    };
	    this.lockChild(id, true, 'nodeweek');
	    this.props.renderer.micro_update(columnChangeNode(id, new_column));
	    columnChanged(this.props.renderer, id, new_column);
	  }
	  sortableMovedFunction(id, new_position, type, new_parent, child_id) {
	    //Correction for if we are in a term
	    if (this.props.nodes_by_column) {
	      for (var col in this.props.nodes_by_column) {
	        if (this.props.nodes_by_column[col].indexOf(id) >= 0) {
	          let previous = this.props.nodes_by_column[col][new_position];
	          new_position = this.props.data.nodeweek_set.indexOf(previous);
	        }
	      }
	    }
	    this.props.renderer.micro_update(moveNodeWeek(id, new_position, new_parent, child_id));
	    insertedAt(this.props.renderer, child_id, 'node', new_parent, 'week', new_position, 'nodeweek');
	  }
	  makeDroppable() {
	    this.props;
	    $(this.maindiv.current).droppable({
	      tolerance: 'pointer',
	      droppable: '.strategy-ghost',
	      over: (e, ui) => {
	        var drop_item = $(e.target);
	        var drag_item = ui.draggable;
	        var drag_helper = ui.helper;
	        drop_item.prevAll().length;
	        parseInt(drop_item.parent().attr('id'));
	        if (drag_item.hasClass('new-strategy')) {
	          drag_helper.addClass('valid-drop');
	          drop_item.addClass('new-strategy-drop-over');
	        } else {
	          return;
	        }
	      },
	      out: (e, ui) => {
	        var drag_item = ui.draggable;
	        var drag_helper = ui.helper;
	        var drop_item = $(e.target);
	        if (drag_item.hasClass('new-strategy')) {
	          drag_helper.removeClass('valid-drop');
	          drop_item.removeClass('new-strategy-drop-over');
	        }
	      },
	      drop: (e, ui) => {
	        $('.new-strategy-drop-over').removeClass('new-strategy-drop-over');
	        var drop_item = $(e.target);
	        var drag_item = ui.draggable;
	        var new_index = drop_item.parent().prevAll().length + 1;
	        if (drag_item.hasClass('new-strategy')) {
	          let loader = new Loader('body');
	          addStrategy(this.props.parentID, new_index, drag_item[0].dataDraggable.strategy, response_data => {
	            loader.endLoad();
	          });
	        }
	      }
	    });
	  }
	}
	const mapWeekStateToProps$2 = (state, own_props) => getWeekByID(state, own_props.objectID);
	var WeekView = connect(mapWeekStateToProps$2, null)(WeekViewUnconnected);

	//Basic component to represent a Week
	class WeekComparisonViewUnconnected extends WeekViewUnconnected {
	  sortableColumnChangedFunction(id, delta_x, old_column) {
	    console.log('column change not sent');
	  }
	  sortableMovedFunction(id, new_position, type, new_parent, child_id) {
	    this.props.renderer.micro_update(moveNodeWeek(id, new_position, new_parent, child_id));
	    insertedAt(this.props.renderer, child_id, 'node', new_parent, 'week', new_position, 'nodeweek');
	  }
	  sortableMovedOutFunction(id, new_position, type, new_parent, child_id) {
	    if (confirm(window.gettext("You've moved a node to another workflow. Nodes lose all tagged outcomes when transferred between workflows. Do you want to continue?"))) {
	      insertedAt(this.props.renderer, null, 'node', new_parent, 'week', new_position, 'nodeweek');
	      insertedAtInstant(this.props.renderer, child_id, 'node', new_parent, 'week', new_position, 'nodeweek');
	    }
	  }
	  makeDroppable() {}
	  getNodes() {
	    let nodes = this.props.data.nodeweek_set.map(nodeweek => /*#__PURE__*/reactExports.createElement(NodeWeekComparisonView, {
	      key: nodeweek,
	      objectID: nodeweek,
	      parentID: this.props.data.id,
	      renderer: this.props.renderer,
	      column_order: this.props.column_order
	    }));
	    if (nodes.length == 0) nodes.push( /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-week placeholder",
	      style: {
	        height: '100%'
	      }
	    }, "Drag and drop nodes from the sidebar to add."));
	    return nodes;
	  }
	  alignAllWeeks() {
	    let rank = this.props.rank + 1;
	    $('.week-block .week-workflow:nth-child(' + rank + ') .week').css({
	      height: ''
	    });
	    let max_height = 0;
	    $('.week-block .week-workflow:nth-child(' + rank + ') .week').each(function () {
	      let this_height = $(this).height();
	      if (this_height > max_height) max_height = this_height;
	    });
	    $('.week-block .week-workflow:nth-child(' + rank + ') .week').css({
	      height: max_height + 'px'
	    });
	  }
	  componentDidMount() {
	    this.makeDragAndDrop();
	    this.alignAllWeeks();
	  }
	  makeDragAndDrop() {
	    //Makes the nodeweeks in the node block draggable
	    this.makeSortableNode($(this.node_block.current).children('.node-week').not('.ui-draggable'), this.props.objectID, 'nodeweek', '.node-week', false, [200, 1], '#workflow-' + this.props.workflow_id, '.node', '.workflow-array');
	    this.makeDroppable();
	  }
	  componentDidUpdate() {
	    this.makeDragAndDrop();
	    triggerHandlerEach($(this.maindiv.current).find('.node'), 'component-updated');
	    this.alignAllWeeks();
	  }
	}
	const WeekComparisonView = connect(mapWeekStateToProps$2, null)(WeekComparisonViewUnconnected);

	//Represents a week in the nodebar
	class NodeBarWeekViewUnconnected extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'week';
	    this.objectClass = '.week';
	  }
	  render() {
	    let data = this.props.data;
	    let renderer = this.props.renderer;
	    let default_text;
	    if (!renderer.is_strategy) default_text = data.week_type_display + ' ' + (this.props.rank + 1);
	    window.config.icon_path + 'plus.svg';
	    if (data.is_dropped) window.config.icon_path + 'minus.svg';
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "hover-shade",
	      onClick: this.jumpTo.bind(this)
	    }, /*#__PURE__*/reactExports.createElement(TitleText, {
	      text: data.title,
	      defaultText: default_text
	    }));
	  }
	  jumpTo() {
	    let week_id = this.props.data.id;
	    let week = $(".week-workflow[data-child-id='" + week_id + "'] > .week");
	    if (week.length > 0) {
	      let container = $('#container');
	      $('#container').animate({
	        scrollTop: week.offset().top + container[0].scrollTop - container.offset().top - 200
	      }, 300);
	    }
	  }
	}
	const NodeBarWeekView = connect(mapWeekStateToProps$2, null)(NodeBarWeekViewUnconnected);

	//Basic component to represent a Week
	class TermView extends WeekViewUnconnected {
	  render() {
	    let data = this.props.data;
	    var node_blocks = [];
	    for (var i = 0; i < this.props.column_order.length; i++) {
	      let col = this.props.column_order[i];
	      let nodeweeks = [];
	      for (var j = 0; j < data.nodeweek_set.length; j++) {
	        let nodeweek = data.nodeweek_set[j];
	        if (this.props.nodes_by_column[col].indexOf(nodeweek) >= 0) {
	          nodeweeks.push( /*#__PURE__*/reactExports.createElement(NodeWeekView$1, {
	            key: nodeweek,
	            objectID: nodeweek,
	            parentID: data.id,
	            renderer: this.props.renderer,
	            column_order: this.props.column_order
	          }));
	        }
	      }
	      if (nodeweeks.length == 0) nodeweeks.push( /*#__PURE__*/reactExports.createElement("div", {
	        className: "node-week placeholder",
	        style: {
	          height: '100%'
	        }
	      }));
	      node_blocks.push( /*#__PURE__*/reactExports.createElement("div", {
	        className: 'node-block term column-' + col,
	        id: this.props.objectID + '-node-block-column-' + col,
	        key: col
	      }, nodeweeks));
	    }
	    let css_class = 'week';
	    if (data.is_strategy) css_class += ' strategy';
	    if (data.lock) css_class += ' locked locked-' + data.lock.user_id;
	    if (data.is_dropped) css_class += ' dropped';
	    let style = {};
	    if (data.lock) {
	      style.border = '2px solid ' + data.lock.user_colour;
	    }
	    let dropIcon;
	    if (data.is_dropped) dropIcon = 'droptriangleup';else dropIcon = 'droptriangledown';
	    let mouseover_actions = [];
	    if (!this.props.renderer.read_only) {
	      mouseover_actions.push(this.addInsertSibling(data));
	      mouseover_actions.push(this.addDuplicateSelf(data));
	      mouseover_actions.push(this.addDeleteSelf(data));
	    }
	    if (this.props.renderer.view_comments) mouseover_actions.push(this.addCommenting(data));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      style: style,
	      className: css_class,
	      ref: this.maindiv,
	      onClick: evt => this.props.renderer.selection_manager.changeSelection(evt, this)
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "mouseover-container-bypass"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "mouseover-actions"
	    }, mouseover_actions)), /*#__PURE__*/reactExports.createElement(TitleText, {
	      text: data.title,
	      defaultText: data.week_type_display + ' ' + (this.props.rank + 1)
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-block",
	      id: this.props.objectID + '-node-block',
	      ref: this.node_block
	    }, node_blocks), /*#__PURE__*/reactExports.createElement("div", {
	      className: "week-drop-row hover-shade",
	      onClick: this.toggleDrop.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-drop-side node-drop-left"
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-drop-middle"
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + dropIcon + '.svg'
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-drop-side node-drop-right"
	    })), this.addEditable(data));
	  }
	  makeDragAndDrop() {
	    //Makes the nodeweeks in the node block draggable
	    this.makeSortableNode($(this.node_block.current).children().children('.node-week').not('.ui-draggable'), this.props.objectID, 'nodeweek', '.node-week', false, [200, 1], null, '.node');
	  }
	}
	const mapTermStateToProps = (state, own_props) => getTermByID(state, own_props.objectID);
	var TermView$1 = connect(mapTermStateToProps, null)(TermView);

	//Basic weekworkflow component
	class WeekWorkflowView extends Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'weekworkflow';
	    this.objectClass = '.week-workflow';
	  }
	  render() {
	    let data = this.props.data;
	    let my_class = 'week-workflow';
	    if (data.no_drag) my_class += ' no-drag';
	    if ($(this.maindiv.current).hasClass('dragging')) my_class += ' dragging';
	    var week;
	    if (this.props.condensed) week = /*#__PURE__*/reactExports.createElement(TermView$1, {
	      objectID: data.week,
	      rank: this.props.order.indexOf(data.id),
	      parentID: this.props.parentID,
	      throughParentID: data.id,
	      renderer: this.props.renderer
	    });else week = /*#__PURE__*/reactExports.createElement(WeekView, {
	      objectID: data.week,
	      rank: this.props.order.indexOf(data.id),
	      parentID: this.props.parentID,
	      throughParentID: data.id,
	      renderer: this.props.renderer
	    });
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: my_class,
	      id: data.id,
	      ref: this.maindiv,
	      "data-child-id": data.week
	    }, week);
	  }
	}
	const mapWeekWorkflowStateToProps = (state, own_props) => getWeekWorkflowByID(state, own_props.objectID);
	var WeekWorkflowView$1 = connect(mapWeekWorkflowStateToProps, null)(WeekWorkflowView);

	//Basic weekworkflow component
	class WeekWorkflowComparisonViewUnconnected extends WeekWorkflowView {
	  render() {
	    let data = this.props.data;
	    let my_class = 'week-workflow';
	    if (data.no_drag) my_class += ' no-drag';
	    var week = /*#__PURE__*/reactExports.createElement(WeekComparisonView, {
	      objectID: data.week,
	      rank: this.props.order.indexOf(data.id),
	      parentID: this.props.parentID,
	      throughParentID: data.id,
	      renderer: this.props.renderer
	    });
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: my_class,
	      id: data.id,
	      ref: this.maindiv,
	      "data-child-id": data.week
	    }, week);
	  }
	}
	const WeekWorkflowComparisonView = connect(mapWeekWorkflowStateToProps, null)(WeekWorkflowComparisonViewUnconnected);
	class NodeBarWeekWorkflowUnconnected extends reactExports.Component {
	  render() {
	    let data = this.props.data;
	    return /*#__PURE__*/reactExports.createElement(NodeBarWeekView, {
	      objectID: data.week,
	      rank: this.props.order.indexOf(data.id),
	      parentID: this.props.parentID,
	      throughParentID: data.id,
	      renderer: this.props.renderer
	    });
	  }
	}
	const NodeBarWeekWorkflow = connect(mapWeekWorkflowStateToProps, null)(NodeBarWeekWorkflowUnconnected);

	function _defineProperty(obj, key, value) {
	  key = _toPropertyKey(key);
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	  return obj;
	}
	function _toPrimitive(input, hint) {
	  if (typeof input !== "object" || input === null) return input;
	  var prim = input[Symbol.toPrimitive];
	  if (prim !== undefined) {
	    var res = prim.call(input, hint || "default");
	    if (typeof res !== "object") return res;
	    throw new TypeError("@@toPrimitive must return a primitive value.");
	  }
	  return (hint === "string" ? String : Number)(input);
	}
	function _toPropertyKey(arg) {
	  var key = _toPrimitive(arg, "string");
	  return typeof key === "symbol" ? key : String(key);
	}

	let UserLabel$1 = class UserLabel extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.select = reactExports.createRef();
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  onChange(evt) {
	    switch (evt.target.value) {
	      case 'none':
	        if (window.confirm('Are you sure you want to remove this user?')) {
	          this.props.permissionChange(0, this.props.user);
	        }
	        break;
	      default:
	        this.props.permissionChange(permission_keys[evt.target.value], this.props.user);
	    }
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let permission_select;
	    let disabled = false;
	    if (this.props.cannot_change && this.props.cannot_change.indexOf(this.props.user.id) >= 0) disabled = true;
	    if (this.props.type !== 'owner') {
	      if (this.props.type === 'add') {
	        permission_select = /*#__PURE__*/reactExports.createElement("div", {
	          className: "flex-middle"
	        }, /*#__PURE__*/reactExports.createElement("div", {
	          className: "permission-select"
	        }, /*#__PURE__*/reactExports.createElement("select", {
	          ref: this.select,
	          disabled: disabled
	        }, /*#__PURE__*/reactExports.createElement("option", {
	          value: "edit"
	        }, window.gettext('Can edit')), /*#__PURE__*/reactExports.createElement("option", {
	          value: "comment"
	        }, window.gettext('Can comment')), /*#__PURE__*/reactExports.createElement("option", {
	          value: "view"
	        }, window.gettext('Can view')))), /*#__PURE__*/reactExports.createElement("button", {
	          className: "primary-button",
	          onClick: () => this.props.addFunction($(this.select.current).val())
	        }, window.gettext('Share')));
	      } else {
	        permission_select = /*#__PURE__*/reactExports.createElement("div", {
	          className: "permission-select"
	        }, /*#__PURE__*/reactExports.createElement("select", {
	          value: this.props.type,
	          disabled: disabled,
	          onChange: this.onChange.bind(this)
	        }, /*#__PURE__*/reactExports.createElement("option", {
	          value: "edit"
	        }, window.gettext('Can edit')), /*#__PURE__*/reactExports.createElement("option", {
	          value: "comment"
	        }, window.gettext('Can comment')), /*#__PURE__*/reactExports.createElement("option", {
	          value: "view"
	        }, window.gettext('Can view')), /*#__PURE__*/reactExports.createElement("option", {
	          value: "none"
	        }, window.gettext('Remove user'))));
	      }
	    }
	    return /*#__PURE__*/reactExports.createElement("li", {
	      className: "user-label"
	    }, /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("div", {
	      className: "user-name"
	    }, this.props.user.first_name + ' ' + this.props.user.last_name), /*#__PURE__*/reactExports.createElement("div", {
	      className: "user-username"
	    }, this.props.user.username)), permission_select);
	  }
	};
	let UserAdd$1 = class UserAdd extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.input = reactExports.createRef();
	    this.state = {
	      selected: null
	    };
	  }

	  /*******************************************************
	   * LIFECYCLE
	   *******************************************************/
	  componentDidMount() {
	    let component = this;
	    $(this.input.current).autocomplete({
	      source: (request, response_function) => {
	        getUserList(request.term, response => {
	          let user_list = response.user_list.map(user => {
	            return {
	              label: user.first_name + ' ' + user.last_name + ' - ' + user.username,
	              value: user.username,
	              user: user
	            };
	          });
	          response_function(user_list);
	        });
	        component.setState({
	          selected: null
	        });
	      },
	      select: (evt, ui) => {
	        this.setState({
	          selected: ui.item.user
	        });
	      },
	      minLength: 1
	    });
	  }
	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  addClick(value) {
	    if (this.state.selected) {
	      this.props.permissionChange(permission_keys[value], this.state.selected);
	      $(this.input.current).val(null);
	      this.setState({
	        selected: null
	      });
	    }
	  }
	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let user;
	    if (this.state.selected) {
	      user = /*#__PURE__*/reactExports.createElement(UserLabel$1, {
	        user: this.state.selected,
	        type: "add",
	        addFunction: this.addClick.bind(this)
	      });
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "user-add"
	    }, /*#__PURE__*/reactExports.createElement("p", null, this.props.share_info), /*#__PURE__*/reactExports.createElement("div", {
	      className: "relative"
	    }, /*#__PURE__*/reactExports.createElement("input", {
	      className: "search-input",
	      ref: this.input,
	      placeholder: window.gettext('Begin typing to search users')
	    }), /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded"
	    }, "search")), user);
	  }
	};

	/*******************************************************
	 *
	 *******************************************************/
	class ShareMenu extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.tiny_loader = new TinyLoader($('body'));
	    this.state = {
	      owner: props.data.author,
	      edit: [],
	      view: [],
	      comment: [],
	      student: [],
	      userlist: [],
	      cannot_change: []
	    };
	  }

	  /*******************************************************
	   * LIFECYCLE
	   *******************************************************/
	  componentDidMount() {
	    getUsersForObject(this.props.data.id, this.props.data.type, response => {
	      this.setState({
	        owner: response.author,
	        view: response.viewers,
	        comment: response.commentors,
	        edit: response.editors,
	        student: response.students,
	        published: response.published,
	        public_view: response.public_view,
	        cannot_change: response.cannot_change
	      });
	    });
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  getPublication() {
	    let published = this.state.published;
	    let data = this.props.data;
	    if (data.type === 'project' || data.is_strategy) {
	      let public_class = 'big-button make-public';
	      let private_class = 'big-button hover-shade make-private';
	      if (published) public_class += ' active';else private_class += ' active';
	      let public_disabled = !(data.title && data.title.length > 0);
	      if (data.type == 'project') public_disabled |= data.disciplines.length == 0;
	      if (!public_disabled && !published) public_class += ' hover-shade';
	      if (public_disabled) public_class += ' disabled';
	      let public_text = window.gettext('Any CourseFlow teacher can view');
	      let disabled_indicator;
	      if (public_disabled) {
	        let disabled_text;
	        if (data.type == 'project') disabled_text = window.gettext('Title and disciplines are required to publish.');else disabled_text = window.gettext('Title is required to publish.');
	        disabled_indicator = /*#__PURE__*/reactExports.createElement("div", {
	          className: "warning flex-middle"
	        }, /*#__PURE__*/reactExports.createElement("span", {
	          className: "material-symbols-rounded red"
	        }, "block"), /*#__PURE__*/reactExports.createElement("div", null, disabled_text));
	      }
	      return [/*#__PURE__*/reactExports.createElement("div", {
	        className: "big-buttons-wrapper"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: public_class,
	        disabled: public_disabled,
	        onClick: this.setPublication.bind(this, !public_disabled)
	      }, /*#__PURE__*/reactExports.createElement("span", {
	        className: "material-symbols-rounded"
	      }, "public"), /*#__PURE__*/reactExports.createElement("div", {
	        className: "big-button-title"
	      }, window.gettext('Public to CourseFlow')), /*#__PURE__*/reactExports.createElement("div", {
	        className: "big-button-description"
	      }, public_text)), /*#__PURE__*/reactExports.createElement("div", {
	        className: private_class,
	        onClick: this.setPublication.bind(this, false)
	      }, /*#__PURE__*/reactExports.createElement("span", {
	        className: "material-symbols-rounded filled"
	      }, "visibility_off"), /*#__PURE__*/reactExports.createElement("div", {
	        className: "big-button-title"
	      }, window.gettext('Private')), /*#__PURE__*/reactExports.createElement("div", {
	        className: "big-button-description"
	      }, window.gettext('Only added collaborators can view')))), disabled_indicator];
	    } else {
	      let published_icon;
	      if (published) published_icon = /*#__PURE__*/reactExports.createElement("div", {
	        className: "big-buttons-wrapper"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "big-button active"
	      }, /*#__PURE__*/reactExports.createElement("span", {
	        className: "material-symbols-rounded"
	      }, "public"), /*#__PURE__*/reactExports.createElement("div", {
	        className: "big-button-title"
	      }, window.gettext('Project public to CourseFlow')), /*#__PURE__*/reactExports.createElement("div", {
	        className: "big-button-description"
	      }, window.gettext('Any CourseFlow teacher can view'))));else published_icon = /*#__PURE__*/reactExports.createElement("div", {
	        className: "big-buttons-wrapper"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "big-button active"
	      }, /*#__PURE__*/reactExports.createElement("span", {
	        className: "material-symbols-rounded filled"
	      }, "visibility_off"), /*#__PURE__*/reactExports.createElement("div", {
	        className: "big-button-title"
	      }, window.gettext('Project is private')), /*#__PURE__*/reactExports.createElement("div", {
	        className: "big-button-description"
	      }, window.gettext('Only added collaborators can view'))));
	      return [published_icon, this.getPublicLink()];
	    }
	  }
	  getPublicLink() {
	    let data = this.props.data;
	    let public_link = 'https://' + window.location.host + window.config.public_update_path['workflow'].replace('0', data.id);
	    if (data.type !== 'project') {
	      let public_view = this.state.public_view;
	      if (!public_view) return /*#__PURE__*/reactExports.createElement("div", {
	        className: "public-link-button  hover-shade",
	        onClick: this.togglePublicView.bind(this, !public_view)
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "public-link-icon"
	      }, /*#__PURE__*/reactExports.createElement("span", {
	        className: "material-symbols-rounded"
	      }, "add_link")), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("div", {
	        className: "public-link-text"
	      }, window.gettext('Generate a public link')), /*#__PURE__*/reactExports.createElement("div", {
	        className: "public-link-description"
	      }, window.gettext('Anyone with the link will be able to view the workflow'))));else return [/*#__PURE__*/reactExports.createElement("div", {
	        className: "flex-middle"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        id: "public-page-link",
	        className: "public-link-button  hover-shade",
	        onClick: () => {
	          navigator.clipboard.writeText(public_link);
	          let copy_icon_text = $('#public-page-link .copy-link-icon .material-symbols-rounded').text();
	          let copy_description_text = $('#public-page-link .copy-link-text').text();
	          $('#public-page-link .copy-link-icon .material-symbols-rounded').text('done');
	          $('#public-page-link .copy-link-text').text('Copied to Clipboard');
	          setTimeout(() => {
	            $('#public-page-link .copy-link-icon .material-symbols-rounded').text(copy_icon_text);
	            $('#public-page-link .copy-link-text').text(copy_description_text);
	          }, 1000);
	        }
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "copy-link-icon"
	      }, /*#__PURE__*/reactExports.createElement("span", {
	        className: "material-symbols-rounded"
	      }, "link")), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("div", {
	        className: "copy-link-text"
	      }, window.gettext('Copy public link')), /*#__PURE__*/reactExports.createElement("div", {
	        className: "public-link-description"
	      }, window.gettext('Anyone with the link can view the workflow')))), /*#__PURE__*/reactExports.createElement("div", {
	        id: "public-page-code",
	        className: "public-link-button  hover-shade",
	        onClick: () => {
	          let iframe = '<iframe style="margin:0px;width:100%;height:1200px;border:0px;" src="' + public_link + '"></iframe>';
	          navigator.clipboard.writeText(iframe);
	          let copy_icon_text = $('#public-page-code .copy-link-icon .material-symbols-rounded').text();
	          let copy_description_text = $('#public-page-code .copy-link-text').text();
	          $('#public-page-code .copy-link-icon .material-symbols-rounded').text('done');
	          $('#public-page-code .copy-link-text').text('Copied to Clipboard');
	          setTimeout(() => {
	            $('#public-page-code .copy-link-icon .material-symbols-rounded').text(copy_icon_text);
	            $('#public-page-code .copy-link-text').text(copy_description_text);
	          }, 1000);
	        }
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "copy-link-icon"
	      }, /*#__PURE__*/reactExports.createElement("span", {
	        className: "material-symbols-rounded"
	      }, "frame_source")), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("div", {
	        className: "copy-link-text"
	      }, window.gettext('Copy embed code')), /*#__PURE__*/reactExports.createElement("div", {
	        className: "public-link-description"
	      }, window.gettext('HTML code to embed the workflow in a site or page'))))), /*#__PURE__*/reactExports.createElement("div", {
	        className: "public-link-button public-link-remove  hover-shade",
	        onClick: this.togglePublicView.bind(this, !public_view)
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "public-link-icon"
	      }, /*#__PURE__*/reactExports.createElement("span", {
	        className: "material-symbols-rounded"
	      }, "link_off")), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("div", {
	        className: "public-link-text"
	      }, window.gettext('Remove public link'))))];
	    }
	  }
	  togglePublicView(public_view) {
	    if (public_view) {
	      if (window.confirm(window.gettext('Please note: this will make a publicly accessible link to your workflow, which can be accessed even by those without an account. They will still not be able to edit your workflow.'))) {
	        updateValueInstant(this.props.data.id, 'workflow', {
	          public_view: public_view
	        }, () => {
	          this.setState({
	            public_view: public_view
	          });
	        });
	      }
	    } else {
	      updateValueInstant(this.props.data.id, 'workflow', {
	        public_view: public_view
	      }, () => {
	        this.setState({
	          public_view: public_view
	        });
	      });
	    }
	  }
	  setPublication(published) {
	    if (published == this.state.published) return;
	    let component = this;
	    if (!published || window.confirm(window.gettext('Are you sure you want to publish this project, making it fully visible to anyone with an account?'))) {
	      updateValueInstant(component.props.data.id, component.props.data.type, {
	        published: published
	      }, () => component.setState({
	        published: published
	      }));
	    }
	  }
	  setUserPermission(permission_type, user) {
	    this.tiny_loader.startLoad();
	    setUserPermission(user.id, this.props.data.id, this.props.data.type, permission_type, () => {
	      getUsersForObject(this.props.data.id, this.props.data.type, response => {
	        this.setState({
	          view: response.viewers,
	          comment: response.commentors,
	          edit: response.editors,
	          student: response.students
	        });
	        this.tiny_loader.endLoad();
	      });
	    });
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let data = this.props.data;
	    let owner = /*#__PURE__*/reactExports.createElement(UserLabel$1, {
	      user: this.state.owner,
	      type: 'owner'
	    });
	    let editors = this.state.edit.filter(user => user.id !== this.state.owner.id).map(user => /*#__PURE__*/reactExports.createElement(UserLabel$1, {
	      user: user,
	      type: 'edit',
	      cannot_change: this.state.cannot_change,
	      permissionChange: this.setUserPermission.bind(this)
	    }));
	    let viewers = this.state.view.map(user => /*#__PURE__*/reactExports.createElement(UserLabel$1, {
	      user: user,
	      type: 'view',
	      cannot_change: this.state.cannot_change,
	      permissionChange: this.setUserPermission.bind(this)
	    }));
	    let commentors = this.state.comment.map(user => /*#__PURE__*/reactExports.createElement(UserLabel$1, {
	      user: user,
	      type: 'comment',
	      cannot_change: this.state.cannot_change,
	      permissionChange: this.setUserPermission.bind(this)
	    }));
	    let students = this.state.student.map(user => /*#__PURE__*/reactExports.createElement(UserLabel$1, {
	      user: user,
	      type: 'student',
	      cannot_change: this.state.cannot_change,
	      permissionChange: this.setUserPermission.bind(this)
	    }));
	    let share_info;
	    if (data.type === 'project') {
	      share_info = window.gettext('Invite collaborators to project and its workflows');
	    } else {
	      share_info = window.gettext('Invite collaborators to workflow and grant view permissions to the project');
	    }
	    let shared_with;
	    if (editors.length || commentors.length || viewers.length || students.length) {
	      shared_with = [/*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement("div", {
	        className: "user-panel"
	      }, /*#__PURE__*/reactExports.createElement("p", null, window.gettext('Shared With'), ":"), /*#__PURE__*/reactExports.createElement("ul", {
	        className: "user-list"
	      }, editors, commentors, viewers, students))];
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "message-wrap user-text"
	    }, /*#__PURE__*/reactExports.createElement("h2", null, window.gettext('Share') + ' ' + window.gettext(data.type) + ' ', /*#__PURE__*/reactExports.createElement(WorkflowTitle, {
	      no_hyperlink: true,
	      data: this.props.data,
	      class_name: 'inline'
	    })), this.getPublication(), /*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement("p", null, window.gettext('Owned By'), ":"), /*#__PURE__*/reactExports.createElement("div", null, owner), /*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement(UserAdd$1, {
	      permissionChange: this.setUserPermission.bind(this),
	      share_info: share_info
	    }), shared_with, /*#__PURE__*/reactExports.createElement("div", {
	      className: "window-close-button",
	      onClick: this.props.actionFunction
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "green material-symbols-rounded"
	    }, "close")), /*#__PURE__*/reactExports.createElement("div", {
	      className: "action-bar"
	    }, /*#__PURE__*/reactExports.createElement("button", {
	      className: "secondary-button",
	      onClick: this.props.actionFunction
	    }, window.gettext('Close'))));
	  }
	}

	class ImportMenu extends reactExports.Component {
	  constructor(props) {
	    super(props);
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  submit(evt) {
	    $('#submit-button').attr('disabled', true);
	    setTimeout(() => {
	      this.props.actionFunction();
	      alert(window.gettext('Your file has been submitted. Please wait while it is imported. You may close this message.'));
	    }, 100);
	    return true;
	  }
	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "message-wrap"
	    }, /*#__PURE__*/reactExports.createElement("h2", null, window.gettext('Import Files')), /*#__PURE__*/reactExports.createElement("p", null, window.gettext('Use this menu to upload content in either .xls or .csv format. Ensure you have the correct format.')), /*#__PURE__*/reactExports.createElement("form", {
	      encType: "multipart/form-data",
	      action: window.config.post_paths.import_data,
	      method: "POST",
	      id: "upload-form",
	      target: "redirect-iframe",
	      onSubmit: this.submit.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("input", {
	      type: "hidden",
	      name: "csrfmiddlewaretoken",
	      value: root.getCsrfToken()
	    }), /*#__PURE__*/reactExports.createElement("input", {
	      type: "hidden",
	      id: "objectID",
	      name: "objectID",
	      value: JSON.stringify(this.props.data.object_id)
	    }), /*#__PURE__*/reactExports.createElement("input", {
	      type: "hidden",
	      id: "objectType",
	      name: "objectType",
	      value: JSON.stringify(this.props.data.object_type)
	    }), /*#__PURE__*/reactExports.createElement("input", {
	      type: "hidden",
	      id: "importType",
	      name: "importType",
	      value: this.props.data.import_type
	    }), /*#__PURE__*/reactExports.createElement("input", {
	      type: "file",
	      id: "myFile",
	      name: "myFile",
	      accept: ".xls, .xlsx, .csv",
	      required: true
	    }), /*#__PURE__*/reactExports.createElement("input", {
	      id: "submit-button",
	      type: "submit"
	    })), /*#__PURE__*/reactExports.createElement("iframe", {
	      hidden: true,
	      name: "redirect-iframe",
	      id: "redirect-iframe"
	    }), /*#__PURE__*/reactExports.createElement("p", null, window.gettext('The uploading process may take some time. It is not recommended to continue editing until it is complete.')), /*#__PURE__*/reactExports.createElement("div", {
	      className: "window-close-button",
	      onClick: this.props.actionFunction
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + 'close.svg'
	    })));
	  }
	}

	class ExportMenu extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      type: 'outcome'
	    };
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  getExportTypes() {
	    let type = this.props.data.type;
	    let exports = [];
	    exports.push([/*#__PURE__*/reactExports.createElement("input", {
	      name: "export_type",
	      type: "radio",
	      value: "outcome",
	      onChange: this.inputChange.bind(this, 'type', ''),
	      checked: this.state.type == 'outcome'
	    }), /*#__PURE__*/reactExports.createElement("label", {
	      htmlFor: "export_type"
	    }, window.gettext('Outcomes'))]);
	    exports.push([/*#__PURE__*/reactExports.createElement("input", {
	      name: "export_type",
	      type: "radio",
	      value: "node",
	      onChange: this.inputChange.bind(this, 'type', ''),
	      checked: this.state.type == 'node'
	    }), /*#__PURE__*/reactExports.createElement("label", {
	      htmlFor: "export_type"
	    }, window.gettext('Nodes'))]);
	    if (type == 'project' || type == 'course') exports.push([/*#__PURE__*/reactExports.createElement("input", {
	      name: "export_type",
	      type: "radio",
	      value: "framework",
	      onChange: this.inputChange.bind(this, 'type', ''),
	      checked: this.state.type == 'framework'
	    }), /*#__PURE__*/reactExports.createElement("label", {
	      htmlFor: "export_type"
	    }, window.gettext('Course Framework'))]);
	    if (type == 'project' || type == 'program') exports.push([/*#__PURE__*/reactExports.createElement("input", {
	      name: "export_type",
	      type: "radio",
	      value: "matrix",
	      onChange: this.inputChange.bind(this, 'type', ''),
	      checked: this.state.type == 'matrix'
	    }), /*#__PURE__*/reactExports.createElement("label", {
	      htmlFor: "export_type"
	    }, window.gettext('Competency Matrix'))]);

	    // brought from master branch
	    if (type == 'project' || type == 'program') exports.push([/*#__PURE__*/reactExports.createElement("input", {
	      name: "export_type",
	      type: "radio",
	      value: "sobec",
	      onChange: this.inputChange.bind(this, 'type', ''),
	      checked: this.state.type == 'sobec'
	    }), /*#__PURE__*/reactExports.createElement("label", {
	      htmlFor: "export_type"
	    }, window.gettext('Sobec Validation'))]);
	    return exports;
	  }
	  inputChange(type, id, evt) {
	    if (type == 'set') {
	      let new_state = {};
	      new_state[id] = !evt.target.checked;
	      this.setState(new_state);
	    } else if (type == 'type' && evt.target.checked) {
	      this.setState({
	        type: evt.target.value
	      });
	    }
	  }
	  click(evt) {
	    if (evt.ctrlKey) {
	      this.ctrlKey = true;
	      $('#export-form')[0].action = window.config.post_paths.get_export_download;
	    }
	  }
	  submit(evt) {
	    $('#submit-button').attr('disabled', true);
	    setTimeout(() => {
	      if (!this.ctrlKey) this.props.actionFunction();
	      alert(window.gettext('Your file is being generated and will be emailed to you shortly.'));
	    }, 100);
	    return true;
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let object_sets;
	    if (this.props.data.object_sets.length > 0) {
	      object_sets = [/*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Object Set Visibility'), ":"), this.props.data.object_sets.map(objectset => /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("input", {
	        onChange: this.inputChange.bind(this, 'set', objectset.id),
	        name: "object_sets[]",
	        value: objectset.id,
	        type: "checkbox",
	        id: objectset.id,
	        checked: !this.state[objectset.id]
	      }), /*#__PURE__*/reactExports.createElement("label", null, objectset.title)))];
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "message-wrap"
	    }, /*#__PURE__*/reactExports.createElement("h2", null, window.gettext('Export files')), /*#__PURE__*/reactExports.createElement("p", null, window.gettext('Use this menu to export files.')), /*#__PURE__*/reactExports.createElement("form", {
	      id: "export-form",
	      encType: "multipart/form-data",
	      action: window.config.post_paths.get_export,
	      method: "POST",
	      target: "redirect-iframe",
	      onSubmit: this.submit.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("input", {
	      type: "hidden",
	      name: "csrfmiddlewaretoken",
	      value: root.getCsrfToken()
	    }), /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Export Type'), ":"), this.getExportTypes(), /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Export Format'), ":"), /*#__PURE__*/reactExports.createElement("select", {
	      name: "export_format"
	    }, /*#__PURE__*/reactExports.createElement("option", {
	      value: "excel"
	    }, "Excel"), /*#__PURE__*/reactExports.createElement("option", {
	      value: "csv"
	    }, "CSV")), object_sets, /*#__PURE__*/reactExports.createElement("input", {
	      type: "hidden",
	      id: "objectID",
	      name: "objectID",
	      value: JSON.stringify(this.props.data.id)
	    }), /*#__PURE__*/reactExports.createElement("input", {
	      type: "hidden",
	      id: "objectType",
	      name: "objectType",
	      value: JSON.stringify(this.props.data.type)
	    }), /*#__PURE__*/reactExports.createElement("input", {
	      onClick: this.click.bind(this),
	      id: "submit-button",
	      type: "submit"
	    })), /*#__PURE__*/reactExports.createElement("iframe", {
	      hidden: true,
	      name: "redirect-iframe",
	      id: "redirect-iframe"
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "window-close-button",
	      onClick: this.props.actionFunction
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + 'close.svg'
	    })));
	  }
	}

	class MenuSection extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.dropdownDiv = reactExports.createRef();
	  }

	  /*******************************************************
	   * LIFECYCLE
	   *******************************************************/
	  componentDidMount() {
	    makeDropdown(this.dropdownDiv.current);
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let section_type = this.props.section_data.object_type;
	    let is_strategy = this.props.section_data.is_strategy;
	    let parentID = this.props.parentID;
	    var objects = this.props.section_data.objects.map(object => /*#__PURE__*/reactExports.createElement(WorkflowForMenu, {
	      no_hyperlink: this.props.no_hyperlink,
	      key: object.id,
	      type: this.props.type,
	      workflow_data: object,
	      objectType: section_type,
	      selected: this.props.selected_id == object.id,
	      dispatch: this.props.dispatch,
	      selectAction: this.props.selectAction,
	      parentID: this.props.parentID,
	      duplicate: this.props.duplicate
	    }));
	    if (this.props.replacement_text) objects = this.props.replacement_text;
	    let add_button;
	    if (window.config.create_path && this.props.add) {
	      let types;
	      if (section_type === 'workflow') types = ['program', 'course', 'activity'];else types = [section_type];
	      let adds;
	      {
	        adds = types.map(this_type => /*#__PURE__*/reactExports.createElement("a", {
	          className: "hover-shade",
	          href: window.config.create_path[this_type]
	        }, window.gettext('Create new ') + window.gettext(this_type)));
	        let import_text = window.gettext('Import ') + window.gettext(section_type);
	        if (is_strategy) import_text += window.gettext(' strategy');
	        adds.push( /*#__PURE__*/reactExports.createElement("a", {
	          className: "hover-shade",
	          onClick: () => {
	            getAddedWorkflowMenu(parentID, section_type, is_strategy, false);
	          }
	        }, import_text));
	      }
	      add_button = /*#__PURE__*/reactExports.createElement("div", {
	        className: "menu-create hover-shade",
	        ref: this.dropdownDiv
	      }, /*#__PURE__*/reactExports.createElement("img", {
	        className: 'create-button create-button-' + this.props.section_data.object_type + ' link-image',
	        title: window.gettext('Add New'),
	        src: window.config.icon_path + 'add_new_white.svg'
	      }), /*#__PURE__*/reactExports.createElement("div", null, this.props.section_data.title), /*#__PURE__*/reactExports.createElement("div", {
	        className: "create-dropdown"
	      }, adds));
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: 'section-' + this.props.section_data.object_type
	    }, add_button, /*#__PURE__*/reactExports.createElement("div", {
	      className: "menu-grid"
	    }, objects));
	  }
	}

	/*
	A tab for the menu of workflows.
	*/
	class MenuTab extends reactExports.Component {
	  render() {
	    let is_empty = true;
	    for (let i = 0; i < this.props.data.sections.length; i++) {
	      if (this.props.data.sections[i].objects.length > 0) {
	        is_empty = false;
	        break;
	      }
	    }
	    let replacement_text;
	    if (is_empty) replacement_text = this.props.data.emptytext;
	    var sections = this.props.data.sections.map((section, i) => /*#__PURE__*/reactExports.createElement(MenuSection, {
	      no_hyperlink: this.props.no_hyperlink,
	      type: this.props.type,
	      replacement_text: i == 0 ? replacement_text : null,
	      section_data: section,
	      add: this.props.data.add,
	      selected_id: this.props.selected_id,
	      dispatch: this.props.dispatch,
	      selectAction: this.props.selectAction,
	      parentID: this.props.parentID,
	      duplicate: this.props.data.duplicate
	    }));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      id: 'tabs-' + this.props.identifier
	    }, sections);
	  }
	}

	// @TODO THIS IS TEMPORARY
	// closeMessageBox is imported by sub menus and prebviously defined inside the same file as
	// renderMessageBox
	//  it cannot live there (circ dependency) this will be solved by
	//  a) context based modal OR
	// b) passing state to individual menu instanmce
	function closeMessageBox$1() {
	  reactDomExports.unmountComponentAtNode($('#popup-container')[0]);
	}

	/*
	Creates a set of sections (tabs) of workflow/project card grids.
	Currently this is shaped in the back-end, this is definitely something
	that could (should?) be changed. This was part of my earliest work,
	when I was still trying to put a lot of what should have been front-end logic
	into the back-end.

	Used for selecting a workflow in a menu when linking a workflow, choosing a target project
	for duplication, etc.
	*/
	class WorkflowsMenu extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.state = {};
	    if (this.props.type === 'target_project_menu') {
	      try {
	        this.current_project = project_data;
	      } catch (err) {}
	      try {
	        this.current_project = workflow_data_package.project;
	      } catch (err) {}
	      if (this.current_project) this.state.selected = this.current_project.id;
	    }
	    if (this.props.type === 'linked_workflow_menu' || this.props.type === 'added_workflow_menu') this.project_workflows = props.data.data_package.current_project.sections.map(section => section.objects.map(object => object.id)).flat();
	  }

	  /*******************************************************
	   * LIFECYCLE
	   *******************************************************/
	  componentDidMount() {
	    // @todo
	    $('#workflow-tabs').tabs({
	      active: 0
	    });
	    $('#workflow-tabs .tab-header').on('click', () => {
	      this.setState({
	        selected: null
	      });
	    });
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  getTitle() {
	    switch (this.props.type) {
	      case 'linked_workflow_menu':
	      case 'added_workflow_menu':
	      case 'workflow_select_menu':
	        return /*#__PURE__*/reactExports.createElement("h2", null, window.gettext('Select a workflow'));
	      case 'target_project_menu':
	        return /*#__PURE__*/reactExports.createElement("h2", null, window.gettext('Select a project'));
	    }
	    return null;
	  }
	  workflowSelected(selected_id, selected_type) {
	    this.setState({
	      selected: selected_id,
	      selected_type: selected_type
	    });
	  }
	  getActions() {
	    var actions = [];
	    if (this.props.type === 'linked_workflow_menu') {
	      var text = window.gettext('link to node');
	      if (this.state.selected && this.project_workflows.indexOf(this.state.selected) < 0) text = window.gettext('Copy to Current Project and ') + text;
	      actions.push( /*#__PURE__*/reactExports.createElement("button", {
	        id: "set-linked-workflow-cancel",
	        className: "secondary-button",
	        onClick: closeMessageBox$1
	      }, window.gettext('Cancel')));
	      actions.push( /*#__PURE__*/reactExports.createElement("button", {
	        id: "set-linked-workflow-none",
	        className: "secondary-button",
	        onClick: () => {
	          setLinkedWorkflow(this.props.data.node_id, -1, this.props.actionFunction);
	          closeMessageBox$1();
	        }
	      }, window.gettext('Set to None')));
	      actions.push( /*#__PURE__*/reactExports.createElement("button", {
	        id: "set-linked-workflow",
	        disabled: !this.state.selected,
	        className: "primary-button",
	        onClick: () => {
	          setLinkedWorkflow(this.props.data.node_id, this.state.selected, this.props.actionFunction);
	          closeMessageBox$1();
	        }
	      }, text));
	    } else if (this.props.type == 'added_workflow_menu' || this.props.type == 'workflow_select_menu') {
	      var text;
	      if (this.props.type == 'added_workflow_menu') {
	        text = window.gettext('Select');
	        if (this.state.selected && this.project_workflows.indexOf(this.state.selected) < 0) text = window.gettext('Copy to Current Project');
	      } else {
	        text = window.gettext('Select');
	      }
	      actions.push( /*#__PURE__*/reactExports.createElement("button", {
	        id: "set-linked-workflow-cancel",
	        className: "secondary-button",
	        onClick: closeMessageBox$1
	      }, window.gettext('Cancel')));
	      actions.push( /*#__PURE__*/reactExports.createElement("button", {
	        id: "set-linked-workflow",
	        className: "primary-button",
	        disabled: !this.state.selected,
	        onClick: () => {
	          this.props.actionFunction({
	            workflowID: this.state.selected
	          });
	          closeMessageBox$1();
	        }
	      }, text));
	    } else if (this.props.type == 'target_project_menu') {
	      actions.push( /*#__PURE__*/reactExports.createElement("button", {
	        id: "set-linked-workflow-cancel",
	        className: "secondary-button",
	        onClick: closeMessageBox$1
	      }, window.gettext('Cancel')));
	      actions.push( /*#__PURE__*/reactExports.createElement("button", {
	        id: "set-linked-workflow",
	        className: "primary-button",
	        disabled: !this.state.selected,
	        onClick: () => {
	          this.props.actionFunction({
	            parentID: this.state.selected
	          });
	          closeMessageBox$1();
	        }
	      }, window.gettext('Select project')));
	    }
	    return actions;
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    var data_package = this.props.data.data_package;
	    let no_hyperlink = false;
	    if (this.props.type === 'linked_workflow_menu' || this.props.type === 'added_workflow_menu' || this.props.type === 'target_project_menu' || this.props.type === 'workflow_select_menu') no_hyperlink = true;
	    var tabs = [];
	    var tab_li = [];
	    var i = 0;
	    for (var prop in data_package) {
	      tab_li.push( /*#__PURE__*/reactExports.createElement("li", {
	        className: "tab-header"
	      }, /*#__PURE__*/reactExports.createElement("a", {
	        className: "hover-shade",
	        href: '#tabs-' + i
	      }, data_package[prop].title)));
	      tabs.push( /*#__PURE__*/reactExports.createElement(MenuTab, {
	        no_hyperlink: no_hyperlink,
	        data: data_package[prop],
	        type: this.props.type,
	        identifier: i,
	        selected_id: this.state.selected,
	        selectAction: this.workflowSelected.bind(this)
	      }));
	      i++;
	    }
	    let current_project;
	    if (this.current_project) {
	      current_project = [/*#__PURE__*/reactExports.createElement("h4", {
	        className: 'big-space'
	      }, window.gettext('Current project')), /*#__PURE__*/reactExports.createElement("div", {
	        className: "menu-grid"
	      }, /*#__PURE__*/reactExports.createElement(WorkflowForMenu, {
	        workflow_data: this.current_project,
	        selected: this.state.selected == this.current_project.id,
	        no_hyperlink: no_hyperlink,
	        type: this.props.type,
	        dispatch: this.props.dispatch,
	        selectAction: this.workflowSelected.bind(this)
	      })), /*#__PURE__*/reactExports.createElement("hr", {
	        className: 'big-space'
	      }), /*#__PURE__*/reactExports.createElement("h4", {
	        className: 'big-space'
	      }, window.gettext('Or select from your projects'))];
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "message-wrap"
	    }, this.getTitle(), current_project, /*#__PURE__*/reactExports.createElement("div", {
	      className: "home-tabs",
	      id: "workflow-tabs"
	    }, /*#__PURE__*/reactExports.createElement("ul", null, tab_li), tabs), /*#__PURE__*/reactExports.createElement("div", {
	      className: "action-bar"
	    }, this.getActions()));
	  }
	}

	class LiveProjectSection extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.state = {};
	  }
	  componentDidMount() {
	    let component = this;
	    if (this.props.role == 'teacher') {
	      getLiveProjectData(this.props.objectID, this.props.view_type, data => {
	        component.setState({
	          data: data.data_package
	        });
	      });
	    } else if (this.props.role == 'student') {
	      getLiveProjectDataStudent(this.props.objectID, this.props.view_type, data => {
	        component.setState({
	          data: data.data_package
	        });
	      });
	    }
	  }
	  defaultRender() {
	    return /*#__PURE__*/reactExports.createElement(WorkflowLoader, null);
	  }
	}

	class LiveProjectOverview extends LiveProjectSection {
	  render() {
	    if (!this.state.data) return this.defaultRender();
	    let workflows = this.state.data.workflows.map(workflow => /*#__PURE__*/reactExports.createElement(SimpleWorkflow, {
	      workflow_data: workflow
	    }));
	    if (workflows.length == 0) workflows = window.gettext('No workflows have been made visible to students.');
	    let teachers = this.state.data.teachers.map(user => /*#__PURE__*/reactExports.createElement("tr", null, /*#__PURE__*/reactExports.createElement("td", {
	      className: "table-user"
	    }, getUserDisplay(user.user)), /*#__PURE__*/reactExports.createElement("td", null, user.completion)));
	    let students = this.state.data.students.map(user => /*#__PURE__*/reactExports.createElement("tr", null, /*#__PURE__*/reactExports.createElement("td", {
	      className: "table-user"
	    }, getUserDisplay(user.user)), /*#__PURE__*/reactExports.createElement("td", null, user.completion)));
	    let assignments = this.state.data.assignments.map(assignment => /*#__PURE__*/reactExports.createElement("tr", null, /*#__PURE__*/reactExports.createElement("td", null, /*#__PURE__*/reactExports.createElement(AssignmentTitle, {
	      data: assignment,
	      user_role: this.props.renderer.user_role
	    })), /*#__PURE__*/reactExports.createElement("td", null, assignment.completion_info), /*#__PURE__*/reactExports.createElement("td", null, /*#__PURE__*/reactExports.createElement(DatePicker, {
	      default_value: assignment.end_date,
	      disabled: true
	    }))));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-details"
	    }, /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('Teachers'), ":"), /*#__PURE__*/reactExports.createElement("table", {
	      className: "overview-table"
	    }, /*#__PURE__*/reactExports.createElement("tr", null, /*#__PURE__*/reactExports.createElement("th", null, window.gettext('User')), /*#__PURE__*/reactExports.createElement("th", null, window.gettext('Assignments Complete'))), teachers), /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('Students'), ":"), /*#__PURE__*/reactExports.createElement("table", {
	      className: "overview-table"
	    }, /*#__PURE__*/reactExports.createElement("tr", null, /*#__PURE__*/reactExports.createElement("th", null, window.gettext('User')), /*#__PURE__*/reactExports.createElement("th", null, window.gettext('Assignments Complete'))), students), /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('Visible Workflows'), ":"), /*#__PURE__*/reactExports.createElement("div", {
	      className: "menu-grid"
	    }, workflows), /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('Assignments'), ":"), /*#__PURE__*/reactExports.createElement("table", {
	      className: "overview-table"
	    }, /*#__PURE__*/reactExports.createElement("tr", null, /*#__PURE__*/reactExports.createElement("th", null, window.gettext('Assignment')), /*#__PURE__*/reactExports.createElement("th", null, window.gettext('Completion')), /*#__PURE__*/reactExports.createElement("th", null, window.gettext('End Date'))), assignments));
	  }
	}

	class UserLabel extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.select = reactExports.createRef();
	  }
	  onChange(evt) {
	    switch (evt.target.value) {
	      case 'none':
	        if (window.confirm('Are you sure you want to remove this user?')) {
	          this.props.permissionChange(0, this.props.user);
	        }
	        break;
	      default:
	        this.props.permissionChange(role_keys[evt.target.value], this.props.user);
	    }
	  }
	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let permission_select;
	    if (this.props.type !== 'owner') {
	      if (this.props.type === 'add') {
	        permission_select = /*#__PURE__*/reactExports.createElement("div", {
	          className: "permission-select"
	        }, /*#__PURE__*/reactExports.createElement("select", {
	          ref: this.select
	        }, /*#__PURE__*/reactExports.createElement("option", {
	          value: "student"
	        }, window.gettext('Student')), /*#__PURE__*/reactExports.createElement("option", {
	          value: "teacher"
	        }, window.gettext('Teacher'))), /*#__PURE__*/reactExports.createElement("button", {
	          onClick: () => this.props.addFunction($(this.select.current).val())
	        }, window.gettext('Share')));
	      } else {
	        permission_select = /*#__PURE__*/reactExports.createElement("div", {
	          className: "permission-select"
	        }, /*#__PURE__*/reactExports.createElement("select", {
	          value: this.props.type,
	          onChange: this.onChange.bind(this)
	        }, /*#__PURE__*/reactExports.createElement("option", {
	          value: "student"
	        }, window.gettext('Student')), /*#__PURE__*/reactExports.createElement("option", {
	          value: "teacher"
	        }, window.gettext('Teacher')), /*#__PURE__*/reactExports.createElement("option", {
	          value: "none"
	        }, window.gettext('Remove user'))));
	      }
	    }
	    return /*#__PURE__*/reactExports.createElement("li", {
	      className: "user-label"
	    }, /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("div", {
	      className: "user-name"
	    }, this.props.user.first_name + ' ' + this.props.user.last_name), /*#__PURE__*/reactExports.createElement("div", {
	      className: "user-username"
	    }, this.props.user.username)), permission_select);
	  }
	}
	class UserAdd extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.input = reactExports.createRef();
	    this.state = {
	      selected: null
	    };
	  }

	  /*******************************************************
	   * LIFECYCLE
	   *******************************************************/
	  componentDidMount() {
	    let component = this;
	    $(this.input.current).autocomplete({
	      source: (request, response_function) => {
	        getUserList(request.term, response => {
	          let user_list = response.user_list.map(user => {
	            return {
	              label: user.first_name + ' ' + user.last_name + ' - ' + user.username,
	              value: user.username,
	              user: user
	            };
	          });
	          response_function(user_list);
	        });
	        component.setState({
	          selected: null
	        });
	      },
	      select: (evt, ui) => {
	        this.setState({
	          selected: ui.item.user
	        });
	      },
	      minLength: 1
	    });
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  addClick(value) {
	    if (this.state.selected) {
	      this.props.permissionChange(role_keys[value], this.state.selected);
	      $(this.input.current).val(null);
	      this.setState({
	        selected: null
	      });
	    }
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let user;
	    if (this.state.selected) {
	      user = /*#__PURE__*/reactExports.createElement(UserLabel, {
	        user: this.state.selected,
	        type: "add",
	        addFunction: this.addClick.bind(this)
	      });
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "user-add"
	    }, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Add A User'), ":"), /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Begin typing to search users. Select the desired user then click Share.')), /*#__PURE__*/reactExports.createElement("input", {
	      ref: this.input
	    }), user);
	  }
	}
	class StudentManagement extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.tiny_loader = new TinyLoader($('body'));
	    this.state = {
	      owner: null,
	      teacher: [],
	      student: []
	    };
	  }

	  /*******************************************************
	   * LIFECYCLE
	   *******************************************************/
	  componentDidMount() {
	    getUsersForLiveProject(this.props.data.id, response => {
	      this.setState({
	        owner: response.author,
	        student: response.students,
	        teacher: response.teachers
	      });
	    });
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  setUserPermission(permission_type, user) {
	    this.tiny_loader.startLoad();
	    setLiveProjectRole(user.id, this.props.data.id, permission_type, () => {
	      getUsersForLiveProject(this.props.data.id, response => {
	        this.setState({
	          owner: response.author,
	          student: response.students,
	          teacher: response.teachers
	        });
	        this.tiny_loader.endLoad();
	      });
	    });
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    if (this.state.owner == null) return null;
	    let owner = /*#__PURE__*/reactExports.createElement(UserLabel, {
	      user: this.state.owner,
	      type: 'owner'
	    });
	    let teachers = this.state.teacher.map(user => /*#__PURE__*/reactExports.createElement(UserLabel, {
	      user: user,
	      type: 'teacher',
	      permissionChange: this.setUserPermission.bind(this)
	    }));
	    let students = this.state.student.map(user => /*#__PURE__*/reactExports.createElement(UserLabel, {
	      user: user,
	      type: 'student',
	      permissionChange: this.setUserPermission.bind(this)
	    }));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "user-text"
	    }, /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('Student Management') + ':'), /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Owned By'), ":"), /*#__PURE__*/reactExports.createElement("div", null, owner), /*#__PURE__*/reactExports.createElement("div", {
	      className: "user-panel"
	    }, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Teachers'), ":"), /*#__PURE__*/reactExports.createElement("ul", {
	      className: "user-list"
	    }, teachers)), /*#__PURE__*/reactExports.createElement("div", {
	      className: "user-panel"
	    }, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Enrolled Users'), ":"), /*#__PURE__*/reactExports.createElement("ul", {
	      className: "user-list"
	    }, students)), /*#__PURE__*/reactExports.createElement(UserAdd, {
	      permissionChange: this.setUserPermission.bind(this)
	    }));
	  }
	}

	class LiveProjectStudents extends LiveProjectSection {
	  render() {
	    if (!this.state.data) return this.defaultRender();
	    let liveproject = this.state.data.liveproject;
	    let register_link;
	    if (liveproject && liveproject.registration_hash) {
	      let register_url = window.config.registration_path.replace('project_hash', liveproject.registration_hash);
	      register_link = /*#__PURE__*/reactExports.createElement("div", {
	        className: "user-text"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "user-panel"
	      }, /*#__PURE__*/reactExports.createElement("h4", null, "Student Registration:"), /*#__PURE__*/reactExports.createElement("p", null, window.gettext('Student Registration Link: ')), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("img", {
	        id: "copy-text",
	        className: "hover-shade",
	        onClick: () => {
	          navigator.clipboard.writeText(register_url);
	          $('#copy-text').attr('src', window.config.icon_path + 'duplicate_checked.svg');
	          $('#url-text').text('Copied to Clipboard');
	          setTimeout(() => {
	            $('#copy-text').attr('src', window.config.icon_path + 'duplicate_clipboard.svg');
	            $('#url-text').text(register_url);
	          }, 1000);
	        },
	        title: window.gettext('Copy to clipboard'),
	        src: window.config.icon_path + 'duplicate_clipboard.svg'
	      }), /*#__PURE__*/reactExports.createElement("a", {
	        id: "url-text",
	        className: "selectable",
	        href: register_url
	      }, register_url))));
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-details"
	    }, /*#__PURE__*/reactExports.createElement(StudentManagement, {
	      data: this.state.data.liveproject
	    }), register_link);
	  }
	}

	class LiveProjectCompletionTable extends LiveProjectSection {
	  render() {
	    if (!this.state.data) return this.defaultRender();
	    this.state.liveproject;
	    let head = this.state.data.assignments.map(assignment => /*#__PURE__*/reactExports.createElement("th", {
	      className: "table-cell nodewrapper"
	    }, /*#__PURE__*/reactExports.createElement(AssignmentViewSmall, {
	      renderer: this.props.renderer,
	      data: assignment
	    })));
	    let assignment_ids = this.state.data.assignments.map(assignment => assignment.id);
	    let body = this.state.data.table_rows.map((row, row_index) => /*#__PURE__*/reactExports.createElement("tr", {
	      className: "outcome-row"
	    }, /*#__PURE__*/reactExports.createElement("td", {
	      className: "user-head outcome-head"
	    }, getUserDisplay(row.user)), assignment_ids.map(id => {
	      let assignment = row.assignments.find(row_element => row_element.assignment == id);
	      if (!assignment) return /*#__PURE__*/reactExports.createElement("td", {
	        className: "table-cell"
	      });
	      return /*#__PURE__*/reactExports.createElement("td", {
	        className: "table-cell"
	      }, /*#__PURE__*/reactExports.createElement("input", {
	        onChange: this.toggleCompletion.bind(this, assignment.id, row_index),
	        type: "checkbox",
	        checked: assignment.completed
	      }));
	    }), /*#__PURE__*/reactExports.createElement("td", {
	      className: "table-cell total-cell grand-total-cell"
	    }, row.assignments.reduce((total, assignment) => total + assignment.completed, 0) + '/' + row.assignments.length)));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-details"
	    }, /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('Table'), ":"), /*#__PURE__*/reactExports.createElement("table", {
	      className: "user-table outcome-table node-rows"
	    }, /*#__PURE__*/reactExports.createElement("tr", {
	      className: "outcome-row node-row"
	    }, /*#__PURE__*/reactExports.createElement("th", {
	      className: "user-head outcome-head empty"
	    }), head, /*#__PURE__*/reactExports.createElement("th", {
	      className: "table-cell nodewrapper total-cell grand-total-cell"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "total-header"
	    }, window.gettext('Total'), ":"))), body));
	  }
	  toggleCompletion(id, row_index, evt) {
	    setAssignmentCompletion(id, evt.target.checked);
	    let new_data = {
	      ...this.state.data
	    };
	    new_data.table_rows = new_data.table_rows.slice();
	    new_data.table_rows[row_index] = {
	      ...new_data.table_rows[row_index]
	    };
	    new_data.table_rows[row_index].assignments = new_data.table_rows[row_index].assignments.slice();
	    let index = new_data.table_rows[row_index].assignments.findIndex(assignment => assignment.id == id);
	    new_data.table_rows[row_index].assignments[index] = {
	      ...new_data.table_rows[row_index].assignments[index],
	      completed: evt.target.checked
	    };
	    this.setState({
	      data: new_data
	    });
	  }
	}

	class LiveProjectSettings extends LiveProjectSection {
	  constructor(props) {
	    super(props);
	    this.state = {
	      has_changed: false,
	      liveproject: null
	    };
	    this.changed_values = {};
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/

	  changeField(type, new_value) {
	    let new_state = {
	      ...this.state.data.liveproject
	    };
	    new_state[type] = new_value;
	    this.changed_values[type] = new_value;
	    this.setState({
	      has_changed: true,
	      data: {
	        ...this.state.data,
	        liveproject: new_state
	      }
	    });
	  }
	  saveChanges() {
	    updateLiveProjectValue(this.state.data.liveproject.id, 'liveproject', this.changed_values);
	    this.props.updateLiveProject({
	      liveproject: {
	        ...this.state.data.liveproject,
	        ...this.changed_values
	      }
	    });
	    this.changed_values = {};
	    this.setState({
	      has_changed: false
	    });
	  }
	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    if (!this.state.data) return this.defaultRender();
	    console.log(this.state);
	    let data = this.state.data.liveproject;
	    let changeField = this.changeField.bind(this);
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-details"
	    }, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Classroom configuration'), ":"), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("input", {
	      id: "default-single-completion",
	      name: "default-single-completion",
	      type: "checkbox",
	      checked: data.default_single_completion,
	      onChange: evt => changeField('default_single_completion', evt.target.checked)
	    }), /*#__PURE__*/reactExports.createElement("label", {
	      htmlFor: "default-signle-completion",
	      title: window.gettext('Whether to mark the assignment as complete if any user has completed it.')
	    }, window.gettext('By default, mark assignments as complete when a single user has completed them'))), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("input", {
	      id: "default-assign-to-all",
	      name: "default-assign-to-all",
	      type: "checkbox",
	      checked: data.default_assign_to_all,
	      onChange: evt => changeField('default_assign_to_all', evt.target.checked)
	    }), /*#__PURE__*/reactExports.createElement("label", {
	      htmlFor: "default-assign-to-all",
	      title: window.gettext('Whether creating an assignment automatically adds all students to it.')
	    }, window.gettext('Assign new assignments to all students by default'))), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("input", {
	      id: "default-self-reporting",
	      name: "default-self-reporting",
	      type: "checkbox",
	      checked: data.default_self_reporting,
	      onChange: evt => changeField('default_self_reporting', evt.target.checked)
	    }), /*#__PURE__*/reactExports.createElement("label", {
	      htmlFor: "default-self-reporting",
	      title: window.gettext('Whether students can mark their own assignments as complete.')
	    }, window.gettext('Let students self-report their assignment completion by default'))), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("input", {
	      id: "default-all-workflows-visible",
	      name: "default-all-workflows-visible",
	      type: "checkbox",
	      checked: data.default_all_workflows_visible,
	      onChange: evt => changeField('default_all_workflows_visible', evt.target.checked)
	    }), /*#__PURE__*/reactExports.createElement("label", {
	      htmlFor: "default-all-workflows-visible",
	      title: window.gettext('Whether all workflows in the project will be visible to students by default.')
	    }, window.gettext('All Workflows Visible To Students'))), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("button", {
	      className: "primary-button",
	      disabled: !this.state.has_changed,
	      onClick: this.saveChanges.bind(this)
	    }, window.gettext('Save classroom changes'))));
	  }
	}

	class AssignmentWorkflowNodesDisplay extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.state = {};
	  }

	  /*******************************************************
	   * LIFECYCLE
	   *******************************************************/
	  componentDidMount() {
	    this.getData();
	  }
	  componentDidUpdate(prevProps) {
	    if (prevProps.objectID != this.props.objectID) {
	      this.setState({
	        data: null
	      }, this.getData.bind(this));
	    }
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  getData() {
	    let component = this;
	    getWorkflowNodes(this.props.objectID, data => {
	      component.setState({
	        data: data.data_package
	      });
	    });
	  }
	  defaultRender() {
	    return /*#__PURE__*/reactExports.createElement(WorkflowLoader, null);
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    if (!this.state.data) return this.defaultRender();
	    let weeks = this.state.data.weeks.map((week, i) => {
	      let nodes = week.nodes.map(node => /*#__PURE__*/reactExports.createElement(AssignmentNode, {
	        renderer: this.props.renderer,
	        data: node
	      }));
	      let default_text;
	      default_text = week.week_type_display + ' ' + (i + 1);
	      return /*#__PURE__*/reactExports.createElement("div", {
	        className: "week"
	      }, /*#__PURE__*/reactExports.createElement(TitleText, {
	        text: week.title,
	        defaultText: default_text
	      }), /*#__PURE__*/reactExports.createElement("div", {
	        className: "node-block-grid"
	      }, nodes));
	    });
	    return /*#__PURE__*/reactExports.createElement("div", null, weeks);
	  }
	}
	class AssignmentNode extends reactExports.Component {
	  render() {
	    let data = this.props.data;
	    let lefticon;
	    let righticon;
	    if (data.context_classification > 0) lefticon = /*#__PURE__*/reactExports.createElement("img", {
	      title: renderer.context_choices.find(obj => obj.type == data.context_classification).name,
	      src: window.config.icon_path + context_keys[data.context_classification] + '.svg'
	    });
	    if (data.task_classification > 0) righticon = /*#__PURE__*/reactExports.createElement("img", {
	      title: renderer.task_choices.find(obj => obj.type == data.task_classification).name,
	      src: window.config.icon_path + task_keys[data.task_classification] + '.svg'
	    });
	    let style = {
	      backgroundColor: getColumnColour(this.props.data)
	    };
	    let mouseover_actions = [this.addCreateAssignment(data)];
	    return /*#__PURE__*/reactExports.createElement("div", {
	      style: style,
	      className: "node"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "mouseover-actions"
	    }, mouseover_actions), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-top-row"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-icon"
	    }, lefticon), /*#__PURE__*/reactExports.createElement(NodeTitle, {
	      data: this.props.data
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-icon"
	    }, righticon)), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-drop-row"
	    }));
	  }
	  addCreateAssignment(data) {
	    return /*#__PURE__*/reactExports.createElement(ActionButton, {
	      button_icon: "assignment.svg",
	      button_class: "duplicate-self-button",
	      titletext: window.gettext('Create Assignment'),
	      handleClick: this.createAssignment.bind(this, data)
	    });
	  }
	  createAssignment(data) {
	    let props = this.props;
	    props.renderer.tiny_loader.startLoad();
	    createAssignment(data.id, props.renderer.project_data.id, response_data => {
	      props.renderer.tiny_loader.endLoad();
	      window.location = window.config.update_path.liveassignment.replace('0', response_data.assignmentPk);
	    });
	  }
	}
	class LiveProjectAssignments extends LiveProjectSection {
	  changeView(workflow_id) {
	    this.setState({
	      selected_id: workflow_id
	    });
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    if (!this.state.data) return this.defaultRender();
	    let assignments = this.state.data.assignments.map(assignment => /*#__PURE__*/reactExports.createElement(AssignmentView, {
	      renderer: this.props.renderer,
	      data: assignment
	    }));
	    let workflow_options = this.state.data.workflows.map(workflow => {
	      let view_class = 'hover-shade';
	      if (workflow.id == this.state.selected_id) view_class += ' active';
	      return /*#__PURE__*/reactExports.createElement("div", {
	        id: 'button_' + workflow.id,
	        className: view_class,
	        onClick: this.changeView.bind(this, workflow.id)
	      }, /*#__PURE__*/reactExports.createElement(WorkflowTitle, {
	        no_hyperlink: true,
	        data: workflow
	      }));
	    });
	    let workflow_nodes;
	    if (this.state.selected_id) {
	      workflow_nodes = /*#__PURE__*/reactExports.createElement(AssignmentWorkflowNodesDisplay, {
	        renderer: this.props.renderer,
	        objectID: this.state.selected_id
	      });
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-details"
	    }, /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('Assigned Tasks')), /*#__PURE__*/reactExports.createElement("div", null, assignments), /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('All Tasks')), /*#__PURE__*/reactExports.createElement("div", {
	      id: "select-workflow",
	      className: "workflow-view-select"
	    }, workflow_options), workflow_nodes);
	  }
	}

	/**
	 *
	 */
	class LiveProjectWorkflows extends LiveProjectSection {
	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  switchVisibility(pk, visibility) {
	    let workflows_added = this.state.data.workflows_added.slice();
	    let workflows_not_added = this.state.data.workflows_not_added.slice();
	    if (visibility == 'visible') {
	      for (let i = 0; i < workflows_not_added.length; i++) {
	        if (workflows_not_added[i].id == pk) {
	          let removed = workflows_not_added.splice(i, 1);
	          setWorkflowVisibility(this.props.objectID, pk, true);
	          workflows_added.push(removed[0]);
	        }
	      }
	    } else {
	      for (let i = 0; i < workflows_added.length; i++) {
	        if (workflows_added[i].id == pk) {
	          let removed = workflows_added.splice(i, 1);
	          setWorkflowVisibility(this.props.objectID, pk, false);
	          workflows_not_added.push(removed[0]);
	        }
	      }
	    }
	    this.setState({
	      data: {
	        ...this.state.data,
	        workflows_added: workflows_added,
	        workflows_not_added: workflows_not_added
	      }
	    });
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    if (!this.state.data) return this.defaultRender();
	    let workflows_added = this.state.data.workflows_added.map(workflow => /*#__PURE__*/reactExports.createElement(WorkflowVisibility, {
	      workflow_data: workflow,
	      visibility: "visible",
	      visibilityFunction: this.switchVisibility.bind(this)
	    }));
	    let workflows_not_added = this.state.data.workflows_not_added.map(workflow => /*#__PURE__*/reactExports.createElement(WorkflowVisibility, {
	      workflow_data: workflow,
	      visibility: "not_visible",
	      visibilityFunction: this.switchVisibility.bind(this)
	    }));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-details"
	    }, /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('Visible Workflows')), /*#__PURE__*/reactExports.createElement("div", {
	      className: "menu-grid"
	    }, workflows_added), /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('Other Workflows')), /*#__PURE__*/reactExports.createElement("div", {
	      className: "menu-grid"
	    }, workflows_not_added));
	  }
	}

	/**
	 *
	 */
	class LiveProjectMenu extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      ...props.project,
	      liveproject: this.props.liveproject,
	      view_type: 'overview'
	    };
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  getViewButtons() {
	    return [{
	      type: 'overview',
	      name: window.gettext('Classroom Overview')
	    }, {
	      type: 'students',
	      name: window.gettext('Students')
	    }, {
	      type: 'assignments',
	      name: window.gettext('Assignments')
	    }, {
	      type: 'workflows',
	      name: window.gettext('Workflow Visibility')
	    }, {
	      type: 'completion_table',
	      name: window.gettext('Completion Table')
	    }, {
	      type: 'settings',
	      name: window.gettext('Classroom Settings')
	    }];
	  }
	  getRole() {
	    return 'teacher';
	  }
	  openEdit() {
	    return null;
	  }
	  changeView(view_type) {
	    this.setState({
	      view_type: view_type
	    });
	  }
	  getHeader() {
	    return null;
	  }
	  getContent() {
	    switch (this.state.view_type) {
	      case 'overview':
	        return /*#__PURE__*/reactExports.createElement(LiveProjectOverview, {
	          renderer: this.props.renderer,
	          role: this.getRole(),
	          objectID: this.props.project.id,
	          view_type: this.state.view_type
	        });
	      case 'students':
	        return /*#__PURE__*/reactExports.createElement(LiveProjectStudents, {
	          renderer: this.props.renderer,
	          role: this.getRole(),
	          liveproject: this.state.liveproject,
	          objectID: this.props.project.id,
	          view_type: this.state.view_type
	        });
	      case 'assignments':
	        return /*#__PURE__*/reactExports.createElement(LiveProjectAssignments, {
	          renderer: this.props.renderer,
	          role: this.getRole(),
	          objectID: this.props.project.id,
	          view_type: this.state.view_type
	        });
	      case 'workflows':
	        return /*#__PURE__*/reactExports.createElement(LiveProjectWorkflows, {
	          renderer: this.props.renderer,
	          role: this.getRole(),
	          objectID: this.props.project.id,
	          view_type: this.state.view_type
	        });
	      case 'completion_table':
	        return /*#__PURE__*/reactExports.createElement(LiveProjectCompletionTable, {
	          renderer: this.props.renderer,
	          role: this.getRole(),
	          objectID: this.props.project.id,
	          view_type: this.state.view_type
	        });
	      case 'settings':
	        return /*#__PURE__*/reactExports.createElement(LiveProjectSettings, {
	          updateLiveProject: this.updateFunction.bind(this),
	          renderer: this.props.renderer,
	          role: this.getRole(),
	          liveproject: this.state.liveproject,
	          objectID: this.props.project.id,
	          view_type: this.state.view_type
	        });
	    }
	  }
	  updateFunction(new_state) {
	    this.setState(new_state);
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let data = this.props.project;
	    let overflow_links = [];
	    if (this.props.renderer.user_permission > 0) {
	      overflow_links.push( /*#__PURE__*/reactExports.createElement("a", {
	        id: "project",
	        className: "hover-shade",
	        href: window.config.update_path.project.replace('0', data.id)
	      }, window.gettext('Edit Project')));
	    }
	    let view_buttons = this.getViewButtons().map(item => {
	      let view_class = 'hover-shade';
	      if (item.type == this.state.view_type) view_class += ' active';
	      return /*#__PURE__*/reactExports.createElement("a", {
	        id: 'button_' + item.type,
	        className: view_class,
	        onClick: this.changeView.bind(this, item.type)
	      }, item.name);
	    });
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-menu"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-header"
	    }, /*#__PURE__*/reactExports.createElement(WorkflowForMenu, {
	      no_hyperlink: true,
	      workflow_data: this.state.liveproject,
	      selectAction: this.openEdit.bind(this)
	    }), this.getHeader()), /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-view-select hide-print"
	    }, view_buttons), /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-container"
	    }, this.getContent()), reactDomExports.createPortal(overflow_links, $('#overflow-links')[0]));
	  }
	}

	class StudentLiveProjectOverview extends LiveProjectSection {
	  render() {
	    if (!this.state.data) return this.defaultRender();
	    let workflows = this.state.data.workflows.map(workflow => /*#__PURE__*/reactExports.createElement(SimpleWorkflow, {
	      workflow_data: workflow
	    }));
	    if (workflows.length == 0) workflows = window.gettext('No workflows have been made visible to students.');
	    let assignments = this.state.data.assignments.filter(assignment => assignment.user_assignment.completed == false).map(assignment => /*#__PURE__*/reactExports.createElement("tr", null, /*#__PURE__*/reactExports.createElement("td", null, /*#__PURE__*/reactExports.createElement(AssignmentTitle, {
	      data: assignment,
	      user_role: this.props.renderer.user_role
	    })), /*#__PURE__*/reactExports.createElement("td", null, /*#__PURE__*/reactExports.createElement("input", {
	      type: "checkbox",
	      disabled: !assignment.self_reporting,
	      onChange: this.toggleAssignment.bind(this, assignment.user_assignment.id)
	    })), /*#__PURE__*/reactExports.createElement("td", null, /*#__PURE__*/reactExports.createElement(DatePicker, {
	      default_value: assignment.end_date,
	      disabled: true
	    }))));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-details"
	    }, /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('Your Incomplete Assignments'), ":"), /*#__PURE__*/reactExports.createElement("table", {
	      className: "overview-table"
	    }, /*#__PURE__*/reactExports.createElement("tr", null, /*#__PURE__*/reactExports.createElement("th", null, window.gettext('Assignment')), /*#__PURE__*/reactExports.createElement("th", null, window.gettext('Completion')), /*#__PURE__*/reactExports.createElement("th", null, window.gettext('End Date'))), assignments), /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('Visible Workflows'), ":"), /*#__PURE__*/reactExports.createElement("div", {
	      className: "menu-grid"
	    }, workflows));
	  }
	  toggleAssignment(id, evt) {
	    setAssignmentCompletion(id, evt.target.checked);
	  }
	}

	/**
	 *
	 */
	class StudentLiveProjectWorkflows extends LiveProjectSection {
	  render() {
	    if (!this.state.data) return this.defaultRender();
	    let workflows_added = this.state.data.workflows_added.map(workflow => /*#__PURE__*/reactExports.createElement(WorkflowForMenu, {
	      workflow_data: workflow
	    }));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-details"
	    }, /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('Workflows')), /*#__PURE__*/reactExports.createElement("div", {
	      className: "menu-grid"
	    }, workflows_added));
	  }
	}

	/**
	 *
	 */
	class StudentLiveProjectAssignments extends LiveProjectSection {
	  render() {
	    if (!this.state.data) return this.defaultRender();
	    let assignments_past = this.state.data.assignments_past.map(assignment => /*#__PURE__*/reactExports.createElement(AssignmentView, {
	      renderer: this.props.renderer,
	      data: assignment
	    }));
	    let assignments_upcoming = this.state.data.assignments_upcoming.map(assignment => /*#__PURE__*/reactExports.createElement(AssignmentView, {
	      renderer: this.props.renderer,
	      data: assignment
	    }));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-details"
	    }, /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('Your Tasks'), ":"), /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Upcoming'), ":"), /*#__PURE__*/reactExports.createElement("div", null, assignments_upcoming), /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Past'), ":"), /*#__PURE__*/reactExports.createElement("div", null, assignments_past));
	  }
	}

	/**
	 *
	 */
	class StudentLiveProjectMenu extends LiveProjectMenu {
	  getViewButtons() {
	    return [{
	      type: 'overview',
	      name: window.gettext('Classroom Overview')
	    }, {
	      type: 'assignments',
	      name: window.gettext('My Assignments')
	    }, {
	      type: 'workflows',
	      name: window.gettext('My Workflows')
	    }];
	  }
	  getRole() {
	    return 'student';
	  }
	  getContent() {
	    switch (this.state.view_type) {
	      case 'overview':
	        return /*#__PURE__*/reactExports.createElement(StudentLiveProjectOverview, {
	          renderer: this.props.renderer,
	          role: this.getRole(),
	          objectID: this.props.project.id,
	          view_type: this.state.view_type
	        });
	      case 'assignments':
	        return /*#__PURE__*/reactExports.createElement(StudentLiveProjectAssignments, {
	          renderer: this.props.renderer,
	          role: this.getRole(),
	          objectID: this.props.project.id,
	          view_type: this.state.view_type
	        });
	      case 'workflows':
	        return /*#__PURE__*/reactExports.createElement(StudentLiveProjectWorkflows, {
	          renderer: this.props.renderer,
	          role: this.getRole(),
	          objectID: this.props.project.id,
	          view_type: this.state.view_type
	        });
	    }
	  }
	  updateFunction(new_state) {
	    this.setState(new_state);
	  }
	}

	/*
	The menu for editing a project.
	*/
	class ProjectEditMenu extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      ...props.data,
	      selected_set: 'none'
	    };
	    this.object_set_updates = {};
	  }
	  /*******************************************************
	   * LIFECYCLE
	   *******************************************************/
	  componentDidMount() {
	    if (this.state.all_disciplines) this.autocompleteDiscipline();
	  }
	  componentDidUpdate() {
	    if (this.state.all_disciplines) this.autocompleteDiscipline();
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  deleteTerm(id) {
	    if (window.confirm(window.gettext('Are you sure you want to delete this ') + window.gettext('set') + '?')) {
	      let new_state_dict = this.state.object_sets.slice();
	      for (let i = 0; i < new_state_dict.length; i++) {
	        if (new_state_dict[i].id === id) {
	          deleteSelf(id, 'objectset');
	          new_state_dict.splice(i, 1);
	          this.setState({
	            object_sets: new_state_dict
	          });
	          break;
	        }
	      }
	    }
	  }
	  addTerm() {
	    let term = $('#nomenclature-select')[0].value;
	    let title = $('#term-singular')[0].value;
	    addTerminology(this.state.id, term, title, '', response_data => {
	      this.setState({
	        object_sets: response_data.new_dict,
	        selected_set: 'none',
	        termsingular: ''
	      });
	    });
	  }
	  termChanged(id, evt) {
	    let new_sets = this.state.object_sets.slice();
	    for (var i = 0; i < new_sets.length; i++) {
	      if (new_sets[i].id == id) {
	        new_sets[i] = {
	          ...new_sets[i],
	          title: evt.target.value
	        };
	        this.object_set_updates[id] = {
	          title: evt.target.value
	        };
	      }
	    }
	    this.setState({
	      object_sets: new_sets,
	      changed: true
	    });
	  }
	  updateTerms() {
	    for (var object_set_id in this.object_set_updates) {
	      updateValueInstant(object_set_id, 'objectset', this.object_set_updates[object_set_id]);
	    }
	  }
	  addTermDisabled(selected_set) {
	    if (!selected_set) return true;
	    if (!this.state.termsingular) return true;
	    return false;
	  }
	  addDiscipline(id) {
	    this.setState((state, props) => {
	      return {
	        disciplines: [...state.disciplines, id],
	        changed: true
	      };
	    });
	  }
	  removeDiscipline(id) {
	    this.setState((state, props) => {
	      return {
	        disciplines: state.disciplines.filter(value => value != id),
	        changed: true
	      };
	    });
	  }
	  inputChanged(field, evt) {
	    var new_state = {
	      changed: true
	    };
	    new_state[field] = evt.target.value;
	    if (field === 'selected_set') new_state['termsingular'] = '';
	    this.setState(new_state);
	  }
	  getActions() {
	    var actions = [];
	    actions.push( /*#__PURE__*/reactExports.createElement("button", {
	      className: "secondary-button",
	      onClick: closeMessageBox$1
	    }, window.gettext('Cancel')));
	    actions.push( /*#__PURE__*/reactExports.createElement("button", {
	      id: "save-changes",
	      className: "primary-button",
	      disabled: !this.state.changed,
	      onClick: () => {
	        updateValueInstant(this.state.id, 'project', {
	          title: this.state.title,
	          description: this.state.description,
	          published: this.state.published,
	          disciplines: this.state.disciplines
	        });
	        this.updateTerms();
	        this.props.actionFunction({
	          ...this.state,
	          changed: false
	        });
	        closeMessageBox$1();
	      }
	    }, window.gettext('Save Changes')));
	    return actions;
	  }
	  getLiveProjectSettings() {
	    if (this.props.data.renderer.user_role === role_keys.teacher) {
	      return /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement(LiveProjectSettings, {
	        renderer: this.props.renderer,
	        role: 'teacher',
	        objectID: this.state.id,
	        view_type: 'settings',
	        updateLiveProject: this.props.actionFunction
	      }));
	    }
	    return null;
	  }
	  autocompleteDiscipline() {
	    let choices = this.state.all_disciplines.filter(discipline => this.state.disciplines.indexOf(discipline.id) < 0).map(discipline => ({
	      value: discipline.title,
	      label: discipline.title,
	      id: discipline.id
	    }));
	    $('#project-discipline-input').autocomplete({
	      source: choices,
	      minLength: 0,
	      focus: null,
	      select: (evt, ui) => {
	        this.addDiscipline(ui.item.id);
	        $('#project-discipline-input').val('');
	        return false;
	      }
	    }).focus(function () {
	      $('#project-discipline-input').autocomplete('search', $('#project-discipline-input').val());
	    });
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    var data = this.state;
	    let disciplines;
	    if (data.all_disciplines) {
	      disciplines = data.all_disciplines.filter(discipline => data.disciplines.indexOf(discipline.id) >= 0).map(discipline => /*#__PURE__*/reactExports.createElement("div", {
	        className: "flex-middle discipline-tag"
	      }, discipline.title, /*#__PURE__*/reactExports.createElement("span", {
	        className: "material-symbols-rounded green",
	        onClick: this.removeDiscipline.bind(this, discipline.id)
	      }, "close")));
	    }
	    let title = unescapeCharacters(data.title || '');
	    let description = unescapeCharacters(data.description || '');
	    let object_sets = object_sets_types();
	    let set_options = Object.keys(object_sets).map(key => /*#__PURE__*/reactExports.createElement("option", {
	      value: key
	    }, object_sets[key]));
	    let selected_set;
	    if (this.state.selected_set) selected_set = object_sets[this.state.selected_set];
	    let sets_added = data.object_sets.map(item => /*#__PURE__*/reactExports.createElement("div", {
	      className: "nomenclature-row"
	    }, /*#__PURE__*/reactExports.createElement("div", null, object_sets[item.term]), /*#__PURE__*/reactExports.createElement("input", {
	      value: item.title,
	      onChange: this.termChanged.bind(this, item.id)
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "nomenclature-delete-button",
	      onClick: this.deleteTerm.bind(this, item.id)
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded filled green hover-shade"
	    }, "delete"))));
	    let published_enabled = data.title && data.disciplines.length > 0;
	    if (data.published && !published_enabled) this.setState({
	      published: false
	    });
	    if (!published_enabled) window.gettext('A title and at least one discipline is required for publishing.');
	    let add_term_css = 'material-symbols-rounded filled';
	    let clickEvt;
	    if (this.addTermDisabled(selected_set)) {
	      clickEvt = () => console.log('Disabled');
	      add_term_css += ' grey';
	    } else {
	      clickEvt = this.addTerm.bind(this);
	      add_term_css += ' green hover-shade';
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "message-wrap"
	    }, /*#__PURE__*/reactExports.createElement("h2", null, window.gettext('Edit project')), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Title')), /*#__PURE__*/reactExports.createElement("textarea", {
	      autoComplete: "off",
	      id: "project-title-input",
	      value: title,
	      onChange: this.inputChanged.bind(this, 'title')
	    })), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Description')), /*#__PURE__*/reactExports.createElement("textarea", {
	      autoComplete: "off",
	      id: "project-description-input",
	      value: description,
	      onChange: this.inputChanged.bind(this, 'description')
	    })), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Disciplines')), /*#__PURE__*/reactExports.createElement("div", {
	      className: "flex-middle disciplines-div"
	    }, disciplines), /*#__PURE__*/reactExports.createElement("input", {
	      autoComplete: "off",
	      id: "project-discipline-input",
	      placeholder: "Search"
	    })), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Object sets')), /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-created"
	    }, 'Define categories for outcomes or nodes'), sets_added, /*#__PURE__*/reactExports.createElement("div", {
	      className: "nomenclature-row"
	    }, /*#__PURE__*/reactExports.createElement("select", {
	      id: "nomenclature-select",
	      value: this.state.selected_set,
	      onChange: this.inputChanged.bind(this, 'selected_set')
	    }, /*#__PURE__*/reactExports.createElement("option", {
	      value: "none"
	    }, window.gettext('Select a type')), set_options), /*#__PURE__*/reactExports.createElement("input", {
	      placeholder: window.gettext('Set name'),
	      type: "text",
	      id: "term-singular",
	      maxLength: "50",
	      value: this.state.termsingular,
	      onChange: this.inputChanged.bind(this, 'termsingular'),
	      disabled: selected_set == null
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "nomenclature-add-button",
	      onClick: clickEvt
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: add_term_css
	    }, "add_circle")))), this.getLiveProjectSettings(), /*#__PURE__*/reactExports.createElement("div", {
	      className: "action-bar"
	    }, this.getActions()), /*#__PURE__*/reactExports.createElement("div", {
	      className: "window-close-button",
	      onClick: closeMessageBox$1
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded green"
	    }, "close")));
	  }
	}

	/**
	 *
	 * Creates a message box with a screen barrier for popups.
	 * The choice of which menu is displayed is determined by props.message_type.
	 *
	 */
	class MessageBox extends reactExports.Component {
	  constructor(...args) {
	    super(...args);
	    _defineProperty(this, "getMenu", () => {
	      switch (this.props.message_type) {
	        case 'linked_workflow_menu':
	        case 'target_project_menu':
	        case 'added_workflow_menu':
	        case 'workflow_select_menu':
	          return /*#__PURE__*/reactExports.createElement(WorkflowsMenu, {
	            type: this.props.message_type,
	            data: this.props.message_data,
	            actionFunction: this.props.actionFunction
	          });
	        case 'project_edit_menu':
	          return /*#__PURE__*/reactExports.createElement(ProjectEditMenu, {
	            type: this.props.message_type,
	            data: this.props.message_data,
	            actionFunction: this.props.actionFunction
	          });
	        case 'share_menu':
	          return /*#__PURE__*/reactExports.createElement(ShareMenu, {
	            data: this.props.message_data,
	            actionFunction: this.props.actionFunction
	          });
	        case 'import':
	          return /*#__PURE__*/reactExports.createElement(ImportMenu, {
	            data: this.props.message_data,
	            actionFunction: this.props.actionFunction
	          });
	        case 'export':
	          return /*#__PURE__*/reactExports.createElement(ExportMenu, {
	            data: this.props.message_data,
	            actionFunction: this.props.actionFunction
	          });
	        default:
	          return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null);
	      }
	    });
	  }
	  render() {
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "screen-barrier",
	      onClick: evt => evt.stopPropagation()
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: 'message-box ' + this.props.message_type
	    }, this.getMenu()));
	  }
	}

	/*
	Function calls to create or unmount the popup box.
	*/
	function renderMessageBox$1(data, type, updateFunction) {
	  reactDomExports.render( /*#__PURE__*/reactExports.createElement(MessageBox, {
	    message_data: data,
	    message_type: type,
	    actionFunction: updateFunction
	  }), $('#popup-container')[0]);
	}

	// @todo should probably be grouped with components/commoncomponents

	//Container for common elements for workflows
	class ConnectionBar extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      connected_users: []
	    };
	    let connection_bar = this;
	    props.renderer.connection_update_received = user_data => {
	      connection_bar.connection_update_received(user_data);
	    };
	  }
	  render() {
	    if (this.props.updateSocket.readyState === 1) {
	      let users = this.state.connected_users.map(user => /*#__PURE__*/reactExports.createElement(ConnectedUser, {
	        user_data: user
	      }));
	      return /*#__PURE__*/reactExports.createElement("div", {
	        className: "users-box"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "users-small-wrapper"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "users-small"
	      }, users.slice(0, 2))), /*#__PURE__*/reactExports.createElement("div", {
	        className: "users-more"
	      }, "..."), /*#__PURE__*/reactExports.createElement("div", {
	        className: "users-hidden"
	      }, users));
	    } else if (this.props.updateSocket.readyState === 3) {
	      return /*#__PURE__*/reactExports.createElement("div", {
	        className: "users-box connection-failed"
	      }, window.gettext('Not Connected'));
	    }
	  }
	  componentDidUpdate() {
	    let element = document.querySelector('.users-box');
	    let hasClass = element && element.classList.contains('connection-failed');
	    if (hasClass) {
	      this.connection_update();
	    }
	  }
	  componentDidMount() {
	    this.connection_update();
	  }
	  connection_update(connected = true) {
	    clearTimeout(this.connection_update.bind(this));
	    if (this.props.updateSocket.readyState === 1) {
	      this.props.updateSocket.send(JSON.stringify({
	        type: 'connection_update',
	        user_data: {
	          user_id: user_id,
	          user_name: user_name,
	          user_colour: myColour,
	          connected: connected
	        }
	      }));
	    }
	    setTimeout(this.connection_update.bind(this), 30000);
	  }
	  connection_update_received(user_data) {
	    if (user_data.connected) {
	      let connected_users = this.state.connected_users.slice();
	      let found_user = false;
	      for (let i = 0; i < connected_users.length; i++) {
	        if (connected_users[i].user_id === user_data.user_id) {
	          found_user = true;
	          clearTimeout(connected_users[i].timeout);
	          connected_users[i] = {
	            ...user_data,
	            timeout: setTimeout(this.removeConnection.bind(this, user_data), 60000)
	          };
	          break;
	        }
	      }
	      if (!found_user) connected_users.push({
	        ...user_data,
	        timeout: setTimeout(this.removeConnection.bind(this, user_data), 60000)
	      });
	      this.setState({
	        connected_users: connected_users
	      });
	    } else {
	      this.removeConnection(user_data);
	    }
	  }
	  removeConnection(user_data) {
	    let connected_users = this.state.connected_users.slice();
	    for (let i = 0; i < connected_users.length; i++) {
	      if (connected_users[i].user_id === user_data.user_id) {
	        if (connected_users[i].timeout) clearTimeout(connected_users[i].timeout);
	        connected_users.splice(i, 1);
	        break;
	      }
	    }
	    this.setState({
	      connected_users: connected_users
	    });
	  }
	}
	class ConnectedUser extends reactExports.Component {
	  render() {
	    let data = this.props.user_data;
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "user-indicator",
	      style: {
	        backgroundColor: data.user_colour
	      },
	      title: data.user_name
	    }, data.user_name[0]);
	  }
	}

	//Basic component representing the outcome view
	class OutcomeEditViewUnconnected extends EditableComponentWithSorting {
	  constructor(props) {
	    super(props);
	    this.objectType = 'workflow';
	  }
	  render() {
	    let data = this.props.data;
	    let outcomes = data.map(category => /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-category"
	    }, /*#__PURE__*/reactExports.createElement("h4", null, category.objectset.title + ':'), /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-category-block"
	    }, category.outcomes.map(outcome => {
	      let my_class = 'outcome-workflow';
	      if (outcome.through_no_drag) my_class += ' no-drag';
	      return /*#__PURE__*/reactExports.createElement("div", {
	        className: my_class,
	        "data-child-id": outcome.id,
	        id: outcome.outcomeworkflow,
	        key: outcome.outcomeworkflow
	      }, /*#__PURE__*/reactExports.createElement(OutcomeView$1, {
	        key: outcome.id,
	        objectID: outcome.id,
	        parentID: this.props.workflow.id,
	        renderer: this.props.renderer,
	        show_horizontal: true
	      }));
	    }), this.getAddNew(category.objectset))));
	    if (outcomes.length == 0) outcomes = [/*#__PURE__*/reactExports.createElement("div", {
	      className: "emptytext"
	    }, window.gettext('Here you can add and edit outcomes for the current workflow. They will then be available in the Workflow view to tag nodes in the Outcomes tab of the sidebar.')), this.getAddNew({})];
	    return /*#__PURE__*/reactExports.createElement("div", {
	      id: '#workflow-' + this.props.workflow.id,
	      className: "workflow-details"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-edit",
	      ref: this.maindiv
	    }, outcomes));
	  }
	  getAddNew(objectset) {
	    let add_new_outcome;
	    if (!this.props.renderer.read_only) add_new_outcome = /*#__PURE__*/reactExports.createElement("div", {
	      id: "add-new-outcome",
	      className: "menu-create hover-shade",
	      onClick: this.addNew.bind(this, objectset)
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      className: "create-button",
	      src: window.config.icon_path + 'add_new_white.svg'
	    }), /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Add new')));
	    return add_new_outcome;
	  }
	  componentDidMount() {
	    this.makeDragAndDrop();
	  }
	  componentDidUpdate() {
	    this.makeDragAndDrop();
	  }
	  stopSortFunction() {}
	  makeDragAndDrop() {
	    this.makeSortableNode($(this.maindiv.current).find('.outcome-workflow').not('ui-draggable'), this.props.objectID, 'outcomeworkflow', '.outcome-workflow');
	    if (this.props.data.depth == 0) this.makeDroppable();
	  }
	  sortableMovedFunction(id, new_position, type, new_parent, child_id) {
	    this.props.renderer.micro_update(moveOutcomeWorkflow(id, new_position, this.props.workflow.id, child_id));
	    insertedAt(this.props.renderer, child_id, 'outcome', this.props.workflow.id, 'workflow', new_position, 'outcomeworkflow');
	  }
	  addNew(objectset) {
	    newOutcome(this.props.workflow.id, objectset.id);
	  }
	}
	const mapEditViewStateToProps = state => ({
	  data: getSortedOutcomesFromOutcomeWorkflowSet(state, state.workflow.outcomeworkflow_set),
	  workflow: state.workflow
	});
	var OutcomeEditView = connect(mapEditViewStateToProps, null)(OutcomeEditViewUnconnected);
	class ParentOutcomeNodeViewUnconnected extends reactExports.Component {
	  render() {
	    let data = this.props.data;
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "parent-outcome-node"
	    }, this.getContents(data.degree), /*#__PURE__*/reactExports.createElement(ParentOutcomeView, {
	      objectID: data.outcome,
	      renderer: this.props.renderer
	    }));
	  }
	  getContents(completion_status) {
	    if (this.props.outcomes_type == 0 || completion_status & 1) {
	      return /*#__PURE__*/reactExports.createElement("img", {
	        className: "self-completed",
	        src: window.config.icon_path + 'solid_check.svg'
	      });
	    }
	    let contents = [];
	    if (completion_status & 2) {
	      let divclass = '';
	      contents.push( /*#__PURE__*/reactExports.createElement("div", {
	        className: 'outcome-introduced outcome-degree' + divclass
	      }, "I"));
	    }
	    if (completion_status & 4) {
	      let divclass = '';
	      contents.push( /*#__PURE__*/reactExports.createElement("div", {
	        className: 'outcome-developed outcome-degree' + divclass
	      }, "D"));
	    }
	    if (completion_status & 8) {
	      let divclass = '';
	      contents.push( /*#__PURE__*/reactExports.createElement("div", {
	        className: 'outcome-advanced outcome-degree' + divclass
	      }, "A"));
	    }
	    return contents;
	  }
	}
	const mapParentOutcomeNodeStateToProps = (state, own_props) => getOutcomeNodeByID(state, own_props.objectID);
	connect(mapParentOutcomeNodeStateToProps, null)(ParentOutcomeNodeViewUnconnected);
	class ParentOutcomeViewUnconnected extends OutcomeBarOutcomeViewUnconnected {
	  render() {
	    let data = this.props.data;
	    let children = data.child_outcome_links.map(outcomeoutcome => /*#__PURE__*/reactExports.createElement(ParentOutcomeOutcomeView, {
	      key: outcomeoutcome,
	      objectID: outcomeoutcome,
	      parentID: data.id,
	      renderer: this.props.renderer
	    }));
	    let dropIcon;
	    if (this.state.is_dropped) dropIcon = 'droptriangleup';else dropIcon = 'droptriangledown';
	    let droptext;
	    if (this.state.is_dropped) droptext = window.gettext('hide');else droptext = window.gettext('show ') + children.length + ' ' + nwindow.gettext('descendant', 'descendants', children.length);
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: 'outcome' + (this.state.is_dropped && ' dropped' || '') + ' outcome-' + data.id,
	      ref: this.maindiv
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-title"
	    }, /*#__PURE__*/reactExports.createElement(OutcomeTitle, {
	      data: this.props.data,
	      prefix: this.props.prefix,
	      hovertext: this.props.hovertext
	    })), /*#__PURE__*/reactExports.createElement("input", {
	      className: "outcome-toggle-checkbox",
	      type: "checkbox",
	      title: "Toggle highlighting",
	      onChange: this.clickFunction.bind(this)
	    }), data.depth < 2 && data.child_outcome_links.length > 0 && /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-drop",
	      onClick: this.toggleDrop.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-drop-img"
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + dropIcon + '.svg'
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-drop-text"
	    }, droptext)), /*#__PURE__*/reactExports.createElement("div", {
	      className: "children-block",
	      id: this.props.objectID + '-children-block',
	      ref: this.children_block
	    }, children));
	  }
	}
	const mapOutcomeBarOutcomeStateToProps = (state, own_props) => ({
	  ...getOutcomeByID(state, own_props.objectID),
	  nodes: state.outcomenode.filter(outcomenode => outcomenode.outcome == own_props.objectID).map(outcomenode => outcomenode.node),
	  horizontaloutcomes: state.outcomehorizontallink.filter(ochl => ochl.parent_outcome == own_props.objectID).map(ochl => ochl.outcome)
	});
	const ParentOutcomeView = connect(mapOutcomeBarOutcomeStateToProps, null)(ParentOutcomeViewUnconnected);
	class ParentOutcomeOutcomeViewUnconnected extends reactExports.Component {
	  render() {
	    let data = this.props.data;
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-outcome",
	      id: data.id,
	      ref: this.maindiv
	    }, /*#__PURE__*/reactExports.createElement(ParentOutcomeView, {
	      objectID: data.child,
	      parentID: this.props.parentID,
	      throughParentID: data.id,
	      renderer: this.props.renderer
	    }));
	  }
	}
	const mapParentOutcomeOutcomeStateToProps = (state, own_props) => getOutcomeOutcomeByID(state, own_props.objectID);
	const ParentOutcomeOutcomeView = connect(mapParentOutcomeOutcomeStateToProps, null)(ParentOutcomeOutcomeViewUnconnected);
	class OutcomeBarUnconnected extends reactExports.Component {
	  render() {
	    let data = this.props.data;
	    var outcomebaroutcomes = data.map(category => [/*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("h4", null, category.objectset.title), category.outcomes.map(outcome => /*#__PURE__*/reactExports.createElement(OutcomeBarOutcomeView$1, {
	      key: outcome.id,
	      objectID: outcome.id,
	      renderer: this.props.renderer
	    })))]);
	    if (outcomebaroutcomes.length == 0) {
	      outcomebaroutcomes = window.gettext('Add outcomes to this workflow in by clicking the button below.');
	    }
	    let edittext = capWords(window.gettext('Edit') + ' ' + window.gettext(this.props.workflow_type + ' outcomes'));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      id: "outcome-bar-workflow",
	      className: "right-panel-inner"
	    }, /*#__PURE__*/reactExports.createElement("h3", {
	      className: "drag-and-drop"
	    }, window.gettext('Outcomes')), /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-bar-outcome-block"
	    }, outcomebaroutcomes), !this.props.renderer.read_only && /*#__PURE__*/reactExports.createElement("button", {
	      className: "primary-button",
	      id: "edit-outcomes-button",
	      onClick: this.editOutcomesClick.bind(this)
	    }, edittext), /*#__PURE__*/reactExports.createElement("hr", null));
	  }
	  editOutcomesClick() {
	    this.props.renderer.render($('#container'), 'outcomeedit');
	  }
	}
	const mapOutcomeBarStateToProps = state => ({
	  data: getSortedOutcomesFromOutcomeWorkflowSet(state, state.workflow.outcomeworkflow_set),
	  workflow_type: state.workflow.type
	});
	const OutcomeBar = connect(mapOutcomeBarStateToProps, null)(OutcomeBarUnconnected);
	class ParentOutcomeBarUnconnected extends reactExports.Component {
	  render() {
	    let data = this.props.data;
	    var outcomebaroutcomes = data.map(category => [/*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("h4", null, category.objectset.title), category.outcomes.map(outcome => /*#__PURE__*/reactExports.createElement("div", {
	      className: "parent-outcome-node"
	    }, getCompletionImg(outcome.degree, 1), /*#__PURE__*/reactExports.createElement(ParentOutcomeView, {
	      key: outcome.id,
	      objectID: outcome.id,
	      renderer: this.props.renderer
	    }))))]);
	    if (outcomebaroutcomes.length == 0) {
	      outcomebaroutcomes = window.gettext("Here you can find outcomes from the workflows that contain a node linked to this workflow. This allows you to create relationships between the outcomes at different levels (ex. program to course), called 'alignment'. Link this workflow to a node in another to do so.");
	    }
	    let multiple_parent_warning;
	    if (this.props.parent_nodes.length > 1) {
	      multiple_parent_warning = /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("span", {
	        className: "material-symbols-rounded filled small-inline red"
	      }, "error"), window.gettext('Warning: you have linked this workflow to multiple nodes. This is not recommended. You may see outcomes from different parent workflows, or duplicates of outcomes.'));
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      id: "outcome-bar-workflow",
	      className: "right-panel-inner"
	    }, /*#__PURE__*/reactExports.createElement("h3", {
	      className: "drag-and-drop"
	    }, window.gettext('Outcomes from Parent Workflow')), /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-bar-outcome-block"
	    }, multiple_parent_warning, outcomebaroutcomes));
	  }
	}
	const mapParentOutcomeBarStateToProps = state => {
	  return {
	    data: getSortedOutcomeNodesFromNodes(state, state.parent_node),
	    workflow: state.workflow,
	    parent_nodes: state.parent_node
	  };
	};
	const ParentOutcomeBar = connect(mapParentOutcomeBarStateToProps, null)(ParentOutcomeBarUnconnected);

	//Basic component to represent a Strategy
	class StrategyView extends Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'strategy';
	    this.objectClass = '.strategy';
	    this.node_block = reactExports.createRef();
	  }
	  render() {
	    let data = this.props.data;
	    var title;
	    if (data) title = data.title;
	    if (!title) title = 'untitled strategy';
	    let strategy_icon;
	    if (data.strategy_icon) strategy_icon = /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + strategy_keys[data.strategy_icon] + '.svg'
	    });
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "strategy-bar-strategy strategy new-strategy",
	      ref: this.maindiv
	    }, strategy_icon, /*#__PURE__*/reactExports.createElement("div", null, title));
	  }
	  makeDraggable() {
	    let draggable_selector = 'week-workflow';
	    let draggable_type = 'weekworkflow';
	    $(this.maindiv.current).draggable({
	      helper: (e, item) => {
	        var helper = $(document.createElement('div'));
	        helper.addClass('week-ghost');
	        helper.appendTo(document.body);
	        return helper;
	      },
	      cursor: 'move',
	      cursorAt: {
	        top: 20,
	        left: 100
	      },
	      distance: 10,
	      start: (e, ui) => {
	        $('.workflow-canvas').addClass('dragging-' + draggable_type);
	        $(draggable_selector).addClass('dragging');
	      },
	      stop: (e, ui) => {
	        $('.workflow-canvas').removeClass('dragging-' + draggable_type);
	        $(draggable_selector).removeClass('dragging');
	      }
	    });
	  }
	  componentDidMount() {
	    this.makeDraggable();
	    $(this.maindiv.current)[0].dataDraggable = {
	      strategy: this.props.data.id
	    };
	  }
	}
	const mapStrategyStateToProps = (state, own_props) => getStrategyByID(state, own_props.objectID);
	var StrategyView$1 = connect(mapStrategyStateToProps, null)(StrategyView);

	//Represents the entire outcomeview, barring top level workflow stuff
	class WorkflowOutcomeView extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'workflow';
	  }
	  render() {
	    let nodecategory = this.getNodecategory();
	    let nodecategory_json = JSON.stringify(nodecategory);
	    if (this.nodecategory_json === nodecategory_json) nodecategory = this.nodecategory;else {
	      this.nodecategory = nodecategory;
	      this.nodecategory_json = nodecategory_json;
	    }
	    let outcomes_sorted = this.getOutcomesSorted();
	    let has_nodes = false;
	    for (let i = 0; i < nodecategory.length; i++) {
	      if (nodecategory[i].nodes.length > 0) {
	        has_nodes = true;
	        break;
	      }
	    }
	    if (outcomes_sorted.length === 0 || !has_nodes) {
	      let text;
	      if (this.props.renderer.view_type === 'outcometable') text = window.gettext('This view renders a table showing the relationships between nodes and outcomes. Add outcomes and nodes to the workflow to get started.');

	      //else text = window.gettext("This view renders a table showing the relationships between this workflow's outcomes and the outcomes of their linked workflows. To use this feature, you must link the nodes in this workflow to child workflows (ex. program nodes to course workflows) and ensure that those child workflows have their own sets of outcomes.");
	      return /*#__PURE__*/reactExports.createElement("div", {
	        className: "emptytext"
	      }, text);
	    } else {
	      let nodes;
	      nodes = nodecategory.map(nodecategory => /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-group"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell nodewrapper blank-cell"
	      }), /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell nodewrapper total-cell"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "node-category-header"
	      }, nodecategory.title)), nodecategory.nodes.map(node => /*#__PURE__*/reactExports.createElement(NodeOutcomeView, {
	        renderer: this.props.renderer,
	        objectID: node
	      }))));
	      let outcomes = outcomes_sorted.map(category => /*#__PURE__*/reactExports.createElement("div", null, this.props.object_sets.length > 0 && /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-row outcome-category"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-head"
	      }, /*#__PURE__*/reactExports.createElement("h4", null, category.objectset.title))), category.outcomes.map(outcome => /*#__PURE__*/reactExports.createElement(TableOutcomeBase, {
	        key: outcome,
	        renderer: this.props.renderer,
	        objectID: outcome,
	        nodecategory: nodecategory,
	        outcomes_type: this.props.outcomes_type,
	        type: "outcome_table"
	      }))));
	      return /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-table node-rows"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-row node-row"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-wrapper"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-head empty"
	      })), /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-cells"
	      }, nodes), /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell blank-cell"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "node-category-header"
	      })), /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell total-cell grand-total-cell"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "total-header"
	      }, "Grand Total"))), outcomes);
	    }
	  }
	  getOutcomesSorted() {
	    return getSortedOutcomeIDFromOutcomeWorkflowSet(this.props.outcomes, this.props.outcomeworkflows, this.props.outcomeworkflow_order, this.props.object_sets);
	  }
	  getNodecategory() {
	    let week_order = filterThenSortByID(this.props.weekworkflows, this.props.weekworkflow_order).map(weekworkflow => weekworkflow.week);
	    let weeks_ordered = filterThenSortByID(this.props.weeks, week_order);
	    let nodeweek_order = [].concat(...weeks_ordered.map(week => week.nodeweek_set));
	    let nodeweeks_ordered = filterThenSortByID(this.props.nodeweeks, nodeweek_order);
	    let node_order = nodeweeks_ordered.map(nodeweek => nodeweek.node);
	    let nodes_ordered = filterThenSortByID(this.props.nodes, node_order).filter(node => !checkSetHidden(node, this.props.object_sets));
	    switch (parseInt(this.props.outcomes_sort)) {
	      case 0:
	        let nodes_allowed = nodes_ordered.map(node => node.id);
	        nodeweeks_ordered = nodeweeks_ordered.filter(nodeweek => nodes_allowed.indexOf(nodeweek.node) >= 0);
	        let nodes_by_week = {};
	        for (let i = 0; i < nodeweeks_ordered.length; i++) {
	          let nodeweek = nodeweeks_ordered[i];
	          pushOrCreate(nodes_by_week, nodeweek.week, nodeweek.node);
	        }
	        return weeks_ordered.map((week, index) => {
	          return {
	            title: week.title || week.week_type_display + ' ' + (index + 1),
	            nodes: nodes_by_week[week.id] || []
	          };
	        });
	      case 1:
	        let column_order = filterThenSortByID(this.props.columnworkflows, this.props.columnworkflow_order).map(columnworkflow => columnworkflow.column);
	        let columns_ordered = filterThenSortByID(this.props.columns, column_order);
	        let nodes_by_column = {};
	        for (let i = 0; i < nodes_ordered.length; i++) {
	          let node = nodes_ordered[i];
	          pushOrCreate(nodes_by_column, node.column, node.id);
	        }
	        return columns_ordered.map((column, index) => {
	          return {
	            title: column.title || column.column_type_display,
	            nodes: nodes_by_column[column_order[index]] || []
	          };
	        });
	      case 2:
	        var workflow_type = ['activity', 'course', 'program'].indexOf(this.props.workflow_type);
	        let task_ordered = this.props.renderer.task_choices.filter(x => x.type == 0 || x.type > 100 * workflow_type && x.type < 100 * (workflow_type + 1));
	        let nodes_by_task = {};
	        for (let i = 0; i < nodes_ordered.length; i++) {
	          let node = nodes_ordered[i];
	          pushOrCreate(nodes_by_task, node.task_classification, node.id);
	        }
	        return task_ordered.map(task => {
	          return {
	            title: task.name,
	            nodes: nodes_by_task[task.type] || []
	          };
	        });
	      case 3:
	        var workflow_type = ['activity', 'course', 'program'].indexOf(this.props.workflow_type);
	        let context_ordered = this.props.renderer.context_choices.filter(x => x.type == 0 || x.type > 100 * workflow_type && x.type < 100 * (workflow_type + 1));
	        let nodes_by_context = {};
	        for (let i = 0; i < nodes_ordered.length; i++) {
	          let node = nodes_ordered[i];
	          pushOrCreate(nodes_by_context, node.context_classification, node.id);
	        }
	        return context_ordered.map(context => {
	          return {
	            title: context.name,
	            nodes: nodes_by_context[context.type] || []
	          };
	        });
	    }
	  }
	}
	const mapStateToProps$3 = (state, own_props) => {
	  return {
	    workflow_type: state.workflow.type,
	    weekworkflows: state.weekworkflow,
	    weeks: state.week,
	    nodeweeks: state.nodeweek,
	    nodes: state.node,
	    object_sets: state.objectset,
	    weekworkflow_order: state.workflow.weekworkflow_set,
	    columnworkflow_order: state.workflow.columnworkflow_set,
	    columnworkflows: state.columnworkflow,
	    columns: state.column,
	    outcomes_sort: state.workflow.outcomes_sort,
	    outcomeworkflow_order: state.workflow.outcomeworkflow_set,
	    outcomeworkflows: state.outcomeworkflow,
	    outcomes: state.outcome
	  };
	};
	var WorkflowOutcomeView$1 = connect(mapStateToProps$3, null)(WorkflowOutcomeView);

	class LegendLine extends reactExports.Component {
	  render() {
	    let icon;
	    if (this.props.icon) icon = /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + this.props.icon + '.svg'
	    });else icon = /*#__PURE__*/reactExports.createElement("div", {
	      className: this.props.divclass
	    }, this.props.div);
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "legend-line"
	    }, icon, /*#__PURE__*/reactExports.createElement("div", null, this.props.text));
	  }
	}
	class WorkflowLegend extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      show_legend: JSON.parse(localStorage.getItem('show_legend')),
	      show_slider: false
	    };
	  }
	  render() {
	    if (!this.state.show_legend) return this.getSlider();
	    let contexts = this.props.contexts.map(value => /*#__PURE__*/reactExports.createElement(LegendLine, {
	      icon: context_keys[value],
	      text: this.props.renderer.context_choices.find(obj => obj.type == value).name
	    }));
	    let tasks = this.props.tasks.map(value => /*#__PURE__*/reactExports.createElement(LegendLine, {
	      icon: task_keys[value],
	      text: this.props.renderer.task_choices.find(obj => obj.type == value).name
	    }));
	    let strategies = this.props.strategies.map(value => /*#__PURE__*/reactExports.createElement(LegendLine, {
	      icon: strategy_keys[value],
	      text: this.props.renderer.strategy_classification_choices.find(obj => obj.type == value).name
	    }));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-legend"
	    }, this.getSlider(), /*#__PURE__*/reactExports.createElement("h4", null, "Legend"), contexts.length > 0 && /*#__PURE__*/reactExports.createElement("div", {
	      className: "legend-section"
	    }, /*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement("h5", null, "Contexts:"), contexts), contexts.length > 0 && /*#__PURE__*/reactExports.createElement("div", {
	      className: "legend-section"
	    }, /*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement("h5", null, "Tasks:"), tasks), contexts.length > 0 && /*#__PURE__*/reactExports.createElement("div", {
	      className: "legend-section"
	    }, /*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement("h5", null, "Strategies:"), strategies), /*#__PURE__*/reactExports.createElement("div", {
	      className: "window-close-button",
	      onClick: this.toggle.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + 'close.svg'
	    })));
	  }
	  toggle() {
	    localStorage.setItem('show_legend', !this.state.show_legend);
	    this.setState({
	      show_legend: !this.state.show_legend
	    });
	  }
	  getSlider() {
	    if (this.state.show_slider) {
	      return reactDomExports.createPortal([/*#__PURE__*/reactExports.createElement("div", null, window.gettext('Legend')), /*#__PURE__*/reactExports.createElement(Slider, {
	        checked: this.state.show_legend,
	        toggleAction: this.toggle.bind(this)
	      })], $('#viewbar')[0]);
	    }
	    return null;
	  }
	  componentDidMount() {
	    $('.workflow-legend').draggable();
	    this.setState({
	      show_slider: true
	    });
	  }
	}
	const mapStateToProps$2 = state => {
	  let contexts = [];
	  let tasks = [];
	  let strategies = [];
	  let uniqueTest = function (value, index, self) {
	    return self.indexOf(value) === index;
	  };
	  contexts = state.node.map(node => parseInt(node.context_classification)).filter(uniqueTest).filter(value => value > 0);
	  tasks = state.node.map(node => parseInt(node.task_classification)).filter(uniqueTest).filter(value => value > 0);
	  strategies = state.week.map(week => parseInt(week.strategy_classification)).filter(uniqueTest).filter(value => value > 0);
	  return {
	    contexts: contexts,
	    tasks: tasks,
	    strategies: strategies
	  };
	};
	var WorkflowLegend$1 = connect(mapStateToProps$2, null)(WorkflowLegend);
	class WorkflowOutcomeLegendUnconnected extends WorkflowLegend {
	  render() {
	    if (!this.state.show_legend) return this.getSlider();
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-legend"
	    }, this.getSlider(), /*#__PURE__*/reactExports.createElement("h4", null, "Legend"), /*#__PURE__*/reactExports.createElement("div", {
	      className: "legend-section"
	    }, /*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement("h5", null, "Outcomes:"), /*#__PURE__*/reactExports.createElement(LegendLine, {
	      icon: "solid_check",
	      text: "Complete"
	    }), /*#__PURE__*/reactExports.createElement(LegendLine, {
	      icon: "check",
	      text: "Completed (Auto-Calculated)"
	    }), /*#__PURE__*/reactExports.createElement(LegendLine, {
	      icon: "nocheck",
	      text: "Partially Complete"
	    })), this.props.outcomes_type == 1 && /*#__PURE__*/reactExports.createElement("div", {
	      className: "legend-section"
	    }, /*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement("h5", null, "Advanced Outcomes:"), /*#__PURE__*/reactExports.createElement(LegendLine, {
	      div: "I",
	      divclass: "outcome-introduced self-completed",
	      text: "Introduced"
	    }), /*#__PURE__*/reactExports.createElement(LegendLine, {
	      div: "D",
	      divclass: "outcome-developed self-completed",
	      text: "Developed"
	    }), /*#__PURE__*/reactExports.createElement(LegendLine, {
	      div: "A",
	      divclass: "outcome-advanced self-completed",
	      text: "Advanced"
	    }), /*#__PURE__*/reactExports.createElement(LegendLine, {
	      div: "I",
	      divclass: "outcome-introduced",
	      text: "Introduced (Auto-Calculated)"
	    }), /*#__PURE__*/reactExports.createElement(LegendLine, {
	      div: "D",
	      divclass: "outcome-developed",
	      text: "Developed (Auto-Calculated)"
	    }), /*#__PURE__*/reactExports.createElement(LegendLine, {
	      div: "A",
	      divclass: "outcome-advanced",
	      text: "Advanced (Auto-Calculated)"
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "window-close-button",
	      onClick: this.toggle.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + 'close.svg'
	    })));
	  }
	}
	const mapWorkflowOutcomeLegendStateToProps = state => {
	  return {
	    outcomes_type: state.workflow.outcomes_type
	  };
	};
	const WorkflowOutcomeLegend = connect(mapWorkflowOutcomeLegendStateToProps, null)(WorkflowOutcomeLegendUnconnected);

	//Analytics view
	class AlignmentView extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'workflow';
	    this.state = {
	      active: 0,
	      active2: 0,
	      sort: 'outcome'
	    };
	  }
	  render() {
	    let data = this.props.data;
	    let view_buttons_outcomes = this.props.outcomes.map((category, i) => {
	      return [/*#__PURE__*/reactExports.createElement("h4", null, category.objectset.title, ":"), /*#__PURE__*/reactExports.createElement("div", {
	        className: "workflow-view-select hide-print"
	      }, category.outcomes.map((outcome, j) => {
	        let view_class = 'hover-shade';
	        if (this.state.sort == 'outcome' && i == this.state.active && j == this.state.active2) view_class += ' active';
	        return /*#__PURE__*/reactExports.createElement("div", {
	          id: 'button-outcome-' + outcome.data.id,
	          className: view_class,
	          onClick: this.changeView.bind(this, i, 'outcome', j)
	        }, /*#__PURE__*/reactExports.createElement(OutcomeTitle, {
	          data: outcome.data,
	          prefix: outcome.prefix,
	          hovertext: outcome.hovertext
	        }));
	      }))];
	    });
	    let view_buttons_terms = this.props.terms.map((week, i) => {
	      let view_class = 'hover-shade';
	      if (this.state.sort == 'week' && i == this.state.active) view_class += ' active';
	      return /*#__PURE__*/reactExports.createElement("div", {
	        id: 'button-week-' + week.id,
	        className: view_class,
	        onClick: this.changeView.bind(this, i, 'week')
	      }, /*#__PURE__*/reactExports.createElement(WeekTitle, {
	        data: week,
	        rank: i
	      }));
	    });
	    let outcomes_block;
	    let terms_block;
	    let alignment_block;
	    let alignment_reverse_block;
	    let outcome_data;
	    if (this.state.sort == 'outcome') {
	      try {
	        outcome_data = this.props.outcomes[this.state.active].outcomes[this.state.active2].data;
	      } catch (err) {
	        for (var i = 0; i < this.props.outcomes.length; i++) {
	          if (this.props.outcomes[i].outcomes.length >= 1) {
	            this.changeView(i, 'outcome', 0);
	            return null;
	          }
	        }
	        if (this.state.active != -1 || this.state.active2 != 0) {
	          this.changeView(-1, 'outcome', 0);
	          return null;
	        }
	      }
	    }
	    if (this.state.active == -1) {
	      view_buttons_outcomes = window.gettext('No outcomes have been added yet. Use the Edit Outcomes menu to get started');
	    } else if (this.state.sort == 'outcome') {
	      outcomes_block = /*#__PURE__*/reactExports.createElement(AlignmentOutcomesBlock, {
	        workflow_type: data.type,
	        renderer: this.props.renderer,
	        data: outcome_data,
	        outcomes_type: data.outcomes_type
	      });
	      alignment_reverse_block = /*#__PURE__*/reactExports.createElement(AlignmentHorizontalReverseBlock, {
	        sort: "outcome",
	        renderer: this.props.renderer,
	        data: outcome_data,
	        outcomes_type: data.outcomes_type
	      });
	    }
	    if (this.state.sort == 'week') {
	      alignment_reverse_block = /*#__PURE__*/reactExports.createElement(AlignmentHorizontalReverseBlock, {
	        sort: "week",
	        renderer: this.props.renderer,
	        data: this.props.terms[this.state.active],
	        base_outcomes: this.props.outcomes,
	        outcomes_type: data.outcomes_type
	      });
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-details"
	    }, /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('Filters'), ":"), view_buttons_outcomes, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Sections'), ":"), /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-view-select hide-print"
	    }, view_buttons_terms), outcomes_block, terms_block, alignment_block, alignment_reverse_block);
	  }
	  changeView(index, sort, index2 = 0) {
	    this.setState({
	      active: index,
	      sort: sort,
	      active2: index2
	    });
	  }
	}
	const mapAlignmentStateToProps = state => {
	  let outcomes = getSortedOutcomesFromOutcomeWorkflowSet(state, state.workflow.outcomeworkflow_set).map(category => ({
	    ...category,
	    outcomes: category.outcomes.map(outcome => getOutcomeByID(state, outcome.id))
	  }));
	  return {
	    data: state.workflow,
	    outcomes: outcomes,
	    terms: filterThenSortByID(state.weekworkflow, state.workflow.weekworkflow_set).map(wwf => getWeekByID(state, wwf.week).data)
	  };
	};
	var AlignmentView$1 = connect(mapAlignmentStateToProps, null)(AlignmentView);
	class AlignmentOutcomesBlock extends reactExports.Component {
	  render() {
	    let data = this.props.data;
	    let titlestr = capWords(window.gettext(this.props.workflow_type + ' outcome'));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "alignment-block"
	    }, /*#__PURE__*/reactExports.createElement("h3", null, titlestr, ":"), /*#__PURE__*/reactExports.createElement(OutcomeView$1, {
	      renderer: this.props.renderer,
	      objectID: data.id
	    }));
	  }
	}
	const getDescendantOutcomes = (state, outcome, outcomes) => {
	  if (outcome.depth >= 2) return;
	  let children = outcome.child_outcome_links.map(id => getOutcomeOutcomeByID(state, id)).map(outcomeoutcome => getOutcomeByID(state, outcomeoutcome.data.child).data);
	  for (let i = 0; i < children.length; i++) {
	    outcomes.push(children[i].id);
	    getDescendantOutcomes(state, children[i], outcomes);
	  }
	};
	class AlignmentHorizontalReverseWeekUnconnected extends EditableComponentWithComments {
	  constructor(props) {
	    super(props);
	    this.objectType = 'week';
	    this.state = {};
	  }
	  render() {
	    let data = this.props.data;
	    let default_text = data.week_type_display + ' ' + (this.props.week_rank + 1);
	    let nodeweeks = this.props.nodeweeks.map(nodeweek => {
	      if (this.props.restriction_set && this.props.restriction_set.nodes && this.props.restriction_set.nodes.indexOf(nodeweek.node) == -1) return null;
	      return /*#__PURE__*/reactExports.createElement(AlignmentHorizontalReverseNode, {
	        objectID: nodeweek.node,
	        renderer: this.props.renderer,
	        restriction_set: this.props.restriction_set
	      });
	    });
	    let comments;
	    if (this.props.renderer.view_comments) comments = this.addCommenting();
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "week",
	      ref: this.maindiv,
	      style: this.get_border_style(),
	      onClick: evt => this.props.renderer.selection_manager.changeSelection(evt, this)
	    }, /*#__PURE__*/reactExports.createElement(TitleText, {
	      text: data.title,
	      defaultText: default_text
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-block"
	    }, nodeweeks), this.addEditable(data, true), /*#__PURE__*/reactExports.createElement("div", {
	      className: "side-actions"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "comment-indicator-container"
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "mouseover-actions"
	    }, comments));
	  }
	}
	const mapAlignmentHorizontalReverseWeekStateToProps = (state, own_props) => {
	  for (var i = 0; i < state.week.length; i++) {
	    if (state.week[i].id == own_props.objectID) {
	      let week = state.week[i];
	      let nodeweeks = filterThenSortByID(state.nodeweek, week.nodeweek_set);
	      return {
	        data: week,
	        nodeweeks: nodeweeks
	      };
	    }
	  }
	};
	const AlignmentHorizontalReverseWeek = connect(mapAlignmentHorizontalReverseWeekStateToProps, null)(AlignmentHorizontalReverseWeekUnconnected);
	class AlignmentHorizontalReverseNodeUnconnected extends EditableComponentWithComments {
	  constructor(props) {
	    super(props);
	    this.objectType = 'node';
	    this.state = {};
	  }
	  render() {
	    let data = this.props.data;
	    let data_override;
	    if (data.represents_workflow) data_override = {
	      ...data,
	      ...data.linked_workflow_data,
	      id: data.id
	    };else data_override = {
	      ...data
	    };
	    let selection_manager = this.props.renderer.selection_manager;
	    let child_outcomes_header;
	    if (this.props.child_outcomes.length > 0) {
	      child_outcomes_header = /*#__PURE__*/reactExports.createElement("div", {
	        className: "child-outcome child-outcome-header"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "half-width alignment-column"
	      }, capWords(window.gettext(data.linked_workflow_data.type + ' outcomes')) + window.gettext(' From Linked Workflow')), /*#__PURE__*/reactExports.createElement("div", {
	        className: "half-width alignment-column"
	      }, window.gettext('Associated ') + capWords(window.gettext(this.props.workflow.type + ' outcomes'))));
	    } else {
	      if (data.linked_workflow) {
	        if (this.props.child_outcomes == -1) {
	          child_outcomes_header = /*#__PURE__*/reactExports.createElement("div", {
	            className: "child-outcome child-outcome-header"
	          }, window.gettext('... LOADING'));
	          this.props.renderer.childWorkflowDataNeeded(this.props.data.id);
	        } else {
	          if (data.linked_workflow_data.deleted) {
	            child_outcomes_header = /*#__PURE__*/reactExports.createElement("div", {
	              className: "child-outcome child-outcome-header"
	            }, window.gettext('The linked workflow has been deleted.'));
	          } else {
	            child_outcomes_header = /*#__PURE__*/reactExports.createElement("div", {
	              className: "child-outcome child-outcome-header"
	            }, window.gettext('No outcomes have been added to the linked workflow. When added, they will appear here.'));
	          }
	        }
	      } else {
	        child_outcomes_header = /*#__PURE__*/reactExports.createElement("div", {
	          className: "child-outcome child-outcome-header"
	        }, window.gettext('No workflow has been linked to this node. If you link a workflow, its outcomes will appear here.'));
	      }
	    }
	    let child_outcomes;
	    if (this.props.child_outcomes != -1) child_outcomes = this.props.child_outcomes.map(child_outcome => {
	      if (!this.state.show_all && this.props.restriction_set && this.props.restriction_set.child_outcomes && this.props.restriction_set.child_outcomes.indexOf(child_outcome) == -1) return null;
	      return /*#__PURE__*/reactExports.createElement(AlignmentHorizontalReverseChildOutcome, {
	        objectID: child_outcome,
	        node_data: data,
	        renderer: this.props.renderer,
	        restriction_set: this.props.restriction_set
	      });
	    });
	    let show_all;

	    //if child outcomes are restricted, we need a show all button that expands to show all of them instead. Otherwise we only need to show the outcomes currently attached to the node.
	    let outcomenodes = this.props.outcomenodes.map(outcomenode => /*#__PURE__*/reactExports.createElement(OutcomeNodeView$1, {
	      key: outcomenode.id,
	      objectID: outcomenode.id,
	      renderer: this.props.renderer
	    }));
	    let outcome_restriction = this.props.restriction_set.parent_outcomes.filter(oc => this.props.all_node_outcomes.indexOf(oc) == -1);
	    let outcomeadder;
	    if (!this.props.renderer.read_only) outcomeadder = /*#__PURE__*/reactExports.createElement(OutcomeAdder, {
	      renderer: this.props.renderer,
	      outcome_set: outcome_restriction,
	      addFunction: updateOutcomenodeDegree.bind(this, this.props.objectID)
	    });
	    let outcomes_for_node = /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-outcomes-header"
	    }, capWords(window.gettext(this.props.workflow.type + ' outcomes')) + window.gettext(' for node:')), outcomenodes, outcomeadder);
	    let add_new_outcome;
	    if (!this.props.renderer.read_only && data.linked_workflow) add_new_outcome = /*#__PURE__*/reactExports.createElement("div", {
	      id: "add-new-outcome",
	      className: "menu-create hover-shade",
	      onClick: this.addNewChildOutcome.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      className: "create-button",
	      src: window.config.icon_path + 'add_new_white.svg'
	    }), /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Add new')));
	    if (data.linked_workflow && this.props.restriction_set && this.props.restriction_set.child_outcomes) {
	      if (this.state.show_all) {
	        show_all = /*#__PURE__*/reactExports.createElement("div", {
	          className: "alignment-added-outcomes"
	        }, add_new_outcome, outcomes_for_node, /*#__PURE__*/reactExports.createElement("div", {
	          className: "alignment-show-all",
	          onClick: () => this.setState({
	            show_all: false
	          })
	        }, '-' + window.gettext('Hide Unused')));
	      } else {
	        show_all = /*#__PURE__*/reactExports.createElement("div", {
	          className: "alignment-added-outcomes"
	        }, /*#__PURE__*/reactExports.createElement("div", {
	          className: "alignment-show-all",
	          onClick: () => this.setState({
	            show_all: true
	          })
	        }, '+' + window.gettext('Show All')));
	      }
	    } else {
	      show_all = /*#__PURE__*/reactExports.createElement("div", {
	        className: "alignment-added-outcomes"
	      }, add_new_outcome, outcomes_for_node);
	    }
	    let style = {
	      backgroundColor: getColumnColour(this.props.column)
	    };
	    if (data.lock) {
	      style.outline = '2px solid ' + data.lock.user_colour;
	    }
	    let comments;
	    if (this.props.renderer.view_comments) comments = this.addCommenting();
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-week"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      style: style,
	      className: 'node column-' + data.column,
	      onClick: evt => selection_manager.changeSelection(evt, this),
	      ref: this.maindiv
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-top-row"
	    }, /*#__PURE__*/reactExports.createElement(NodeTitle, {
	      data: data
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "outcome-block"
	    }, child_outcomes_header, child_outcomes), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-drop-row"
	    }, show_all), this.addEditable(data_override, true), /*#__PURE__*/reactExports.createElement("div", {
	      className: "side-actions"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "comment-indicator-container"
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "mouseover-actions"
	    }, comments)));
	  }
	  addNewChildOutcome() {
	    newOutcome(this.props.data.linked_workflow, null);
	  }
	}
	const mapAlignmentHorizontalReverseNodeStateToProps = (state, own_props) => {
	  for (var i = 0; i < state.node.length; i++) {
	    if (state.node[i].id == own_props.objectID) {
	      let node = state.node[i];
	      let column = state.column.find(column => column.id == node.column);
	      let outcomenodes = filterThenSortByID(state.outcomenode, node.outcomenode_unique_set);
	      if (own_props.restriction_set && own_props.restriction_set.parent_outcomes) {
	        outcomenodes = outcomenodes.filter(ocn => own_props.restriction_set.parent_outcomes.indexOf(ocn.outcome) >= 0);
	      }
	      let node_outcomes = filterThenSortByID(state.outcomenode, node.outcomenode_set).map(ocn => ocn.outcome);
	      if (!node.linked_workflow || node.linked_workflow_data.deleted) {
	        return {
	          workflow: state.workflow,
	          data: node,
	          column: column,
	          child_outcomes: [],
	          outcomenodes: outcomenodes,
	          all_node_outcomes: node_outcomes
	        };
	      }
	      let child_workflow = getChildWorkflowByID(state, node.linked_workflow);
	      let child_outcomes;
	      if (child_workflow != -1) child_outcomes = filterThenSortByID(state.outcomeworkflow, child_workflow.data.outcomeworkflow_set).map(outcomeworkflow => outcomeworkflow.outcome);else child_outcomes = -1;
	      return {
	        workflow: state.workflow,
	        data: node,
	        column: column,
	        child_outcomes: child_outcomes,
	        outcomenodes: outcomenodes,
	        all_node_outcomes: node_outcomes
	      };
	    }
	  }
	};
	const AlignmentHorizontalReverseNode = connect(mapAlignmentHorizontalReverseNodeStateToProps, null)(AlignmentHorizontalReverseNodeUnconnected);
	class OutcomeAdder extends reactExports.Component {
	  render() {
	    let options = this.props.outcome_set.map(outcome => /*#__PURE__*/reactExports.createElement(OutcomeAdderOption, {
	      objectID: outcome
	    }));
	    return /*#__PURE__*/reactExports.createElement("select", {
	      className: "outcome-adder",
	      onChange: this.onChange.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("option", {
	      value: 0
	    }, window.gettext('Add outcome')), options);
	  }
	  onChange(evt) {
	    if (evt.target.value == 0) return;
	    this.props.renderer.tiny_loader.startLoad();
	    this.props.addFunction(evt.target.value, 1, response_data => {
	      this.props.renderer.tiny_loader.endLoad();
	    });
	    $('.outcome-adder').val(0);
	  }
	}
	class OutcomeAdderOptionUnconnected extends reactExports.Component {
	  render() {
	    return /*#__PURE__*/reactExports.createElement("option", {
	      value: this.props.objectID
	    }, '\u00A0 '.repeat(this.props.data.depth) + getOutcomeTitle(this.props.data, this.props.prefix));
	  }
	}
	const mapOutcomeStateToProps = (state, own_props) => getOutcomeByID(state, own_props.objectID);
	const OutcomeAdderOption = connect(mapOutcomeStateToProps, null)(OutcomeAdderOptionUnconnected);
	class AlignmentHorizontalReverseChildOutcomeUnconnected extends reactExports.Component {
	  render() {
	    let data = this.props.data;
	    let parent_outcomes = this.props.horizontal_links.map(horizontal_link => {
	      for (var i = 0; i < this.props.outcomenodes.length; i++) {
	        if (this.props.outcomenodes[i].outcome == horizontal_link.parent_outcome) {
	          if (this.props.restriction_set && this.props.restriction_set.parent_outcomes && this.props.restriction_set.parent_outcomes.indexOf(this.props.outcomenodes[i].outcome) == -1) return null;
	          return /*#__PURE__*/reactExports.createElement(AlignmentHorizontalReverseParentOutcome, {
	            child_outcome: this.props.objectID,
	            outcomenode: this.props.outcomenodes[i],
	            renderer: this.props.renderer
	          });
	        }
	      }
	      return null;
	    });
	    let outcome_restriction = this.props.outcomenodes.filter(ocn => this.props.all_horizontal_link_outcomes.indexOf(ocn.outcome) == -1).map(ocn => ocn.outcome);
	    if (this.props.restriction_set && this.props.restriction_set.parent_outcomes) {
	      outcome_restriction = outcome_restriction.filter(oc => this.props.restriction_set.parent_outcomes.indexOf(oc) >= 0).sort((a, b) => this.props.restriction_set.parent_outcomes.indexOf(a) - this.props.restriction_set.parent_outcomes.indexOf(b));
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "child-outcome"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "half-width alignment-column"
	    }, /*#__PURE__*/reactExports.createElement(OutcomeView$1, {
	      objectID: data.id,
	      comments: true,
	      edit: true,
	      renderer: this.props.renderer
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "half-width alignment-column"
	    }, parent_outcomes, /*#__PURE__*/reactExports.createElement("div", {
	      className: "alignment-row"
	    }, /*#__PURE__*/reactExports.createElement(OutcomeAdder, {
	      renderer: this.props.renderer,
	      outcome_set: outcome_restriction,
	      addFunction: updateOutcomehorizontallinkDegree.bind(this, this.props.objectID)
	    }))));
	  }
	}
	const mapAlignmentHorizontalReverseChildOutcomeStateToProps = (state, own_props) => {
	  for (var i = 0; i < state.outcome.length; i++) {
	    if (state.outcome[i].id == own_props.objectID) {
	      let outcome = state.outcome[i];
	      let allowed_outcomenodes = filterThenSortByID(state.outcomenode, own_props.node_data.outcomenode_set);
	      let allowed_horizontal_links = filterThenSortByID(state.outcomehorizontallink, outcome.outcome_horizontal_links_unique);
	      let horizontal_link_outcomes = filterThenSortByID(state.outcomehorizontallink, outcome.outcome_horizontal_links).map(hl => hl.parent_outcome);
	      return {
	        data: outcome,
	        outcomenodes: allowed_outcomenodes,
	        horizontal_links: allowed_horizontal_links,
	        all_horizontal_link_outcomes: horizontal_link_outcomes
	      };
	    }
	  }
	};
	const AlignmentHorizontalReverseChildOutcome = connect(mapAlignmentHorizontalReverseChildOutcomeStateToProps, null)(AlignmentHorizontalReverseChildOutcomeUnconnected);
	class AlignmentHorizontalReverseParentOutcome extends reactExports.Component {
	  render() {
	    let data = this.props.outcomenode;
	    let props = this.props;
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "alignment-row"
	    }, /*#__PURE__*/reactExports.createElement(OutcomeNodeView$1, {
	      objectID: data.id,
	      renderer: this.props.renderer,
	      deleteSelfOverride: () => {
	        this.props.renderer.tiny_loader.startLoad();
	        updateOutcomehorizontallinkDegree(props.child_outcome, data.outcome, 0, response_data => {
	          props.renderer.tiny_loader.endLoad();
	        });
	      }
	    }));
	  }
	}
	class AlignmentHorizontalReverseBlockUnconnected extends reactExports.Component {
	  render() {
	    this.props.data;
	    let weekworkflows = this.props.weekworkflows.map(weekworkflow => {
	      let week = weekworkflow.weekworkflow.week;
	      if (this.props.restriction_set && this.props.restriction_set.weeks && this.props.restriction_set.weeks.indexOf(week) == -1) return null;
	      let week_rank = weekworkflow.rank;
	      let week_component = /*#__PURE__*/reactExports.createElement(AlignmentHorizontalReverseWeek, {
	        week_rank: week_rank,
	        objectID: week,
	        renderer: this.props.renderer,
	        restriction_set: this.props.restriction_set
	      });
	      return /*#__PURE__*/reactExports.createElement("div", {
	        className: "week-workflow"
	      }, week_component);
	    });
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "alignment-block"
	    }, /*#__PURE__*/reactExports.createElement("h3", null, "Alignment:"), weekworkflows);
	  }
	}
	const mapAlignmentHorizontalReverseStateToProps = (state, own_props) => {
	  let weekworkflows = filterThenSortByID(state.weekworkflow, state.workflow.weekworkflow_set).map(weekworkflow => ({
	    weekworkflow: weekworkflow,
	    rank: state.workflow.weekworkflow_set.indexOf(weekworkflow.id)
	  }));
	  if (own_props.sort == 'outcome') {
	    let base_outcome = own_props.data;
	    let allowed_outcome_ids = [base_outcome.id];
	    getDescendantOutcomes(state, base_outcome, allowed_outcome_ids);
	    state.outcome.filter(outcome => allowed_outcome_ids.includes(outcome.id));
	    let allowed_child_outcome_ids_from_outcomes = state.outcomehorizontallink.filter(hl => allowed_outcome_ids.indexOf(hl.parent_outcome) >= 0).map(hl => hl.outcome);
	    let allowed_child_outcome_ids = state.outcome.filter(outcome => allowed_child_outcome_ids_from_outcomes.indexOf(outcome.id) >= 0).filter(outcome => !checkSetHidden(outcome, state.objectset)).map(outcome => outcome.id);
	    let allowed_node_ids_from_outcomes = state.outcomenode.filter(outcomenode => allowed_outcome_ids.includes(outcomenode.outcome)).map(outcomenode => outcomenode.node);
	    let allowed_node_ids = state.node.filter(node => allowed_node_ids_from_outcomes.indexOf(node.id) >= 0).filter(node => !checkSetHidden(node, state.objectset)).map(node => node.id);
	    let nodeweeks = state.nodeweek.filter(nodeweek => allowed_node_ids.includes(nodeweek.node));
	    let allowed_week_ids = nodeweeks.map(nodeweek => nodeweek.week);
	    return {
	      weekworkflows: weekworkflows,
	      restriction_set: {
	        weeks: allowed_week_ids,
	        nodes: allowed_node_ids,
	        parent_outcomes: allowed_outcome_ids,
	        child_outcomes: allowed_child_outcome_ids
	      }
	    };
	  } else if (own_props.sort == 'week') {
	    let allowed_outcome_ids = [];
	    let allowed_node_ids = state.node.filter(node => !checkSetHidden(node, state.objectset)).map(node => node.id);
	    let allowed_child_outcome_ids = state.outcome.filter(outcome => !checkSetHidden(outcome, state.objectset)).map(outcome => outcome.id);
	    for (let i = 0; i < own_props.base_outcomes.length; i++) {
	      for (let j = 0; j < own_props.base_outcomes[i].outcomes.length; j++) {
	        allowed_outcome_ids.push(own_props.base_outcomes[i].outcomes[j].data.id);
	        getDescendantOutcomes(state, own_props.base_outcomes[i].outcomes[j].data, allowed_outcome_ids);
	      }
	    }
	    return {
	      weekworkflows: weekworkflows,
	      restriction_set: {
	        weeks: [own_props.data.id],
	        nodes: allowed_node_ids,
	        parent_outcomes: allowed_outcome_ids,
	        child_outcomes: allowed_child_outcome_ids
	      }
	    };
	  }
	};
	const AlignmentHorizontalReverseBlock = connect(mapAlignmentHorizontalReverseStateToProps, null)(AlignmentHorizontalReverseBlockUnconnected);

	class CompetencyMatrixView extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'workflow';
	  }
	  render() {
	    let nodecategory = this.getNodecategory();
	    let nodecategory_json = JSON.stringify(nodecategory);
	    if (this.nodecategory_json == nodecategory_json) nodecategory = this.nodecategory;else {
	      this.nodecategory = nodecategory;
	      this.nodecategory_json = nodecategory_json;
	    }
	    let outcomes_sorted = this.getOutcomesSorted();
	    let has_nodes = false;
	    for (let i = 0; i < nodecategory.length; i++) {
	      if (nodecategory[i].nodes.length > 0) {
	        has_nodes = true;
	        break;
	      }
	    }
	    if (outcomes_sorted.length == 0 || !has_nodes) {
	      let text;
	      if (this.props.renderer.view_type == 'outcometable') text = window.gettext('This view renders a table showing the relationships between nodes and outcomes. Add outcomes and nodes to the workflow to get started.');else text = window.gettext("This view renders a table showing the relationships between this workflow's outcomes and the outcomes of their linked workflows. To use this feature, you must link the nodes in this workflow to child workflows (ex. program nodes to course workflows) and ensure that those child workflows have their own sets of outcomes.");
	      return /*#__PURE__*/reactExports.createElement("div", {
	        className: "emptytext"
	      }, text);
	    } else {
	      let nodes;
	      nodes = nodecategory.map(nodecategory => /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-group"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell nodewrapper blank-cell"
	      }), /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell nodewrapper total-cell"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "node-category-header"
	      }, nodecategory.title)), nodecategory.nodes.map(node => /*#__PURE__*/reactExports.createElement(NodeOutcomeView, {
	        renderer: this.props.renderer,
	        objectID: node
	      }))));
	      let blank_line = nodecategory.map(nodecategory => /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-group"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell blank-cell"
	      }), /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell total-cell blank-cell"
	      }), nodecategory.nodes.map(node => /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell nodewrapper blank-cell"
	      }))));
	      let outcomes = outcomes_sorted.map(category => /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-body"
	      }, this.props.object_sets.length > 0 && /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-row outcome-category"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-wrapper"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-head"
	      }, /*#__PURE__*/reactExports.createElement("h4", null, category.objectset.title))), /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-cells"
	      }, blank_line), /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell blank-cell"
	      }), /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell blank-cell total-cell grand-total-cell"
	      })), category.outcomes.map(outcome => /*#__PURE__*/reactExports.createElement(TableOutcomeBase, {
	        key: outcome,
	        renderer: this.props.renderer,
	        objectID: outcome,
	        nodecategory: nodecategory,
	        outcomes_type: this.props.outcomes_type,
	        type: "competency_matrix"
	      }))));
	      let blank_row = Array(10).fill( /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell empty-cell"
	      }));
	      let weeks = nodecategory.map(category => /*#__PURE__*/reactExports.createElement("div", {
	        className: "matrix-time-week"
	      }, /*#__PURE__*/reactExports.createElement(MatrixWeekView, {
	        objectID: category.id,
	        renderer: this.props.renderer
	      }), category.nodes.map(node => /*#__PURE__*/reactExports.createElement(MatrixNodeView, {
	        objectID: node,
	        renderer: this.props.renderer
	      })), /*#__PURE__*/reactExports.createElement("div", {
	        className: "matrix-time-row"
	      }, blank_row)));
	      let time_header = /*#__PURE__*/reactExports.createElement("div", {
	        className: "matrix-time-row"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell outcome-wrapper"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-head"
	      }, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Hours')))), /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell outcome-wrapper"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-head"
	      }, window.gettext('General Education'))), /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell outcome-wrapper"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-head"
	      }, window.gettext('Specific Education'))), /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell outcome-wrapper"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-head"
	      }, window.gettext('Total Hours'))), /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell outcome-wrapper"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-head"
	      }, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Ponderation')))), /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell outcome-wrapper"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-head"
	      }, window.gettext('Theory'))), /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell outcome-wrapper"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-head"
	      }, window.gettext('Practical'))), /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell outcome-wrapper"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-head"
	      }, window.gettext('Individual Work'))), /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell outcome-wrapper"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-head"
	      }, window.gettext('Total'))), /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell outcome-wrapper"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-head"
	      }, window.gettext('Credits'))));
	      let totals = this.getTotals();
	      let grand_total = /*#__PURE__*/reactExports.createElement("div", {
	        className: "matrix-time-row"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "total-cell grand-total-cell table-cell blank"
	      }), /*#__PURE__*/reactExports.createElement("div", {
	        className: "total-cell grand-total-cell table-cell"
	      }, totals.general_education), /*#__PURE__*/reactExports.createElement("div", {
	        className: "total-cell grand-total-cell table-cell"
	      }, totals.specific_education), /*#__PURE__*/reactExports.createElement("div", {
	        className: "total-cell grand-total-cell table-cell"
	      }, totals.general_education + totals.specific_education), /*#__PURE__*/reactExports.createElement("div", {
	        className: "total-cell grand-total-cell table-cell blank"
	      }), /*#__PURE__*/reactExports.createElement("div", {
	        className: "total-cell grand-total-cell table-cell"
	      }, totals.total_theory), /*#__PURE__*/reactExports.createElement("div", {
	        className: "total-cell grand-total-cell table-cell"
	      }, totals.total_practical), /*#__PURE__*/reactExports.createElement("div", {
	        className: "total-cell grand-total-cell table-cell"
	      }, totals.total_individual), /*#__PURE__*/reactExports.createElement("div", {
	        className: "total-cell grand-total-cell table-cell"
	      }, totals.total_time), /*#__PURE__*/reactExports.createElement("div", {
	        className: "total-cell grand-total-cell table-cell"
	      }, totals.total_required));
	      return /*#__PURE__*/reactExports.createElement("div", {
	        className: "competency-matrix node-rows"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-row node-row"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-wrapper"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-head empty"
	      })), /*#__PURE__*/reactExports.createElement("div", {
	        className: "outcome-cells"
	      }, nodes), /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell blank-cell"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "node-category-header"
	      })), /*#__PURE__*/reactExports.createElement("div", {
	        className: "table-cell total-cell grand-total-cell"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "total-header"
	      }, "Grand Total"))), outcomes, /*#__PURE__*/reactExports.createElement("div", {
	        className: "matrix-time-block"
	      }, time_header, weeks, grand_total));
	    }
	  }
	  getOutcomesSorted() {
	    return getSortedOutcomeIDFromOutcomeWorkflowSet(this.props.outcomes, this.props.outcomeworkflows, this.props.outcomeworkflow_order, this.props.object_sets);
	  }
	  getNodecategory() {
	    let week_order = filterThenSortByID(this.props.weekworkflows, this.props.weekworkflow_order).map(weekworkflow => weekworkflow.week);
	    let weeks_ordered = filterThenSortByID(this.props.weeks, week_order);
	    let nodeweek_order = [].concat(...weeks_ordered.map(week => week.nodeweek_set));
	    let nodeweeks_ordered = filterThenSortByID(this.props.nodeweeks, nodeweek_order);
	    let node_order = nodeweeks_ordered.map(nodeweek => nodeweek.node);
	    let nodes_ordered = filterThenSortByID(this.props.nodes, node_order).filter(node => !checkSetHidden(node, this.props.object_sets));
	    let nodes_allowed = nodes_ordered.map(node => node.id);
	    nodeweeks_ordered = nodeweeks_ordered.filter(nodeweek => nodes_allowed.indexOf(nodeweek.node) >= 0);
	    let nodes_by_week = {};
	    for (let i = 0; i < nodeweeks_ordered.length; i++) {
	      let nodeweek = nodeweeks_ordered[i];
	      pushOrCreate(nodes_by_week, nodeweek.week, nodeweek.node);
	    }
	    return weeks_ordered.map((week, index) => {
	      return {
	        title: week.title || week.week_type_display + ' ' + (index + 1),
	        id: week.id,
	        nodes: nodes_by_week[week.id] || []
	      };
	    });
	  }
	  getTotals() {
	    let nodes_data = this.props.nodes.filter(node => !checkSetHidden(node, this.props.objectset));
	    let linked_wf_data = nodes_data.map(node => {
	      if (node.represents_workflow) return {
	        ...node,
	        ...node.linked_workflow_data
	      };
	      return node;
	    });
	    let general_education = linked_wf_data.reduce((previousValue, currentValue) => {
	      if (currentValue && currentValue.time_general_hours) return previousValue + currentValue.time_general_hours;
	      return previousValue;
	    }, 0);
	    let specific_education = linked_wf_data.reduce((previousValue, currentValue) => {
	      if (currentValue && currentValue.time_specific_hours) return previousValue + currentValue.time_specific_hours;
	      return previousValue;
	    }, 0);
	    let total_theory = linked_wf_data.reduce((previousValue, currentValue) => {
	      if (currentValue && currentValue.ponderation_theory) return previousValue + currentValue.ponderation_theory;
	      return previousValue;
	    }, 0);
	    let total_practical = linked_wf_data.reduce((previousValue, currentValue) => {
	      if (currentValue && currentValue.ponderation_practical) return previousValue + currentValue.ponderation_practical;
	      return previousValue;
	    }, 0);
	    let total_individual = linked_wf_data.reduce((previousValue, currentValue) => {
	      if (currentValue && currentValue.ponderation_individual) return previousValue + currentValue.ponderation_individual;
	      return previousValue;
	    }, 0);
	    let total_time = total_theory + total_practical + total_individual;
	    let total_required = linked_wf_data.reduce((previousValue, currentValue) => {
	      if (currentValue && currentValue.time_required) return previousValue + parseFloat(currentValue.time_required);
	      return previousValue;
	    }, 0);
	    return {
	      total_theory: total_theory,
	      total_practical: total_practical,
	      total_individual: total_individual,
	      total_required: total_required,
	      total_time: total_time,
	      general_education: general_education,
	      specific_education: specific_education
	    };
	  }
	}
	const mapStateToProps$1 = (state, own_props) => {
	  return {
	    weekworkflows: state.weekworkflow,
	    weeks: state.week,
	    nodeweeks: state.nodeweek,
	    nodes: state.node,
	    object_sets: state.objectset,
	    weekworkflow_order: state.workflow.weekworkflow_set,
	    outcomes_sort: state.workflow.outcomes_sort,
	    outcomeworkflow_order: state.workflow.outcomeworkflow_set,
	    outcomeworkflows: state.outcomeworkflow,
	    outcomes: state.outcome
	  };
	};
	var CompetencyMatrixView$1 = connect(mapStateToProps$1, null)(CompetencyMatrixView);
	class MatrixWeekViewUnconnected extends Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'week';
	  }
	  render() {
	    let data = this.props.data;
	    data.week_type_display + ' ' + (this.props.rank + 1);
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "matrix-time-row"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "total-cell table-cell blank"
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "total-cell table-cell"
	    }, this.props.general_education), /*#__PURE__*/reactExports.createElement("div", {
	      className: "total-cell table-cell"
	    }, this.props.specific_education), /*#__PURE__*/reactExports.createElement("div", {
	      className: "total-cell table-cell"
	    }, this.props.general_education + this.props.specific_education), /*#__PURE__*/reactExports.createElement("div", {
	      className: "total-cell table-cell blank"
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "total-cell table-cell"
	    }, this.props.total_theory), /*#__PURE__*/reactExports.createElement("div", {
	      className: "total-cell table-cell"
	    }, this.props.total_practical), /*#__PURE__*/reactExports.createElement("div", {
	      className: "total-cell table-cell"
	    }, this.props.total_individual), /*#__PURE__*/reactExports.createElement("div", {
	      className: "total-cell table-cell"
	    }, this.props.total_time), /*#__PURE__*/reactExports.createElement("div", {
	      className: "total-cell table-cell"
	    }, this.props.total_required));
	  }
	}
	const mapWeekStateToProps$1 = (state, own_props) => {
	  let data = getWeekByID(state, own_props.objectID).data;
	  let node_weeks = filterThenSortByID(state.nodeweek, data.nodeweek_set);
	  let nodes_data = filterThenSortByID(state.node, node_weeks.map(node_week => node_week.node)).filter(node => !checkSetHidden(node, state.objectset));
	  let linked_wf_data = nodes_data.map(node => {
	    if (node.represents_workflow) return {
	      ...node,
	      ...node.linked_workflow_data
	    };
	    return node;
	  });
	  let general_education = linked_wf_data.reduce((previousValue, currentValue) => {
	    if (currentValue && currentValue.time_general_hours) return previousValue + currentValue.time_general_hours;
	    return previousValue;
	  }, 0);
	  let specific_education = linked_wf_data.reduce((previousValue, currentValue) => {
	    if (currentValue && currentValue.time_specific_hours) return previousValue + currentValue.time_specific_hours;
	    return previousValue;
	  }, 0);
	  let total_theory = linked_wf_data.reduce((previousValue, currentValue) => {
	    if (currentValue && currentValue.ponderation_theory) return previousValue + currentValue.ponderation_theory;
	    return previousValue;
	  }, 0);
	  let total_practical = linked_wf_data.reduce((previousValue, currentValue) => {
	    if (currentValue && currentValue.ponderation_practical) return previousValue + currentValue.ponderation_practical;
	    return previousValue;
	  }, 0);
	  let total_individual = linked_wf_data.reduce((previousValue, currentValue) => {
	    if (currentValue && currentValue.ponderation_individual) return previousValue + currentValue.ponderation_individual;
	    return previousValue;
	  }, 0);
	  let total_time = total_theory + total_practical + total_individual;
	  let total_required = linked_wf_data.reduce((previousValue, currentValue) => {
	    if (currentValue && currentValue.time_required) return previousValue + parseFloat(currentValue.time_required);
	    return previousValue;
	  }, 0);
	  return {
	    data: data,
	    total_theory: total_theory,
	    total_practical: total_practical,
	    total_individual: total_individual,
	    total_required: total_required,
	    total_time: total_time,
	    general_education: general_education,
	    specific_education: specific_education,
	    object_sets: state.objectset,
	    nodes: nodes_data
	  };
	};
	const MatrixWeekView = connect(mapWeekStateToProps$1, null)(MatrixWeekViewUnconnected);
	class MatrixNodeViewUnconnected extends Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'node';
	  }
	  render() {
	    let data = this.props.data;
	    let data_override;
	    if (data.represents_workflow) data_override = {
	      ...data,
	      ...data.linked_workflow_data,
	      id: data.id
	    };else data_override = data;
	    'node column-' + data.column + ' ' + node_keys[data.node_type];
	    getColumnColour(this.props.column);
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "matrix-time-row"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "table-cell blank"
	    }), this.getTimeData(data_override));
	  }
	  getTimeData(data) {
	    return [/*#__PURE__*/reactExports.createElement("div", {
	      className: "table-cell"
	    }, data.time_general_hours), /*#__PURE__*/reactExports.createElement("div", {
	      className: "table-cell"
	    }, data.time_specific_hours), /*#__PURE__*/reactExports.createElement("div", {
	      className: "table-cell"
	    }, (data.time_general_hours || 0) + (data.time_specific_hours || 0)), /*#__PURE__*/reactExports.createElement("div", {
	      className: "table-cell blank"
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "table-cell"
	    }, data.ponderation_theory), /*#__PURE__*/reactExports.createElement("div", {
	      className: "table-cell"
	    }, data.ponderation_practical), /*#__PURE__*/reactExports.createElement("div", {
	      className: "table-cell"
	    }, data.ponderation_individual), /*#__PURE__*/reactExports.createElement("div", {
	      className: "table-cell"
	    }, data.ponderation_theory + data.ponderation_practical + data.ponderation_individual), /*#__PURE__*/reactExports.createElement("div", {
	      className: "table-cell",
	      titletext: this.props.renderer.time_choices[data.time_units].name
	    }, data.time_required)];
	  }
	}
	const mapNodeStateToProps$1 = (state, own_props) => getNodeByID(state, own_props.objectID);
	const MatrixNodeView = connect(mapNodeStateToProps$1, null)(MatrixNodeViewUnconnected);

	//Creates a grid with just nodes by week and their times
	class GridView extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'workflow';
	    this.state = {
	      dropped_list: []
	    };
	  }
	  render() {
	    this.props.workflow;
	    let weeks = this.props.weeks.map((week, i) => /*#__PURE__*/reactExports.createElement(GridWeekView, {
	      renderer: this.props.renderer,
	      data: week.data,
	      rank: i
	    }));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-details"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "grid-ponderation"
	    }, window.gettext('Times in hours shown in format') + ': ' + window.gettext('Theory') + '/' + window.gettext('Practical') + '/' + window.gettext('Individual')), /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-grid"
	    }, weeks));
	  }
	}
	const mapStateToProps = (state, own_props) => {
	  let weeks = state.workflow.weekworkflow_set.map(weekworkflow => getWeekWorkflowByID(state, weekworkflow).data.week).map(week => getWeekByID(state, week));
	  return {
	    workflow: state.workflow,
	    weeks: weeks
	  };
	};
	var GridView$1 = connect(mapStateToProps, null)(GridView);
	class GridWeekViewUnconnected extends EditableComponentWithComments {
	  constructor(props) {
	    super(props);
	    this.objectType = 'week';
	  }
	  render() {
	    let data = this.props.data;
	    let default_text = data.week_type_display + ' ' + (this.props.rank + 1);
	    let nodes = this.props.nodes.map(node => /*#__PURE__*/reactExports.createElement(GridNodeView, {
	      renderer: this.props.renderer,
	      data: node
	    }));
	    let comments;
	    if (this.props.renderer.view_comments) comments = this.addCommenting();
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "week",
	      ref: this.maindiv,
	      style: this.get_border_style(),
	      onClick: evt => this.props.renderer.selection_manager.changeSelection(evt, this)
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "week-title"
	    }, /*#__PURE__*/reactExports.createElement(TitleText, {
	      title: data.title,
	      defaultText: default_text
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "grid-ponderation"
	    }, this.props.total_theory + '/' + this.props.total_practical + '/' + this.props.total_individual)), nodes, this.addEditable(data, true), /*#__PURE__*/reactExports.createElement("div", {
	      className: "mouseover-actions"
	    }, comments), /*#__PURE__*/reactExports.createElement("div", {
	      className: "side-actions"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "comment-indicator-container"
	    })));
	  }
	}
	const mapWeekStateToProps = (state, own_props) => {
	  let data = own_props.data;
	  let node_weeks = filterThenSortByID(state.nodeweek, data.nodeweek_set);
	  let nodes_data = node_weeks.map(nodeweek => getNodeByID(state, nodeweek.node).data).filter(node => !checkSetHidden(node, state.objectset));
	  // let nodes_data = Utility.filterThenSortByID(state.node,node_weeks.map(node_week=>node_week.node)).filter(node=>!Utility.checkSetHidden(node,state.objectset));

	  let override_data = nodes_data.map(node => {
	    if (node.represents_workflow) return {
	      ...node,
	      ...node.linked_workflow_data
	    };else return node;
	  });
	  let general_education = override_data.reduce((previousValue, currentValue) => {
	    if (currentValue && currentValue.time_general_hours) return previousValue + currentValue.time_general_hours;
	    return previousValue;
	  }, 0);
	  let specific_education = override_data.reduce((previousValue, currentValue) => {
	    if (currentValue && currentValue.time_specific_hours) return previousValue + currentValue.time_specific_hours;
	    return previousValue;
	  }, 0);
	  let total_theory = override_data.reduce((previousValue, currentValue) => {
	    if (currentValue && currentValue.ponderation_theory) return previousValue + currentValue.ponderation_theory;
	    return previousValue;
	  }, 0);
	  let total_practical = override_data.reduce((previousValue, currentValue) => {
	    if (currentValue && currentValue.ponderation_practical) return previousValue + currentValue.ponderation_practical;
	    return previousValue;
	  }, 0);
	  let total_individual = override_data.reduce((previousValue, currentValue) => {
	    if (currentValue && currentValue.ponderation_individual) return previousValue + currentValue.ponderation_individual;
	    return previousValue;
	  }, 0);
	  let total_time = total_theory + total_practical + total_individual;
	  let total_required = override_data.reduce((previousValue, currentValue) => {
	    if (currentValue && currentValue.time_required) return previousValue + parseInt(currentValue.time_required);
	    return previousValue;
	  }, 0);
	  return {
	    nodes: override_data,
	    general_education: general_education,
	    specific_education: specific_education,
	    total_theory: total_theory,
	    total_practical: total_practical,
	    total_individual: total_individual,
	    total_time: total_time,
	    total_required: total_required
	  };
	};
	const GridWeekView = connect(mapWeekStateToProps, null)(GridWeekViewUnconnected);
	class GridNodeViewUnconnected extends EditableComponentWithComments {
	  constructor(props) {
	    super(props);
	    this.objectType = 'node';
	  }
	  render() {
	    let renderer = this.props.renderer;
	    let selection_manager = renderer.selection_manager;
	    let data = this.props.data;
	    let data_override;
	    if (data.represents_workflow) data_override = {
	      ...data,
	      ...data.linked_workflow_data,
	      id: data.id
	    };else data_override = data;
	    let ponderation;
	    ponderation = /*#__PURE__*/reactExports.createElement("div", {
	      className: "grid-ponderation"
	    }, data_override.ponderation_theory + '/' + data_override.ponderation_practical + '/' + data_override.ponderation_individual);
	    let style = {
	      backgroundColor: getColumnColour(this.props.column)
	    };
	    if (data.lock) {
	      style.outline = '2px solid ' + data.lock.user_colour;
	    }
	    let css_class = 'node column-' + data.column + ' ' + node_keys[data.node_type];
	    if (data.is_dropped) css_class += ' dropped';
	    if (data.lock) css_class += ' locked locked-' + data.lock.user_id;
	    let comments;
	    if (this.props.renderer.view_comments) comments = this.addCommenting();
	    return /*#__PURE__*/reactExports.createElement("div", {
	      style: style,
	      id: data.id,
	      ref: this.maindiv,
	      onClick: evt => selection_manager.changeSelection(evt, this),
	      className: css_class
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-top-row"
	    }, /*#__PURE__*/reactExports.createElement(NodeTitle, {
	      data: data
	    }), ponderation), /*#__PURE__*/reactExports.createElement("div", {
	      className: "mouseover-actions"
	    }, comments), /*#__PURE__*/reactExports.createElement("div", {
	      className: "side-actions"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "comment-indicator-container"
	    })), this.addEditable(data_override, true));
	  }
	}
	const mapNodeStateToProps = (state, own_props) => ({
	  column: state.column.find(column => column.id == own_props.data.column)
	});
	const GridNodeView = connect(mapNodeStateToProps, null)(GridNodeViewUnconnected);

	class WorkflowBaseViewUnconnected extends EditableComponentWithActions {
	  constructor(props) {
	    super(props);
	    this.objectType = 'workflow';
	    this.allowed_tabs = [0, 1, 2, 3, 4];
	  }
	  render() {
	    let renderer = this.props.renderer;
	    let data = this.props.data;
	    let visible_buttons = (() => {
	      return [this.getEdit(), this.getShare()];
	    }).bind(this);
	    let overflow_links = this.getOverflowLinks.bind(this);
	    let viewbar = (() => {
	      return [this.getJump(), this.getExpand()];
	    }).bind(this);
	    let userbar;
	    if (!renderer.always_static) userbar = (() => /*#__PURE__*/reactExports.createElement(ConnectionBar, {
	      updateSocket: renderer.updateSocket,
	      renderer: renderer
	    })).bind(this);
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "main-block"
	    }, /*#__PURE__*/reactExports.createElement(MenuBar$1, {
	      overflow_links: overflow_links,
	      visible_buttons: visible_buttons,
	      viewbar: viewbar,
	      userbar: userbar
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "right-panel-wrapper"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      class: "body-wrapper"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      id: "workflow-wrapper",
	      className: "workflow-wrapper"
	    }, this.getHeader(), this.addEditable(data), /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-container"
	    }, this.getWorkflowContent()), this.getReturnLinks(), this.getParentWorkflowIndicator())), /*#__PURE__*/reactExports.createElement(RightSideBar$1, {
	      context: "workflow",
	      renderer: this.props.renderer,
	      data: data
	    })));
	  }
	  componentDidMount() {
	    this.getUserData();
	    this.updateTabs();
	    makeDropdown('#jump-to');
	    makeDropdown('#expand-collapse-all');
	  }
	  componentDidUpdate(prev_props) {}
	  updateTabs() {
	    //If the view type has changed, enable only appropriate tabs, and change the selection to none
	    this.props.renderer.selection_manager.changeSelection(null, null);
	    let disabled_tabs = [];
	    for (let i = 0; i <= 4; i++) if (this.allowed_tabs.indexOf(i) < 0) disabled_tabs.push(i);
	    $('#sidebar').tabs({
	      disabled: false
	    });
	    let current_tab = $('#sidebar').tabs('option', 'active');
	    if (this.allowed_tabs.indexOf(current_tab) < 0) {
	      if (this.allowed_tabs.length == 0) $('#sidebar').tabs({
	        active: false
	      });else $('#sidebar').tabs({
	        active: this.allowed_tabs[0]
	      });
	    }
	    if (this.props.renderer.read_only) disabled_tabs.push(5);
	    $('#sidebar').tabs({
	      disabled: disabled_tabs
	    });
	  }
	  changeView(type) {
	    //this.props.renderer.selection_manager.changeSelection(null,null);
	    this.props.renderer.render(this.props.renderer.container, type);
	  }
	  getHeader() {
	    let data = this.props.data;
	    let style = {};
	    if (data.lock) {
	      style.border = '2px solid ' + data.lock.user_colour;
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-header",
	      style: style,
	      onClick: evt => this.props.renderer.selection_manager.changeSelection(evt, this)
	    }, this.getProjectLink(), /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-header-top-line"
	    }, /*#__PURE__*/reactExports.createElement(WorkflowTitle, {
	      data: data,
	      no_hyperlink: true,
	      class_name: "project-title"
	    }), this.getTypeIndicator()), /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-header-info"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-info-section project-members"
	    }, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Permissions')), this.getUsers()), /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-other"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-info-section project-description"
	    }, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Description')), /*#__PURE__*/reactExports.createElement(CollapsibleText, {
	      text: data.description,
	      defaultText: window.gettext('No description')
	    })))));
	  }
	  getTypeIndicator() {
	    let data = this.props.data;
	    let type_text = window.gettext(data.type);
	    if (data.is_strategy) type_text += window.gettext(' strategy');
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: 'workflow-type-indicator ' + data.type
	    }, type_text);
	  }
	  getUsers() {
	    if (!this.state.users) return null;
	    let author = this.state.users.author;
	    let editors = this.state.users.editors;
	    let commenters = this.state.users.commentors;
	    let viewers = this.state.users.viewers;
	    let users_group = [];
	    if (this.state.users.published) {
	      users_group.push( /*#__PURE__*/reactExports.createElement("div", {
	        className: "user-name"
	      }, getUserTag('view'), /*#__PURE__*/reactExports.createElement("span", {
	        className: "material-symbols-rounded"
	      }, "public"), ' ', window.gettext('All CourseFlow')));
	    }
	    if (author) users_group.push( /*#__PURE__*/reactExports.createElement("div", {
	      className: "user-name"
	    }, getUserTag('author'), getUserDisplay(author)));
	    users_group.push([editors.filter(user => user.id !== author.id).map(user => /*#__PURE__*/reactExports.createElement("div", {
	      className: "user-name"
	    }, getUserTag('edit'), getUserDisplay(user))), commenters.map(user => /*#__PURE__*/reactExports.createElement("div", {
	      className: "user-name"
	    }, getUserTag('comment'), getUserDisplay(user))), viewers.map(user => /*#__PURE__*/reactExports.createElement("div", {
	      className: "user-name"
	    }, getUserTag('view'), getUserDisplay(user)))]);
	    users_group = users_group.flat(2);
	    let users = [/*#__PURE__*/reactExports.createElement("div", {
	      className: "users-group"
	    }, users_group)];
	    if (users_group.length > 4) {
	      users.push( /*#__PURE__*/reactExports.createElement("div", {
	        className: "workflow-created"
	      }, "+", users_group.length - 4, " ", window.gettext('more')));
	    }
	    if (!this.props.renderer.read_only) users.push( /*#__PURE__*/reactExports.createElement("div", {
	      className: "user-name collapsed-text-show-more",
	      onClick: this.openShareMenu.bind(this)
	    }, window.gettext('Modify')));
	    return users;
	  }
	  getEdit() {
	    let edit;
	    if (!this.props.renderer.read_only) edit = /*#__PURE__*/reactExports.createElement("div", {
	      className: "hover-shade",
	      id: "edit-project-button",
	      title: window.gettext('Edit Workflow'),
	      onClick: this.openEditMenu.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded filled"
	    }, "edit"));
	    return edit;
	  }
	  openEditMenu(evt) {
	    this.props.renderer.selection_manager.changeSelection(evt, this);
	  }
	  getShare() {
	    let share;
	    if (!this.props.renderer.read_only) share = /*#__PURE__*/reactExports.createElement("div", {
	      className: "hover-shade",
	      id: "share-button",
	      title: window.gettext('Sharing'),
	      onClick: this.openShareMenu.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded filled"
	    }, "person_add"));
	    return share;
	  }
	  openShareMenu() {
	    let component = this;
	    let data = this.props.data;
	    renderMessageBox$1(data, 'share_menu', () => {
	      closeMessageBox$1();
	      component.getUserData();
	    });
	  }
	  getUserData() {
	    if (this.props.renderer.public_view || this.props.renderer.is_student) return null;
	    let component = this;
	    getUsersForObject(this.props.data.id, this.props.data.type, data => {
	      component.setState({
	        users: data
	      });
	    });
	  }
	  getOverflowLinks() {
	    this.state.data;
	    let overflow_links = [];
	    overflow_links.push(this.getExportButton());
	    overflow_links.push(this.getCopyButton());
	    overflow_links.push(this.getImportButton());
	    overflow_links.push(this.getDeleteWorkflow());
	    if (overflow_links.filter(x => x != null).length == 0) $('#overflow-options').addClass('hidden');
	    return overflow_links;
	  }
	  getDeleteWorkflow() {
	    if (this.props.renderer.read_only) return null;
	    if (!this.props.data.deleted) return [/*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement("div", {
	      id: "delete-workflow",
	      className: "hover-shade",
	      onClick: this.deleteWorkflow.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Archive workflow')))];else return [/*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement("div", {
	      id: "restore-workflow",
	      className: "hover-shade",
	      onClick: this.restoreWorkflow.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Restore workflow'))), /*#__PURE__*/reactExports.createElement("div", {
	      id: "permanently-delete-workflow",
	      className: "hover-shade",
	      onClick: this.deleteWorkflowHard.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Permanently delete workflow')))];
	  }
	  deleteWorkflow() {
	    if (window.confirm(window.gettext('Are you sure you want to delete this workflow?'))) {
	      deleteSelf(this.props.data.id, 'workflow', true, () => {});
	    }
	  }
	  deleteWorkflowHard() {
	    if (window.confirm(window.gettext('Are you sure you want to permanently delete this workflow?'))) {
	      deleteSelf(this.props.data.id, 'workflow', false, () => {
	        window.location = window.config.update_path['project'].replace(0, renderer.project.id);
	      });
	    }
	  }
	  restoreWorkflow() {
	    restoreSelf(this.props.data.id, 'workflow', () => {});
	  }
	  getExportButton() {
	    if (this.props.renderer.public_view && !user_id) return null;
	    if (this.props.renderer.is_student && !this.props.renderer.can_view) return null;
	    let export_button = /*#__PURE__*/reactExports.createElement("div", {
	      id: "export-button",
	      className: "hover-shade",
	      onClick: () => renderMessageBox$1({
	        ...this.props.data,
	        object_sets: this.props.object_sets
	      }, 'export', closeMessageBox$1)
	    }, /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Export')));
	    return export_button;
	  }
	  getCopyButton() {
	    if (!user_id) return null;
	    let export_button = [/*#__PURE__*/reactExports.createElement("div", {
	      id: "copy-button",
	      className: "hover-shade",
	      onClick: () => {
	        let loader = this.props.renderer.tiny_loader;
	        if (this.props.data.is_strategy) {
	          loader.startLoad();
	          duplicateBaseItem(this.props.data.id, this.props.data.type, null, response_data => {
	            loader.endLoad();
	            window.location = window.config.update_path[response_data.new_item.type].replace('0', response_data.new_item.id);
	          });
	        } else {
	          getTargetProjectMenu(-1);
	        }
	      }
	    }, /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Copy to my library')))];
	    if (!this.props.data.is_strategy && this.props.renderer.project_permission == permission_keys.edit) export_button.unshift( /*#__PURE__*/reactExports.createElement("div", {
	      id: "copy-to-project-button",
	      className: "hover-shade",
	      onClick: () => {
	        let loader = this.props.renderer.tiny_loader;
	        duplicateBaseItem(this.props.data.id, this.props.data.type, this.props.renderer.project.id, response_data => {
	          loader.endLoad();
	          window.location = window.config.update_path[response_data.new_item.type].replace('0', response_data.new_item.id);
	        });
	      }
	    }, /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Copy into current project'))));
	    return export_button;
	  }
	  getImportButton() {
	    if (this.props.renderer.read_only) return null;
	    let disabled;
	    if (this.props.data.importing) disabled = true;
	    let imports = [/*#__PURE__*/reactExports.createElement("hr", null)];
	    this.pushImport(imports, 'outcomes', window.gettext('Import Outcomes'), disabled);
	    this.pushImport(imports, 'nodes', window.gettext('Import Nodes'), disabled);
	    return imports;
	  }
	  pushImport(imports, import_type, text, disabled) {
	    let a_class = 'hover-shade';
	    if (disabled) a_class = ' disabled';
	    imports.push( /*#__PURE__*/reactExports.createElement("a", {
	      className: a_class,
	      onClick: this.clickImport.bind(this, import_type)
	    }, text));
	  }
	  clickImport(import_type, evt) {
	    evt.preventDefault();
	    renderMessageBox$1({
	      object_id: this.props.data.id,
	      object_type: this.objectType,
	      import_type: import_type
	    }, 'import', () => {
	      closeMessageBox$1();
	    });
	  }
	  getReturnLinks() {
	    let renderer = this.props.renderer;
	    this.props.data;
	    let return_links = [];
	    if (renderer.project && !renderer.is_student && !renderer.public_view) {
	      return_links.push( /*#__PURE__*/reactExports.createElement("a", {
	        className: "hover-shade no-underline",
	        id: "project-return",
	        href: window.config.update_path['project'].replace(0, renderer.project.id)
	      }, /*#__PURE__*/reactExports.createElement("span", {
	        className: "material-symbols-rounded green"
	      }, "arrow_back_ios"), /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Return to'), ' ', /*#__PURE__*/reactExports.createElement(WorkflowTitle, {
	        class_name: "inline",
	        no_hyperlink: true,
	        data: renderer.project
	      }))));
	    }
	    if (renderer.public_view && renderer.can_view) {
	      return_links.push( /*#__PURE__*/reactExports.createElement("a", {
	        className: "hover-shade no-underline",
	        id: "project-return",
	        href: window.config.update_path['project'].replace(0, renderer.project.id)
	      }, /*#__PURE__*/reactExports.createElement("span", {
	        className: "material-symbols-rounded green"
	      }, "arrow_back_ios"), /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Return to Editable Workflow'))));
	    }
	    // if(!renderer.public_view && renderer.project && (renderer.is_teacher || renderer.is_student)){
	    //     return_links.push(
	    //         <a className="hover-shade no-underline" id='live-project-return' href={update_path["liveproject"].replace(0,renderer.project.id)}>
	    //             <span className="material-symbols-rounded green">arrow_back_ios</span>
	    //             <div>{window.gettext("Return to classroom (")}<WorkflowTitle class_name={"inline-title"} data={renderer.project} no_hyperlink={true}/>{")"}</div>
	    //         </a>
	    //     );
	    // }
	    return reactDomExports.createPortal(return_links, $('.titlebar .title')[0]);
	  }
	  getProjectLink() {
	    return null;
	    // let renderer=this.props.renderer;
	    // if(renderer.project && !renderer.is_student && !renderer.public_view)return(
	    //     <WorkflowTitle class_name={"project-title-in-workflow"} data={this.props.renderer.project}/>
	    // );
	    // else return null;
	  }

	  getWorkflowContent() {
	    let data = this.props.data;
	    let renderer = this.props.renderer;
	    let workflow_content;
	    if (renderer.view_type == 'outcometable') {
	      workflow_content = /*#__PURE__*/reactExports.createElement(WorkflowTableView, {
	        data: data,
	        renderer: renderer,
	        view_type: renderer.view_type
	      });
	      this.allowed_tabs = [3];
	    } else if (renderer.view_type == 'outcomeedit') {
	      workflow_content = /*#__PURE__*/reactExports.createElement(OutcomeEditView, {
	        renderer: renderer
	      });
	      if (data.type == 'program') this.allowed_tabs = [3];else this.allowed_tabs = [2, 3];
	    } else if (renderer.view_type == 'alignmentanalysis') {
	      workflow_content = /*#__PURE__*/reactExports.createElement(AlignmentView$1, {
	        renderer: renderer,
	        view_type: renderer.view_type
	      });
	      this.allowed_tabs = [3];
	    } else if (renderer.view_type == 'grid') {
	      workflow_content = /*#__PURE__*/reactExports.createElement(GridView$1, {
	        renderer: renderer,
	        view_type: renderer.view_type
	      });
	      this.allowed_tabs = [3];
	    } else {
	      workflow_content = /*#__PURE__*/reactExports.createElement(WorkflowView, {
	        renderer: renderer
	      });
	      this.allowed_tabs = [1, 2, 3, 4];
	      if (renderer.read_only) this.allowed_tabs = [2, 3];
	    }
	    if (data.is_strategy) return workflow_content;
	    let view_buttons = [{
	      type: 'workflowview',
	      name: window.gettext('Workflow View'),
	      disabled: []
	    }, {
	      type: 'outcomeedit',
	      name: capWords(window.gettext('View') + ' ' + window.gettext(data.type + ' outcomes')),
	      disabled: []
	    }, {
	      type: 'outcometable',
	      name: capWords(window.gettext(data.type + ' outcome') + ' ' + window.gettext('Table')),
	      disabled: []
	    }, {
	      type: 'alignmentanalysis',
	      name: capWords(window.gettext(data.type + ' outcome') + ' ' + window.gettext('Analytics')),
	      disabled: ['activity']
	    }, {
	      type: 'grid',
	      name: window.gettext('Grid View'),
	      disabled: ['activity', 'course']
	    }].filter(item => item.disabled.indexOf(data.type) == -1).map(item => {
	      let view_class = 'hover-shade';
	      if (item.type == renderer.view_type) view_class += ' active';
	      //if(item.disabled.indexOf(data.type)>=0)view_class+=" disabled";
	      return /*#__PURE__*/reactExports.createElement("a", {
	        id: 'button_' + item.type,
	        className: view_class,
	        onClick: this.changeView.bind(this, item.type)
	      }, item.name);
	    });
	    let view_buttons_sorted = view_buttons.slice(0, 2);
	    view_buttons_sorted.push( /*#__PURE__*/reactExports.createElement("div", {
	      className: "hover-shade other-views",
	      onClick: () => $('.views-dropdown')[0].classList.toggle('toggled')
	    }, window.gettext('Other Views'), /*#__PURE__*/reactExports.createElement("div", {
	      className: "views-dropdown"
	    }, view_buttons.slice(2))));
	    return [/*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-view-select hide-print"
	    }, view_buttons_sorted), workflow_content];
	  }
	  getParentWorkflowIndicator() {
	    return /*#__PURE__*/reactExports.createElement(ParentWorkflowIndicator, {
	      renderer: this.props.renderer,
	      workflow_id: this.props.data.id
	    });
	  }
	  getJump() {
	    if (this.props.renderer.view_type != 'workflowview') return null;
	    let data = this.props.data;
	    let nodebarweekworkflows = data.weekworkflow_set.map((weekworkflow, index) => /*#__PURE__*/reactExports.createElement(NodeBarWeekWorkflow, {
	      key: `weekworkflow-${index}`,
	      order: data.weekworkflow_set,
	      renderer: this.props.renderer,
	      objectID: weekworkflow
	    }));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      id: "jump-to"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "hover-shade flex-middle"
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "green material-symbols-rounded"
	    }, "keyboard_double_arrow_down"), /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Jump to'))), /*#__PURE__*/reactExports.createElement("div", {
	      className: "create-dropdown"
	    }, nodebarweekworkflows));
	  }
	  getExpand() {
	    return /*#__PURE__*/reactExports.createElement("div", {
	      id: "expand-collapse-all"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "hover-shade flex-middle"
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "green material-symbols-rounded"
	    }, "zoom_out_map"), /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Expand/Collapse'))), /*#__PURE__*/reactExports.createElement("div", {
	      className: "create-dropdown"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "flex-middle hover-shade",
	      onClick: this.expandAll.bind(this, 'week')
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "green material-symbols-rounded"
	    }, "zoom_out_map"), /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Expand all weeks'))), /*#__PURE__*/reactExports.createElement("div", {
	      className: "flex-middle hover-shade",
	      onClick: this.collapseAll.bind(this, 'week')
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "green material-symbols-rounded"
	    }, "zoom_in_map"), /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Collapse all weeks'))), /*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement("div", {
	      className: "flex-middle hover-shade",
	      onClick: this.expandAll.bind(this, 'node')
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "green material-symbols-rounded"
	    }, "zoom_out_map"), /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Expand all nodes'))), /*#__PURE__*/reactExports.createElement("div", {
	      className: "flex-middle hover-shade",
	      onClick: this.collapseAll.bind(this, 'node')
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "green material-symbols-rounded"
	    }, "zoom_in_map"), /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Collapse all nodes'))), /*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement("div", {
	      className: "flex-middle hover-shade",
	      onClick: this.expandAll.bind(this, 'outcome')
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "green material-symbols-rounded"
	    }, "zoom_out_map"), /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Expand all outcomes'))), /*#__PURE__*/reactExports.createElement("div", {
	      className: "flex-middle hover-shade",
	      onClick: this.collapseAll.bind(this, 'outcome')
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "green material-symbols-rounded"
	    }, "zoom_in_map"), /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Collapse all outcomes')))));
	  }
	  expandAll(type) {
	    this.props[type].forEach(week => toggleDrop$1(week.id, type, true, this.props.dispatch));
	  }
	  collapseAll(type) {
	    this.props[type].forEach(week => toggleDrop$1(week.id, type, false, this.props.dispatch));
	  }
	}
	const mapWorkflowStateToProps$1 = state => ({
	  data: state.workflow,
	  object_sets: state.objectset,
	  week: state.week,
	  node: state.node,
	  outcome: state.outcome
	});
	const WorkflowBaseView = connect(mapWorkflowStateToProps$1, null)(WorkflowBaseViewUnconnected);

	//Basic component representing the workflow
	class WorkflowViewUnconnected extends EditableComponentWithSorting {
	  constructor(props) {
	    super(props);
	    this.objectType = 'workflow';
	    this.state = {};
	  }
	  render() {
	    let data = this.props.data;
	    let renderer = this.props.renderer;
	    var columnworkflows = data.columnworkflow_set.map((columnworkflow, index) => /*#__PURE__*/reactExports.createElement(ColumnWorkflowView$1, {
	      key: `columnworkflow-${index}`,
	      objectID: columnworkflow,
	      parentID: data.id,
	      renderer: renderer
	    }));
	    var weekworkflows = data.weekworkflow_set.map((weekworkflow, index) => /*#__PURE__*/reactExports.createElement(WeekWorkflowView$1, {
	      condensed: data.condensed,
	      key: `weekworkflow-${index}`,
	      objectID: weekworkflow,
	      parentID: data.id,
	      renderer: renderer
	    }));
	    let css_class = 'workflow-details';
	    if (data.condensed) css_class += ' condensed';
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: css_class
	    }, /*#__PURE__*/reactExports.createElement(WorkflowLegend$1, {
	      renderer: renderer
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "column-row",
	      id: data.id + '-column-block'
	    }, columnworkflows), /*#__PURE__*/reactExports.createElement("div", {
	      className: "week-block",
	      id: data.id + '-week-block'
	    }, weekworkflows), /*#__PURE__*/reactExports.createElement("svg", {
	      className: "workflow-canvas",
	      width: "100%",
	      height: "100%"
	    }, /*#__PURE__*/reactExports.createElement("defs", null, /*#__PURE__*/reactExports.createElement("marker", {
	      id: "arrow",
	      viewBox: "0 0 10 10",
	      refX: "10",
	      refY: "5",
	      markerWidth: "4",
	      markerHeight: "4",
	      orient: "auto-start-reverse"
	    }, /*#__PURE__*/reactExports.createElement("path", {
	      d: "M 0 0 L 10 5 L 0 10 z"
	    })))));
	  }
	  componentDidMount() {
	    this.makeDragAndDrop();
	  }
	  componentDidUpdate() {
	    this.makeDragAndDrop();
	  }
	  makeDragAndDrop() {
	    this.makeSortableNode($('.column-row').children('.column-workflow').not('.ui-draggable'), this.props.objectID, 'columnworkflow', '.column-workflow', 'x', false, null, '.column', '.column-row');
	    this.makeSortableNode($('.week-block').children('.week-workflow').not('.ui-draggable'), this.props.objectID, 'weekworkflow', '.week-workflow', 'y', false, null, '.week', '.week-block');
	  }
	  stopSortFunction() {
	    triggerHandlerEach($('.week .node'), 'component-updated');
	  }
	  sortableMovedFunction(id, new_position, type, new_parent, child_id) {
	    if (type == 'columnworkflow') {
	      this.props.renderer.micro_update(moveColumnWorkflow(id, new_position, new_parent, child_id));
	      insertedAt(this.props.renderer, child_id, 'column', new_parent, 'workflow', new_position, 'columnworkflow');
	    }
	    if (type == 'weekworkflow') {
	      this.props.renderer.micro_update(moveWeekWorkflow(id, new_position, new_parent, child_id));
	      insertedAt(this.props.renderer, child_id, 'week', new_parent, 'workflow', new_position, 'weekworkflow');
	    }
	  }
	}
	const WorkflowView = connect(mapWorkflowStateToProps$1, null)(WorkflowViewUnconnected);
	class WorkflowTableView extends reactExports.Component {
	  render() {
	    let data = this.props.data;
	    if (data.table_type == 1) return /*#__PURE__*/reactExports.createElement(CompetencyMatrixView$1, {
	      view_type: this.props.view_type,
	      renderer: this.props.renderer
	    });else return /*#__PURE__*/reactExports.createElement(WorkflowView_Outcome, {
	      view_type: this.props.view_type,
	      renderer: this.props.renderer
	    });
	  }
	}
	class ViewBarUnconnected extends reactExports.Component {
	  render() {
	    let data = this.props.data;
	    let sort_block;
	    if (this.props.renderer.view_type == 'outcometable' || this.props.renderer.view_type == 'horizontaloutcometable') {
	      let table_type_value = data.table_type || 0;
	      let sort_type = /*#__PURE__*/reactExports.createElement("div", {
	        className: "node-bar-sort-block"
	      }, this.props.renderer.outcome_sort_choices.map(choice => /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("input", {
	        disabled: table_type_value == 1 || data.type == 'program' && choice.type > 1,
	        type: "radio",
	        id: 'sort_type_choice' + choice.type,
	        name: 'sort_type_choice' + choice.type,
	        value: choice.type,
	        checked: data.outcomes_sort == choice.type,
	        onChange: this.changeSort.bind(this)
	      }), /*#__PURE__*/reactExports.createElement("label", {
	        htmlFor: 'sort_type_choice' + choice.type
	      }, choice.name))));
	      let table_type = /*#__PURE__*/reactExports.createElement("div", {
	        className: "node-bar-sort-block"
	      }, /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("input", {
	        type: "radio",
	        id: 'table_type_table',
	        name: "table_type_table",
	        value: 0,
	        checked: table_type_value == 0,
	        onChange: this.changeTableType.bind(this)
	      }), /*#__PURE__*/reactExports.createElement("label", {
	        htmlFor: "table_type_table"
	      }, window.gettext('Table Style'))), /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("input", {
	        type: "radio",
	        id: 'table_type_matrix',
	        name: "table_type_matrix",
	        value: 1,
	        checked: table_type_value == 1,
	        onChange: this.changeTableType.bind(this)
	      }), /*#__PURE__*/reactExports.createElement("label", {
	        htmlFor: "table_type_matrix"
	      }, window.gettext('Competency Matrix Style'))));
	      sort_block = /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Sort Nodes'), ":"), sort_type, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Table Type'), ":"), table_type);
	    }
	    let sets = /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-bar-sort-block"
	    }, this.props.object_sets.sort((a, b) => {
	      let x = a.term;
	      let y = b.term;
	      if (x < y) return -1;
	      if (x > y) return 1;
	      return 0;
	    }).map(set => /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("input", {
	      type: "checkbox",
	      id: 'set' + set.id,
	      value: set.id,
	      checked: !set.hidden,
	      onChange: this.toggleHidden.bind(this, set.id, !set.hidden)
	    }), /*#__PURE__*/reactExports.createElement("label", {
	      htmlFor: 'set' + set.id
	    }, set.title))));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      id: "node-bar-workflow",
	      className: "right-panel-inner"
	    }, /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('View options')), /*#__PURE__*/reactExports.createElement("hr", null), sort_block, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Object Sets')), sets);
	  }
	  toggleHidden(id, hidden) {
	    this.props.dispatch(toggleObjectSet(id, hidden));
	  }
	  changeSort(evt) {
	    this.props.dispatch(changeField(this.props.data.id, 'workflow', {
	      outcomes_sort: evt.target.value
	    }));
	  }
	  changeTableType(evt) {
	    this.props.dispatch(changeField(this.props.data.id, 'workflow', {
	      table_type: evt.target.value
	    }));
	  }
	}
	const ViewBar = connect(state => ({
	  object_sets: state.objectset
	}), null)(ViewBarUnconnected);
	class NodeBarUnconnected extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'workflow';
	  }
	  render() {
	    let data = this.props.data;
	    var nodebarcolumnworkflows = data.columnworkflow_set.map((columnworkflow, index) => /*#__PURE__*/reactExports.createElement(NodeBarColumnWorkflow, {
	      key: `NodeBarColumnWorkflow-${index}`,
	      renderer: this.props.renderer,
	      objectID: columnworkflow
	    }));
	    var columns_present = this.props.columns.map(col => col.column_type);
	    for (var i = 0; i < data.DEFAULT_COLUMNS.length; i++) {
	      if (columns_present.indexOf(data.DEFAULT_COLUMNS[i]) < 0) {
	        nodebarcolumnworkflows.push( /*#__PURE__*/reactExports.createElement(NodeBarColumnWorkflow, {
	          key: `NodeBarColumnWorkflow-${i}`,
	          renderer: this.props.renderer,
	          columnType: data.DEFAULT_COLUMNS[i]
	        }));
	      }
	    }
	    nodebarcolumnworkflows.push( /*#__PURE__*/reactExports.createElement(NodeBarColumnWorkflow, {
	      key: `NodeBarColumnWorkflow-last-${i}`,
	      renderer: this.props.renderer,
	      columnType: data.DEFAULT_CUSTOM_COLUMN
	    }));
	    let nodebar_nodes;
	    if (!this.props.renderer.read_only) nodebar_nodes = [/*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Nodes')), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-bar-column-block"
	    }, nodebarcolumnworkflows)];
	    var strategies = this.props.available_strategies.map(strategy => /*#__PURE__*/reactExports.createElement(StrategyView$1, {
	      key: strategy.id,
	      objectID: strategy.id,
	      data: strategy
	    }));
	    var saltise_strategies = this.props.saltise_strategies.map(strategy => /*#__PURE__*/reactExports.createElement(StrategyView$1, {
	      key: strategy.id,
	      objectID: strategy.id,
	      data: strategy
	    }));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      id: "node-bar-workflow",
	      className: "right-panel-inner"
	    }, /*#__PURE__*/reactExports.createElement("h3", {
	      className: "drag-and-drop"
	    }, window.gettext('Add to workflow')), /*#__PURE__*/reactExports.createElement("hr", null), nodebar_nodes, /*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('My strategies')), /*#__PURE__*/reactExports.createElement("div", {
	      className: "strategy-bar-strategy-block"
	    }, strategies), saltise_strategies.length > 0 && [/*#__PURE__*/reactExports.createElement("h4", null, window.gettext('SALTISE strategies')), /*#__PURE__*/reactExports.createElement("div", {
	      className: "strategy-bar-strategy-block"
	    }, saltise_strategies)]);
	  }
	}
	const mapNodeBarStateToProps = state => ({
	  data: state.workflow,
	  columns: state.column,
	  available_strategies: state.strategy,
	  saltise_strategies: state.saltise_strategy
	});
	const NodeBar = connect(mapNodeBarStateToProps, null)(NodeBarUnconnected);
	class RestoreBarUnconnected extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'workflow';
	  }
	  render() {
	    let columns = this.props.columns.map(column => /*#__PURE__*/reactExports.createElement(RestoreBarItem, {
	      key: column.id,
	      objectType: "column",
	      data: column,
	      renderer: this.props.renderer
	    }));
	    let weeks = this.props.weeks.map(week => /*#__PURE__*/reactExports.createElement(RestoreBarItem, {
	      key: week.id,
	      objectType: "week",
	      data: week,
	      renderer: this.props.renderer
	    }));
	    let nodes = this.props.nodes.map(node => /*#__PURE__*/reactExports.createElement(RestoreBarItem, {
	      key: node.id,
	      objectType: "node",
	      data: node,
	      renderer: this.props.renderer
	    }));
	    let outcomes = this.props.outcomes.map(outcome => /*#__PURE__*/reactExports.createElement(RestoreBarItem, {
	      key: outcome.id,
	      objectType: "outcome",
	      data: outcome,
	      renderer: this.props.renderer
	    }));
	    let nodelinks = this.props.nodelinks.map(nodelink => /*#__PURE__*/reactExports.createElement(RestoreBarItem, {
	      key: nodelink.id,
	      objectType: "nodelink",
	      data: nodelink,
	      renderer: this.props.renderer
	    }));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      id: "restore-bar-workflow",
	      className: "right-panel-inner"
	    }, /*#__PURE__*/reactExports.createElement("h3", null, window.gettext('Restore items')), /*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Nodes')), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-bar-column-block"
	    }, nodes), /*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Weeks')), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-bar-column-block"
	    }, weeks), /*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Columns')), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-bar-column-block"
	    }, columns), /*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Outcomes')), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-bar-column-block"
	    }, outcomes), /*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Node Links')), /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-bar-column-block"
	    }, nodelinks));
	  }
	  componentDidMount() {
	    this.checkVisible();
	  }
	  componentDidUpdate() {
	    this.checkVisible();
	  }
	  checkVisible() {
	    if (this.props.nodes.length == 0 && this.props.weeks.length == 0 && this.props.columns.length == 0 && this.props.outcomes.length == 0 && this.props.nodelinks.length == 0) {
	      $("a[href='#restore-bar']").parent().addClass('hidden');
	    } else {
	      $("a[href='#restore-bar']").parent().removeClass('hidden');
	    }
	  }
	}
	const mapRestoreBarStateToProps = state => ({
	  weeks: state.week.filter(x => x.deleted),
	  columns: state.column.filter(x => x.deleted),
	  nodes: state.node.filter(x => x.deleted),
	  outcomes: state.outcome.filter(x => x.deleted),
	  nodelinks: state.nodelink.filter(x => x.deleted)
	});
	const RestoreBar = connect(mapRestoreBarStateToProps, null)(RestoreBarUnconnected);
	class RestoreBarItem extends Component {
	  render() {
	    return /*#__PURE__*/reactExports.createElement("div", {
	      ref: this.maindiv,
	      className: "restore-bar-item"
	    }, /*#__PURE__*/reactExports.createElement("div", null, this.getTitle()), /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-created"
	    }, window.gettext('Deleted') + ' ' + this.props.data.deleted_on), /*#__PURE__*/reactExports.createElement("button", {
	      onClick: this.restore.bind(this)
	    }, window.gettext('Restore')), /*#__PURE__*/reactExports.createElement("button", {
	      onClick: this.delete.bind(this)
	    }, window.gettext('Permanently Delete')));
	  }
	  getTitle() {
	    if (this.props.data.title && this.props.data.title !== '') return this.props.data.title;
	    if (this.props.objectType == 'node' && this.props.data.represents_workflow && this.props.linked_workflow_data && this.props.data.linked_workflow_data.title && this.props.data.linked_workflow_data.title !== '') return this.props.data.linked_workflow_data.title;
	    return window.gettext('Untitled');
	  }
	  restore() {
	    this.setState({
	      disabled: true
	    });
	    this.props.renderer.tiny_loader.startLoad();
	    restoreSelf(this.props.data.id, this.props.objectType, () => {
	      this.props.renderer.tiny_loader.endLoad();
	    });
	  }
	  delete() {
	    if (window.confirm(window.gettext('Are you sure you want to permanently delete this object?'))) {
	      $(this.maindiv.current).children('button').attr('disabled', true);
	      this.props.renderer.tiny_loader.startLoad();
	      deleteSelf(this.props.data.id, this.props.objectType, false, () => {
	        this.props.renderer.tiny_loader.endLoad();
	      });
	    }
	  }
	}

	// class StrategyBarUnconnected extends React.Component{

	//     constructor(props){
	//         super(props);
	//         this.objectType="workflow";
	//     }

	//     render(){

	//         var strategies = this.props.available_strategies.map((strategy)=>
	//             <StrategyView key={strategy.id} objectID={strategy.id} data={strategy}/>
	//         );
	//         var saltise_strategies = this.props.saltise_strategies.map((strategy)=>
	//             <StrategyView key={strategy.id} objectID={strategy.id} data={strategy}/>
	//         );

	//         return reactDom.createPortal(
	//             <div id="strategy-bar-workflow" className="right-panel-inner">
	//                 <h4 className="drag-and-drop">{window.gettext("My Strategies")}:</h4>
	//                 <div className="strategy-bar-strategy-block">
	//                     {strategies}
	//                 </div>
	//                 {(saltise_strategies.length>0) &&
	//                     [<h4 className="drag-and-drop">{window.gettext("SALTISE Strategies")}:</h4>,
	//                     <div className="strategy-bar-strategy-block">
	//                         {saltise_strategies}
	//                     </div>
	//                      ]
	//                 }
	//             </div>
	//         ,$("#strategy-bar")[0]);
	//     }

	// }
	// const mapStrategyBarStateToProps = state=>({
	//     data:state.workflow,
	//     available_strategies:state.strategy,
	//     saltise_strategies:state.saltise_strategy,
	// })
	// export const StrategyBar = connect(
	//     mapStrategyBarStateToProps,
	//     null
	// )(StrategyBarUnconnected)

	//Basic component representing the workflow
	class WorkflowView_Outcome_Unconnected extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'workflow';
	    this.state = {};
	  }
	  render() {
	    let data = this.props.data;
	    let renderer = this.props.renderer;
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-details"
	    }, /*#__PURE__*/reactExports.createElement(WorkflowOutcomeLegend, {
	      renderer: renderer,
	      outcomes_type: data.outcomes_type
	    }), /*#__PURE__*/reactExports.createElement(WorkflowOutcomeView$1, {
	      renderer: renderer,
	      outcomes_type: data.outcomes_type
	    }));
	  }
	}
	const WorkflowView_Outcome = connect(mapWorkflowStateToProps$1, null)(WorkflowView_Outcome_Unconnected);
	class ParentWorkflowIndicatorUnconnected extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.state = {};
	  }
	  render() {
	    if (this.state.has_loaded) {
	      if (this.state.parent_workflows.length == 0 && this.props.child_workflows.length == 0) return null;
	      let parent_workflows = this.state.parent_workflows.map((parent_workflow, index) => /*#__PURE__*/reactExports.createElement(WorkflowTitle, {
	        key: `WorkflowTitleParent-${index}`,
	        data: parent_workflow,
	        test_id: "panel-favourite"
	      }));
	      let child_workflows = this.props.child_workflows.map((child_workflow, index) => /*#__PURE__*/reactExports.createElement(WorkflowTitle, {
	        key: `WorkflowTitleChild-${index}`,
	        data: child_workflow,
	        test_id: "panel-favourite"
	      }));
	      let return_val = [/*#__PURE__*/reactExports.createElement("hr", {
	        key: "br"
	      }), /*#__PURE__*/reactExports.createElement("a", {
	        key: "quick-nav",
	        className: "panel-item"
	      }, window.gettext('Quick Navigation'))];
	      if (parent_workflows.length > 0) return_val.push( /*#__PURE__*/reactExports.createElement("a", {
	        className: "panel-item"
	      }, window.gettext('Used in:')), ...parent_workflows);
	      if (child_workflows.length > 0) return_val.push( /*#__PURE__*/reactExports.createElement("a", {
	        className: "panel-item"
	      }, window.gettext('Workflows Used:')), ...child_workflows);
	      // return reactDom.createPortal(return_val, $('.left-panel-extra')[0])
	      // @todo see https://course-flow.atlassian.net/browse/COUR-246
	      return reactDomExports.createPortal(return_val, $('#react-portal-left-panel-extra')[0]);
	    }
	    return null;
	  }
	  componentDidMount() {
	    if (this.props.renderer.public_view) {
	      getPublicParentWorkflowInfo(this.props.workflow_id, response_data => this.setState({
	        parent_workflows: response_data.parent_workflows,
	        has_loaded: true
	      }));
	    } else {
	      getParentWorkflowInfo(this.props.workflow_id, response_data => this.setState({
	        parent_workflows: response_data.parent_workflows,
	        has_loaded: true
	      }));
	    }
	  }
	  getTypeIndicator(data) {
	    let type = data.type;
	    let type_text = window.gettext(type);
	    if (data.is_strategy) type_text += window.gettext(' strategy');
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: 'workflow-type-indicator ' + type
	    }, type_text);
	  }
	}
	const mapParentWorkflowIndicatorStateToProps = state => ({
	  child_workflows: state.node.filter(node => node.linked_workflow_data).map(node => ({
	    id: node.linked_workflow,
	    title: node.linked_workflow_data.title,
	    description: node.linked_workflow_data.description,
	    url: node.linked_workflow_data.url,
	    deleted: node.linked_workflow_data.deleted
	  }))
	});
	const ParentWorkflowIndicator = connect(mapParentWorkflowIndicatorStateToProps, null)(ParentWorkflowIndicatorUnconnected);

	//Container for the workflows to be compared
	class ComparisonView extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.objectType = 'workflow';
	    this.allowed_tabs = [0, 3];
	    let querystring = window.location.search;
	    let url_params = new URLSearchParams(querystring);
	    let workflows_added = url_params.getAll('workflows').map(workflow_id => parseInt(workflow_id));
	    this.state = {
	      workflows: workflows_added,
	      object_sets: props.data.object_sets
	    };
	  }
	  render() {
	    let data = this.props.data;
	    let renderer = this.props.renderer;
	    if (!this.props.renderer.read_only) /*#__PURE__*/reactExports.createElement("div", {
	      id: "share-button",
	      className: "hover-shade",
	      title: window.gettext('Sharing'),
	      onClick: renderMessageBox.bind(this, data, 'share_menu', closeMessageBox)
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + 'add_person.svg'
	    }));
	    let view_buttons = [{
	      type: 'workflowview',
	      name: window.gettext('Workflow View'),
	      disabled: []
	    }, {
	      type: 'outcomeedit',
	      name: capWords(window.gettext('View') + ' outcomes'),
	      disabled: []
	    }].filter(item => item.disabled.indexOf(data.type) == -1).map(item => {
	      let view_class = 'hover-shade';
	      if (item.type == renderer.view_type) view_class += ' active';
	      return /*#__PURE__*/reactExports.createElement("div", {
	        id: 'button_' + item.type,
	        className: view_class,
	        onClick: this.changeView.bind(this, item.type)
	      }, item.name);
	    });
	    let view_buttons_sorted = view_buttons;
	    let workflow_content = this.state.workflows.map(workflowID => /*#__PURE__*/reactExports.createElement(WorkflowComparisonRendererComponent, {
	      removeFunction: this.removeWorkflow.bind(this, workflowID),
	      view_type: renderer.view_type,
	      workflowID: workflowID,
	      key: workflowID,
	      tiny_loader: this.props.tiny_loader,
	      selection_manager: this.props.selection_manager,
	      object_sets: this.state.object_sets
	    }));
	    let add_button = /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("button", {
	      id: "load-workflow",
	      className: "primary-button",
	      onClick: this.loadWorkflow.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "flex-middle"
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded filled"
	    }, "add_circle"), /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Load new workflow')))));
	    if (data.lock) {
	      '2px solid ' + data.lock.user_colour;
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "main-block"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "right-panel-wrapper"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "body-wrapper"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      id: "workflow-wrapper",
	      className: "workflow-wrapper"
	    }, this.getHeader(), /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-view-select hide-print"
	    }, view_buttons_sorted), /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-container comparison-view"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-array"
	    }, workflow_content), add_button))), /*#__PURE__*/reactExports.createElement(RightSideBar$1, {
	      context: "comparison",
	      renderer: this.props.renderer,
	      data: data,
	      toggleObjectSet: this.toggleObjectSet.bind(this),
	      object_sets: this.state.object_sets
	    })));
	  }
	  getHeader() {
	    let data = this.props.data;
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-header"
	    }, /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Comparing workflows for:')), /*#__PURE__*/reactExports.createElement(WorkflowTitle, {
	      data: data,
	      no_hyperlink: true,
	      class_name: "project-title"
	    }), reactDomExports.createPortal( /*#__PURE__*/reactExports.createElement("a", {
	      className: "hover-shade no-underline",
	      id: "project-return",
	      href: window.config.update_path['project'].replace(0, data.id)
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "green material-symbols-rounded"
	    }, "arrow_back_ios"), /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Return to project'))), $('.titlebar .title')[0]));
	  }
	  makeSortable() {
	    $('.workflow-array').sortable({
	      axis: 'x',
	      stop: function (evt, ui) {}
	    });
	  }
	  componentDidMount() {
	    this.makeSortable();
	    this.updateTabs();
	    window.addEventListener('click', evt => {
	      if ($(evt.target).closest('.other-views').length == 0) {
	        $('.views-dropdown').removeClass('toggled');
	      }
	    });
	  }
	  componentDidUpdate(prev_props) {
	    this.makeSortable();
	    if (prev_props.view_type != this.props.view_type) this.updateTabs();
	  }
	  updateTabs() {
	    //If the view type has changed, enable only appropriate tabs, and change the selection to none

	    // @todo take out of render prop
	    this.props.renderer.selection_manager.changeSelection(null, null);
	    let disabled_tabs = [];
	    for (let i = 0; i < 4; i++) if (this.allowed_tabs.indexOf(i) < 0) disabled_tabs.push(i);
	    $('#sidebar').tabs({
	      disabled: false
	    });
	    let current_tab = $('#sidebar').tabs('option', 'active');
	    if (this.allowed_tabs.indexOf(current_tab) < 0) {
	      if (this.allowed_tabs.length == 0) $('#sidebar').tabs({
	        active: false
	      });else $('#sidebar').tabs({
	        active: this.allowed_tabs[0]
	      });
	    }
	    $('#sidebar').tabs({
	      disabled: disabled_tabs
	    });
	  }
	  changeView(type) {
	    // @todo take out of render prop
	    this.props.renderer.selection_manager.changeSelection(null, null);

	    // ?? pass in the parent renderer container as its own new container, how is this working?
	    // @todo take out of render prop
	    this.props.renderer.render(this.props.renderer.container, type);
	  }
	  openEdit() {}
	  loadWorkflow() {
	    let renderer = this.props.renderer;
	    renderer.tiny_loader.startLoad();
	    getWorkflowSelectMenu(this.props.data.id, 'workflow', false, true, response_data => {
	      if (response_data.workflowID != null) {
	        let workflows = this.state.workflows.slice();
	        workflows.push(response_data.workflowID);
	        this.setState({
	          workflows: workflows
	        });
	      }
	    }, () => {
	      renderer.tiny_loader.endLoad();
	    });
	  }
	  removeWorkflow(workflow_id) {
	    let workflows = this.state.workflows.slice();
	    workflows.splice(workflows.indexOf(workflow_id), 1);
	    this.setState({
	      workflows: workflows
	    });
	  }
	  toggleObjectSet(id) {
	    let object_sets = this.state.object_sets.slice();
	    let hidden;
	    for (let i = 0; i < object_sets.length; i++) {
	      if (object_sets[i].id === id) {
	        hidden = !object_sets[i].hidden;
	        object_sets[i].hidden = hidden;
	        break;
	      }
	    }
	    this.setState({
	      object_sets: object_sets
	    });
	    $(document).triggerHandler('object_set_toggled', {
	      id: id,
	      hidden: hidden
	    });
	  }
	}
	class WorkflowComparisonRendererComponent extends Component {
	  constructor(props) {
	    super(props);
	    this.maindiv = reactExports.createRef();
	  }
	  render() {
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-wrapper",
	      id: 'workflow-' + this.props.workflowID
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      id: "workflow-inner-wrapper",
	      ref: this.maindiv
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "window-close-button",
	      onClick: this.props.removeFunction
	    }, /*#__PURE__*/reactExports.createElement("img", {
	      src: window.config.icon_path + 'close.svg'
	    })));
	  }
	  componentDidMount() {
	    let loader = new Loader('body');
	    let querystring = window.location.search;
	    let url_params = new URLSearchParams(querystring);
	    let workflows_added = url_params.getAll('workflows').map(workflow_id => parseInt(workflow_id));
	    if (workflows_added.indexOf(this.props.workflowID) < 0) {
	      url_params.append('workflows', this.props.workflowID);

	      // @todo
	      if (history.pushState) {
	        let newurl = window.location.protocol + '//' + window.location.host + window.location.pathname + '?' + url_params.toString();
	        window.history.pushState({
	          path: newurl
	        }, '', newurl);
	      }
	    }
	    getWorkflowContext(this.props.workflowID, context_response_data => {
	      let context_data = context_response_data.data_package;

	      // @todo this will need to be unpacked, type unified with parent and called into parent
	      // is there a reason #workflow-inner-wrapper is a real dom element?
	      // this needs to be imported directly but that would cuase Circ D.
	      this.renderer = new renderers.WorkflowComparisonRenderer(this.props.workflowID, JSON.parse(context_data.data_package), '#workflow-inner-wrapper', this.props.selection_manager, this.props.tiny_loader, this.props.view_type, this.props.object_sets);
	      this.renderer.silent_connect_fail = true;
	      this.renderer.connect();
	      loader.endLoad();
	    });
	  }
	  componentDidUpdate(prev_props) {
	    if (prev_props.view_type != this.props.view_type) this.renderer.render(this.props.view_type);
	  }
	  componentWillUnmount() {
	    let querystring = window.location.search;
	    let url_params = new URLSearchParams(querystring);
	    let workflows_added = url_params.getAll('workflows').map(workflow_id => parseInt(workflow_id));
	    if (workflows_added.indexOf(this.props.workflowID) >= 0) {
	      workflows_added.splice(workflows_added.indexOf(this.props.workflowID), 1);
	      url_params.set('workflows', workflows_added);
	      if (history.pushState) {
	        let newurl = window.location.protocol + '//' + window.location.host + window.location.pathname + '?' + url_params.toString();
	        window.history.pushState({
	          path: newurl
	        }, '', newurl);
	      }
	    }
	  }
	}

	//Container for common elements for workflows
	class WorkflowComparisonBaseViewUnconnected extends EditableComponent {
	  constructor(props) {
	    super(props);
	    this.objectType = 'workflow';
	  }
	  render() {
	    let data = this.props.data;
	    let renderer = this.props.renderer;
	    renderer.selection_manager;
	    let workflow_content;
	    if (renderer.view_type == 'outcomeedit') {
	      workflow_content = /*#__PURE__*/reactExports.createElement(OutcomeComparisonView, {
	        renderer: renderer,
	        objectID: data.id
	      });
	    } else {
	      workflow_content = /*#__PURE__*/reactExports.createElement(WorkflowComparisonView, {
	        renderer: renderer,
	        objectID: data.id
	      });
	    }
	    let style = {};
	    if (data.lock) {
	      style.border = '2px solid ' + data.lock.user_colour;
	    }
	    return [/*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-header",
	      style: style
	    }, /*#__PURE__*/reactExports.createElement(WorkflowForMenu, {
	      workflow_data: data,
	      selectAction: this.openEdit.bind(this, null)
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-container"
	    }, this.addEditable(data, true), workflow_content)];
	  }
	  openEdit(evt) {
	    this.props.renderer.selection_manager.changeSelection(evt, this);
	  }
	  componentDidMount() {
	    this.props.renderer.silent_connect_fail = true;
	    this.alignAllHeaders();
	    this.addObjectSetTrigger();
	  }
	  componentDidUpdate() {
	    this.alignAllHeaders();
	  }
	  addObjectSetTrigger() {
	    let props = this.props;
	    $(document).off('object_set_toggled.' + this.props.data.id);
	    $(document).on('object_set_toggled.' + this.props.data.id, (evt, data) => {
	      props.dispatch(toggleObjectSet(data.id, data.hidden));
	    });
	  }
	  alignAllHeaders() {
	    this.props.rank + 1;
	    $('.comparison-view .workflow-header').css({
	      height: ''
	    });
	    let max_height = 0;
	    $('.comparison-view .workflow-header').each(function () {
	      let this_height = $(this).height();
	      if (this_height > max_height) max_height = this_height;
	    });
	    $('.comparison-view .workflow-header').css({
	      height: max_height + 'px'
	    });
	  }
	}
	const mapWorkflowStateToProps = state => ({
	  data: state.workflow,
	  object_sets: state.objectset
	});
	connect(mapWorkflowStateToProps, null)(WorkflowComparisonBaseViewUnconnected);

	//Basic component representing the workflow
	class WorkflowComparisonViewUnconnected extends EditableComponentWithSorting {
	  constructor(props) {
	    super(props);
	    this.objectType = 'workflow';
	    this.state = {};
	  }
	  render() {
	    let data = this.props.data;
	    let renderer = this.props.renderer;
	    var weekworkflows = data.weekworkflow_set.map(weekworkflow => /*#__PURE__*/reactExports.createElement(WeekWorkflowComparisonView, {
	      condensed: data.condensed,
	      key: weekworkflow,
	      objectID: weekworkflow,
	      parentID: data.id,
	      renderer: renderer
	    }));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-details"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "week-block",
	      id: data.id + '-week-block'
	    }, weekworkflows));
	  }
	  componentDidMount() {
	    this.makeDragAndDrop();
	  }
	  componentDidUpdate() {
	    this.makeDragAndDrop();
	  }
	  makeDragAndDrop() {
	    this.makeSortableNode($('.week-block').children('.week-workflow').not('.ui-draggable'), this.props.objectID, 'weekworkflow', '.week-workflow', false, false, '#workflow-' + this.props.data.id, '.week', '.week-block');
	  }
	  stopSortFunction() {
	    triggerHandlerEach($('.week .node'), 'component-updated');
	  }
	  sortableMovedFunction(id, new_position, type, new_parent, child_id) {
	    if (type == 'weekworkflow') {
	      // @todo take out of render prop
	      this.props.renderer.micro_update(moveWeekWorkflow(id, new_position, new_parent, child_id));
	      insertedAt(this.props.renderer, child_id, 'week', new_parent, 'workflow', new_position, 'weekworkflow');
	    }
	  }
	}
	const WorkflowComparisonView = connect(mapWorkflowStateToProps, null)(WorkflowComparisonViewUnconnected);

	//Outcome view body for comparison
	class OutcomeComparisonViewUnconnected extends OutcomeEditViewUnconnected {
	  getParentOutcomeBar() {
	    return null;
	  }
	  makeDragAndDrop() {
	    this.makeSortableNode($(this.maindiv.current).find('.outcome-workflow').not('ui-draggable'), this.props.objectID, 'outcomeworkflow', '.outcome-workflow', false, false, '#workflow-' + this.props.workflow.id);
	    if (this.props.data.depth == 0) this.makeDroppable();
	  }
	  sortableMovedOutFunction(id, new_position, type, new_parent, child_id) {
	    if (type == 'outcomeworkflow' && confirm(window.gettext("You've moved an outcome to another workflow. Nodes tagged with this outcome will have it removed. Do you want to continue?"))) {
	      insertedAt(
	      // @todo take out of render prop
	      this.props.renderer, null, 'outcome', this.props.workflow.id, 'workflow', new_position, 'outcomeworkflow');
	      insertedAtInstant(this.props.renderer, child_id, 'outcome', this.props.workflow.id, 'workflow', new_position, 'outcomeworkflow');
	    }
	  }
	}
	const mapOutcomeComparisonStateToProps = state => ({
	  data: getSortedOutcomesFromOutcomeWorkflowSet(state, state.workflow.outcomeworkflow_set),
	  workflow: state.workflow
	});
	const OutcomeComparisonView = connect(mapOutcomeComparisonStateToProps, null)(OutcomeComparisonViewUnconnected);
	class ComparisonViewBar extends reactExports.Component {
	  render() {
	    let sets = /*#__PURE__*/reactExports.createElement("div", {
	      className: "node-bar-sort-block"
	    }, this.props.object_sets.sort((a, b) => {
	      let x = a.term;
	      let y = b.term;
	      if (x < y) return -1;
	      if (x > y) return 1;
	      return 0;
	    }).map(set => /*#__PURE__*/reactExports.createElement("div", null, /*#__PURE__*/reactExports.createElement("input", {
	      type: "checkbox",
	      id: 'set' + set.id,
	      value: set.id,
	      checked: !set.hidden,
	      onChange: this.toggleHidden.bind(this, set.id)
	    }), /*#__PURE__*/reactExports.createElement("label", {
	      htmlFor: 'set' + set.id
	    }, set.title))));
	    return /*#__PURE__*/reactExports.createElement("div", {
	      id: "node-bar-workflow",
	      className: "right-panel-inner"
	    }, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Object Sets') + ':'), sets);
	  }
	  toggleHidden(id) {
	    this.props.toggleObjectSet(id);
	  }
	}

	/**
	 * Creates the right-hand panel with edit, view, etc for workflows,
	 * including the comparison view.
	 */
	class RightSideBar extends reactExports.Component {
	  /*******************************************************
	   * LIFECYCLE
	   *******************************************************/
	  componentDidMount() {
	    this.makeTabs();
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  makeTabs() {
	    $('#sidebar').tabs({
	      active: 1,
	      disabled: [0],
	      collapsible: true,
	      activate: (evt, ui) => {
	        if (ui.oldTab.length == 0) $('#sidebar').removeClass('collapsed');else if (ui.newTab.length == 0) $('#sidebar').addClass('collapsed');
	      }
	    });
	    $('#sidebar').on('dblclick mousedown', evt => {
	      evt.stopPropagation();
	    });
	    $('#side-bar-close-button').on('click', () => {
	      $('#sidebar').addClass('collapsed');
	      $('#sidebar').tabs('option', 'active', false);
	    });
	  }
	  getNodeBar() {
	    if (this.props.context == 'workflow') return /*#__PURE__*/reactExports.createElement(NodeBar, {
	      view_type: this.props.renderer.view_type,
	      renderer: this.props.renderer
	    });
	    return null;
	  }
	  getOutcomeBar() {
	    if (this.props.context == 'comparison') return null;
	    let renderer = this.props.renderer;
	    if (renderer.view_type == 'outcomeedit') return /*#__PURE__*/reactExports.createElement(ParentOutcomeBar, {
	      renderer: renderer
	    });else return /*#__PURE__*/reactExports.createElement(OutcomeBar, {
	      renderer: renderer
	    });
	  }
	  getViewBar() {
	    if (this.props.context == 'workflow') return /*#__PURE__*/reactExports.createElement(ViewBar, {
	      data: this.props.data,
	      renderer: this.props.renderer
	    });else if (this.props.context == 'comparison') return /*#__PURE__*/reactExports.createElement(ComparisonViewBar, {
	      toggleObjectSet: this.props.toggleObjectSet,
	      object_sets: this.props.object_sets,
	      renderer: this.props.renderer
	    });
	  }
	  getRestoreBar() {
	    if (this.props.context == 'workflow') return /*#__PURE__*/reactExports.createElement(RestoreBar, {
	      renderer: this.props.renderer
	    });
	    return null;
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let renderer = this.props.renderer;
	    return /*#__PURE__*/reactExports.createElement("div", {
	      id: "sidebar",
	      className: "side-bar hide-print"
	    }, /*#__PURE__*/reactExports.createElement("ul", null, /*#__PURE__*/reactExports.createElement("li", {
	      className: "hover-shade"
	    }, /*#__PURE__*/reactExports.createElement("a", {
	      href: "#edit-menu"
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded filled",
	      title: gettext('Edit')
	    }, "edit"))), /*#__PURE__*/reactExports.createElement("li", {
	      className: "hover-shade"
	    }, /*#__PURE__*/reactExports.createElement("a", {
	      href: "#node-bar"
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded filled",
	      title: gettext('Add')
	    }, "add_circle"))), !renderer.is_strategy && /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement("li", {
	      className: "hover-shade"
	    }, /*#__PURE__*/reactExports.createElement("a", {
	      href: "#outcome-bar"
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded filled",
	      title: gettext('Outcomes')
	    }, "spoke"))), /*#__PURE__*/reactExports.createElement("li", {
	      className: "hover-shade"
	    }, /*#__PURE__*/reactExports.createElement("a", {
	      href: "#view-bar"
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded filled",
	      title: gettext('View Options')
	    }, "remove_red_eye")))), /*#__PURE__*/reactExports.createElement("li", {
	      className: "hover-shade"
	    }, /*#__PURE__*/reactExports.createElement("a", {
	      href: "#restore-bar"
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded filled",
	      title: gettext('Restore Deleted')
	    }, "restore_from_trash")))), /*#__PURE__*/reactExports.createElement("div", {
	      id: "edit-menu",
	      className: "right-panel-container"
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      id: "node-bar",
	      className: "right-panel-container"
	    }, this.getNodeBar()), !this.props.renderer.is_strategy && /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement("div", {
	      id: "outcome-bar",
	      className: "right-panel-container"
	    }, this.getOutcomeBar()), /*#__PURE__*/reactExports.createElement("div", {
	      id: "view-bar",
	      className: "right-panel-container"
	    }, this.getViewBar())), !renderer.read_only && /*#__PURE__*/reactExports.createElement("div", {
	      id: "restore-bar",
	      className: "right-panel-container"
	    }, this.getRestoreBar()), /*#__PURE__*/reactExports.createElement("div", {
	      className: "window-close-button",
	      id: "side-bar-close-button"
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded green"
	    }, "arrow_forward")));
	  }
	}
	var RightSideBar$1 = RightSideBar;

	/*******************************************************
	 * The main library menu
	 *
	 * On mount, this will fetch the user's projects. When they have been
	 * retrieved it will display them in a workflowfilter.
	 *******************************************************/
	class LibraryMenu extends reactExports.Component {
	  constructor(data) {
	    super(data);
	    this.state = {};
	    this.read_only = this.data.props.renderer.read_only;
	    this.renderer = this.data.props.renderer;
	    this.createDiv = reactExports.createRef();
	  }

	  /*******************************************************
	   * LIFECYCLE HOOKS
	   *******************************************************/
	  componentDidMount() {
	    getLibrary(data => {
	      this.setState({
	        project_data: data.data_package
	      });
	    });
	    makeDropdown(this.createDiv.current);
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  getCreate() {
	    let create;
	    if (!this.read_only) create = /*#__PURE__*/reactExports.createElement("div", {
	      className: "hover-shade",
	      id: "create-project-button",
	      title: window.gettext('Create project or strategy'),
	      ref: this.createDiv
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded filled green"
	    }, "add_circle"), /*#__PURE__*/reactExports.createElement("div", {
	      id: "create-links-project",
	      className: "create-dropdown"
	    }, /*#__PURE__*/reactExports.createElement("a", {
	      id: "project-create-library",
	      href: window.config.create_path.project,
	      className: "hover-shade"
	    }, window.gettext('New project')), /*#__PURE__*/reactExports.createElement("hr", null), /*#__PURE__*/reactExports.createElement("a", {
	      id: "activity-strategy-create",
	      href: window.config.create_path.activity_strategy,
	      className: "hover-shade"
	    }, window.gettext('New activity strategy')), /*#__PURE__*/reactExports.createElement("a", {
	      id: "course-strategy-create",
	      href: window.config.create_path.course_strategy,
	      className: "hover-shade"
	    }, window.gettext('New course strategy'))));
	    return create;
	  }
	  getOverflowLinks() {
	    let overflow_links = [];
	    overflow_links.push( /*#__PURE__*/reactExports.createElement("a", {
	      id: "import-old",
	      className: "hover-shade",
	      href: window.config.get_paths.import
	    }, window.gettext('Import from old CourseFlow')));
	    return overflow_links;
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let visible_buttons = this.getCreate.bind(this);
	    let overflow_links = this.getOverflowLinks.bind(this);
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "main-block"
	    }, /*#__PURE__*/reactExports.createElement(MenuBar$1, {
	      overflow_links: overflow_links,
	      visible_buttons: visible_buttons
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-menu"
	    }, /*#__PURE__*/reactExports.createElement(WorkflowFilter, {
	      renderer: this.props.renderer,
	      workflows: this.state.project_data,
	      context: "library"
	    })));
	  }
	}

	class ExploreFilter extends WorkflowFilter {
	  constructor(props) {
	    super(props);
	    this.filters = [{
	      name: 'activity',
	      display: window.gettext('Activity')
	    }, {
	      name: 'course',
	      display: window.gettext('Course')
	    }, {
	      name: 'program',
	      display: window.gettext('Program')
	    }, {
	      name: 'project',
	      display: window.gettext('Project')
	    }];
	    this.sorts = [{
	      name: 'relevance',
	      display: window.gettext('Relevance')
	    }, {
	      name: 'title',
	      display: window.gettext('A-Z')
	    }, {
	      name: 'created_on',
	      display: window.gettext('Creation date')
	    }];
	    this.state = {
	      workflows: props.workflows,
	      pages: this.props.renderer.initial_pages,
	      has_searched: false,
	      active_sort: 0,
	      active_filters: [],
	      active_disciplines: [],
	      reversed: false,
	      from_saltise: false,
	      content_rich: true
	    };
	    this.filterDOM = reactExports.createRef();
	    this.searchDOM = reactExports.createRef();
	    this.sortDOM = reactExports.createRef();
	    this.disciplineDOM = reactExports.createRef();
	  }

	  /*******************************************************
	   * Lifecycle hooks
	   *******************************************************/
	  componentDidMount() {
	    makeDropdown(this.disciplineDOM.current);
	    super.componentDidMount();
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  doSearch() {
	    this.searchWithout($(this.searchDOM.current).children('#workflow-search-input')[0].value, this.searchResults.bind(this));
	  }
	  getInfo() {
	    if (this.state.workflows === this.props.workflows) return /*#__PURE__*/reactExports.createElement("p", null, window.gettext("Enter a search term or filter then click 'search' to get started."));
	    return null;
	  }
	  getPages() {
	    if (this.state.workflows.length > 0) {
	      let page_buttons = [/*#__PURE__*/reactExports.createElement("button", {
	        id: "prev-page-button",
	        disabled: this.state.pages.current_page == 1,
	        onClick: this.toPage.bind(this, this.state.pages.current_page - 1)
	      }, /*#__PURE__*/reactExports.createElement("span", {
	        className: "material-symbols-rounded"
	      }, "arrow_left"))];
	      if (this.state.pages.current_page > 3) {
	        page_buttons.push( /*#__PURE__*/reactExports.createElement("button", {
	          className: "page-button",
	          onClick: this.toPage.bind(this, 1)
	        }, 1));
	        if (this.state.pages.current_page > 4) {
	          page_buttons.push( /*#__PURE__*/reactExports.createElement("div", {
	            className: "page-button no-button"
	          }, "..."));
	        }
	      }
	      for (let i = Math.max(this.state.pages.current_page - 2, 1); i <= Math.min(this.state.pages.current_page + 2, this.state.pages.page_count); i++) {
	        let button_class = 'page-button';
	        if (i === this.state.pages.current_page) button_class += ' active-page-button';
	        page_buttons.push( /*#__PURE__*/reactExports.createElement("button", {
	          className: button_class,
	          onClick: this.toPage.bind(this, i)
	        }, i));
	      }
	      if (this.state.pages.current_page < this.state.pages.page_count - 2) {
	        if (this.state.pages.current_page < this.state.pages.page_count - 3) {
	          page_buttons.push( /*#__PURE__*/reactExports.createElement("div", {
	            className: "page-button no-button"
	          }, "..."));
	        }
	        page_buttons.push( /*#__PURE__*/reactExports.createElement("button", {
	          className: "page-button",
	          onClick: this.toPage.bind(this, this.state.pages.page_count)
	        }, this.state.pages.page_count));
	      }
	      page_buttons.push( /*#__PURE__*/reactExports.createElement("button", {
	        id: "next-page-button",
	        disabled: this.state.pages.current_page == this.state.pages.page_count,
	        onClick: this.toPage.bind(this, this.state.pages.current_page + 1)
	      }, /*#__PURE__*/reactExports.createElement("span", {
	        className: "material-symbols-rounded"
	      }, "arrow_right")));
	      return [/*#__PURE__*/reactExports.createElement("p", null, window.gettext('Showing results'), ' ', this.state.pages.results_per_page * (this.state.pages.current_page - 1) + 1, "-", this.state.pages.results_per_page * this.state.pages.current_page, " (", this.state.pages.total_results, " ", window.gettext('total results'), ")"), /*#__PURE__*/reactExports.createElement("div", {
	        className: "explore-page-buttons"
	      }, page_buttons)];
	    } else {
	      return /*#__PURE__*/reactExports.createElement("p", null, window.gettext('No results were found.'));
	    }
	  }
	  toPage(number) {
	    this.searchWithout($(this.searchDOM.current).children('#workflow-search-input')[0].value, this.searchResults.bind(this), number);
	  }
	  getFilter() {
	    return /*#__PURE__*/reactExports.createElement("div", {
	      id: "workflow-filter",
	      ref: this.filterDOM,
	      className: "hover-shade"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: 'workflow-sort-indicator hover-shade item-' + this.state.active_filters.length
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded"
	    }, "filter_alt"), /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Type'))), /*#__PURE__*/reactExports.createElement("div", {
	      className: "create-dropdown"
	    }, this.filters.map((filter, i) => {
	      let css_class = 'filter-option flex-middle';
	      if (this.state.active_filters.indexOf(filter.name) >= 0) css_class += ' active';
	      return /*#__PURE__*/reactExports.createElement("div", {
	        className: css_class,
	        onClick: evt => {
	          evt.stopPropagation();
	          this.filterChange(filter);
	          //This is very hacky, but if we're updating we need to re-open the sort dropdown
	          $(this.filterDOM.current).children('.create-dropdown').addClass('active');
	        }
	      }, /*#__PURE__*/reactExports.createElement("input", {
	        type: "checkbox",
	        checked: this.state.active_filters.indexOf(filter.name) >= 0
	      }), filter.display);
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      attr_number: this.state.active_filters.length,
	      className: "dropdown-number-indicator"
	    }, this.state.active_filters.length));
	  }
	  getSort() {
	    let active_sort = this.sorts[this.state.active_sort];
	    return /*#__PURE__*/reactExports.createElement("div", {
	      id: "workflow-sort",
	      ref: this.sortDOM,
	      className: "hover-shade"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: 'workflow-sort-indicator hover-shade item-' + this.state.active_sort
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded"
	    }, "sort"), /*#__PURE__*/reactExports.createElement("div", null, active_sort.display)), /*#__PURE__*/reactExports.createElement("div", {
	      className: "create-dropdown"
	    }, this.sorts.map((sort, i) => {
	      let sort_dir;
	      let css_class = 'filter-option filter-checkbox';
	      if (this.state.active_sort == i) {
	        css_class += ' active';
	        if (this.state.reversed) sort_dir = /*#__PURE__*/reactExports.createElement("span", {
	          className: "material-symbols-rounded"
	        }, "north");else sort_dir = /*#__PURE__*/reactExports.createElement("span", {
	          className: "material-symbols-rounded"
	        }, "south");
	      }
	      return /*#__PURE__*/reactExports.createElement("div", {
	        className: css_class,
	        onClick: evt => {
	          evt.stopPropagation();
	          this.sortChange(i);
	          //This is very hacky, but if we're updating we need to re-open the sort dropdown
	          $(this.sortDOM.current).children('.create-dropdown').addClass('active');
	        }
	      }, sort_dir, sort.display);
	    })));
	  }
	  getDisciplines() {
	    return /*#__PURE__*/reactExports.createElement("div", {
	      id: "workflow-disciplines",
	      ref: this.disciplineDOM,
	      className: "hover-shade"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: 'workflow-sort-indicator hover-shade item-' + this.state.active_disciplines.length
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded"
	    }, "science"), /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Discipline'))), /*#__PURE__*/reactExports.createElement("div", {
	      className: "create-dropdown"
	    }, this.props.disciplines.map((discipline, i) => {
	      let css_class = 'filter-option flex-middle';
	      if (this.state.active_disciplines.indexOf(discipline.id) >= 0) css_class += ' active';
	      return /*#__PURE__*/reactExports.createElement("div", {
	        className: css_class,
	        onClick: evt => {
	          evt.stopPropagation();
	          this.disciplineChange(discipline);
	          //This is very hacky, but if we're updating we need to re-open the sort dropdown
	          $(this.disciplineDOM.current).children('.create-dropdown').addClass('active');
	        }
	      }, /*#__PURE__*/reactExports.createElement("input", {
	        type: "checkbox",
	        checked: this.state.active_disciplines.indexOf(discipline.id) >= 0
	      }), discipline.title);
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      attr_number: this.state.active_disciplines.length,
	      className: "dropdown-number-indicator"
	    }, this.state.active_disciplines.length));
	  }
	  getFromSaltise() {
	    return /*#__PURE__*/reactExports.createElement("div", {
	      title: window.gettext('Restrict results to content provided by SALTISE'),
	      id: "content-rich",
	      className: "hover-shade",
	      onClick: () => {
	        this.setState({
	          from_saltise: !this.state.from_saltise,
	          has_searched: false
	        });
	        this.doSearch();
	      }
	    }, /*#__PURE__*/reactExports.createElement("input", {
	      type: "checkbox",
	      checked: this.state.from_saltise
	    }), /*#__PURE__*/reactExports.createElement("label", null, window.gettext('SALTISE content')));
	  }
	  searchResults(response_data, pages) {
	    this.setState({
	      workflows: response_data,
	      pages: pages
	    });
	  }
	  filterChange(filter, evt) {
	    let name = filter.name;
	    let new_filter = this.state.active_filters.slice();
	    if (new_filter.indexOf(name) >= 0) new_filter.splice(new_filter.indexOf(name), 1);else new_filter.push(name);
	    this.setState({
	      active_filters: new_filter,
	      has_searched: false
	    });
	  }
	  sortChange(index) {
	    if (this.state.active_sort === index) this.setState({
	      reversed: !this.state.reversed,
	      has_searched: false
	    });else this.setState({
	      active_sort: index,
	      reversed: false,
	      has_searched: false
	    });
	  }
	  disciplineChange(discipline) {
	    let name = discipline.id;
	    let new_filter = this.state.active_disciplines.slice();
	    if (new_filter.indexOf(name) >= 0) new_filter.splice(new_filter.indexOf(name), 1);else new_filter.push(name);
	    this.setState({
	      active_disciplines: new_filter,
	      has_searched: false
	    });
	  }
	  searchChange(evt) {
	    this.setState({
	      has_searched: false
	    });
	  }
	  searchWithout(request, response_function, page_number = 1) {
	    this.setState({
	      has_searched: true
	    });
	    this.props.renderer.tiny_loader.startLoad();
	    searchAllObjects(request, {
	      nresults: 20,
	      published: true,
	      full_search: true,
	      disciplines: this.state.active_disciplines,
	      types: this.state.active_filters,
	      sort: this.sorts[this.state.active_sort].name,
	      sort_reversed: this.state.reversed,
	      page: page_number,
	      from_saltise: this.state.from_saltise,
	      content_rich: this.state.content_rich
	    }, response_data => {
	      response_function(response_data.workflow_list, response_data.pages);
	      this.props.renderer.tiny_loader.endLoad();
	    });
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let workflows = this.state.workflows.map(workflow => /*#__PURE__*/reactExports.createElement(WorkflowForMenu, {
	      key: workflow.type + workflow.id,
	      workflow_data: workflow,
	      context: this.props.context
	    }));
	    return [/*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-filter-top"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "flex-middle"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      id: "workflow-search",
	      ref: this.searchDOM
	    }, /*#__PURE__*/reactExports.createElement("input", {
	      placeholder: window.gettext('Search the public library'),
	      onChange: debounce(this.searchChange.bind(this)),
	      id: "workflow-search-input",
	      className: "search-input"
	    }), /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded"
	    }, "search")), /*#__PURE__*/reactExports.createElement("button", {
	      className: "primary-button",
	      disabled: this.state.has_searched,
	      onClick: this.doSearch.bind(this)
	    }, window.gettext('Search'))), /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-filter-sort"
	    }, this.getFromSaltise(), this.getFilter(), this.getDisciplines(), this.getSort())), this.getInfo(), /*#__PURE__*/reactExports.createElement("div", {
	      className: "menu-grid"
	    }, workflows), this.getPages()];
	  }
	}

	// @todo fix consitent props drilling
	// this.props.disciplines
	//  this.props.renderer.initial_workflows
	// etc
	class ExploreMenu extends LibraryMenu {
	  render() {
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-menu"
	    }, /*#__PURE__*/reactExports.createElement(ExploreFilter, {
	      disciplines: this.props.disciplines,
	      renderer: this.props.renderer,
	      workflows: this.props.renderer.initial_workflows,
	      pages: this.props.renderer.initial_pages,
	      context: "library"
	    }));
	  }
	}

	class FavouritesMenu extends LibraryMenu {
	  /*******************************************************
	   * Lifecycle hooks
	   *******************************************************/
	  componentDidMount() {
	    let component = this;
	    getFavourites(data => {
	      component.setState({
	        project_data: data.data_package
	      });
	    });
	    makeDropdown(this.createDiv.current);
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-menu"
	    }, /*#__PURE__*/reactExports.createElement(WorkflowFilter, {
	      renderer: this.props.renderer,
	      workflows: this.state.project_data,
	      context: "library"
	    }));
	  }
	}

	class HomeMenu extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      projects: [],
	      favourites: []
	    };
	  }

	  /*******************************************************
	   * Lifecycle hooks
	   *******************************************************/
	  componentDidMount() {
	    let component = this;
	    getHome(data => {
	      component.setState({
	        projects: data.projects,
	        favourites: data.favourites
	      });
	    });
	  }

	  /*******************************************************
	   * Render
	   *******************************************************/
	  render() {
	    let projects = this.state.projects.map((project, index) => /*#__PURE__*/reactExports.createElement(WorkflowForMenu, {
	      key: `project-${index}`,
	      workflow_data: project,
	      renderer: this.props.renderer
	    }));
	    let favourites = this.state.favourites.map((project, index) => /*#__PURE__*/reactExports.createElement(WorkflowForMenu, {
	      key: `favourite-${index}`,
	      workflow_data: project,
	      renderer: this.props.renderer
	    }));
	    let library_path = window.config.my_library_path;
	    if (!this.props.renderer.is_teacher) library_path = window.config.my_liveprojects_path;
	    let project_box;
	    if (this.props.renderer.is_teacher) {
	      project_box = /*#__PURE__*/reactExports.createElement("div", {
	        className: "home-item"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "home-title-row"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "home-item-title"
	      }, window.gettext('Recent projects')), /*#__PURE__*/reactExports.createElement("a", {
	        className: "collapsed-text-show-more",
	        href: library_path
	      }, window.gettext('See all'))), /*#__PURE__*/reactExports.createElement("div", {
	        className: "menu-grid"
	      }, projects));
	    } else {
	      project_box = /*#__PURE__*/reactExports.createElement("div", {
	        className: "home-item"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "home-title-row"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "home-item-title"
	      }, window.gettext('Recent classrooms')), /*#__PURE__*/reactExports.createElement("a", {
	        className: "collapsed-text-show-more",
	        href: library_path
	      }, window.gettext('See all'))), /*#__PURE__*/reactExports.createElement("div", {
	        className: "menu-grid"
	      }, projects));
	    }
	    let favourite_box;
	    if (this.props.renderer.is_teacher) {
	      favourite_box = /*#__PURE__*/reactExports.createElement("div", {
	        className: "home-item"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "home-title-row"
	      }, /*#__PURE__*/reactExports.createElement("div", {
	        className: "home-item-title"
	      }, window.gettext('Favourites')), /*#__PURE__*/reactExports.createElement("a", {
	        className: "collapsed-text-show-more",
	        href: window.config.my_favourites_path
	      }, window.gettext('See all'))), /*#__PURE__*/reactExports.createElement("div", {
	        className: "menu-grid"
	      }, favourites));
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "home-menu-container"
	    }, project_box, favourite_box);
	  }
	}

	/*******************************************************
	 * The project library menu
	 *
	 * On mount, this will fetch the workflows for the project. When they have been
	 * retrieved it will display them in a workflowfilter.
	 *******************************************************/
	class ProjectMenu extends LibraryMenu {
	  constructor(props) {
	    super(props);
	    this.user_id = props.userId;
	    this.state = {
	      data: props.data,
	      view_type: 'workflows'
	    };
	  }

	  /*******************************************************
	   * LIFECYCLE HOOKS
	   *******************************************************/
	  componentDidMount() {
	    let component = this;
	    getWorkflowsForProject(this.props.data.id, data => {
	      component.setState({
	        workflow_data: data.data_package
	      });
	    });
	    this.getUserData();
	    makeDropdown($(this.createDiv.current));
	  }

	  /*******************************************************
	   * FUNCTIONS
	   *******************************************************/
	  getViewButtons() {
	    return [{
	      type: 'workflows',
	      name: window.gettext('Workflows')
	    }, {
	      type: 'overview',
	      name: window.gettext('Classroom Overview')
	    }, {
	      type: 'students',
	      name: window.gettext('Students')
	    }, {
	      type: 'assignments',
	      name: window.gettext('Assignments')
	    }, {
	      type: 'completion_table',
	      name: window.gettext('Completion Table')
	    }];
	  }
	  getContent() {
	    let return_val = [];
	    if (this.state.data.liveproject && this.props.renderer.user_role === role_keys.teacher) return_val.push( /*#__PURE__*/reactExports.createElement("div", {
	      className: "workflow-view-select hide-print"
	    }, this.getViewButtons().map(item => {
	      let view_class = 'hover-shade';
	      if (item.type === this.state.view_type) view_class += ' active';
	      return /*#__PURE__*/reactExports.createElement("a", {
	        id: 'button_' + item.type,
	        className: view_class,
	        onClick: this.changeView.bind(this, item.type)
	      }, item.name);
	    })));
	    switch (this.state.view_type) {
	      // @todo remove view_type
	      case 'overview':
	        return_val.push( /*#__PURE__*/reactExports.createElement(LiveProjectOverview, {
	          renderer: this.props.renderer,
	          role: this.getRole(),
	          objectID: this.state.data.id,
	          view_type: this.state.view_type
	        }));
	        break;
	      case 'students':
	        return_val.push( /*#__PURE__*/reactExports.createElement(LiveProjectStudents, {
	          renderer: this.props.renderer,
	          role: this.getRole(),
	          objectID: this.state.data.id,
	          view_type: this.state.view_type
	        }));
	        break;
	      case 'assignments':
	        return_val.push( /*#__PURE__*/reactExports.createElement(LiveProjectAssignments, {
	          renderer: this.props.renderer,
	          role: this.getRole(),
	          objectID: this.state.data.id,
	          view_type: this.state.view_type
	        }));
	        break;
	      case 'completion_table':
	        return_val.push( /*#__PURE__*/reactExports.createElement(LiveProjectCompletionTable, {
	          renderer: this.props.renderer,
	          role: this.getRole(),
	          objectID: this.props.data.id,
	          view_type: this.state.view_type
	        }));
	        break;
	      default:
	        return_val.push( /*#__PURE__*/reactExports.createElement(WorkflowFilter, {
	          renderer: this.props.renderer,
	          workflows: this.state.workflow_data,
	          updateWorkflow: this.updateWorkflow.bind(this),
	          context: "project"
	        }));
	    }
	    return return_val;
	  }
	  changeView(view_type) {
	    this.setState({
	      view_type: view_type
	    });
	  }

	  // @todo, candidate to remove
	  getRole() {
	    return 'teacher';
	  }
	  getOverflowLinks() {
	    let data = this.state.data;
	    let liveproject;
	    if (data.author_id === this.userId) {
	      if (data.liveproject) {
	        liveproject = /*#__PURE__*/reactExports.createElement("a", {
	          id: "live-project",
	          className: "hover-shade",
	          href: window.config.update_path.liveproject.replace('0', data.id)
	        }, window.gettext('View Classroom'));
	      } else {
	        liveproject = /*#__PURE__*/reactExports.createElement("a", {
	          id: "live-project",
	          className: "hover-shade",
	          onClick: this.makeLive.bind(this)
	        }, window.gettext('Create Classroom'));
	      }
	    }
	    let overflow_links = [liveproject];
	    overflow_links.push( /*#__PURE__*/reactExports.createElement("a", {
	      id: "comparison-view",
	      className: "hover-shade",
	      href: "comparison"
	    }, window.gettext('Workflow comparison tool')));
	    overflow_links.push( /*#__PURE__*/reactExports.createElement("hr", null));
	    overflow_links.push(this.getExportButton());
	    overflow_links.push(this.getCopyButton());
	    if (data.author_id === this.user_id) {
	      overflow_links.push( /*#__PURE__*/reactExports.createElement("hr", null));
	      overflow_links.push(this.getDeleteProject());
	    }
	    return overflow_links;
	  }
	  getDeleteProject() {
	    if (!this.state.data.deleted) {
	      return /*#__PURE__*/reactExports.createElement("div", {
	        className: "hover-shade",
	        onClick: this.deleteProject.bind(this)
	      }, /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Archive project')));
	    }
	    return [/*#__PURE__*/reactExports.createElement("div", {
	      className: "hover-shade",
	      onClick: this.restoreProject.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Restore project'))), /*#__PURE__*/reactExports.createElement("div", {
	      className: "hover-shade",
	      onClick: this.deleteProjectHard.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Permanently delete project')))];
	  }
	  deleteProject() {
	    if (window.confirm(window.gettext('Are you sure you want to delete this project?'))) {
	      deleteSelf(this.props.data.id, 'project', true, () => {
	        this.setState({
	          data: {
	            ...this.props.data,
	            deleted: true
	          }
	        });
	      });
	    }
	  }
	  deleteProjectHard() {
	    if (window.confirm(window.gettext('Are you sure you want to permanently delete this project?'))) {
	      deleteSelf(this.props.data.id, 'project', false, () => {
	        window.location = window.config.home_path;
	      });
	    }
	  }
	  restoreProject() {
	    restoreSelf(this.props.data.id, 'project', () => {
	      this.setState({
	        data: {
	          ...this.props.data,
	          deleted: false
	        }
	      });
	    });
	  }
	  makeLive() {
	    if (window.confirm(window.gettext('Are you sure you want to create a live classroom for this project?'))) {
	      makeProjectLive(this.props.data.id, data => {
	        location.reload();
	      });
	    }
	  }
	  getExportButton() {
	    if (this.user_id) {
	      return /*#__PURE__*/reactExports.createElement("div", {
	        id: "export-button",
	        className: "hover-shade",
	        onClick: () => {
	          // @todo the renderMessageBox is causing a circ cep and needs to be refactored
	          //   renderMessageBox(this.state.data, 'export', closeMessageBox)
	        }
	      }, /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Export')));
	    }
	    return null;
	  }
	  getCopyButton() {
	    if (this.user_id) {
	      return /*#__PURE__*/reactExports.createElement("div", {
	        id: "copy-button",
	        className: "hover-shade",
	        onClick: () => {
	          let loader = this.props.renderer.tiny_loader;
	          loader.startLoad();
	          duplicateBaseItem(this.props.data.id, this.props.data.type, null, response_data => {
	            loader.endLoad();
	            window.location = window.config.update_path[response_data.new_item.type].replace('0', response_data.new_item.id);
	          });
	        }
	      }, /*#__PURE__*/reactExports.createElement("div", null, window.gettext('Copy to my library')));
	    }
	    return null;
	  }
	  getUserData() {
	    getUsersForObject(this.props.data.id, this.props.data.type, data => {
	      this.setState({
	        users: data
	      });
	    });
	  }
	  getHeader() {
	    let data = this.state.data;
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-header"
	    }, /*#__PURE__*/reactExports.createElement(WorkflowTitle, {
	      data: data,
	      no_hyperlink: true,
	      class_name: "project-title"
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-header-info"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-info-section project-members"
	    }, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Permissions')), this.getUsers()), /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-other"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-info-section project-description"
	    }, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Description')), /*#__PURE__*/reactExports.createElement(CollapsibleText, {
	      text: data.description,
	      defaultText: window.gettext('No description')
	    })), /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-info-section project-disciplines"
	    }, /*#__PURE__*/reactExports.createElement("h4", null, window.gettext('Disciplines')), this.props.renderer.all_disciplines.filter(discipline => data.disciplines.indexOf(discipline.id) >= 0).map(discipline => discipline.title).join(', ') || window.gettext('None')))));
	  }

	  // @todo needs work
	  getUsers() {
	    if (!this.state.users) return null;
	    let author = this.state.users.author;
	    let editors = this.state.users.editors;
	    let commenters = this.state.users.commentors;
	    let viewers = this.state.users.viewers;
	    let users_group = [];
	    if (!author) return null;
	    if (this.state.users.published) {
	      users_group.push( /*#__PURE__*/reactExports.createElement("div", {
	        className: "user-name"
	      }, getUserTag('view'), /*#__PURE__*/reactExports.createElement("span", {
	        className: "material-symbols-rounded"
	      }, "public"), ' ', window.gettext('All CourseFlow')));
	    }
	    users_group.push([/*#__PURE__*/reactExports.createElement("div", {
	      className: "user-name"
	    }, getUserTag('author'), getUserDisplay(author)), editors.filter(user => user.id != author.id).map(user => /*#__PURE__*/reactExports.createElement("div", {
	      className: "user-name"
	    }, getUserTag('edit'), getUserDisplay(user))), commenters.map(user => /*#__PURE__*/reactExports.createElement("div", {
	      className: "user-name"
	    }, getUserTag('comment'), getUserDisplay(user))), viewers.map(user => /*#__PURE__*/reactExports.createElement("div", {
	      className: "user-name"
	    }, getUserTag('view'), getUserDisplay(user)))]);
	    users_group = users_group.flat(2);
	    let users = [/*#__PURE__*/reactExports.createElement("div", {
	      className: "users-group"
	    }, users_group)];
	    if (users_group.length > 4) {
	      users.push( /*#__PURE__*/reactExports.createElement("div", {
	        className: "workflow-created"
	      }, "+", users_group.length - 4, " ", window.gettext('more')));
	    }
	    if (!this.props.renderer.read_only) users.push( /*#__PURE__*/reactExports.createElement("div", {
	      className: "user-name collapsed-text-show-more",
	      onClick: this.openShareMenu.bind(this)
	    }, window.gettext('Modify')));
	    return users;
	  }
	  getEdit() {
	    if (!this.props.renderer.read_only) {
	      return /*#__PURE__*/reactExports.createElement("div", {
	        className: "hover-shade",
	        id: "edit-project-button",
	        title: window.gettext('Edit Project'),
	        onClick: this.openEditMenu.bind(this)
	      }, /*#__PURE__*/reactExports.createElement("span", {
	        className: "material-symbols-rounded filled"
	      }, "edit"));
	    }
	    return null;
	  }
	  openEditMenu() {
	    console.log("openEditMenu in procetmenu.js see function coment for why this doesn't work");
	    // @todo the renderMessageBox is causing a circ cep and needs to be refactored
	    // renderMessageBox(
	    //   {
	    //     ...this.state.data,
	    //     all_disciplines: this.props.renderer.all_disciplines,
	    //     renderer: this.props.renderer
	    //   },
	    //   'project_edit_menu',
	    //   this.updateFunction.bind(this)
	    // )
	  }

	  getCreate() {
	    if (!this.props.renderer.read_only) {
	      return /*#__PURE__*/reactExports.createElement("div", {
	        className: "hover-shade",
	        id: "create-project-button",
	        title: window.gettext('Create workflow'),
	        ref: this.createDiv
	      }, /*#__PURE__*/reactExports.createElement("span", {
	        className: "material-symbols-rounded filled"
	      }, "add_circle"), /*#__PURE__*/reactExports.createElement("div", {
	        id: "create-links-project",
	        className: "create-dropdown"
	      }, /*#__PURE__*/reactExports.createElement("a", {
	        id: "activity-create-project",
	        href: create_path_this_project.activity,
	        className: "hover-shade"
	      }, window.gettext('New activity')), /*#__PURE__*/reactExports.createElement("a", {
	        id: "course-create-project",
	        href: create_path_this_project.course,
	        className: "hover-shade"
	      }, window.gettext('New course')), /*#__PURE__*/reactExports.createElement("a", {
	        id: "program-create-project",
	        href: create_path_this_project.program,
	        className: "hover-shade"
	      }, window.gettext('New program'))));
	    }
	    return null;
	  }
	  updateFunction(new_data) {
	    if (new_data.liveproject) {
	      console.log('liveproject updated');
	    } else {
	      let new_state = {
	        ...this.state
	      };
	      new_state.data = {
	        ...new_state.data,
	        ...new_data
	      };
	      this.setState(new_state);
	    }
	  }
	  getShare() {
	    let share;
	    if (!this.props.renderer.read_only) share = /*#__PURE__*/reactExports.createElement("div", {
	      className: "hover-shade",
	      id: "share-button",
	      title: window.gettext('Sharing'),
	      onClick: this.openShareMenu.bind(this)
	    }, /*#__PURE__*/reactExports.createElement("span", {
	      className: "material-symbols-rounded filled"
	    }, "person_add"));
	    return share;
	  }
	  openShareMenu() {
	    this.state.data;
	    /*    renderMessageBox(data, 'share_menu', () => {
	      closeMessageBox()
	      component.getUserData()
	    })*/
	  }

	  updateWorkflow(id, new_values) {
	    for (let i = 0; i < this.state.workflow_data.length; i++) {
	      if (this.state.workflow_data[i].id === id) {
	        let new_state = {
	          ...this.state
	        };
	        new_state.workflow_data = [...this.state.workflow_data];
	        new_state.workflow_data[i] = {
	          ...this.state.workflow_data[i],
	          ...new_values
	        };
	        this.setState(new_state);
	        break;
	      }
	    }
	  }

	  /*******************************************************
	   * RENDER
	   *******************************************************/
	  render() {
	    let visible_buttons = (() => [this.getEdit(), this.getCreate(), this.getShare()]).bind(this);
	    let overflow_links = this.getOverflowLinks.bind(this);
	    return /*#__PURE__*/reactExports.createElement("div", {
	      class: "main-block"
	    }, /*#__PURE__*/reactExports.createElement(MenuBar, {
	      overflow_links: overflow_links,
	      visible_buttons: visible_buttons
	    }), /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-menu"
	    }, this.getHeader(), this.getContent()));
	  }
	}

	/**
	 * Individual Page/View React Renderers
	 */

	/*******************************************************
	 * @LibraryRenderer
	 *******************************************************/
	class LibraryRenderer extends reactExports.Component {
	  constructor(props) {
	    super(props);
	  }
	  render() {
	    this.container = container;
	    this.tiny_loader = new TinyLoader($('body')[0]);
	    return this.getContents();
	  }
	  getContents() {
	    return /*#__PURE__*/reactExports.createElement(LibraryMenu, {
	      renderer: this
	    });
	  }
	}

	/*******************************************************
	 * @FavouritesRenderer
	 *******************************************************/
	class FavouritesRenderer extends LibraryRenderer {
	  getContents() {
	    return /*#__PURE__*/reactExports.createElement(FavouritesMenu, {
	      renderer: this
	    });
	  }
	}

	/*******************************************************
	 * @ExploreRenderer
	 *  disciplines: any
	 *  initial_workflows: any[]
	 *  initial_pages: any
	 *******************************************************/
	class ExploreRenderer extends LibraryRenderer {
	  constructor(props) {
	    super(props);
	    this.disciplines = this.props.disciplines;
	    this.initial_workflows = this.props.initial_workflows;
	    this.initial_pages = this.props.initial_pages;
	    this.tiny_loader = new TinyLoader($('body')[0]);
	  }
	  getContents() {
	    return /*#__PURE__*/reactExports.createElement(ExploreMenu, {
	      disciplines: this.disciplines,
	      renderer: this
	    });
	  }
	}

	/*******************************************************
	 * @ProjectRenderer
	 *******************************************************/

	/**
	 * export type ProjectViewDTO = {
	 *   project_data: {
	 *     deleted: boolean
	 *     deleted_on: string
	 *     id: number
	 *     title: string
	 *     description: string
	 *     author: string
	 *     author_id: number
	 *     published: boolean
	 *     created_on: string
	 *     last_modified: string
	 *     workflowproject_set: Array<number>
	 *     disciplines: Array<any>
	 *     type: string
	 *     object_sets: Array<any>
	 *     favourite: boolean
	 *     liveproject: any
	 *     object_permission: {
	 *       permission_type: number
	 *       last_viewed: string
	 *     }
	 *   }
	 *   user_role: number
	 *   user_permission: number
	 *   title: string
	 *   disciplines: Array<{
	 *     id: number
	 *     title: string
	 *   }>
	 * }
	 */
	class ProjectRenderer extends reactExports.Component {
	  constructor(props /*: ProjectViewDTO */) {
	    super(props);
	    this.read_only = true;
	    this.project_data = this.props.project_data;
	    this.all_disciplines = this.props.disciplines;
	    this.user_role = this.props.user_role;
	    this.user_permission = this.props.user_permission;
	    this.userId = this.props.user_id;
	    if (this.project_data.object_permission && this.project_data.object_permission.permission_type === permission_keys['edit']) {
	      this.read_only = false;
	    }
	  }
	  render() {
	    this.container = container;
	    this.tiny_loader = new TinyLoader($('body')[0]);
	    return this.getContents();
	  }
	  getContents() {
	    return /*#__PURE__*/reactExports.createElement(ProjectMenu, {
	      renderer: this,
	      data: this.project_data,
	      userid: this.userId
	    });
	  }
	}

	/*******************************************************
	 * @HomeRenderer
	 *******************************************************/
	class HomeRenderer extends reactExports.Component {
	  constructor(props) {
	    super(props);
	    this.is_teacher = this.props.is_teacher;
	  }
	  render() {
	    this.container = container;
	    this.tiny_loader = new TinyLoader($('body')[0]);
	    return this.getContents();
	  }
	  getContents() {
	    return /*#__PURE__*/reactExports.createElement(HomeMenu, {
	      renderer: this
	    });
	  }
	}

	/**
	 * @TODO why is this different than scripts-library.js
	 */

	/*******************************************************
	 * @LiveProjectRenderer
	 *******************************************************/
	class LiveProjectRenderer extends React.Component {
	  constructor(props) {
	    super(props);
	    this.live_project_data = this.props.live_project_data;
	    this.project_data = this.data.props.project_data;
	    this.user_role = this.data.props.user_role;
	    this.user_permission = this.data.props.user_permission;
	  }
	  render() {
	    this.container = container;
	    this.tiny_loader = new TinyLoader($('body')[0]);

	    // return this.getContents(), container[0])
	    return this.getContents();
	  }
	  getContents() {
	    return user_role === 2 ? /*#__PURE__*/React.createElement(LiveProjectMenu, {
	      renderer: this // @todo tighten this interface
	      ,
	      project: this.project_data,
	      liveproject: this.live_project_data
	    }) : /*#__PURE__*/React.createElement(StudentLiveProjectMenu, {
	      renderer: this // @todo tighten this interface
	      ,
	      project: this.project_data,
	      liveproject: this.live_project_data
	    });
	  }
	}

	/*******************************************************
	 * @LiveAssignmentRenderer
	 *******************************************************/
	class LiveAssignmentRenderer extends React.Component {
	  constructor(props) {
	    super(props);
	    this.live_project_data = this.props.live_project_data;
	    this.assignment_data = this.props.assignment_data;
	    this.user_role = this.props.user_role;
	  }
	  render() {
	    this.container = container;
	    this.tiny_loader = new TinyLoader($('body')[0]);
	    return this.getContents();
	  }
	  getContents() {
	    return /*#__PURE__*/React.createElement(LiveAssignmentMenu, {
	      renderer: this,
	      assignment_data: this.assignment_data,
	      live_project_data: this.live_project_data
	    });
	  }
	}

	/**
	 * Mostly no longer used, only currently used by the "My Classrooms" view which is not a priority to revamp.
	 */
	class WorkflowGridMenuUnconnected extends reactExports.Component {
	  render() {
	    var tabs = [];
	    var tab_li = [];
	    var i = 0;
	    for (var prop in this.props.data_package) {
	      tab_li.push( /*#__PURE__*/reactExports.createElement("li", null, /*#__PURE__*/reactExports.createElement("a", {
	        className: "hover-shade",
	        href: '#tabs-' + i
	      }, this.props.data_package[prop].title)));
	      tabs.push( /*#__PURE__*/reactExports.createElement(MenuTab, {
	        data: this.props.data_package[prop],
	        dispatch: this.props.dispatch,
	        type: "gridmenu",
	        identifier: i
	      }));
	      i++;
	    }
	    return /*#__PURE__*/reactExports.createElement("div", {
	      className: "project-menu"
	    }, /*#__PURE__*/reactExports.createElement("div", {
	      className: "home-tabs",
	      id: "home-tabs"
	    }, /*#__PURE__*/reactExports.createElement("ul", null, tab_li), tabs));
	  }
	}
	const WorkflowGridMenu = connect(state => ({
	  data_package: state
	}), null)(WorkflowGridMenuUnconnected);

	const DATA_TYPE = Enum({
	  OUTCOME: 'workflow_action',
	  LOCK_UPDATE: 'lock_update',
	  CONNECTION_UPDATE: 'connection_update',
	  WORKFLOW_PARENT_UPDATED: 'workflow_parent_updated',
	  WORKFLOW_CHILD_UPDATED: 'workflow_child_updated',
	  WORKFLOW_ACTION: 'workflow_action'
	});

	/****************************************
	 *
	 * ****************************************/
	class WorkflowGridRenderer extends React.Component {
	  constructor(props) {
	    super(props);
	    // this.props.initial_data = data.props.data_package
	    this.store = createStore(gridMenuReducer, this.props.data_package); // is this supposde to be this.initial_data  ?
	  }

	  render() {
	    this.container = container;
	    return /*#__PURE__*/React.createElement(Provider, {
	      store: this.store
	    }, /*#__PURE__*/React.createElement(WorkflowGridMenu, null));
	  }
	}

	/****************************************
	 *
	 * ****************************************/
	class WorkflowRenderer {
	  constructor(props) {
	    _defineProperty(this, "parsemessage", function (e) {
	      const data = JSON.parse(e.data);
	      switch (data.type) {
	        case DATA_TYPE.WORKFLOW_ACTION:
	          this.store.dispatch(data.action);
	          break;
	        case DATA_TYPE.LOCK_UPDATE:
	          this.lock_update_received(data.action);
	          break;
	        case DATA_TYPE.CONNECTION_UPDATE:
	          this.connection_update_received(data.action);
	          break;
	        case DATA_TYPE.WORKFLOW_PARENT_UPDATED:
	          this.parent_workflow_updated(data.edit_count);
	          break;
	        case DATA_TYPE.WORKFLOW_CHILD_UPDATED:
	          this.child_workflow_updated(data.edit_count, data.child_workflow_id);
	          break;
	      }
	    });
	    this.message_queue = [];
	    this.messages_queued = true;
	    this.public_view = props.public_view;
	    this.workflowID = props.workflow_model_id;
	    // Data package
	    this.column_choices = props.data_package.column_choices;
	    this.context_choices = props.data_package.context_choices;
	    this.task_choices = props.data_package.task_choices;
	    this.time_choices = props.data_package.time_choices;
	    this.outcome_type_choices = props.data_package.outcome_type_choices;
	    this.outcome_sort_choices = props.data_package.outcome_sort_choices;
	    this.strategy_classification_choices = props.data_package.strategy_classification_choices;
	    this.is_strategy = props.data_package.is_strategy;
	    this.project = props.data_package.project;
	    this.user_permission = props.user_permission;
	    this.user_role = props.user_role;
	    if (!this.is_strategy && this.project.object_permission) {
	      this.project_permission = this.project.object_permission.permission_type;
	    }
	    switch (data.user_permission) {
	      case permission_keys['view']:
	        this.can_view = true;
	        break;
	      case permission_keys['comment']:
	        this.view_comments = true;
	        this.add_comments = true;
	        this.can_view = true;
	        break;
	      case permission_keys['edit']:
	        this.read_only = false;
	        this.view_comments = true;
	        this.add_comments = true;
	        this.can_view = true;
	        break;

	      // No default case needed here if these are the only options
	    }

	    switch (data.user_role) {
	      case role_keys['none']:
	        // nuclear fusion logic here
	        break;
	      case role_keys['student']:
	        this.is_student = true;
	        this.show_assignments = true;
	        break;
	      case role_keys['teacher']:
	        this.is_teacher = true;
	        this.show_assignments = true;
	        break;

	      // No default case needed here if these are the only options
	    }

	    if (this.public_view) {
	      this.getWorkflowData = getPublicWorkflowData;
	      this.getWorkflowParentData = getPublicWorkflowParentData;
	      this.getWorkflowChildData = getPublicWorkflowChildData;
	    } else {
	      this.getWorkflowData = getWorkflowData;
	      this.getWorkflowParentData = getWorkflowParentData;
	      this.getWorkflowChildData = getWorkflowChildData;
	    }
	  }
	  connect() {
	    if (!this.always_static) {
	      this.messages_queued = true;
	      let renderer = this;
	      let websocket_prefix;
	      if (window.location.protocol === 'https:') {
	        websocket_prefix = 'wss';
	      } else {
	        websocket_prefix = 'ws';
	      }
	      const updateSocket = new WebSocket(websocket_prefix + '://' + window.location.host + '/ws/update/' + this.workflowID + '/');
	      this.updateSocket = updateSocket;
	      updateSocket.onmessage = function (e) {
	        this.message_received(e);
	      }.bind(this);
	      let openfunction = function () {
	        this.has_rendered = true;
	        this.connection_opened();
	      };
	      updateSocket.onopen = openfunction.bind(this);
	      if (updateSocket.readyState === 1) {
	        openfunction.bind(this)();
	      }
	      updateSocket.onclose = function (e) {
	        if (e.code === 1000) {
	          return;
	        }
	        if (!renderer.has_rendered) {
	          renderer.connection_opened(true);
	        } else {
	          renderer.attempt_reconnect();
	        }
	        renderer.is_static = true;
	        renderer.has_rendered = true;
	        if (!renderer.silent_connect_fail && !renderer.has_disconnected) {
	          alert(window.gettext('Unable to establish connection to the server, or connection has been lost.'));
	        }
	        renderer.has_disconnected = true;
	      };
	    } else {
	      this.connection_opened();
	    }
	  }
	  render(container, view_type = 'workflowview') {
	    this.tiny_loader = new TinyLoader($('body')[0]);
	    this.selection_manager = new SelectionManager(this.read_only);

	    // In case we need to get child workflows
	    this.child_data_needed = [];
	    this.child_data_completed = -1;
	    this.fetching_child_data = false;
	    this.view_type = view_type;
	    reactDomExports.render( /*#__PURE__*/React.createElement(WorkflowLoader, null), container[0]);
	    let store = this.store;
	    let initial_workflow_data = store.getState();
	    var renderer = this;
	    this.container = container;
	    this.locks = {};
	    this.selection_manager.renderer = renderer;
	    if (view_type === 'outcomeedit') {
	      // get additional data about parent workflow prior to render
	      this.getWorkflowParentData(this.workflowID, response => {
	        store.dispatch(refreshStoreData(response.data_package));
	        reactDomExports.render( /*#__PURE__*/React.createElement(Provider, {
	          store: store
	        }, /*#__PURE__*/React.createElement(WorkflowBaseView, {
	          view_type: view_type,
	          renderer: this
	        })), container[0]);
	      });
	    } else if (view_type === 'horizontaloutcometable' || view_type === 'alignmentanalysis') {
	      // get additional data about child workflows to render in later
	      [...new Set(initial_workflow_data.node.filter(x => !x.deleted && x.linked_workflow).map(node => node.id))];
	      setTimeout(() => {
	        reactDomExports.render( /*#__PURE__*/React.createElement(Provider, {
	          store: store
	        }, /*#__PURE__*/React.createElement(WorkflowBaseView, {
	          view_type: view_type,
	          renderer: this
	        })), container[0]);
	      }, 50);
	    } else if (view_type === 'outcometable') {
	      // TODO: This doesn't differ at all from the "else" statement below
	      setTimeout(() => {
	        reactDomExports.render( /*#__PURE__*/React.createElement(Provider, {
	          store: this.store
	        }, /*#__PURE__*/React.createElement(WorkflowBaseView, {
	          view_type: view_type,
	          renderer: this
	        })), container[0]);
	      }, 50);
	    } else {
	      setTimeout(() => {
	        reactDomExports.render( /*#__PURE__*/React.createElement(Provider, {
	          store: this.store
	        }, /*#__PURE__*/React.createElement(WorkflowBaseView, {
	          view_type: view_type,
	          renderer: this
	        })), container[0]);
	      }, 50);
	    }
	  }

	  // Fetches the data for the given child workflow
	  getDataForChildWorkflow() {
	    if (this.child_data_completed === this.child_data_needed.length - 1) {
	      this.fetching_child_data = false;
	      return;
	    }
	    this.fetching_child_data = true;
	    this.child_data_completed++;
	    this.getWorkflowChildData(this.child_data_needed[this.child_data_completed], response => {
	      this.store.dispatch(refreshStoreData(response.data_package));
	      setTimeout(() => this.getDataForChildWorkflow(), 50);
	    });
	  }

	  // Lets the renderer know that it must load the child data for that workflow
	  childWorkflowDataNeeded(node_id) {
	    if (this.child_data_needed.indexOf(node_id) < 0) {
	      this.child_data_needed.push(node_id);
	      if (!this.fetching_child_data) {
	        setTimeout(() => this.getDataForChildWorkflow(), 50);
	      }
	    }
	  }
	  connection_opened(reconnect = false) {
	    this.getWorkflowData(this.workflowID, response => {
	      let data_flat = response.data_package;
	      this.unread_comments = data_flat.unread_comments;
	      this.store = createStore(rootWorkflowReducer, data_flat);
	      this.render($('#container'));
	      this.clear_queue(data_flat.workflow.edit_count);
	      if (reconnect) {
	        this.attempt_reconnect();
	      }
	    });
	  }
	  attempt_reconnect() {
	    let renderer = this;
	    setTimeout(() => {
	      renderer.connect();
	    }, 30000);
	  }
	  clear_queue(edit_count) {
	    let started_edits = false;
	    while (this.message_queue.length > 0) {
	      let message = this.message_queue[0];
	      if (started_edits) {
	        this.parsemessage(message);
	      } else if (message.edit_count && parseInt(message.edit_count) >= edit_count) {
	        started_edits = true;
	        this.message_queue.splice(0, 1);
	      }
	    }
	    this.messages_queued = false;
	  }
	  connection_update_received() {
	    console.log('A connection update was received, but not handled.');
	  }
	  parent_workflow_updated(edit_count) {
	    this.messages_queued = true;
	    let renderer = this;
	    this.getWorkflowParentData(this.workflowID, response => {
	      // remove all the parent node and parent workflow data
	      renderer.store.dispatch(replaceStoreData({
	        parent_node: [],
	        parent_workflow: []
	      }));
	      renderer.store.dispatch(refreshStoreData(response.data_package));
	      renderer.clear_queue(0);
	    });
	  }
	  child_workflow_updated(edit_count, child_workflow_id) {
	    this.messages_queued = true;
	    let renderer = this;
	    let state = this.store.getState();
	    let node = state.node.find(node => node.linked_workflow == child_workflow_id);
	    if (!node) {
	      return;
	    }
	    this.getWorkflowChildData(node.id, response => {
	      renderer.store.dispatch(refreshStoreData(response.data_package));
	      renderer.clear_queue(0);
	    });
	  }
	  message_received(e) {
	    if (this.messages_queued) {
	      this.message_queue.push(e);
	    } else {
	      this.parsemessage(e);
	    }
	  }
	  micro_update(obj) {
	    if (this.updateSocket) {
	      this.updateSocket.send(JSON.stringify({
	        type: 'micro_update',
	        action: obj
	      }));
	    }
	  }
	  change_field(id, object_type, field, value) {
	    let json = {};
	    json[field] = value;
	    this.store.dispatch(changeField(id, object_type, json));
	    updateValue(id, object_type, json, true);
	  }
	  lock_update(obj, time, lock) {
	    if (this.updateSocket) {
	      this.updateSocket.send(JSON.stringify({
	        type: 'lock_update',
	        lock: {
	          ...obj,
	          expires: Date.now() + time,
	          user_id: user_id,
	          user_colour: myColour,
	          lock: lock
	        }
	      }));
	    }
	  }
	  lock_update_received(data) {
	    let store = this.store;
	    let object_type = data.object_type;
	    let object_id = data.object_id;
	    if (!this.locks[object_type]) {
	      this.locks[object_type] = {};
	    }
	    if (this.locks[object_type][object_id]) {
	      clearTimeout(this.locks[object_type][object_id]);
	    }
	    store.dispatch(createLockAction(object_id, object_type, data.lock, data.user_id, data.user_colour));
	    if (data.lock) {
	      this.locks[object_type][object_id] = setTimeout(() => {
	        store.dispatch(createLockAction(object_id, object_type, false));
	      }, data.expires - Date.now());
	    } else {
	      this.locks[object_type][object_id] = null;
	    }
	  }
	}

	/****************************************
	 *  @ComparisonRenderer
	 * ****************************************/

	/**
	 * export interface Welcome2 {
	 *     project_data:    ProjectData;
	 *     is_strategy:     boolean;
	 *     user_permission: number;
	 *     user_role:       number;
	 *     public_view:     boolean;
	 *     user_name:       string;
	 *     user_id:         number;
	 *     myColour:        string;
	 *     changeFieldID:   number;
	 * }
	 *
	 * export interface ProjectData {
	 *     deleted:             boolean;
	 *     deleted_on:          string;
	 *     id:                  number;
	 *     title:               string;
	 *     description:         string;
	 *     author:              string;
	 *     author_id:           number;
	 *     published:           boolean;
	 *     created_on:          string;
	 *     last_modified:       string;
	 *     workflowproject_set: number[];
	 *     disciplines:         any[];
	 *     type:                string;
	 *     object_sets:         any[];
	 *     favourite:           boolean;
	 *     liveproject:         null;
	 *     object_permission:   ObjectPermission;
	 * }
	 *
	 * export interface ObjectPermission {
	 *     permission_type: number;
	 *     last_viewed:     Date;
	 * }
	 */
	class ComparisonRenderer {
	  constructor(props) {
	    this.project_data = props.data.project_data;
	    this.user_permission = props.user_permission;
	    makeActiveSidebar('#project' + this.project_data.id);
	  }
	  render(container, view_type = 'workflowview') {
	    this.container = container;
	    this.view_type = view_type;
	    reactDomExports.render( /*#__PURE__*/React.createElement(WorkflowLoader, null), container[0]);
	    this.tiny_loader = new TinyLoader($('body')[0]);
	    switch (this.user_permission) {
	      case permission_keys['none']:
	      case permission_keys['view']:
	        this.read_only = true;
	        break;
	      case permission_keys['comment']:
	        this.read_only = true;
	        this.view_comments = true;
	        this.add_comments = true;
	        break;
	      case permission_keys['edit']:
	        this.read_only = false;
	        this.view_comments = true;
	        this.add_comments = true;
	        break;
	    }
	    this.selection_manager = new SelectionManager(this.read_only);
	    if (view_type === 'workflowview' || view_type === 'outcomeedit') {
	      reactDomExports.render( /*#__PURE__*/React.createElement(ComparisonView, {
	        view_type: view_type
	        // turn this into config object
	        ,
	        renderer: this,
	        data: this.project_data,
	        selection_manager: this.selection_manager,
	        tiny_loader: this.tiny_loader
	      }), container[0]);
	    }
	  }
	}

	// This file is meant to be a separate entry point for the "redesigned"
	// app and a place where all the code will be refactored/consolidated into
	// so that we end up with a single entry point into the frontend

	// create the emotion cache
	const cache = createCache({
	  key: 'emotion',
	  nonce: document.querySelector('#script-redesign').nonce
	});

	// helper function that wraps each of the components we want to render
	// with an accompanying theme provider/css baseline since we're
	// progressively adding partials into the existing templates
	function renderComponents(components) {
	  components.forEach(c => {
	    const target = document.querySelector(c.target);
	    if (target) {
	      const componentRoot = createRoot(target);
	      componentRoot.render( /*#__PURE__*/React.createElement(CacheProvider, {
	        value: cache
	      }, /*#__PURE__*/React.createElement(ThemeProvider, {
	        theme: theme
	      }, /*#__PURE__*/React.createElement(ScopedCssBaseline$1, {
	        sx: c.styles
	      }, c.component))));
	    }
	  });
	}

	// window.contextData
	// set in python views and prepped in react_renderer.html
	const LibraryComponent = () => {
	  switch (window.path_id) {
	    case 'projectDetail':
	      return /*#__PURE__*/React.createElement(ProjectRenderer, window.contextData);
	    case 'favorites':
	      return /*#__PURE__*/React.createElement(FavouritesRenderer, null);
	    case 'library':
	      // if this complains about user_id add it to
	      // contextData and pass that to LibraryRenderer
	      return /*#__PURE__*/React.createElement(LibraryRenderer, null);
	    case 'home':
	      return /*#__PURE__*/React.createElement(HomeRenderer, window.contextData);
	    case 'explore':
	      return /*#__PURE__*/React.createElement(ExploreRenderer, window.contextData);
	  }
	};
	const LiveComponent = () => {
	  switch (window.path_id) {
	    case 'assignmentDetail':
	      return /*#__PURE__*/React.createElement(LiveAssignmentRenderer, window.contextData);
	    case 'myLiveProjects':
	      return /*#__PURE__*/React.createElement(LiveProjectRenderer, window.contextData);
	  }
	};
	const ReduxComponent = () => {
	  switch (window.path_id) {
	    case 'projectComparison':
	      /**
	       * @todo for myColour, changeFieldID decide whether these should go in
	       * the DTO from django, or in a subcomponent, if mot from django, define as explicit props
	       */
	      const thisContextData = {
	        ...window.contextData,
	        myColour: 'hsl(' + (DTOcontextData.user_id * 5 % 360 + 1) + ',50%,50%)',
	        changeFieldID: Math.floor(Math.random() * 10000)
	      };
	      // not sure yet because the render method is taking arguments
	      return /*#__PURE__*/React.createElement(ComparisonRenderer, thisContextData);
	    case 'workflowDetailView':
	      {
	        // not sure yet because the render method is taking arguments
	        const thisContextData = {
	          ...window.contextData,
	          myColour: 'hsl(' + (DTOcontextData.user_id * 5 % 360 + 1) + ',50%,50%)',
	          changeFieldID: Math.floor(Math.random() * 10000)
	        };
	        const workflow_renderer = new WorkflowRenderer(thisContextData);
	        workflow_renderer.connect();
	        return null;
	      }
	    case 'my_live_projects':
	      return /*#__PURE__*/React.createElement(WorkflowGridRenderer, window.contextData);
	  }
	};

	// Register all the components that we're loading ourselves on load
	window.addEventListener('load', () => {
	  renderComponents([{
	    component: /*#__PURE__*/React.createElement(LibraryComponent, null),
	    target: '#container',
	    styles: null
	  }, {
	    component: /*#__PURE__*/React.createElement(LiveComponent, null),
	    target: '#container',
	    styles: null
	  }, {
	    component: /*#__PURE__*/React.createElement(ReduxComponent, null),
	    target: '#container',
	    styles: null
	  }, {
	    component: /*#__PURE__*/React.createElement(Sidebar, null),
	    target: '[data-component="sidebar"]',
	    styles: SidebarRootStyles
	  }, {
	    component: /*#__PURE__*/React.createElement(TopBar, null),
	    target: '[data-component="topbar"]'
	  }, {
	    component: /*#__PURE__*/React.createElement(NotificationsPage, null),
	    target: '[data-component="notifications-page"]'
	  }]);
	});

})();
